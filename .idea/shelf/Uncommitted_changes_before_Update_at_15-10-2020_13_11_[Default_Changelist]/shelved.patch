Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Playlist;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Filter;\r\nimport android.widget.Filterable;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.ItemTouchHelper;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardModel;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ReminderStatusPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Search.SearchFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.ReminderModule.Activities.ReminderActivity;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.ItemMoveCallback;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.StartDragListener;\r\nimport com.brainwellnessspa.databinding.FragmentMyPlaylistsBinding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenReminder;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity.MyPlaylistId;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity.addToPlayList;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.ComeFindAudio;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.comeRename;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.deleteFrg;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.ViewAllPlaylistFragment.GetPlaylistLibraryID;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isRemoved;\r\nimport static com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity.ComeFrom_Playlist;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadProgress;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class MyPlaylistsFragment extends Fragment implements StartDragListener {\r\n    public static int RefreshIconData = 0;\r\n    public static String RefreshNew = \"\";\r\n    public static int disclaimerPlayed = 0;\r\n    FragmentMyPlaylistsBinding binding;\r\n    String UserID, New, PlaylistID, PlaylistName = \"\", PlaylistImage, SearchFlag, MyDownloads = \"\", AudioFlag;\r\n    int RefreshIcon;\r\n    PlayListsAdpater adpater;\r\n    PlayListsAdpater2 adpater2;\r\n    View view;\r\n    EditText searchEditText;\r\n    ArrayList<String> changedAudio;\r\n    Activity activity;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongsList;\r\n    List<DownloadAudioDetails> oneAudioDetailsList, playlistWiseAudioDetails;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    DownloadPlaylistDetails downloadPlaylistDetails;\r\n    Dialog dialog;\r\n    List<String> fileNameList, playlistDownloadId, remainAudio;\r\n    ItemTouchHelper touchHelper;\r\n    Runnable UpdateSongTime2;\r\n    int SongListSize = 0, count;\r\n    private Handler handler1, handler2;\r\n\r\n//    private Runnable UpdateSongTime1 = new Runnable() {\r\n//        @Override\r\n//        public void run() {\r\n//            getMediaByPer(PlaylistID,SongListSize);\r\n//\r\n///*            if (fileNameList.size() != 0) {\r\n//                if (remainAudio.size() <= SongListSize) {\r\n//                    int total = SongListSize;\r\n//                    int remain = remainAudio.size();\r\n//                    int complate = total - remain;\r\n//                    long progressPercent = complate * 100 / total;\r\n//                    int downloadProgress1 = (int) progressPercent;\r\n//                    if (SongListSize == 1) {\r\n//                        if (downloadProgress <= 100) {\r\n//                            binding.pbProgress.setProgress(downloadProgress);\r\n//                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n//                            binding.ivDownloads.setVisibility(View.GONE);\r\n//                            if (downloadProgress == 100) {\r\n//                                getDownloadData();\r\n//                            }\r\n//                        }\r\n//                    } else if (downloadProgress1 <= 100) {\r\n//                        if (downloadProgress1 == 100) {\r\n//                            getDownloadData();\r\n//                            binding.pbProgress.setVisibility(View.GONE);\r\n//                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n//                        } else {\r\n//                            binding.pbProgress.setProgress(downloadProgress1);\r\n//                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n//                            binding.ivDownloads.setVisibility(View.GONE);\r\n//                        }\r\n//                    } else {\r\n//                        binding.pbProgress.setVisibility(View.GONE);\r\n//                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n//                    }\r\n//                }\r\n//                getDownloadData();\r\n//                handler1.postDelayed(this, 500);\r\n//            }else {\r\n//                binding.pbProgress.setVisibility(View.GONE);\r\n//                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                handler1.removeCallbacks(UpdateSongTime1);\r\n//                getDownloadData();\r\n//            }*/\r\n//            handler1.postDelayed(this, 500);\r\n//        }\r\n//    };\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_playlists, container, false);\r\n        view = binding.getRoot();\r\n//        handler1 = new Handler();\r\n        handler2 = new Handler();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        activity = getActivity();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        fileNameList = new ArrayList<>();\r\n        playlistDownloadId = new ArrayList<>();\r\n//        remainAudio = new ArrayList<>();\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        playlistSongsList = new ArrayList<>();\r\n        changedAudio = new ArrayList<>();\r\n        if (getArguments() != null) {\r\n            New = getArguments().getString(\"New\");\r\n            PlaylistID = getArguments().getString(\"PlaylistID\");\r\n            PlaylistName = getArguments().getString(\"PlaylistName\");\r\n            PlaylistImage = getArguments().getString(\"PlaylistImage\");\r\n            MyDownloads = getArguments().getString(\"MyDownloads\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(view1 -> callBack());\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity()) && !MyDownloads.equalsIgnoreCase(\"1\")) {\r\n            binding.llMore.setVisibility(View.VISIBLE);\r\n            binding.llMore.setClickable(true);\r\n            binding.llMore.setEnabled(true);\r\n            binding.ivMore.setImageResource(R.drawable.ic_menu_icon);\r\n            binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            binding.llMore.setVisibility(View.VISIBLE);\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setImageResource(R.drawable.ic_menu_icon);\r\n            binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n        }\r\n\r\n        binding.llMore.setOnClickListener(view13 -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            handler2.removeCallbacks(UpdateSongTime2);\r\n            Intent i = new Intent(getActivity(), MyPlaylistActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            startActivity(i);\r\n\r\n        });\r\n\r\n        binding.tvSearch.setOnClickListener(view14 -> {\r\n            Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            startActivity(i);\r\n        });\r\n\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        searchClear(searchEditText);\r\n\r\n        closeButton.setOnClickListener(v -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                binding.searchView.clearFocus();\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n\r\n                } else {\r\n                    try {\r\n                        if (adpater2 != null) {\r\n                            adpater2.getFilter().filter(search);\r\n                            SearchFlag = search;\r\n                            Log.e(\"searchsearch\", \"\" + search);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView.LayoutManager playList = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists.setLayoutManager(playList);\r\n        binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        binding.llDownloads.setOnClickListener(view1 -> {\r\n            callDownload(\"\", \"\", \"\", playlistSongsList, 0, binding.llDownloads, binding.ivDownloads);\r\n        });\r\n\r\n        RefreshNew = New;\r\n        if (New.equalsIgnoreCase(\"1\")) {\r\n            binding.llAddAudio.setVisibility(View.VISIBLE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.INVISIBLE);\r\n            binding.llListing.setVisibility(View.GONE);\r\n            binding.btnAddAudio.setOnClickListener(view -> {\r\n                Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n                i.putExtra(\"PlaylistID\", PlaylistID);\r\n                startActivity(i);\r\n            });\r\n        } else if (New.equalsIgnoreCase(\"0\")) {\r\n            binding.llAddAudio.setVisibility(View.GONE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n            binding.llListing.setVisibility(View.VISIBLE);\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n        return view;\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail(String download) {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadPlaylistDetailsList.size() != 0 /*New.equalsIgnoreCase(\"1\") ||*/) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (RefreshIcon == 0) {\r\n                    enableDisableDownload(false, \"gray\");\r\n                } else if (download.equalsIgnoreCase(\"1\") /* New.equalsIgnoreCase(\"1\") ||*/) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (download.equalsIgnoreCase(\"0\") || download.equalsIgnoreCase(\"\") ||\r\n                        New.equalsIgnoreCase(\"0\") || RefreshIcon != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail2() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n   /*\r\n                    \"PlaylistDesc\": \"When life gets tough and you struggle through the days, download the Ultimate Self-development Bundle to help you in finding a new appreciation for life. Everyone can use a little help in all areas of their lives at times. There are 12 programs aimed to help your self-development:\",\r\n                    \"PlaylistMastercat\": \"Self-development\",\r\n                    \"PlaylistSubcat\": \"Self-expression, Focus, Discipline, Self-love, Mindset, Passion, Enthusiasm, Gratitude, Self-doubt, Inner Strength \",\r\n                    \"PlaylistImage\": \"https://brainwellnessspa.com.au/wp-content/uploads/2018/06/Ultimate self development bundle.jpg\",\r\n                    \"PlaylistSongs \" */\r\n                downloadAudioDetailsList = GetAllMedia();\r\n                playlistWiseAudioDetails = GetMedia();\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private void enableDisableDownload(boolean b, String color) {\r\n        if (b) {\r\n            binding.llDownloads.setClickable(true);\r\n            binding.llDownloads.setEnabled(true);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            binding.llDownloads.setClickable(false);\r\n            binding.llDownloads.setEnabled(false);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            if (color.equalsIgnoreCase(\"gray\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            } else if (color.equalsIgnoreCase(\"orange\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetAllMedia() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData1();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        view.setFocusableInTouchMode(true);\r\n        view.requestFocus();\r\n        view.setOnKeyListener((v, keyCode, event) -> {\r\n            binding.searchView.clearFocus();\r\n            if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                callBack();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        super.onResume();\r\n        if (deleteFrg == 1) {\r\n            callBack();\r\n            deleteFrg = 0;\r\n        } else if (addToPlayList) {\r\n            PlaylistID = MyPlaylistId;\r\n            prepareData(UserID, MyPlaylistId);\r\n            addToPlayList = false;\r\n        } else {\r\n            prepareData(UserID, PlaylistID);\r\n        }/* else if (addToSearch) {\r\n            prepareData(UserID, MyPlaylistIds);\r\n            addToSearch = false;\r\n        }*/\r\n        if (comeRename == 1) {\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n    }\r\n\r\n    private void callBack() {\r\n        binding.searchView.clearFocus();\r\n        if (comefrom_search == 2) {\r\n            Bundle bundle = new Bundle();\r\n            Fragment playlistFragment = new ViewAllPlaylistFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, playlistFragment)\r\n                    .commit();\r\n            bundle.putString(\"GetLibraryID\", GetPlaylistLibraryID);\r\n            bundle.putString(\"MyDownloads\", MyDownloads);\r\n            playlistFragment.setArguments(bundle);\r\n//            comefrom_search = 0;\r\n        } else if (comefrom_search == 1) {\r\n            Fragment fragment = new SearchFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, fragment)\r\n                    .commit();\r\n            comefrom_search = 0;\r\n        } else if (comefrom_search == 0) {\r\n            Fragment fragment = new PlaylistFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, fragment)\r\n                    .commit();\r\n            comefrom_search = 0;\r\n        } else if (comefrom_search == 3) {\r\n            Intent i = new Intent(getActivity(), DownloadsActivity.class);\r\n            ComeFrom_Playlist = true;\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            startActivity(i);\r\n            getActivity().finish();\r\n//            comefrom_search = 0;\r\n        }\r\n    }\r\n\r\n    private void searchClear(EditText searchEditText) {\r\n        if (ComeFindAudio == 1) {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n            ComeFindAudio = 0;\r\n        } else if (ComeFindAudio == 2) {\r\n            binding.searchView.requestFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n            ComeFindAudio = 0;\r\n        }\r\n\r\n    }\r\n\r\n    private void prepareData(String UserId, String PlaylistId) {\r\n        if (comefrom_search == 3) {\r\n            binding.llExtra.setVisibility(View.VISIBLE);\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 260);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n\r\n        searchClear(searchEditText);\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        try {\r\n            if (IsLock.equalsIgnoreCase(\"1\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n            }\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                if (comefrom_search == 1) {\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                } else {\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                }\r\n\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                params.setMargins(10, 8, 10, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                params.setMargins(10, 8, 10, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            if (!MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                Call<SubPlayListModel> listCall = APIClient.getClient().getSubPlayLists(UserId, PlaylistId);\r\n                listCall.enqueue(new Callback<SubPlayListModel>() {\r\n                    @SuppressLint(\"ClickableViewAccessibility\")\r\n                    @Override\r\n                    public void onResponse(Call<SubPlayListModel> call, Response<SubPlayListModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                            SubPlayListModel listModel = response.body();\r\n                            try {\r\n                                if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"0\") ||\r\n                                        listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n\r\n                                } else if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"1\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                                }\r\n                            } catch (Exception e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                            getDownloadData();\r\n                            SongListSize = listModel.getResponseData().getPlaylistSongs().size();\r\n                            getMediaByPer(PlaylistId, SongListSize);\r\n                            if (listModel.getResponseData().getCreated().equalsIgnoreCase(\"1\")) {\r\n                                searchEditText.setHint(R.string.playlist_or_audio_search);\r\n                                binding.tvSearch.setHint(R.string.playlist_or_audio_search);\r\n//                                binding.tvSearch.setTextSize(14);\r\n                            } else {\r\n                                searchEditText.setHint(\"Search for audios\");\r\n                                binding.tvSearch.setHint(\"Search for audios\");\r\n                            }\r\n                            binding.rlSearch.setVisibility(View.VISIBLE);\r\n                            binding.llMore.setVisibility(View.VISIBLE);\r\n                            binding.llReminder.setVisibility(View.VISIBLE);\r\n                            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n                            binding.tvTag.setText(R.string.Audios_in_Playlist);\r\n                            binding.llReminder.setOnClickListener(view -> {\r\n                                if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"0\") ||\r\n                                        listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n                                    Intent i = new Intent(getActivity(), ReminderActivity.class);\r\n                                    ComeScreenReminder = 0;\r\n                                    i.putExtra(\"ComeFrom\", \"1\");\r\n                                    i.putExtra(\"PlaylistID\", PlaylistID);\r\n                                    i.putExtra(\"PlaylistName\", listModel.getResponseData().getPlaylistName());\r\n                                    i.putExtra(\"Time\", listModel.getResponseData().getReminderTime());\r\n                                    i.putExtra(\"Day\", listModel.getResponseData().getReminderDay());\r\n                                    startActivity(i);\r\n                                } else if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"1\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                                    dialog = new Dialog(activity);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.delete_payment_card);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(activity.getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                                    final TextView tvSubTitle = dialog.findViewById(R.id.tvSubTitle);\r\n                                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                                    final Button Btn = dialog.findViewById(R.id.Btn);\r\n                                    tvTitle.setText(\"Reminder off\");\r\n                                    tvSubTitle.setText(\"Are you sure you want to reminder off ?\");\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n                                    Btn.setOnTouchListener((view1, event) -> {\r\n                                        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                                            switch (event.getAction()) {\r\n                                                case MotionEvent.ACTION_DOWN: {\r\n                                                    Button views = (Button) view1;\r\n                                                    views.getBackground().setColorFilter(0x77000000, PorterDuff.Mode.SRC_ATOP);\r\n                                                    view1.invalidate();\r\n                                                    break;\r\n                                                }\r\n                                                case MotionEvent.ACTION_UP:\r\n                                                    Call<ReminderStatusPlaylistModel> listCall1 = APIClient.getClient().getReminderStatusPlaylist(UserID, PlaylistID, \"0\");/*set 1 or not 0 */\r\n                                                    listCall1.enqueue(new Callback<ReminderStatusPlaylistModel>() {\r\n                                                        @Override\r\n                                                        public void onResponse(Call<ReminderStatusPlaylistModel> call1, Response<ReminderStatusPlaylistModel> response1) {\r\n                                                            if (response1.isSuccessful()) {\r\n                                                                ReminderStatusPlaylistModel listModel1 = response1.body();\r\n//                                                                prepareData(UserID, PlaylistID);\r\n                                                                listModel.getResponseData().setIsReminder(listModel1.getResponseData().getIsCheck());\r\n                                                                binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n                                                                dialog.dismiss();\r\n                                                                BWSApplication.showToast(listModel1.getResponseMessage(), activity);\r\n                                                            }\r\n                                                        }\r\n\r\n                                                        @Override\r\n                                                        public void onFailure(Call<ReminderStatusPlaylistModel> call1, Throwable t) {\r\n                                                        }\r\n                                                    });\r\n\r\n\r\n                                                case MotionEvent.ACTION_CANCEL: {\r\n                                                    Button views = (Button) view1;\r\n                                                    views.getBackground().clearColorFilter();\r\n                                                    views.invalidate();\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n                                        }\r\n\r\n                                        return true;\r\n                                    });\r\n\r\n                                    tvGoBack.setOnClickListener(v -> {\r\n                                        dialog.dismiss();\r\n                                    });\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n\r\n                                }\r\n                            });\r\n                            playlistSongsList = listModel.getResponseData().getPlaylistSongs();\r\n                            downloadPlaylistDetails = new DownloadPlaylistDetails();\r\n                            downloadPlaylistDetails.setPlaylistID(listModel.getResponseData().getPlaylistID());\r\n                            downloadPlaylistDetails.setPlaylistName(listModel.getResponseData().getPlaylistName());\r\n                            downloadPlaylistDetails.setPlaylistDesc(listModel.getResponseData().getPlaylistDesc());\r\n                            downloadPlaylistDetails.setIsReminder(listModel.getResponseData().getIsReminder());\r\n                            downloadPlaylistDetails.setPlaylistMastercat(listModel.getResponseData().getPlaylistMastercat());\r\n                            downloadPlaylistDetails.setPlaylistSubcat(listModel.getResponseData().getPlaylistSubcat());\r\n                            downloadPlaylistDetails.setPlaylistImage(listModel.getResponseData().getPlaylistImage());\r\n                            downloadPlaylistDetails.setTotalAudio(listModel.getResponseData().getTotalAudio());\r\n                            downloadPlaylistDetails.setTotalDuration(listModel.getResponseData().getTotalDuration());\r\n                            downloadPlaylistDetails.setTotalhour(listModel.getResponseData().getTotalhour());\r\n                            downloadPlaylistDetails.setTotalminute(listModel.getResponseData().getTotalminute());\r\n                            downloadPlaylistDetails.setCreated(listModel.getResponseData().getCreated());\r\n                            downloadPlaylistDetails.setDownload(listModel.getResponseData().getDownload());\r\n                            downloadPlaylistDetails.setLike(listModel.getResponseData().getLike());\r\n\r\n                            setData(listModel.getResponseData());\r\n                            downloadAudioDetailsList = GetAllMedia();\r\n                            downloadPlaylistDetailsList = GetPlaylistDetail(listModel.getResponseData().getDownload());\r\n                            playlistWiseAudioDetails = GetMedia();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<SubPlayListModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                });\r\n            } else {\r\n                downloadPlaylistDetailsList = GetPlaylistDetail2();\r\n            }\r\n        } else {\r\n            downloadPlaylistDetailsList = GetPlaylistDetail2();\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private void getMediaByPer(String playlistID, int totalAudio) {\r\n        class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                count = DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getCountDownloadProgress(\"Compete\", playlistID);\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                downloadPlaylistDetailsList = GetPlaylistDetail(downloadPlaylistDetails.getDownload());\r\n\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    if (count <= totalAudio) {\r\n                        if (count == totalAudio) {\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        } else {\r\n                            long progressPercent = count * 100 / totalAudio;\r\n                            int downloadProgress1 = (int) progressPercent;\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            binding.pbProgress.setProgress(downloadProgress1);\r\n                            getMediaByPer(playlistID, totalAudio);\r\n//                             handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getMediaByPer st = new getMediaByPer();\r\n        st.execute();\r\n    }\r\n\r\n    private void getDownloadData() {\r\n        try {\r\n            SharedPreferences sharedy = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n               /* remainAudio = new ArrayList<>();\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 0; i < fileNameList.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            remainAudio.add(playlistDownloadId.get(i));\r\n                        }\r\n                    }\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        if (remainAudio.size() < SongListSize) {\r\n                            handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    }\r\n                    //\r\n                } else {\r\n                    fileNameList = new ArrayList<>();\r\n                    playlistDownloadId = new ArrayList<>();\r\n                    remainAudio = new ArrayList<>();\r\n                }*/\r\n            } else {\r\n                fileNameList = new ArrayList<>();\r\n                playlistDownloadId = new ArrayList<>();\r\n//                remainAudio = new ArrayList<>();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void setData(SubPlayListModel.ResponseData listModel) {\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                5, 3, 1f, 0);\r\n        binding.ivBanner.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivBanner.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivBanner.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        if (listModel.getPlaylistName().equalsIgnoreCase(\"\") ||\r\n                listModel.getPlaylistName() == null) {\r\n            binding.tvLibraryName.setText(R.string.My_Playlist);\r\n        } else {\r\n            binding.tvLibraryName.setText(listModel.getPlaylistName());\r\n        }\r\n        binding.tvPlaylist.setText(\"Playlist\");\r\n        if (!listModel.getPlaylistImage().equalsIgnoreCase(\"\")) {\r\n            try {\r\n                Glide.with(getActivity()).load(listModel.getPlaylistImage()).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivBanner);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            binding.ivBanner.setImageResource(R.drawable.audio_bg);\r\n        }\r\n\r\n        if (listModel.getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                listModel.getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                        listModel.getTotalhour().equalsIgnoreCase(\"\")\r\n                        && listModel.getTotalminute().equalsIgnoreCase(\"\")) {\r\n            binding.tvLibraryDetail.setText(\"0 Audio | 0h 0m\");\r\n        } else {\r\n            if (listModel.getTotalminute().equalsIgnoreCase(\"\")) {\r\n                binding.tvLibraryDetail.setText(listModel.getTotalAudio() + \" Audio | \"\r\n                        + listModel.getTotalhour() + \"h 0m\");\r\n            } else {\r\n                binding.tvLibraryDetail.setText(listModel.getTotalAudio() + \" Audio | \"\r\n                        + listModel.getTotalhour() + \"h \" + listModel.getTotalminute() + \"m\");\r\n            }\r\n        }\r\n        RefreshIcon = listModel.getPlaylistSongs().size();\r\n        RefreshIconData = listModel.getPlaylistSongs().size();\r\n\r\n        if (listModel.getPlaylistSongs().size() == 0) {\r\n            binding.llAddAudio.setVisibility(View.VISIBLE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.INVISIBLE);\r\n            binding.llListing.setVisibility(View.GONE);\r\n            binding.btnAddAudio.setOnClickListener(view -> {\r\n                Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n                i.putExtra(\"PlaylistID\", PlaylistID);\r\n                startActivity(i);\r\n            });\r\n        } else {\r\n            binding.llAddAudio.setVisibility(View.GONE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n            binding.llListing.setVisibility(View.VISIBLE);\r\n            try {\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    adpater2 = new PlayListsAdpater2(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated());\r\n                    binding.rvPlayLists.setAdapter(adpater2);\r\n                    binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                    binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                    enableDisableDownload(false, \"orange\");\r\n                    binding.llReminder.setClickable(false);\r\n                    binding.llReminder.setEnabled(false);\r\n                    binding.ivReminder.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                    binding.rlSearch.setVisibility(View.GONE);\r\n                } else {\r\n                    if (listModel.getCreated().equalsIgnoreCase(\"1\")) {\r\n                        adpater = new PlayListsAdpater(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated(), this);\r\n//                        SongListSize = listModel.getPlaylistSongs().size();\r\n                        ItemTouchHelper.Callback callback = new ItemMoveCallback(adpater);\r\n                        touchHelper = new ItemTouchHelper(callback);\r\n                        touchHelper.attachToRecyclerView(binding.rvPlayLists);\r\n                        binding.rvPlayLists.setAdapter(adpater);\r\n                    } else {\r\n                        adpater2 = new PlayListsAdpater2(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated());\r\n                        binding.rvPlayLists.setAdapter(adpater2);\r\n                    }\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callTransparentFrag(int position, Context ctx, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList,\r\n                                     String myPlaylist) {\r\n        SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        if (queuePlay) {\r\n            int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n            Gson gson = new Gson();\r\n            String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                }.getType();\r\n                addToQueueModelList = gson.fromJson(json1, type1);\r\n            }\r\n            addToQueueModelList.remove(position1);\r\n            SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared2.edit();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();\r\n\r\n        }\r\n        player = 1;\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isPause = false;\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isRemoved = false;\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(listModelList);\r\n        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, myPlaylist);\r\n        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n        editor.commit();\r\n        try {\r\n            if (comefrom_search == 1) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n            } else {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void callRemove(String id, String PlaylistAudioId, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData, int position) {\r\n        String AudioId = id;\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SucessModel> listCall = APIClient.getClient().getRemoveAudioFromPlaylist(UserID, AudioId, PlaylistID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SucessModel listModel = response.body();\r\n                        mData.remove(position);\r\n                        if (mData.size() == 0) {\r\n                            enableDisableDownload(false, \"gray\");\r\n                        }\r\n                        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (pos == position && position < mData.size() - 1) {\r\n//                                            pos = pos + 1;\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", getActivity());\r\n                                } else {\r\n                                    callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\");\r\n                                }\r\n                            } else if (pos == position && position == mData.size() - 1) {\r\n                                pos = 0;\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", getActivity());\r\n                                } else {\r\n                                    callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\");\r\n                                }\r\n                            } else if (pos < position && pos < mData.size() - 1) {\r\n                                saveToPref(pos, mData);\r\n                            } else if (pos > position && pos == mData.size()) {\r\n                                pos = pos - 1;\r\n                                saveToPref(pos, mData);\r\n                            }/*else if(pos != position || pos > mData.size()){}*/\r\n\r\n//                                        callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\");\r\n                        }\r\n                        //      adpater.notifyItemRemoved(position);\r\n                        prepareData(UserID, PlaylistID);\r\n                        BWSApplication.showToast(listModel.getResponseMessage(), getActivity());\r\n                    }\r\n                }\r\n\r\n                private void saveToPref(int pos, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData) {\r\n                    SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shareddd.edit();\r\n                    Gson gson = new Gson();\r\n                    String json = gson.toJson(mData);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                    editor.commit();\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private void callDownload(String id, String audioFile, String Name, ArrayList<SubPlayListModel.ResponseData.PlaylistSong>\r\n            playlistSongs, int position, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        if (id.isEmpty() && Name.isEmpty() && audioFile.isEmpty()) {\r\n            enableDisableDownload(false, \"orange\");\r\n            List<String> url = new ArrayList<>();\r\n            List<String> name = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs2 = new ArrayList<>();\r\n            playlistSongs2 = playlistSongs;\r\n            if (downloadAudioDetailsList.size() != 0) {\r\n                for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                    if (playlistSongs2.size() == 0) {\r\n                        break;\r\n                    } else {\r\n                        for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                            if (playlistSongs2.size() != 0) {\r\n                                if (playlistSongs2.get(x).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                    playlistSongs2.remove(x);\r\n                                }\r\n                                if (playlistSongs2.size() == 0) {\r\n                                    break;\r\n                                }\r\n                            } else break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (playlistSongs2.size() != 0) {\r\n                for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                    name.add(playlistSongs2.get(x).getName());\r\n                    url.add(playlistSongs2.get(x).getAudioFile());\r\n                    downloadPlaylistId.add(playlistSongs2.get(x).getPlaylistID());\r\n                }\r\n            }\r\n            byte[] encodedBytes = new byte[1024];\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url.addAll(audioFile1);\r\n                    name.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            if (url.size() != 0) {\r\n                DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url);\r\n                String nameJson = gson.toJson(name);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                fileNameList = name;\r\n                playlistDownloadId = downloadPlaylistId;\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                /*remainAudio = new ArrayList<>();\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                        remainAudio.add(playlistDownloadId.get(i));\r\n                    }\r\n                }*/\r\n                SongListSize = playlistSongs.size();\r\n//                handler1.postDelayed(UpdateSongTime1, 500);\r\n            }\r\n            binding.pbProgress.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setVisibility(View.GONE);\r\n//            String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n//            SaveMedia(EncodeBytes, dirPath, playlistSongs, i, llDownload);\r\n            getMediaByPer(PlaylistID, SongListSize);\r\n            savePlaylist();\r\n            saveAllMedia(playlistSongsList, encodedBytes);\r\n        } else {\r\n            disableDownload(llDownload, ivDownloads);\r\n            List<String> url = new ArrayList<>();\r\n            List<String> name = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url.addAll(audioFile1);\r\n                    name.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            url.add(audioFile);\r\n            name.add(Name);\r\n            downloadPlaylistId.add(\"\");\r\n            if (url.size() != 0) {\r\n                DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url);\r\n                String nameJson = gson.toJson(name);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                fileNameList = name;\r\n                playlistDownloadId = downloadPlaylistId;\r\n            }\r\n            String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n            SaveMedia(new byte[1024], dirPath, playlistSongs, position, llDownload, ivDownloads);\r\n            handler2.postDelayed(UpdateSongTime2, 200);\r\n        }\r\n    }\r\n\r\n    private void savePlaylist() {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertPlaylist(downloadPlaylistDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n                getMediaByPer(PlaylistID, SongListSize);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void saveAllMedia(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, byte[] encodedBytes) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                for (int i = 0; i < playlistSongs.size(); i++) {\r\n                    downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                    downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"0\");\r\n                    if (downloadAudioDetailsList.size() != 0) {\r\n                        for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                            if (playlistSongs.get(i).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                downloadAudioDetails.setIsDownload(\"Complete\");\r\n                                downloadAudioDetails.setDownloadProgress(100);\r\n                            } else {\r\n                                downloadAudioDetails.setIsDownload(\"pending\");\r\n                                downloadAudioDetails.setDownloadProgress(0);\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                    downloadAudioDetails.setPlaylistId(playlistSongs.get(i).getPlaylistID());\r\n                    DatabaseClient.getInstance(getActivity())\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .insertMedia(downloadAudioDetails);\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n\r\n                enableDisableDownload(false, \"orange\");\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void SaveMedia(byte[] encodeBytes, String dirPath, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, int i, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                downloadAudioDetails.setDownload(\"1\");\r\n                downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                downloadAudioDetails.setIsSingle(\"1\");\r\n                downloadAudioDetails.setPlaylistId(\"\");\r\n                downloadAudioDetails.setIsDownload(\"pending\");\r\n                downloadAudioDetails.setDownloadProgress(0);\r\n                DatabaseClient.getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                disableDownload(llDownload, ivDownloads);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public void GetMedia(String url, Context ctx, String download, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(url);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                        disableDownload(llDownload, ivDownloads);\r\n                    }\r\n                } else if (download.equalsIgnoreCase(\"1\")) {\r\n                    disableDownload(llDownload, ivDownloads);\r\n                } else {\r\n                    enableDownload(llDownload, ivDownloads);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetMedia() {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        SubPlayListModel responseData = new SubPlayListModel();\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> details = new ArrayList<>();\r\n                        SubPlayListModel.ResponseData listModel = new SubPlayListModel.ResponseData();\r\n                        listModel.setPlaylistID(downloadPlaylistDetailsList.get(0).getPlaylistID());\r\n                        listModel.setPlaylistName(downloadPlaylistDetailsList.get(0).getPlaylistName());\r\n                        listModel.setPlaylistDesc(downloadPlaylistDetailsList.get(0).getPlaylistDesc());\r\n                        listModel.setPlaylistMastercat(downloadPlaylistDetailsList.get(0).getPlaylistMastercat());\r\n                        listModel.setPlaylistSubcat(downloadPlaylistDetailsList.get(0).getPlaylistSubcat());\r\n                        listModel.setPlaylistImage(downloadPlaylistDetailsList.get(0).getPlaylistImage());\r\n                        listModel.setTotalAudio(downloadPlaylistDetailsList.get(0).getTotalAudio());\r\n                        listModel.setTotalDuration(downloadPlaylistDetailsList.get(0).getTotalDuration());\r\n                        listModel.setTotalhour(downloadPlaylistDetailsList.get(0).getTotalhour());\r\n                        listModel.setTotalminute(downloadPlaylistDetailsList.get(0).getTotalminute());\r\n                        listModel.setCreated(downloadPlaylistDetailsList.get(0).getCreated());\r\n                        listModel.setLike(downloadPlaylistDetailsList.get(0).getLike());\r\n                        listModel.setIsReminder(downloadPlaylistDetailsList.get(0).getIsReminder());\r\n                        if (playlistWiseAudioDetails.size() != 0) {\r\n                            for (int i = 0; i < playlistWiseAudioDetails.size(); i++) {\r\n                                SubPlayListModel.ResponseData.PlaylistSong detail = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                detail.setID(playlistWiseAudioDetails.get(i).getID());\r\n                                detail.setName(playlistWiseAudioDetails.get(i).getName());\r\n                                detail.setAudioFile(playlistWiseAudioDetails.get(i).getAudioFile());\r\n                                detail.setAudioDirection(playlistWiseAudioDetails.get(i).getAudioDirection());\r\n                                detail.setAudiomastercat(playlistWiseAudioDetails.get(i).getAudiomastercat());\r\n                                detail.setAudioSubCategory(playlistWiseAudioDetails.get(i).getAudioSubCategory());\r\n                                detail.setImageFile(playlistWiseAudioDetails.get(i).getImageFile());\r\n                                detail.setLike(playlistWiseAudioDetails.get(i).getLike());\r\n                                detail.setDownload(playlistWiseAudioDetails.get(i).getDownload());\r\n                                detail.setAudioDuration(playlistWiseAudioDetails.get(i).getAudioDuration());\r\n                                details.add(detail);\r\n                            }\r\n                            listModel.setPlaylistSongs(details);\r\n                        }\r\n                        setData(listModel);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    private void enableDownload(RelativeLayout llDownload, ImageView ivDownloads) {\r\n        llDownload.setClickable(true);\r\n        llDownload.setEnabled(true);\r\n        ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n        ivDownloads.setColorFilter(activity.getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n    }\r\n\r\n    private void disableDownload(RelativeLayout llDownload, ImageView ivDownloads) {\r\n        ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n        ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        llDownload.setClickable(false);\r\n        llDownload.setEnabled(false);\r\n    }\r\n\r\n    @Override\r\n    public void requestDrag(RecyclerView.ViewHolder viewHolder) {\r\n        touchHelper.startDrag(viewHolder);\r\n    }\r\n\r\n    public class PlayListsAdpater extends RecyclerView.Adapter<PlayListsAdpater.MyViewHolder> implements Filterable/*, StartDragListener*/, ItemMoveCallback.ItemTouchHelperContract {\r\n        Context ctx;\r\n        String UserID, Created, name;\r\n        StartDragListener startDragListener;\r\n        int isDownloading = 0;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                String Created, StartDragListener startDragListener) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n            this.startDragListener = startDragListener;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @SuppressLint(\"ClickableViewAccessibility\")\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n            UpdateSongTime2 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    for (int f = 0; f < listModelList.size(); f++) {\r\n                        if (fileNameList.size() != 0) {\r\n                            for (int i = 0; i < fileNameList.size(); i++) {\r\n                                if (fileNameList.get(i).equalsIgnoreCase(mData.get(f).getName())) {\r\n                                    if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(mData.get(f).getName())) {\r\n                                        if (downloadProgress <= 100) {\r\n                                            notifyItemChanged(f);\r\n                                         /*   holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.GONE);*/\r\n                                        } else {\r\n                                            holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                                            handler2.removeCallbacks(UpdateSongTime2);\r\n                                            getDownloadData();\r\n                                        }\r\n                                    } else {\r\n                                        notifyItemChanged(f);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (downloadProgress == 0) {\r\n                        notifyDataSetChanged();\r\n                        getDownloadData();\r\n                    }\r\n                    handler2.postDelayed(this, 300);\r\n                }\r\n            };\r\n            if (fileNameList.size() != 0) {\r\n             /*   for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                        isDownloading++;\r\n                        break;\r\n                    }else{\r\n                        holder.binding.pbProgress.setVisibility(View.GONE);\r\n                    }\r\n                }*/\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(mData.get(position).getName())) {\r\n                            if (downloadProgress <= 100) {\r\n                                if (downloadProgress == 100) {\r\n                                    holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                } else {\r\n                                    holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                    holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                                }\r\n                            } else {\r\n                                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                                handler2.removeCallbacks(UpdateSongTime2);\r\n                            }\r\n                        } else {\r\n                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                            handler2.postDelayed(UpdateSongTime2, 200);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n            }\r\n            holder.binding.tvTitleA.setText(mData.get(position).getName());\r\n            holder.binding.tvTitleB.setText(mData.get(position).getName());\r\n            holder.binding.tvTimeA.setText(mData.get(position).getAudioDuration());\r\n            holder.binding.tvTimeB.setText(mData.get(position).getAudioDuration());\r\n            holder.binding.llSort.setOnTouchListener((v, event) -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall sort after the disclaimer\", ctx);\r\n                    }\r\n                } else {\r\n                    if (event.getAction() ==\r\n                            MotionEvent.ACTION_DOWN) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                    if (event.getAction() ==\r\n                            MotionEvent.ACTION_UP) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n            String id = mData.get(position).getID();\r\n//            GetMedia(id, activity, mData.get(position).getDownload(), holder.binding.llDownload, holder.binding.ivDownloads);\r\n            for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                if (downloadAudioDetailsList.get(i).getAudioFile().equalsIgnoreCase(mData.get(position).getAudioFile())\r\n                        && downloadAudioDetailsList.get(i).getPlaylistId().equalsIgnoreCase(\"\")) {\r\n                    //disableName.add(mData.get(position).getName());\r\n                    disableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                    break;\r\n                }/* else {\r\n                    enableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                }*/\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(0, ctx, listModelList, \"myPlaylist\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    callTransparentFrag(0, ctx, listModelList, \"myPlaylist\");\r\n                }\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(position, ctx, listModelList, \"myPlaylist\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    callTransparentFrag(position, ctx, listModelList, \"myPlaylist\");\r\n                }\r\n            });\r\n            if (Created.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.llMore.setVisibility(View.GONE);\r\n                holder.binding.llCenterLayoutA.setVisibility(View.GONE);\r\n                holder.binding.llCenterLayoutB.setVisibility(View.VISIBLE);\r\n                holder.binding.llDownload.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemove.setVisibility(View.VISIBLE);\r\n                holder.binding.llSort.setVisibility(View.VISIBLE);\r\n                binding.tvSearch.setVisibility(View.VISIBLE);\r\n                binding.searchView.setVisibility(View.GONE);\r\n            } else if (Created.equalsIgnoreCase(\"0\")) {\r\n                holder.binding.llMore.setVisibility(View.VISIBLE);\r\n                holder.binding.llCenterLayoutA.setVisibility(View.VISIBLE);\r\n                holder.binding.llCenterLayoutB.setVisibility(View.GONE);\r\n                holder.binding.llDownload.setVisibility(View.GONE);\r\n                holder.binding.llRemove.setVisibility(View.GONE);\r\n                holder.binding.llSort.setVisibility(View.GONE);\r\n                binding.tvSearch.setVisibility(View.GONE);\r\n                binding.searchView.setVisibility(View.VISIBLE);\r\n            }\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                holder.binding.llMore.setClickable(true);\r\n                holder.binding.llMore.setEnabled(true);\r\n                holder.binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                holder.binding.llMore.setClickable(false);\r\n                holder.binding.llMore.setEnabled(false);\r\n                holder.binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            }\r\n            holder.binding.llMore.setOnClickListener(view -> {\r\n                Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                i.putExtra(\"play\", \"myPlayList\");\r\n                i.putExtra(\"ID\", mData.get(position).getID());\r\n                i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                i.putExtra(\"position\", position);\r\n                i.putParcelableArrayListExtra(\"data\", mData);\r\n                i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                startActivity(i);\r\n                getActivity().finish();\r\n            });\r\n\r\n//            if (changedAudio != null) {\r\n//                callDragApi();\r\n//            }\r\n            holder.binding.llDownload.setOnClickListener(view -> {\r\n                name = mData.get(position).getName();\r\n                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                callDownload(mData.get(position).getID(), mData.get(position).getAudioFile(), mData.get(position).getName(), listFilterData, position, holder.binding.llDownload, holder.binding.ivDownloads);\r\n            });\r\n            try {\r\n                holder.binding.llRemove.setOnClickListener(view -> {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall remove after the disclaimer\", ctx);\r\n                        }\r\n                    } else {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                            BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                        } else {\r\n                            callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                        }\r\n                    }\r\n                });\r\n\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (listFilterData != null) {\r\n                return listFilterData.size();\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public void onRowMoved(int fromPosition, int toPosition) {\r\n            if (fromPosition < toPosition) {\r\n                for (int i = fromPosition; i < toPosition; i++) {\r\n                    Collections.swap(listModelList, i, i + 1);\r\n                }\r\n            } else {\r\n                for (int i = fromPosition; i > toPosition; i--) {\r\n                    Collections.swap(listModelList, i, i - 1);\r\n                }\r\n            }\r\n            changedAudio.clear();\r\n            for (int i = 0; i < listModelList.size(); i++) {\r\n                changedAudio.add(listModelList.get(i).getID());\r\n            }\r\n\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            if (audioPlay) {\r\n                if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (fromPosition == pos) {\r\n                            pos = toPosition;\r\n                        }/* else if (toPosition == pos) {\r\n                            if (action == 0) {\r\n                                pos = pos + 1;\r\n                            } else if (action == 1) {\r\n                                pos = pos - 1;\r\n                            }\r\n                        }*/ else if (fromPosition < pos && toPosition > pos) {\r\n                            pos = pos - 1;\r\n                        } else if ((fromPosition > pos && toPosition > pos) || (fromPosition < pos && toPosition < pos)) {\r\n                            pos = pos;\r\n                        } else if (fromPosition > pos && toPosition < pos) {\r\n                            pos = pos + 1;\r\n                        } else if (fromPosition > pos && toPosition == pos) {\r\n                            pos = pos + 1;\r\n                        } else if (fromPosition < pos && toPosition == pos) {\r\n                            pos = pos - 1;\r\n                        }\r\n                        SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shareddd.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(listModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                        editor.commit();\r\n                        Fragment fragment = new TransparentPlayerFragment();\r\n                        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                        fragmentManager1.beginTransaction()\r\n                                .add(R.id.flContainer, fragment)\r\n                                .commit();\r\n                    }\r\n                }\r\n            }\r\n            callDragApi();\r\n\r\n            notifyItemMoved(fromPosition, toPosition);\r\n\r\n         /* SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();*/\r\n\r\n        }\r\n\r\n\r\n        private void callDragApi() {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Call<CardModel> listCall = APIClient.getClient().setShortedAudio(UserID, PlaylistID, TextUtils.join(\",\", changedAudio));\r\n                listCall.enqueue(new Callback<CardModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<CardModel> call, Response<CardModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            CardModel listModel = response.body();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<CardModel> call, Throwable t) {\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onRowClear(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        binding.rvPlayLists.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolder(MyPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PlayListsAdpater2 extends RecyclerView.Adapter<PlayListsAdpater2.MyViewHolder2> implements Filterable {\r\n        Context ctx;\r\n        String UserID, Created;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater2(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                 String Created) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder2 onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout, parent, false);\r\n            return new MyViewHolder2(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder2 holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n            holder.binding.tvTitleA.setText(mData.get(position).getName());\r\n            holder.binding.tvTitleB.setText(mData.get(position).getName());\r\n            holder.binding.tvTimeA.setText(mData.get(position).getAudioDuration());\r\n            holder.binding.tvTimeB.setText(mData.get(position).getAudioDuration());\r\n            String id = mData.get(position).getID();\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n//            GetMedia(id, activity, mData.get(position).getDownload(), holder.binding.llDownload, holder.binding.ivDownloads);\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(0, ctx, listModelList, \"\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    callTransparentFrag(0, ctx, listModelList, \"\");\r\n                }\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(position, ctx, listModelList, \"\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    callTransparentFrag(position, ctx, listModelList, \"\");\r\n                }\r\n            });\r\n\r\n//            if (Created.equalsIgnoreCase(\"1\")) {\r\n//                holder.binding.llMore.setVisibility(View.GONE);\r\n//                holder.binding.llCenterLayoutA.setVisibility(View.GONE);\r\n//                holder.binding.llCenterLayoutB.setVisibility(View.VISIBLE);\r\n//                holder.binding.llDownload.setVisibility(View.VISIBLE);\r\n//                holder.binding.llRemove.setVisibility(View.VISIBLE);\r\n//                holder.binding.llSort.setVisibility(View.VISIBLE);\r\n//                binding.tvSearch.setVisibility(View.VISIBLE);\r\n//                binding.searchView.setVisibility(View.GONE);\r\n//            } else if (Created.equalsIgnoreCase(\"0\")) {\r\n            holder.binding.llMore.setVisibility(View.VISIBLE);\r\n            holder.binding.llCenterLayoutA.setVisibility(View.VISIBLE);\r\n            holder.binding.llCenterLayoutB.setVisibility(View.GONE);\r\n            holder.binding.llDownload.setVisibility(View.GONE);\r\n            holder.binding.llRemove.setVisibility(View.GONE);\r\n            holder.binding.llSort.setVisibility(View.GONE);\r\n            binding.tvSearch.setVisibility(View.GONE);\r\n            binding.searchView.setVisibility(View.VISIBLE);\r\n//            }\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                holder.binding.llMore.setClickable(true);\r\n                holder.binding.llMore.setEnabled(true);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                holder.binding.llMore.setClickable(false);\r\n                holder.binding.llMore.setEnabled(false);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            holder.binding.llMore.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"You can see details after the disclaimer\", ctx);\r\n                    } else {\r\n                        Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                        i.putExtra(\"play\", \"playlist\");\r\n                        i.putExtra(\"ID\", mData.get(position).getID());\r\n                        i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                        i.putExtra(\"position\", position);\r\n                        i.putParcelableArrayListExtra(\"data\", mData);\r\n                        i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                        startActivity(i);\r\n                    }\r\n                } else {\r\n                    Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                    i.putExtra(\"play\", \"playlist\");\r\n                    i.putExtra(\"ID\", mData.get(position).getID());\r\n                    i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                    i.putExtra(\"position\", position);\r\n                    i.putParcelableArrayListExtra(\"data\", mData);\r\n                    i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (listFilterData != null) {\r\n                return listFilterData.size();\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.tvFound.setText(\"Couldn't find \" + SearchFlag + \". Try searching again\");\r\n                        binding.rvPlayLists.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        public class MyViewHolder2 extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolder2(MyPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java	(revision 68a23b681f7a806e0e439891b3a1497a1a83d508)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java	(date 1602745971838)
@@ -124,7 +124,6 @@
     Runnable UpdateSongTime2;
     int SongListSize = 0, count;
     private Handler handler1, handler2;
-
 //    private Runnable UpdateSongTime1 = new Runnable() {
 //        @Override
 //        public void run() {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddPlaylistActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.CreatePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.PlaylistingModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityAddPlaylistBinding;\r\nimport com.brainwellnessspa.databinding.AddPlayListLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.comeAddPlaylist;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\n\r\npublic class AddPlaylistActivity extends AppCompatActivity {\r\n    public static boolean addToPlayList = false;\r\n    public static String MyPlaylistId = \"\";\r\n    ActivityAddPlaylistBinding binding;\r\n    String UserID, AudioId, FromPlaylistID;\r\n    Context ctx;\r\n    Activity activity;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_add_playlist);\r\n        ctx = AddPlaylistActivity.this;\r\n        activity = AddPlaylistActivity.this;\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            AudioId = getIntent().getStringExtra(\"AudioId\");\r\n            FromPlaylistID = getIntent().getStringExtra(\"PlaylistID\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            comefrom_search = 0;\r\n            finish();\r\n        });\r\n\r\n        RecyclerView.LayoutManager played = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists.setLayoutManager(played);\r\n        binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());\r\n        prepareData(ctx);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        comefrom_search = 0;\r\n        finish();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        prepareData(AddPlaylistActivity.this);\r\n    }\r\n\r\n    private void prepareData(Context ctx) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<PlaylistingModel> listCall = APIClient.getClient().getPlaylisting(UserID);\r\n            listCall.enqueue(new Callback<PlaylistingModel>() {\r\n                @Override\r\n                public void onResponse(Call<PlaylistingModel> call, Response<PlaylistingModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        PlaylistingModel model = response.body();\r\n                        AddPlaylistAdapter addPlaylistAdapter = new AddPlaylistAdapter(model.getResponseData(), ctx);\r\n                        binding.rvPlayLists.setAdapter(addPlaylistAdapter);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<PlaylistingModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void callAddPlaylistFromPlaylist(String PlaylistID, Dialog dialog, String d) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<AddToPlaylist> listCall = APIClient.getClient().getAddSearchAudioFromPlaylist(UserID, AudioId, PlaylistID, FromPlaylistID);\r\n            listCall.enqueue(new Callback<AddToPlaylist>() {\r\n                @Override\r\n                public void onResponse(Call<AddToPlaylist> call, Response<AddToPlaylist> response) {\r\n                    try {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            AddToPlaylist listModels = response.body();\r\n                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                            Gson gsonx = new Gson();\r\n                            String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                            Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                            }.getType();\r\n                            ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();\r\n                            mainPlayModelListold = gsonx.fromJson(json, type);\r\n                            String id = mainPlayModelListold.get(pos).getID();\r\n                            ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();\r\n                            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();\r\n                            if (audioPlay) {\r\n                                if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                                    for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                        MainPlayModel mainPlayModel = new MainPlayModel();\r\n                                        mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                        mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                        mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                        mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                        mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                        mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                        mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                        mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                        mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                        mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                        mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                        mainPlayModelList.add(mainPlayModel);\r\n                                    }\r\n                                    for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                        SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                        mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                        mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                        mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                        mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                        mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                        mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                        mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                        mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                        mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                        mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                        mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                        playlistSongs.add(mainPlayModel);\r\n                                    }\r\n\r\n                                    for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                        if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {\r\n                                            pos = i;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                    SharedPreferences.Editor editor = sharedd.edit();\r\n                                    Gson gson = new Gson();\r\n                                    String jsonx = gson.toJson(mainPlayModelList);\r\n                                    String json1 = gson.toJson(playlistSongs);\r\n                                    editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                    editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                    editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                    editor.commit();\r\n                                }\r\n                            }\r\n                            if (comeAddPlaylist == 1) {\r\n                                final Dialog dialog = new Dialog(ctx);\r\n                                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                dialog.setContentView(R.layout.go_to_playlist);\r\n                                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                                final RelativeLayout rlCreate = dialog.findViewById(R.id.rlCreate);\r\n\r\n                                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                        dialog.dismiss();\r\n                                        return true;\r\n                                    }\r\n                                    return false;\r\n                                });\r\n\r\n                                rlCreate.setOnClickListener(view2 -> {\r\n                                    addToPlayList = true;\r\n                                    MyPlaylistId = PlaylistID;\r\n                                    dialog.dismiss();\r\n                                    finish();\r\n                                                                /*Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                                                                Bundle bundle = new Bundle();\r\n                                                                bundle.putString(\"New\", \"0\");\r\n                                                                bundle.putString(\"PlaylistID\", listsModel.getResponseData().getId());\r\n                                                                bundle.putString(\"PlaylistName\", listsModel.getResponseData().getName());\r\n                                                                bundle.putString(\"MyDownloads\", \"0\");\r\n                                                                myPlaylistsFragment.setArguments(bundle);\r\n                                                                FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                                                                fragmentManager1.beginTransaction()\r\n                                                                        .replace(R.id.flContainer, myPlaylistsFragment)\r\n                                                                        .commit();*/\r\n                                });\r\n\r\n                                tvCancel.setOnClickListener(v -> {\r\n                                    dialog.dismiss();\r\n                                    finish();\r\n                                });\r\n                                dialog.show();\r\n                                dialog.setCancelable(false);\r\n                            } else {\r\n                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                                if (d.equalsIgnoreCase(\"0\")) {\r\n                                    dialog.dismiss();\r\n                                }\r\n                                finish();\r\n                                                            /*final Dialog dialog = new Dialog(ctx);\r\n                                                            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                                            dialog.setContentView(R.layout.go_to_playlist);\r\n                                                            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                                                            dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                                            final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                                                            final RelativeLayout rlCreate = dialog.findViewById(R.id.rlCreate);\r\n\r\n                                                            dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                                                if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                                                    dialog.dismiss();\r\n                                                                    return true;\r\n                                                                }\r\n                                                                return false;\r\n                                                            });\r\n\r\n                                                            rlCreate.setOnClickListener(view2 -> {\r\n                                                                addToPlayList = true;\r\n                                                                MyPlaylistId = listsModel.getResponseData().getId();\r\n                                                                dialog.dismiss();\r\n                                                                Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                                                                Bundle bundle = new Bundle();\r\n                                                                bundle.putString(\"New\", \"0\");\r\n                                                                bundle.putString(\"PlaylistID\", listsModel.getResponseData().getId());\r\n                                                                bundle.putString(\"PlaylistName\", listsModel.getResponseData().getName());\r\n                                                                bundle.putString(\"MyDownloads\", \"0\");\r\n                                                                myPlaylistsFragment.setArguments(bundle);\r\n                                                                FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                                                                fragmentManager1.beginTransaction()\r\n                                                                        .replace(R.id.flContainer, myPlaylistsFragment)\r\n                                                                        .commit();\r\n                                                            });\r\n\r\n                                                            tvCancel.setOnClickListener(v -> {\r\n                                                                dialog.dismiss();\r\n                                                                finish();\r\n                                                            });\r\n                                                            dialog.show();\r\n                                                            dialog.setCancelable(false);*/\r\n                            }\r\n                        }\r\n                    }catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AddToPlaylist> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private class AddPlaylistAdapter extends RecyclerView.Adapter<AddPlaylistAdapter.MyViewHolder> {\r\n        Context ctx;\r\n        private List<PlaylistingModel.ResponseData> listModel;\r\n\r\n        public AddPlaylistAdapter(List<PlaylistingModel.ResponseData> listModel, Context ctx) {\r\n            this.listModel = listModel;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            AddPlayListLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.add_play_list_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(listModel.get(position).getName());\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.16f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(listModel.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            binding.btnAddPlatLists.setOnClickListener(view -> {\r\n\r\n                final Dialog dialog = new Dialog(ctx);\r\n                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                dialog.setContentView(R.layout.create_palylist);\r\n                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                final EditText edtCreate = dialog.findViewById(R.id.edtCreate);\r\n                final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                final Button btnSendCode = dialog.findViewById(R.id.btnSendCode);\r\n\r\n                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                        dialog.dismiss();\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n\r\n                TextWatcher popupTextWatcher = new TextWatcher() {\r\n                    @Override\r\n                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                    }\r\n\r\n                    @Override\r\n                    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                        String number = edtCreate.getText().toString().trim();\r\n                        if (!number.isEmpty()) {\r\n                            btnSendCode.setEnabled(true);\r\n                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                            btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                        } else {\r\n                            btnSendCode.setEnabled(false);\r\n                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                            btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void afterTextChanged(Editable s) {\r\n                    }\r\n                };\r\n\r\n\r\n                edtCreate.addTextChangedListener(popupTextWatcher);\r\n                btnSendCode.setOnClickListener(view1 -> {\r\n                    if (edtCreate.getText().toString().equalsIgnoreCase(\"\")) {\r\n                        BWSApplication.showToast(\"Please provide the playlist's name\", ctx);\r\n                    } else {\r\n                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                            Call<CreatePlaylistModel> listCall = APIClient.getClient().getCreatePlaylist(UserID, edtCreate.getText().toString());\r\n                            listCall.enqueue(new Callback<CreatePlaylistModel>() {\r\n                                @Override\r\n                                public void onResponse(Call<CreatePlaylistModel> call, Response<CreatePlaylistModel> response) {\r\n                                    if (response.isSuccessful()) {\r\n                                        CreatePlaylistModel listsModel = response.body();\r\n                                        dialog.dismiss();\r\n                                        prepareData(ctx);\r\n                                        String PlaylistID = listsModel.getResponseData().getId();\r\n                                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                            if (isDisclaimer == 1) {\r\n                                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                                            }else{\r\n                                                callAddPlaylistFromPlaylist(PlaylistID, dialog, \"0\");\r\n                                            }\r\n                                        } else {\r\n                                            callAddPlaylistFromPlaylist(PlaylistID, dialog, \"0\");\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onFailure(Call<CreatePlaylistModel> call, Throwable t) {\r\n                                }\r\n                            });\r\n                        } else {\r\n                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                        }\r\n                    }\r\n                });\r\n                tvCancel.setOnClickListener(v -> dialog.dismiss());\r\n                dialog.show();\r\n                dialog.setCancelable(false);\r\n\r\n            });\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    String PlaylistID = listModel.get(position).getID();\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        }else{\r\n                            final Dialog dialogx = new Dialog(ctx);\r\n                            callAddPlaylistFromPlaylist(PlaylistID, dialogx, \"1\");\r\n                        }\r\n                    } else {\r\n                        final Dialog dialogx = new Dialog(ctx);\r\n                        callAddPlaylistFromPlaylist(PlaylistID, dialogx, \"1\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModel.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            AddPlayListLayoutBinding binding;\r\n\r\n            public MyViewHolder(AddPlayListLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddPlaylistActivity.java	(revision 68a23b681f7a806e0e439891b3a1497a1a83d508)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddPlaylistActivity.java	(date 1602744942632)
@@ -136,96 +136,98 @@
                         if (response.isSuccessful()) {
                             BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
                             AddToPlaylist listModels = response.body();
-                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
-                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
-                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
-                            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);
-                            Gson gsonx = new Gson();
-                            String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));
-                            Type type = new TypeToken<ArrayList<MainPlayModel>>() {
-                            }.getType();
-                            ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();
-                            mainPlayModelListold = gsonx.fromJson(json, type);
-                            String id = mainPlayModelListold.get(pos).getID();
-                            ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();
-                            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();
-                            if (audioPlay) {
-                                if (AudioFlag.equalsIgnoreCase("SubPlayList")) {
-                                    for (int i = 0; i < listModels.getResponseData().size(); i++) {
-                                        MainPlayModel mainPlayModel = new MainPlayModel();
-                                        mainPlayModel.setID(listModels.getResponseData().get(i).getID());
-                                        mainPlayModel.setName(listModels.getResponseData().get(i).getName());
-                                        mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());
-                                        mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());
-                                        mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());
-                                        mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());
-                                        mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());
-                                        mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());
-                                        mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());
-                                        mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());
-                                        mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());
-                                        mainPlayModelList.add(mainPlayModel);
-                                    }
-                                    for (int i = 0; i < listModels.getResponseData().size(); i++) {
-                                        SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();
-                                        mainPlayModel.setID(listModels.getResponseData().get(i).getID());
-                                        mainPlayModel.setName(listModels.getResponseData().get(i).getName());
-                                        mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());
-                                        mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());
-                                        mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());
-                                        mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());
-                                        mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());
-                                        mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());
-                                        mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());
-                                        mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());
-                                        mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());
-                                        playlistSongs.add(mainPlayModel);
-                                    }
+                            if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {
+                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);
+                                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
+                                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
+                                String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
+                                int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);
+                                Gson gsonx = new Gson();
+                                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));
+                                Type type = new TypeToken<ArrayList<MainPlayModel>>() {
+                                }.getType();
+                                ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();
+                                mainPlayModelListold = gsonx.fromJson(json, type);
+                                String id = mainPlayModelListold.get(pos).getID();
+                                ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();
+                                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();
+                                if (audioPlay) {
+                                    if (AudioFlag.equalsIgnoreCase("SubPlayList")) {
+                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {
+                                            MainPlayModel mainPlayModel = new MainPlayModel();
+                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());
+                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());
+                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());
+                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());
+                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());
+                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());
+                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());
+                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());
+                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());
+                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());
+                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());
+                                            mainPlayModelList.add(mainPlayModel);
+                                        }
+                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {
+                                            SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();
+                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());
+                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());
+                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());
+                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());
+                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());
+                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());
+                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());
+                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());
+                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());
+                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());
+                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());
+                                            playlistSongs.add(mainPlayModel);
+                                        }
 
-                                    for (int i = 0; i < mainPlayModelList.size(); i++) {
-                                        if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {
-                                            pos = i;
-                                            break;
-                                        }
-                                    }
-                                    SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
-                                    SharedPreferences.Editor editor = sharedd.edit();
-                                    Gson gson = new Gson();
-                                    String jsonx = gson.toJson(mainPlayModelList);
-                                    String json1 = gson.toJson(playlistSongs);
-                                    editor.putString(CONSTANTS.PREF_KEY_modelList, json1);
-                                    editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);
-                                    editor.putInt(CONSTANTS.PREF_KEY_position, pos);
-                                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
-                                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
-                                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);
-                                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, "myPlaylist");
-                                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, "SubPlayList");
-                                    editor.commit();
-                                }
-                            }
-                            if (comeAddPlaylist == 1) {
-                                final Dialog dialog = new Dialog(ctx);
-                                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
-                                dialog.setContentView(R.layout.go_to_playlist);
-                                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));
-                                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
-                                final TextView tvCancel = dialog.findViewById(R.id.tvCancel);
-                                final RelativeLayout rlCreate = dialog.findViewById(R.id.rlCreate);
+                                        for (int i = 0; i < mainPlayModelList.size(); i++) {
+                                            if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {
+                                                pos = i;
+                                                break;
+                                            }
+                                        }
+                                        SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
+                                        SharedPreferences.Editor editor = sharedd.edit();
+                                        Gson gson = new Gson();
+                                        String jsonx = gson.toJson(mainPlayModelList);
+                                        String json1 = gson.toJson(playlistSongs);
+                                        editor.putString(CONSTANTS.PREF_KEY_modelList, json1);
+                                        editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);
+                                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);
+                                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
+                                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
+                                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);
+                                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, "myPlaylist");
+                                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, "SubPlayList");
+                                        editor.commit();
+                                    }
+                                }
+                                if (comeAddPlaylist == 1) {
+                                    final Dialog dialog = new Dialog(ctx);
+                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
+                                    dialog.setContentView(R.layout.go_to_playlist);
+                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));
+                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+                                    final TextView tvCancel = dialog.findViewById(R.id.tvCancel);
+                                    final RelativeLayout rlCreate = dialog.findViewById(R.id.rlCreate);
 
-                                dialog.setOnKeyListener((v, keyCode, event) -> {
-                                    if (keyCode == KeyEvent.KEYCODE_BACK) {
-                                        dialog.dismiss();
-                                        return true;
-                                    }
-                                    return false;
-                                });
+                                    dialog.setOnKeyListener((v, keyCode, event) -> {
+                                        if (keyCode == KeyEvent.KEYCODE_BACK) {
+                                            dialog.dismiss();
+                                            return true;
+                                        }
+                                        return false;
+                                    });
 
-                                rlCreate.setOnClickListener(view2 -> {
-                                    addToPlayList = true;
-                                    MyPlaylistId = PlaylistID;
-                                    dialog.dismiss();
-                                    finish();
+                                    rlCreate.setOnClickListener(view2 -> {
+                                        addToPlayList = true;
+                                        MyPlaylistId = PlaylistID;
+                                        dialog.dismiss();
+                                        finish();
                                                                 /*Fragment myPlaylistsFragment = new MyPlaylistsFragment();
                                                                 Bundle bundle = new Bundle();
                                                                 bundle.putString("New", "0");
@@ -237,20 +239,19 @@
                                                                 fragmentManager1.beginTransaction()
                                                                         .replace(R.id.flContainer, myPlaylistsFragment)
                                                                         .commit();*/
-                                });
+                                    });
 
-                                tvCancel.setOnClickListener(v -> {
-                                    dialog.dismiss();
-                                    finish();
-                                });
-                                dialog.show();
-                                dialog.setCancelable(false);
-                            } else {
-                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);
-                                if (d.equalsIgnoreCase("0")) {
-                                    dialog.dismiss();
-                                }
-                                finish();
+                                    tvCancel.setOnClickListener(v -> {
+                                        dialog.dismiss();
+                                        finish();
+                                    });
+                                    dialog.show();
+                                    dialog.setCancelable(false);
+                                } else {
+                                    if (d.equalsIgnoreCase("0")) {
+                                        dialog.dismiss();
+                                    }
+                                    finish();
                                                             /*final Dialog dialog = new Dialog(ctx);
                                                             dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
                                                             dialog.setContentView(R.layout.go_to_playlist);
@@ -290,9 +291,13 @@
                                                             });
                                                             dialog.show();
                                                             dialog.setCancelable(false);*/
+                                }
+                            } else if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {
+                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);
                             }
+
                         }
-                    }catch (Exception e) {
+                    } catch (Exception e) {
                         e.printStackTrace();
                     }
                 }
@@ -399,7 +404,7 @@
                                         if (audioPlay && AudioFlag.equalsIgnoreCase("SubPlayList") && pID.equalsIgnoreCase(PlaylistID)) {
                                             if (isDisclaimer == 1) {
                                                 BWSApplication.showToast("The audio shall add after playing the disclaimer", ctx);
-                                            }else{
+                                            } else {
                                                 callAddPlaylistFromPlaylist(PlaylistID, dialog, "0");
                                             }
                                         } else {
@@ -435,7 +440,7 @@
                     if (audioPlay && AudioFlag.equalsIgnoreCase("SubPlayList") && pID.equalsIgnoreCase(PlaylistID)) {
                         if (isDisclaimer == 1) {
                             BWSApplication.showToast("The audio shall add after playing the disclaimer", ctx);
-                        }else{
+                        } else {
                             final Dialog dialogx = new Dialog(ctx);
                             callAddPlaylistFromPlaylist(PlaylistID, dialogx, "1");
                         }
Index: app/src/main/res/layout/fragment_my_playlists.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        android:id=\"@+id/flContainer\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/white\">\r\n\r\n        <RelativeLayout\r\n            android:id=\"@+id/rlMainLayouts\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:clickable=\"false\"\r\n            android:enabled=\"false\">\r\n\r\n                <RelativeLayout\r\n                    android:id=\"@+id/rlMainLayout\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_marginBottom=\"@dimen/_18sdp\"\r\n                    android:clickable=\"false\"\r\n                    android:enabled=\"false\">\r\n\r\n                    <RelativeLayout\r\n                        android:id=\"@+id/llMainLayout\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"@dimen/_210sdp\"\r\n                        android:clickable=\"false\"\r\n                        android:enabled=\"false\">\r\n\r\n                        <ImageView\r\n                            android:id=\"@+id/ivBanner\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_centerInParent=\"true\"\r\n                            android:clickable=\"false\"\r\n                            android:enabled=\"false\" />\r\n\r\n                        <RelativeLayout\r\n                            android:id=\"@+id/rlLayout\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"@dimen/_56sdp\"\r\n                            android:clickable=\"false\"\r\n                            android:enabled=\"false\"\r\n                            android:background=\"@drawable/top_transparent_gradient\">\r\n\r\n                            <LinearLayout\r\n                                android:id=\"@+id/llBack\"\r\n                                android:layout_width=\"42dp\"\r\n                                android:layout_height=\"match_parent\"\r\n                                android:layout_centerVertical=\"true\"\r\n                                android:gravity=\"center\">\r\n\r\n                                <ImageView\r\n                                    android:layout_width=\"wrap_content\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:src=\"@drawable/ic_left_arrow_icon\"\r\n                                    app:tint=\"@color/white\" />\r\n\r\n                            </LinearLayout>\r\n\r\n                            <LinearLayout\r\n                                android:id=\"@+id/llOptions\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"match_parent\"\r\n                                android:layout_alignParentRight=\"true\"\r\n                                android:layout_marginRight=\"@dimen/_10sdp\"\r\n                                android:layout_toRightOf=\"@id/llBack\"\r\n                                android:gravity=\"end\">\r\n\r\n                                <LinearLayout\r\n                                    android:id=\"@+id/llReminder\"\r\n                                    android:layout_width=\"42dp\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:gravity=\"center\"\r\n                                    android:visibility=\"gone\">\r\n\r\n                                    <ImageView\r\n                                        android:id=\"@+id/ivReminder\"\r\n                                        android:layout_width=\"wrap_content\"\r\n                                        android:layout_height=\"wrap_content\"\r\n                                        android:src=\"@drawable/ic_clock_icon\"\r\n                                        app:tint=\"@color/white\" />\r\n\r\n                                </LinearLayout>\r\n\r\n                                <RelativeLayout\r\n                                    android:id=\"@+id/llDownloads\"\r\n                                    android:layout_width=\"42dp\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:gravity=\"center\">\r\n\r\n                                    <ProgressBar\r\n                                        android:id=\"@+id/pbProgress\"\r\n                                        style=\"?android:attr/progressBarStyleHorizontal\"\r\n                                        android:layout_width=\"match_parent\"\r\n                                        android:layout_height=\"match_parent\"\r\n                                        android:layout_centerInParent=\"true\"\r\n                                        android:background=\"@drawable/circular_shapem\"\r\n                                        android:indeterminate=\"false\"\r\n                                        android:indeterminateTint=\"@color/dark_yellow\"\r\n                                        android:max=\"100\"\r\n                                        android:progressDrawable=\"@drawable/circular_progress_barm\"\r\n                                        android:visibility=\"gone\" />\r\n\r\n                                    <ImageView\r\n                                        android:id=\"@+id/ivDownloads\"\r\n                                        android:layout_width=\"wrap_content\"\r\n                                        android:layout_height=\"wrap_content\"\r\n                                        android:layout_centerInParent=\"true\" />\r\n\r\n                                </RelativeLayout>\r\n\r\n                                <LinearLayout\r\n                                    android:id=\"@+id/llMore\"\r\n                                    android:layout_width=\"42dp\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:gravity=\"center\"\r\n                                    android:visibility=\"gone\">\r\n\r\n                                    <ImageView\r\n                                        android:id=\"@+id/ivMore\"\r\n                                        android:layout_width=\"wrap_content\"\r\n                                        android:layout_height=\"wrap_content\"\r\n                                        android:src=\"@drawable/ic_menu_icon\"\r\n                                        app:tint=\"@color/white\" />\r\n\r\n                                </LinearLayout>\r\n                            </LinearLayout>\r\n                        </RelativeLayout>\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_alignParentBottom=\"true\"\r\n                            android:background=\"@drawable/transparent_gradient\"\r\n                            android:orientation=\"vertical\"\r\n                            android:paddingBottom=\"@dimen/_16sdp\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvPlaylist\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                                android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                                android:gravity=\"start\"\r\n                                android:text=\"Playlist\"\r\n                                android:textColor=\"@color/white\"\r\n                                android:textSize=\"@dimen/_15sdp\"\r\n                                android:visibility=\"gone\" />\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvLibraryName\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                                android:layout_marginTop=\"@dimen/_6sdp\"\r\n                                android:ellipsize=\"end\"\r\n                                android:fontFamily=\"@font/montserrat_bold\"\r\n                                android:gravity=\"start\"\r\n                                android:maxLines=\"1\"\r\n                                android:textColor=\"@color/white\"\r\n                                android:textSize=\"@dimen/_22sdp\" />\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvLibraryDetail\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                                android:layout_marginTop=\"@dimen/_6sdp\"\r\n                                android:fontFamily=\"@font/montserrat_medium\"\r\n                                android:gravity=\"start\"\r\n                                android:textColor=\"@color/white\"\r\n                                android:textSize=\"@dimen/_15sdp\" />\r\n\r\n                        </LinearLayout>\r\n                    </RelativeLayout>\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ivPlaylistStatus\"\r\n                        android:layout_width=\"@dimen/_60sdp\"\r\n                        android:layout_height=\"@dimen/_60sdp\"\r\n                        android:layout_below=\"@id/llMainLayout\"\r\n                        android:layout_alignParentRight=\"true\"\r\n                        android:layout_marginTop=\"-33dp\"\r\n                        android:layout_marginRight=\"@dimen/_20sdp\"\r\n                        android:scaleType=\"fitXY\"\r\n                        android:src=\"@drawable/ic_blue_play_icon\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llAddAudio\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"310dp\"\r\n                        android:layout_below=\"@id/llMainLayout\"\r\n                        android:layout_marginTop=\"@dimen/_51sdp\"\r\n                        android:gravity=\"center\"\r\n                        android:orientation=\"vertical\"\r\n                        android:visibility=\"gone\">\r\n\r\n                        <TextView\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                            android:layout_marginTop=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_medium\"\r\n                            android:gravity=\"center\"\r\n                            android:text=\"Let's find some Audios for your playlist.\"\r\n                            android:textColor=\"@color/dark_blue_gray\"\r\n                            android:textSize=\"@dimen/_15sdp\" />\r\n\r\n                        <Button\r\n                            android:id=\"@+id/btnAddAudio\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginHorizontal=\"@dimen/_55sdp\"\r\n                            android:layout_marginTop=\"@dimen/_30sdp\"\r\n                            android:layout_marginBottom=\"@dimen/_25sdp\"\r\n                            android:background=\"@drawable/extra_round_cornor\"\r\n                            android:fontFamily=\"@font/montserrat_bold\"\r\n                            android:paddingVertical=\"@dimen/_2sdp\"\r\n                            android:text=\"@string/Add_Audio\"\r\n                            android:textColor=\"@color/white\" />\r\n\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llListing\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_below=\"@id/ivPlaylistStatus\"\r\n                        android:orientation=\"vertical\"\r\n                        android:visibility=\"visible\">\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"@dimen/_84sdp\">\r\n\r\n                            <RelativeLayout\r\n                                android:id=\"@+id/rlSearch\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"@dimen/_48sdp\"\r\n                                android:layout_gravity=\"center_vertical\"\r\n                                android:layout_marginLeft=\"@dimen/_16sdp\"\r\n                                android:layout_marginTop=\"@dimen/_15sdp\"\r\n                                android:layout_marginRight=\"@dimen/_16sdp\"\r\n                                android:layout_weight=\"2\"\r\n                                android:background=\"@drawable/rounded_extra_gray_corner\"\r\n                                android:visibility=\"visible\">\r\n\r\n                                <ImageView\r\n                                    android:id=\"@+id/button1\"\r\n                                    android:layout_width=\"@dimen/_16sdp\"\r\n                                    android:layout_height=\"@dimen/_16sdp\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:layout_marginLeft=\"@dimen/_14sdp\"\r\n                                    android:src=\"@drawable/ic_search_icon\"\r\n                                    app:tint=\"@color/dark_blue_gray\" />\r\n\r\n                                <TextView\r\n                                    android:id=\"@+id/tvSearch\"\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:layout_marginLeft=\"@dimen/_16sdp\"\r\n                                    android:layout_marginTop=\"@dimen/_20sdp\"\r\n                                    android:layout_marginRight=\"@dimen/_16sdp\"\r\n                                    android:layout_toRightOf=\"@id/button1\"\r\n                                    android:fontFamily=\"@font/montserrat_bold\"\r\n                                    android:gravity=\"start\"\r\n                                    android:text=\"\"\r\n                                    android:textColor=\"@color/light_gray\"\r\n                                    android:textSize=\"@dimen/_14sdp\"\r\n                                    android:visibility=\"gone\" />\r\n\r\n                                <androidx.appcompat.widget.SearchView\r\n                                    android:id=\"@+id/searchView\"\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:layout_toRightOf=\"@id/button1\"\r\n                                    android:iconifiedByDefault=\"false\"\r\n                                    android:singleLine=\"true\"\r\n                                    android:theme=\"@style/WallSearchView\"\r\n                                    android:visibility=\"gone\"\r\n                                    app:queryBackground=\"@null\"\r\n                                    app:queryHint=\"\"\r\n                                    app:searchHintIcon=\"@null\"\r\n                                    app:searchIcon=\"@null\" />\r\n                            </RelativeLayout>\r\n                        </LinearLayout>\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:orientation=\"vertical\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvTag\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginLeft=\"@dimen/_16sdp\"\r\n                                android:layout_marginTop=\"@dimen/_20sdp\"\r\n                                android:layout_marginRight=\"@dimen/_16sdp\"\r\n                                android:fontFamily=\"@font/montserrat_bold\"\r\n                                android:gravity=\"start\"\r\n                                android:text=\"@string/Audios_in_Playlist\"\r\n                                android:textColor=\"@color/black\"\r\n                                android:textSize=\"@dimen/_16sdp\"\r\n                                android:visibility=\"gone\" />\r\n\r\n                            <LinearLayout\r\n                                android:id=\"@+id/llSpace\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"match_parent\">\r\n\r\n                                <androidx.recyclerview.widget.RecyclerView\r\n                                    android:id=\"@+id/rvPlayLists\"\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:overScrollMode=\"never\"\r\n                                    android:paddingBottom=\"@dimen/_30sdp\" />\r\n                            </LinearLayout>\r\n\r\n                            <LinearLayout\r\n                                android:id=\"@+id/llError\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginHorizontal=\"@dimen/_22sdp\"\r\n                                android:layout_marginTop=\"@dimen/_20sdp\"\r\n                                android:gravity=\"center\"\r\n                                android:orientation=\"vertical\"\r\n                                android:visibility=\"gone\">\r\n\r\n                                <TextView\r\n                                    android:id=\"@+id/tvFound\"\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:fontFamily=\"@font/montserrat_regular\"\r\n                                    android:gravity=\"center\"\r\n                                    android:textColor=\"@color/dark_blue_gray\"\r\n                                    android:textSize=\"@dimen/_15sdp\" />\r\n\r\n                                <TextView\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:layout_marginTop=\"@dimen/_4sdp\"\r\n                                    android:fontFamily=\"@font/montserrat_regular\"\r\n                                    android:gravity=\"center\"\r\n                                    android:text=\"@string/no_data_found\"\r\n                                    android:textColor=\"@color/dark_blue_gray\"\r\n                                    android:textSize=\"@dimen/_11sdp\"\r\n                                    android:visibility=\"gone\" />\r\n\r\n                            </LinearLayout>\r\n                        </LinearLayout>\r\n\r\n                    </LinearLayout>\r\n                </RelativeLayout>\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/llExtra\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"@dimen/_70sdp\"\r\n                android:layout_alignParentBottom=\"true\"\r\n                android:background=\"@color/white\"\r\n                android:orientation=\"horizontal\"\r\n                android:visibility=\"gone\"></LinearLayout>\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:gravity=\"center\"\r\n                android:padding=\"@dimen/_60sdp\">\r\n\r\n                <ProgressBar\r\n                    android:id=\"@+id/progressBar\"\r\n                    android:layout_width=\"@dimen/_50sdp\"\r\n                    android:layout_height=\"@dimen/_50sdp\"\r\n                    android:indeterminateTint=\"@color/blue\"\r\n                    android:scaleType=\"centerInside\"\r\n                    android:visibility=\"gone\" />\r\n\r\n            </LinearLayout>\r\n\r\n            <FrameLayout\r\n                android:id=\"@+id/progressBarHolder\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:alpha=\"0.4\"\r\n                android:animateLayoutChanges=\"true\"\r\n                android:background=\"#C0000000\"\r\n                android:visibility=\"gone\" />\r\n        </RelativeLayout>\r\n    </FrameLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_my_playlists.xml	(revision 68a23b681f7a806e0e439891b3a1497a1a83d508)
+++ app/src/main/res/layout/fragment_my_playlists.xml	(date 1602747370445)
@@ -13,12 +13,14 @@
             android:layout_width="match_parent"
             android:layout_height="match_parent"
             android:clickable="false"
+            android:background="@color/white"
             android:enabled="false">
 
                 <RelativeLayout
                     android:id="@+id/rlMainLayout"
                     android:layout_width="match_parent"
                     android:layout_height="match_parent"
+                    android:background="@color/white"
                     android:layout_marginBottom="@dimen/_18sdp"
                     android:clickable="false"
                     android:enabled="false">
@@ -28,6 +30,7 @@
                         android:layout_width="match_parent"
                         android:layout_height="@dimen/_210sdp"
                         android:clickable="false"
+                        android:background="@color/white"
                         android:enabled="false">
 
                         <ImageView
@@ -140,6 +143,8 @@
                             android:layout_alignParentBottom="true"
                             android:background="@drawable/transparent_gradient"
                             android:orientation="vertical"
+                            android:clickable="false"
+                            android:enabled="false"
                             android:paddingBottom="@dimen/_16sdp">
 
                             <TextView
@@ -150,6 +155,8 @@
                                 android:fontFamily="@font/montserrat_semi_bold"
                                 android:gravity="start"
                                 android:text="Playlist"
+                                android:clickable="false"
+                                android:enabled="false"
                                 android:textColor="@color/white"
                                 android:textSize="@dimen/_15sdp"
                                 android:visibility="gone" />
@@ -164,6 +171,8 @@
                                 android:fontFamily="@font/montserrat_bold"
                                 android:gravity="start"
                                 android:maxLines="1"
+                                android:clickable="false"
+                                android:enabled="false"
                                 android:textColor="@color/white"
                                 android:textSize="@dimen/_22sdp" />
 
@@ -175,6 +184,8 @@
                                 android:layout_marginTop="@dimen/_6sdp"
                                 android:fontFamily="@font/montserrat_medium"
                                 android:gravity="start"
+                                android:clickable="false"
+                                android:enabled="false"
                                 android:textColor="@color/white"
                                 android:textSize="@dimen/_15sdp" />
 
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityAddAudioBinding;\r\nimport com.brainwellnessspa.databinding.DownloadsLayoutBinding;\r\nimport com.brainwellnessspa.databinding.GlobalSearchLayoutBinding;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\n\r\npublic class AddAudioActivity extends AppCompatActivity {\r\n    ActivityAddAudioBinding binding;\r\n    Context ctx;\r\n    String UserID, PlaylistID;\r\n    SerachListAdpater adpater;\r\n    EditText searchEditText;\r\n    Activity activity;\r\n    public static boolean addToSearch = false;\r\n    public static String MyPlaylistIds = \"\";\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_add_audio);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_add_audio);\r\n        ctx = AddAudioActivity.this;\r\n        activity = AddAudioActivity.this;\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            PlaylistID = getIntent().getStringExtra(CONSTANTS.PlaylistID);\r\n        }\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        closeButton.setOnClickListener(view -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.rvSerachList.setAdapter(null);\r\n            binding.rvSerachList.setVisibility(View.GONE);\r\n            binding.llError.setVisibility(View.GONE);\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                binding.searchView.clearFocus();\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n\r\n                } else {\r\n                    prepareSearchData(search, searchEditText);\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            callback();\r\n        });\r\n\r\n        RecyclerView.LayoutManager suggested = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvSuggestedList.setLayoutManager(suggested);\r\n        binding.rvSuggestedList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager serachList = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvSerachList.setLayoutManager(serachList);\r\n        binding.rvSerachList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager manager = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayList.setItemAnimator(new DefaultItemAnimator());\r\n        binding.rvPlayList.setLayoutManager(manager);\r\n        prepareSuggestedData();\r\n    }\r\n\r\n    private void callback() {\r\n        finish();\r\n    }\r\n\r\n    private void prepareSearchData(String search, EditText searchEditText) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SearchBothModel> listCall = APIClient.getClient().getSearchBoth(UserID, search);\r\n            listCall.enqueue(new Callback<SearchBothModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchBothModel> call, Response<SearchBothModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SearchBothModel listModel = response.body();\r\n                        if (!searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            if (listModel.getResponseData().size() == 0) {\r\n                                binding.rvSerachList.setVisibility(View.GONE);\r\n                                binding.llError.setVisibility(View.VISIBLE);\r\n                                binding.tvFound.setText(\"Couldn't find '\" + search + \"'. Try searching again\");\r\n                            } else {\r\n                                binding.llError.setVisibility(View.GONE);\r\n                                binding.rvSerachList.setVisibility(View.VISIBLE);\r\n                                adpater = new SerachListAdpater(listModel.getResponseData(), activity, binding.rvSerachList, UserID);\r\n                                binding.rvSerachList.setAdapter(adpater);\r\n                            }\r\n                        } else if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            binding.rvSerachList.setAdapter(null);\r\n                            binding.rvSerachList.setVisibility(View.GONE);\r\n                            binding.llError.setVisibility(View.GONE);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchBothModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void prepareSuggestedData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SuggestedModel> listCall = APIClient.getClient().getSuggestedLists(UserID);\r\n            listCall.enqueue(new Callback<SuggestedModel>() {\r\n                @Override\r\n                public void onResponse(Call<SuggestedModel> call, Response<SuggestedModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SuggestedModel listModel = response.body();\r\n                        binding.tvSuggestedAudios.setText(R.string.Recommended_Audios);\r\n                        binding.tvSAViewAll.setVisibility(View.VISIBLE);\r\n                        SuggestedAdpater suggestedAdpater = new SuggestedAdpater(listModel.getResponseData(), ctx);\r\n                        binding.rvSuggestedList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSAViewAll.setOnClickListener(view -> {\r\n                            Intent i = new Intent(ctx, ViewSuggestedActivity.class);\r\n                            i.putExtra(\"Name\", \"Recommended  Audios\");\r\n                            i.putExtra(\"PlaylistID\", PlaylistID);\r\n                            i.putParcelableArrayListExtra(\"AudiolistModel\", listModel.getResponseData());\r\n                            startActivity(i);\r\n                            finish();\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SuggestedModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SearchPlaylistModel> listCall = APIClient.getClient().getSuggestedPlayLists(UserID);\r\n            listCall.enqueue(new Callback<SearchPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchPlaylistModel> call, Response<SearchPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SearchPlaylistModel listModel = response.body();\r\n                        binding.tvSuggestedPlaylist.setText(R.string.Recommendeds_Playlist);\r\n                        binding.tvSPViewAll.setVisibility(View.VISIBLE);\r\n\r\n                        SuggestedPlayListsAdpater suggestedAdpater = new SuggestedPlayListsAdpater(listModel.getResponseData());\r\n                        binding.rvPlayList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSPViewAll.setOnClickListener(view -> {\r\n                            Intent i = new Intent(ctx, ViewSuggestedActivity.class);\r\n                            i.putExtra(\"Name\", \"Recommended Playlist\");\r\n                            i.putExtra(\"PlaylistID\", PlaylistID);\r\n                            i.putParcelableArrayListExtra(\"PlaylistModel\", listModel.getResponseData());\r\n                            startActivity(i);\r\n                            finish();\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callback();\r\n    }\r\n\r\n\r\n    public class SerachListAdpater extends RecyclerView.Adapter<SerachListAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        String UserID;\r\n        RecyclerView rvSerachList;\r\n        private List<SearchBothModel.ResponseData> modelList;\r\n\r\n        public SerachListAdpater(List<SearchBothModel.ResponseData> modelList, Context ctx,\r\n                                 RecyclerView rvSerachList, String UserID) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n            this.rvSerachList = rvSerachList;\r\n            this.UserID = UserID;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            GlobalSearchLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.global_search_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(modelList.get(position).getName());\r\n\r\n            if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            if (modelList.get(position).getIscategory().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.tvPart.setText(R.string.Audio);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                            holder.binding.ivLock.setVisibility(View.GONE);\r\n                            String AudioID = modelList.get(position).getID();\r\n                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                                }else{\r\n                                    callAddSearchAudio(AudioID, \"0\", \"\");\r\n                                }\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                                || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                            Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                            i.putExtra(\"ComeFrom\", \"Plan\");\r\n                            startActivity(i);\r\n                        }\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                            holder.binding.ivLock.setVisibility(View.GONE);\r\n                            String AudioID = modelList.get(position).getID();\r\n                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                                }else{\r\n                                    callAddSearchAudio(AudioID, \"0\", \"\");\r\n                                }\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                                || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                            BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                        }\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = modelList.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            }else{\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    }\r\n                });\r\n            } else if (modelList.get(position).getIscategory().equalsIgnoreCase(\"0\")) {\r\n                holder.binding.tvPart.setText(R.string.Playlist);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            }else{\r\n                                callAddSearchAudio(\"\", \"1\", modelList.get(position).getID());\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(\"\", \"1\", modelList.get(position).getID());\r\n                        }\r\n                    }\r\n                });\r\n\r\n               /* holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        comefrom_search = 1;\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putString(\"New\", \"0\");\r\n                        bundle.putString(\"PlaylistID\", modelList.get(position).getID());\r\n                        bundle.putString(\"PlaylistName\", modelList.get(position).getName());\r\n                        bundle.putString(\"MyDownloads\", \"0\");\r\n                        myPlaylistsFragment.setArguments(bundle);\r\n                        FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                        fragmentManager1.beginTransaction()\r\n                                .replace(R.id.flContainer, myPlaylistsFragment)\r\n                                .commit();\r\n                    }\r\n                });*/\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(modelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return modelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            GlobalSearchLayoutBinding binding;\r\n\r\n            public MyViewHolder(GlobalSearchLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callAddSearchAudio(String AudioID, String s, String FromPlaylistId) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<AddToPlaylist> listCall = APIClient.getClient().getAddSearchAudioFromPlaylist(UserID, AudioID, PlaylistID, FromPlaylistId);\r\n            listCall.enqueue(new Callback<AddToPlaylist>() {\r\n                @Override\r\n                public void onResponse(Call<AddToPlaylist> call, Response<AddToPlaylist> response) {\r\n                    try {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            AddToPlaylist listModels = response.body();\r\n                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                            Gson gsonx = new Gson();\r\n                            String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                            Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                            }.getType();\r\n                            ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();\r\n                            mainPlayModelListold = gsonx.fromJson(json, type);\r\n                            String id = mainPlayModelListold.get(pos).getID();\r\n                            ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();\r\n                            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();\r\n                            if (audioPlay) {\r\n                                if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                                    for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                        MainPlayModel mainPlayModel = new MainPlayModel();\r\n                                        mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                        mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                        mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                        mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                        mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                        mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                        mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                        mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                        mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                        mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                        mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                        mainPlayModelList.add(mainPlayModel);\r\n                                    }\r\n                                    for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                        SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                        mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                        mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                        mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                        mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                        mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                        mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                        mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                        mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                        mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                        mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                        mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                        playlistSongs.add(mainPlayModel);\r\n                                    }\r\n\r\n                                    for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                        if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {\r\n                                            pos = i;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                    SharedPreferences.Editor editor = sharedd.edit();\r\n                                    Gson gson = new Gson();\r\n                                    String jsonx = gson.toJson(mainPlayModelList);\r\n                                    String json1 = gson.toJson(playlistSongs);\r\n                                    editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                    editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                    editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                    editor.commit();\r\n                                }\r\n                            }\r\n                            BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                            if (s.equalsIgnoreCase(\"1\")) {\r\n                                finish();\r\n                            }\r\n                        }\r\n                    }catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AddToPlaylist> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(ctx.getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public class SuggestedAdpater extends RecyclerView.Adapter<SuggestedAdpater.MyViewHolder> {\r\n        private List<SuggestedModel.ResponseData> listModel;\r\n        Context ctx;\r\n\r\n        public SuggestedAdpater(List<SuggestedModel.ResponseData> listModel, Context ctx) {\r\n            this.listModel = listModel;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(listModel.get(position).getName());\r\n            holder.binding.tvTime.setText(listModel.get(position).getAudioDuration());\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(listModel.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n\r\n            if (listModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                    || listModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (listModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = listModel.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            }else{\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    }\r\n                } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = listModel.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            }else{\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    }\r\n                } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || listModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    String AudioID = listModel.get(position).getID();\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        }else{\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else {\r\n                        callAddSearchAudio(AudioID, \"0\", \"\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (10 > listModel.size()) {\r\n                return listModel.size();\r\n            } else {\r\n                return 10;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SuggestedPlayListsAdpater extends RecyclerView.Adapter<SuggestedPlayListsAdpater.MyViewHolder> {\r\n        private List<SearchPlaylistModel.ResponseData> PlaylistModel;\r\n\r\n        public SuggestedPlayListsAdpater(List<SearchPlaylistModel.ResponseData> PlaylistModel) {\r\n            this.PlaylistModel = PlaylistModel;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(PlaylistModel.get(position).getName());\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n\r\n            if (PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                    PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                            PlaylistModel.get(position).getTotalhour().equalsIgnoreCase(\"\")\r\n                            && PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                holder.binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n            } else {\r\n                if (PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() + \" Audio | \"\r\n                            + PlaylistModel.get(position).getTotalhour() + \"h 0m\");\r\n                } else {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() +\r\n                            \" Audios | \" + PlaylistModel.get(position).getTotalhour() + \"h \" + PlaylistModel.get(position).getTotalminute() + \"m\");\r\n                }\r\n            }\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(PlaylistModel.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n           /* holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\",\"Plan\");\r\n                        startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                   BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    addToSearch = true;\r\n                    MyPlaylistIds = PlaylistModel.get(position).getID();\r\n                    finish();\r\n                    *//*Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    Bundle bundle = new Bundle();\r\n                    bundle.putString(\"New\", \"0\");\r\n                    bundle.putString(\"PlaylistID\", PlaylistModel.get(position).getID());\r\n                    bundle.putString(\"PlaylistName\", PlaylistModel.get(position).getName());\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();*//*\r\n                }\r\n            });*/\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        }else{\r\n                            callAddSearchAudio(\"\", \"1\", PlaylistModel.get(position).getID());\r\n                        }\r\n                    } else {\r\n                        callAddSearchAudio(\"\", \"1\", PlaylistModel.get(position).getID());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (10 > PlaylistModel.size()) {\r\n                return PlaylistModel.size();\r\n            } else {\r\n                return 10;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java	(revision 68a23b681f7a806e0e439891b3a1497a1a83d508)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java	(date 1602744942613)
@@ -456,78 +456,83 @@
                         if (response.isSuccessful()) {
                             BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
                             AddToPlaylist listModels = response.body();
-                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
-                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
-                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
-                            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);
-                            Gson gsonx = new Gson();
-                            String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));
-                            Type type = new TypeToken<ArrayList<MainPlayModel>>() {
-                            }.getType();
-                            ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();
-                            mainPlayModelListold = gsonx.fromJson(json, type);
-                            String id = mainPlayModelListold.get(pos).getID();
-                            ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();
-                            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();
-                            if (audioPlay) {
-                                if (AudioFlag.equalsIgnoreCase("SubPlayList")) {
-                                    for (int i = 0; i < listModels.getResponseData().size(); i++) {
-                                        MainPlayModel mainPlayModel = new MainPlayModel();
-                                        mainPlayModel.setID(listModels.getResponseData().get(i).getID());
-                                        mainPlayModel.setName(listModels.getResponseData().get(i).getName());
-                                        mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());
-                                        mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());
-                                        mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());
-                                        mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());
-                                        mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());
-                                        mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());
-                                        mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());
-                                        mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());
-                                        mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());
-                                        mainPlayModelList.add(mainPlayModel);
-                                    }
-                                    for (int i = 0; i < listModels.getResponseData().size(); i++) {
-                                        SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();
-                                        mainPlayModel.setID(listModels.getResponseData().get(i).getID());
-                                        mainPlayModel.setName(listModels.getResponseData().get(i).getName());
-                                        mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());
-                                        mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());
-                                        mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());
-                                        mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());
-                                        mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());
-                                        mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());
-                                        mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());
-                                        mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());
-                                        mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());
-                                        playlistSongs.add(mainPlayModel);
-                                    }
+                            if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {
+                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);
+                                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
+                                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
+                                String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
+                                int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);
+                                Gson gsonx = new Gson();
+                                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));
+                                Type type = new TypeToken<ArrayList<MainPlayModel>>() {
+                                }.getType();
+                                ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();
+                                mainPlayModelListold = gsonx.fromJson(json, type);
+                                String id = mainPlayModelListold.get(pos).getID();
+                                ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();
+                                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();
+                                if (audioPlay) {
+                                    if (AudioFlag.equalsIgnoreCase("SubPlayList")) {
+                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {
+                                            MainPlayModel mainPlayModel = new MainPlayModel();
+                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());
+                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());
+                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());
+                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());
+                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());
+                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());
+                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());
+                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());
+                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());
+                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());
+                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());
+                                            mainPlayModelList.add(mainPlayModel);
+                                        }
+                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {
+                                            SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();
+                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());
+                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());
+                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());
+                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());
+                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());
+                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());
+                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());
+                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());
+                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());
+                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());
+                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());
+                                            playlistSongs.add(mainPlayModel);
+                                        }
 
-                                    for (int i = 0; i < mainPlayModelList.size(); i++) {
-                                        if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {
-                                            pos = i;
-                                            break;
-                                        }
-                                    }
-                                    SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
-                                    SharedPreferences.Editor editor = sharedd.edit();
-                                    Gson gson = new Gson();
-                                    String jsonx = gson.toJson(mainPlayModelList);
-                                    String json1 = gson.toJson(playlistSongs);
-                                    editor.putString(CONSTANTS.PREF_KEY_modelList, json1);
-                                    editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);
-                                    editor.putInt(CONSTANTS.PREF_KEY_position, pos);
-                                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
-                                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
-                                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);
-                                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, "myPlaylist");
-                                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, "SubPlayList");
-                                    editor.commit();
-                                }
-                            }
-                            BWSApplication.showToast(listModels.getResponseMessage(), ctx);
-                            if (s.equalsIgnoreCase("1")) {
-                                finish();
+                                        for (int i = 0; i < mainPlayModelList.size(); i++) {
+                                            if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {
+                                                pos = i;
+                                                break;
+                                            }
+                                        }
+                                        SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
+                                        SharedPreferences.Editor editor = sharedd.edit();
+                                        Gson gson = new Gson();
+                                        String jsonx = gson.toJson(mainPlayModelList);
+                                        String json1 = gson.toJson(playlistSongs);
+                                        editor.putString(CONSTANTS.PREF_KEY_modelList, json1);
+                                        editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);
+                                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);
+                                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
+                                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
+                                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);
+                                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, "myPlaylist");
+                                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, "SubPlayList");
+                                        editor.commit();
+                                    }
+                                }
+                                if (s.equalsIgnoreCase("1")) {
+                                    finish();
+                                }
+                            }else if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {
+                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);
                             }
+
                         }
                     }catch (Exception e) {
                         e.printStackTrace();
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/PlaylistFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Playlist;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.CreatePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.FragmentPlaylistBinding;\r\nimport com.brainwellnessspa.databinding.MainAudioLayoutBinding;\r\nimport com.brainwellnessspa.databinding.PlaylistCustomLayoutBinding;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.ComeNotification;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isRemoved;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.disclaimer;\r\nimport static com.brainwellnessspa.Utility.MyFirebaseMessagingService.Notification_PlaylistId;\r\nimport static com.brainwellnessspa.Utility.MyFirebaseMessagingService.Notification_PlaylistName;\r\n\r\npublic class PlaylistFragment extends Fragment {\r\n    FragmentPlaylistBinding binding;\r\n    String UserID, Check = \"\", AudioFlag;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    List<DownloadAudioDetails> playlistWiseAudioDetails = new ArrayList<>();\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_playlist, container, false);\r\n        View view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (getArguments() != null) {\r\n            Check = getArguments().getString(\"Check\");\r\n        }\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvMainPlayList.setLayoutManager(manager);\r\n        binding.rvMainPlayList.setItemAnimator(new DefaultItemAnimator());\r\n        if (ComeNotification == 1) {\r\n            Bundle bundle = new Bundle();\r\n            Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            bundle.putString(\"New\", \"0\");\r\n            bundle.putString(\"PlaylistID\", Notification_PlaylistId);\r\n            bundle.putString(\"PlaylistName\", Notification_PlaylistName);\r\n            bundle.putString(\"PlaylistImage\", \"\");\r\n            bundle.putString(\"MyDownloads\", \"0\");\r\n            myPlaylistsFragment.setArguments(bundle);\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, myPlaylistsFragment)\r\n                    .commit();\r\n            ComeNotification = 0;\r\n        }\r\n        prepareData();\r\n\r\n        return view;\r\n    }\r\n\r\n    private void callMyPlaylistsFragment(String s, String id, String name, String playlistImage, String MyDownloads) {\r\n        try {\r\n            comefrom_search = 0;\r\n//            bi\r\n            Bundle bundle = new Bundle();\r\n            Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            bundle.putString(\"New\", s);\r\n            bundle.putString(\"PlaylistID\", id);\r\n            bundle.putString(\"PlaylistName\", name);\r\n            bundle.putString(\"PlaylistImage\", playlistImage);\r\n            bundle.putString(\"MyDownloads\", MyDownloads);\r\n            myPlaylistsFragment.setArguments(bundle);\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, myPlaylistsFragment)\r\n                    .commit();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        prepareData();\r\n    }\r\n\r\n    private void prepareData() {\r\n        try {\r\n            if (IsLock.equalsIgnoreCase(\"1\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n            }\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(13, 6, 13, 200);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(13, 6, 13, 0);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<MainPlayListModel> listCall = APIClient.getClient().getMainPlayLists(UserID);\r\n            listCall.enqueue(new Callback<MainPlayListModel>() {\r\n                @Override\r\n                public void onResponse(Call<MainPlayListModel> call, Response<MainPlayListModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        MainPlayListModel listModel = response.body();\r\n                        binding.rlCreatePlaylist.setVisibility(View.VISIBLE);\r\n                        downloadPlaylistDetailsList = GetPlaylistDetail(listModel.getResponseData());\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<MainPlayListModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            ArrayList<MainPlayListModel.ResponseData> responseData = new ArrayList<>();\r\n            ArrayList<MainPlayListModel.ResponseData.Detail> details = new ArrayList<>();\r\n            MainPlayListModel.ResponseData listModel = new MainPlayListModel.ResponseData();\r\n            listModel.setGetLibraryID(\"2\");\r\n            listModel.setDetails(details);\r\n            listModel.setUserID(UserID);\r\n            listModel.setView(\"My Downloads\");\r\n            listModel.setIsLock(IsLock);\r\n            responseData.add(listModel);\r\n            downloadPlaylistDetailsList = GetPlaylistDetail(responseData);\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail(ArrayList<MainPlayListModel.ResponseData> responseData) {\r\n        ArrayList<MainPlayListModel.ResponseData.Detail> details = new ArrayList<>();\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllPlaylist();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    for (int i = 0; i < downloadPlaylistDetailsList.size(); i++) {\r\n                        MainPlayListModel.ResponseData.Detail detail = new MainPlayListModel.ResponseData.Detail();\r\n                        detail.setTotalAudio(downloadPlaylistDetailsList.get(i).getTotalAudio());\r\n                        detail.setTotalhour(downloadPlaylistDetailsList.get(i).getTotalhour());\r\n                        detail.setTotalminute(downloadPlaylistDetailsList.get(i).getTotalminute());\r\n                        detail.setPlaylistID(downloadPlaylistDetailsList.get(i).getPlaylistID());\r\n                        detail.setPlaylistDesc(downloadPlaylistDetailsList.get(i).getPlaylistDesc());\r\n                        detail.setMasterCategory(downloadPlaylistDetailsList.get(i).getPlaylistMastercat());\r\n                        detail.setSubCategory(downloadPlaylistDetailsList.get(i).getPlaylistSubcat());\r\n                        detail.setPlaylistName(downloadPlaylistDetailsList.get(i).getPlaylistName());\r\n                        detail.setPlaylistImage(downloadPlaylistDetailsList.get(i).getPlaylistImage());\r\n                        detail.setPlaylistId(downloadPlaylistDetailsList.get(i).getPlaylistID());\r\n                        details.add(detail);\r\n                    }\r\n                    for (int i = 0; i < responseData.size(); i++) {\r\n                        if (responseData.get(i).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                            responseData.get(i).setDetails(details);\r\n                        }\r\n                    }\r\n\r\n                    MainPlayListAdapter adapter = new MainPlayListAdapter(responseData, getActivity());\r\n                    binding.rvMainPlayList.setAdapter(adapter);\r\n                } else {\r\n                    MainPlayListAdapter adapter = new MainPlayListAdapter(responseData, getActivity());\r\n                    binding.rvMainPlayList.setAdapter(adapter);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    public class MainPlayListAdapter extends RecyclerView.Adapter<MainPlayListAdapter.MyViewHolder> {\r\n        Context ctx;\r\n        private ArrayList<MainPlayListModel.ResponseData> listModelList;\r\n\r\n        public MainPlayListAdapter(ArrayList<MainPlayListModel.ResponseData> listModelList, Context ctx) {\r\n            this.listModelList = listModelList;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MainAudioLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.main_audio_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            if (listModelList.get(position).getDetails() != null &&\r\n                    listModelList.get(position).getDetails().size() > 2) {\r\n                holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n            } else {\r\n                holder.binding.tvViewAll.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.tvViewAll.setOnClickListener(view -> {\r\n                Fragment viewAllPlaylistFragment = new ViewAllPlaylistFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, viewAllPlaylistFragment)\r\n                        .commit();\r\n                Bundle bundle = new Bundle();\r\n                if (listModelList.get(position).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                    bundle.putString(\"MyDownloads\", \"1\");\r\n                } else {\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                }\r\n                bundle.putString(\"GetLibraryID\", listModelList.get(position).getGetLibraryID());\r\n                bundle.putString(\"Name\", listModelList.get(position).getView());\r\n                viewAllPlaylistFragment.setArguments(bundle);\r\n            });\r\n            if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            binding.rlCreatePlaylist.setOnClickListener(view -> {\r\n                if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    binding.ivLock.setVisibility(View.GONE);\r\n                    final Dialog dialog = new Dialog(getActivity());\r\n                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                    dialog.setContentView(R.layout.create_palylist);\r\n                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                    final EditText edtCreate = dialog.findViewById(R.id.edtCreate);\r\n                    final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                    final Button btnSendCode = dialog.findViewById(R.id.btnSendCode);\r\n                    edtCreate.requestFocus();\r\n                    TextWatcher popupTextWatcher = new TextWatcher() {\r\n                        @Override\r\n                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                        }\r\n\r\n                        @Override\r\n                        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                            String number = edtCreate.getText().toString().trim();\r\n                            if (!number.isEmpty()) {\r\n                                btnSendCode.setEnabled(true);\r\n                                btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                            } else {\r\n                                btnSendCode.setEnabled(false);\r\n                                btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void afterTextChanged(Editable s) {\r\n                        }\r\n                    };\r\n\r\n\r\n                    edtCreate.addTextChangedListener(popupTextWatcher);\r\n                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                            dialog.dismiss();\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    });\r\n\r\n                    btnSendCode.setOnClickListener(view1 -> {\r\n                        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                            Call<CreatePlaylistModel> listCall = APIClient.getClient().getCreatePlaylist(UserID, edtCreate.getText().toString());\r\n                            listCall.enqueue(new Callback<CreatePlaylistModel>() {\r\n                                @Override\r\n                                public void onResponse(Call<CreatePlaylistModel> call, Response<CreatePlaylistModel> response) {\r\n                                    if (response.isSuccessful()) {\r\n                                        CreatePlaylistModel listModel = response.body();\r\n                                        if (listModel.getResponseData().getIscreated().equalsIgnoreCase(\"0\")) {\r\n                                            BWSApplication.showToast(listModel.getResponseMessage(), getActivity());\r\n                                        } else if (listModel.getResponseData().getIscreated().equalsIgnoreCase(\"1\") ||\r\n                                                listModel.getResponseData().getIscreated().equalsIgnoreCase(\"\")) {\r\n                                            callMyPlaylistsFragment(\"1\", listModel.getResponseData().getId(), listModel.getResponseData().getName(), \"\", \"0\");\r\n                                            dialog.dismiss();\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onFailure(Call<CreatePlaylistModel> call, Throwable t) {\r\n                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                                }\r\n                            });\r\n                        } else {\r\n                            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n                        }\r\n                    });\r\n\r\n                    tvCancel.setOnClickListener(v -> dialog.dismiss());\r\n                    dialog.show();\r\n                    dialog.setCancelable(false);\r\n                }\r\n            });\r\n\r\n            GridLayoutManager manager = new GridLayoutManager(getActivity(), 2);\r\n            holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n            holder.binding.rvMainAudio.setLayoutManager(manager);\r\n\r\n            if (listModelList.get(position).getDetails().size() == 0) {\r\n                holder.binding.llMainLayout.setVisibility(View.GONE);\r\n            } else {\r\n                holder.binding.llMainLayout.setVisibility(View.VISIBLE);\r\n                holder.binding.tvTitle.setText(listModelList.get(position).getView());\r\n                if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.your_created))) {\r\n                    PlaylistAdapter adapter1 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"0\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter1);\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                    PlaylistAdapter adapter2 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"1\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter2);\r\n\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.Recommended_Playlist))) {\r\n                    PlaylistAdapter adapter3 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"0\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter3);\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.populars))) {\r\n                    PlaylistAdapter adapter4 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"0\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter4);\r\n                }\r\n            }\r\n\r\n            if (!listModelList.get(position).getDetails().equals(\"\")) {\r\n\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MainAudioLayoutBinding binding;\r\n\r\n            public MyViewHolder(MainAudioLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getMedia(String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                player = 1;\r\n                if (isPrepare || isMediaStart || isPause) {\r\n                    stopMedia();\r\n                }\r\n                isPause = false;\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n                disclaimer = false;\r\n                isRemoved = false;\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(playlistWiseAudioDetails);\r\n                editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, playlistID);\r\n                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"Downloadlist\");\r\n                editor.commit();\r\n                try {\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public class PlaylistAdapter extends RecyclerView.Adapter<PlaylistAdapter.MyViewHolder> {\r\n        Context ctx;\r\n        String IsLock, MyDownloads;\r\n        private ArrayList<MainPlayListModel.ResponseData.Detail> listModelList;\r\n\r\n        public PlaylistAdapter(ArrayList<MainPlayListModel.ResponseData.Detail> listModelList, Context ctx, String IsLock, String MyDownloads) {\r\n            this.listModelList = listModelList;\r\n            this.ctx = ctx;\r\n            this.IsLock = IsLock;\r\n            this.MyDownloads = MyDownloads;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            PlaylistCustomLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.playlist_custom_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.44f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n\r\n            holder.binding.tvPlaylistName.setText(listModelList.get(position).getPlaylistName());\r\n            Glide.with(ctx).load(listModelList.get(position).getPlaylistImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.rlMainLayout.setOnClickListener(view -> {\r\n                if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                        getMedia(listModelList.get(position).getPlaylistID());\r\n                    } else {\r\n                        callMyPlaylistsFragment(\"0\", listModelList.get(position).getPlaylistID(), listModelList.get(position).getPlaylistName(),\r\n                                listModelList.get(position).getPlaylistImage(), MyDownloads);\r\n                    }\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (2 > listModelList.size()) {\r\n                return listModelList.size();\r\n            } else {\r\n                return 2;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            PlaylistCustomLayoutBinding binding;\r\n\r\n            public MyViewHolder(PlaylistCustomLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/PlaylistFragment.java	(revision 68a23b681f7a806e0e439891b3a1497a1a83d508)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/PlaylistFragment.java	(date 1602745971856)
@@ -105,14 +105,12 @@
             ComeNotification = 0;
         }
         prepareData();
-
         return view;
     }
 
     private void callMyPlaylistsFragment(String s, String id, String name, String playlistImage, String MyDownloads) {
         try {
             comefrom_search = 0;
-//            bi
             Bundle bundle = new Bundle();
             Fragment myPlaylistsFragment = new MyPlaylistsFragment();
             FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();
