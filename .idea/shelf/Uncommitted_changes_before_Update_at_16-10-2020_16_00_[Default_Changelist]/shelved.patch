Index: app/src/main/java/com/brainwellnessspa/LoginModule/Activities/OtpActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.LoginModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.SystemClock;\r\nimport android.provider.Settings;\r\nimport android.text.Editable;\r\nimport android.text.Html;\r\nimport android.text.TextUtils;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.EditText;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport com.google.firebase.iid.FirebaseInstanceId;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Activities.DashboardActivity;\r\nimport com.brainwellnessspa.LoginModule.Models.LoginModel;\r\nimport com.brainwellnessspa.LoginModule.Models.OtpModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.SplashModule.SplashScreenActivity;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityOtpBinding;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class OtpActivity extends AppCompatActivity {\r\n    ActivityOtpBinding binding;\r\n    String Name, Code, MobileNo;\r\n    private EditText[] editTexts;\r\n    boolean tvSendOTPbool = true;\r\n    Activity activity;\r\n    CountDownTimer countDownTimer;\r\n    private long mLastClickTime = 0;\r\n    public static int comeLogin = 0;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_otp);\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            MobileNo = getIntent().getStringExtra(CONSTANTS.MobileNo);\r\n            Name = getIntent().getStringExtra(CONSTANTS.Name);\r\n            Code = getIntent().getStringExtra(CONSTANTS.Code);\r\n        }\r\n\r\n        activity = OtpActivity.this;\r\n\r\n        binding.tvSendCodeText.setText(\"We sent an SMS with a 4-digit code to \" + Code + MobileNo);\r\n\r\n        binding.llEditNumber.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            comeLogin = 1;\r\n            Intent i = new Intent(OtpActivity.this, LoginActivity.class);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            i.putExtra(CONSTANTS.MobileNo, MobileNo);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        editTexts = new EditText[]{binding.edtOTP1, binding.edtOTP2, binding.edtOTP3, binding.edtOTP4};\r\n        binding.edtOTP1.addTextChangedListener(new PinTextWatcher(0));\r\n        binding.edtOTP2.addTextChangedListener(new PinTextWatcher(1));\r\n        binding.edtOTP3.addTextChangedListener(new PinTextWatcher(2));\r\n        binding.edtOTP4.addTextChangedListener(new PinTextWatcher(3));\r\n        binding.edtOTP1.setOnKeyListener(new PinOnKeyListener(0));\r\n        binding.edtOTP2.setOnKeyListener(new PinOnKeyListener(1));\r\n        binding.edtOTP3.setOnKeyListener(new PinOnKeyListener(2));\r\n        binding.edtOTP4.setOnKeyListener(new PinOnKeyListener(3));\r\n\r\n        binding.txtError.setText(\"\");\r\n        binding.txtError.setVisibility(View.GONE);\r\n\r\n        binding.btnSendCode.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                SharedPreferences sharedPreferences2 = getSharedPreferences(CONSTANTS.Token, Context.MODE_PRIVATE);\r\n                String fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n                if (TextUtils.isEmpty(fcm_id)) {\r\n                    FirebaseInstanceId.getInstance().getInstanceId().addOnSuccessListener(activity, instanceIdResult -> {\r\n                        String newToken = instanceIdResult.getToken();\r\n                        Log.e(\"newToken\", newToken);\r\n                        SharedPreferences.Editor editor = getSharedPreferences(CONSTANTS.Token, Context.MODE_PRIVATE).edit();\r\n                        editor.putString(CONSTANTS.Token, newToken); //Friend\r\n                        editor.apply();\r\n                        editor.commit();\r\n                    });\r\n                    fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n                }\r\n                if (BWSApplication.isNetworkConnected(OtpActivity.this)) {\r\n                    BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    Call<OtpModel> listCall = APIClient.getClient().getAuthOtps(\r\n                            binding.edtOTP1.getText().toString() + \"\" +\r\n                                    binding.edtOTP2.getText().toString() + \"\" +\r\n                                    binding.edtOTP3.getText().toString() + \"\" +\r\n                                    binding.edtOTP4.getText().toString(), fcm_id, CONSTANTS.FLAG_ONE,\r\n                            Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID), MobileNo, CONSTANTS.FLAG_ZERO);\r\n                    listCall.enqueue(new Callback<OtpModel>() {\r\n                        @Override\r\n                        public void onResponse(Call<OtpModel> call, Response<OtpModel> response) {\r\n                            if (response.isSuccessful()) {\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                OtpModel otpModel = response.body();\r\n                                if (otpModel.getResponseData().getError().equalsIgnoreCase(\"0\") ||\r\n                                        otpModel.getResponseData().getError().equalsIgnoreCase(\"\")) {\r\n                                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n                                    SharedPreferences.Editor editor = shared.edit();\r\n                                    editor.putString(CONSTANTS.PREF_KEY_UserID, otpModel.getResponseData().getUserID());\r\n                                    editor.putString(CONSTANTS.PREF_KEY_MobileNo, otpModel.getResponseData().getPhoneNumber());\r\n                                    editor.commit();\r\n                                    BWSApplication.showToast(otpModel.getResponseMessage(), OtpActivity.this);\r\n                                    Intent i = new Intent(OtpActivity.this, DashboardActivity.class);\r\n                                    startActivity(i);\r\n                                    finish();\r\n                                } else if (otpModel.getResponseData().getError().equalsIgnoreCase(\"1\")) {\r\n                                    binding.txtError.setText(otpModel.getResponseMessage());\r\n                                    binding.txtError.setVisibility(View.VISIBLE);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFailure(Call<OtpModel> call, Throwable t) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        }\r\n                    });\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), OtpActivity.this);\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n        binding.llResendSms.setOnClickListener(view -> prepareData());\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        comeLogin = 0;\r\n        Intent i = new Intent(OtpActivity.this, LoginActivity.class);\r\n        i.putExtra(\"Name\", Name);\r\n        i.putExtra(\"Code\", Code);\r\n        i.putExtra(CONSTANTS.MobileNo, MobileNo);\r\n        startActivity(i);\r\n        finish();\r\n    }\r\n\r\n    void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(OtpActivity.this)) {\r\n            tvSendOTPbool = false;\r\n            binding.txtError.setText(\"\");\r\n            binding.txtError.setVisibility(View.GONE);\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<LoginModel> listCall = APIClient.getClient().getLoginDatas(MobileNo, Code, CONSTANTS.FLAG_ONE, CONSTANTS.FLAG_ONE, SplashScreenActivity.key);\r\n            listCall.enqueue(new Callback<LoginModel>() {\r\n                @Override\r\n                public void onResponse(Call<LoginModel> call, Response<LoginModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        LoginModel loginModel = response.body();\r\n                        if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                            countDownTimer = new CountDownTimer(30000, 1000) {\r\n                                public void onTick(long millisUntilFinished) {\r\n                                    binding.llResendSms.setEnabled(false);\r\n                                    binding.tvResendOTP.setText(Html.fromHtml(millisUntilFinished / 1000 + \"<font color=\\\"#999999\\\">\" + \" Resent SMS\" + \"</font>\"));\r\n                                }\r\n\r\n                                public void onFinish() {\r\n                                    binding.llResendSms.setEnabled(true);\r\n                                    binding.tvResendOTP.setText(getString(R.string.resent_sms));\r\n                                    binding.tvResendOTP.setTextColor(getResources().getColor(R.color.white));\r\n                                    binding.tvResendOTP.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\r\n                                    binding.tvResendOTP.getPaint().setMaskFilter(null);\r\n                                }\r\n                            }.start();\r\n                            binding.edtOTP1.requestFocus();\r\n                            binding.edtOTP1.setText(\"\");\r\n                            binding.edtOTP2.setText(\"\");\r\n                            binding.edtOTP3.setText(\"\");\r\n                            binding.edtOTP4.setText(\"\");\r\n                            tvSendOTPbool = true;\r\n                            BWSApplication.showToast(loginModel.getResponseMessage(), OtpActivity.this);\r\n                        } else {\r\n                            binding.txtError.setVisibility(View.VISIBLE);\r\n                            binding.txtError.setText(loginModel.getResponseMessage());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<LoginModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    BWSApplication.showToast(t.getMessage(), OtpActivity.this);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), OtpActivity.this);\r\n        }\r\n    }\r\n\r\n    public class PinTextWatcher implements TextWatcher {\r\n        private int currentIndex;\r\n        private boolean isFirst = false, isLast = false;\r\n        private String newTypedString = \"\";\r\n\r\n        PinTextWatcher(int currentIndex) {\r\n            this.currentIndex = currentIndex;\r\n\r\n            if (currentIndex == 0)\r\n                this.isFirst = true;\r\n            else if (currentIndex == editTexts.length - 1)\r\n                this.isLast = true;\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            newTypedString = s.subSequence(start, start + count).toString().trim();\r\n            String OTP1 = binding.edtOTP1.getText().toString().trim();\r\n            String OTP2 = binding.edtOTP2.getText().toString().trim();\r\n            String OTP3 = binding.edtOTP3.getText().toString().trim();\r\n            String OTP4 = binding.edtOTP4.getText().toString().trim();\r\n            if (!OTP1.isEmpty() && !OTP2.isEmpty() && !OTP3.isEmpty() && !OTP4.isEmpty()) {\r\n                binding.btnSendCode.setEnabled(true);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnSendCode.setEnabled(false);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            String text = newTypedString;\r\n            Log.e(\"OTP VERIFICATION\", \"\" + text);\r\n\r\n            /* Detect paste event and set first char */\r\n            if (text.length() > 1)\r\n                text = String.valueOf(text.charAt(0)); // TODO: We can fill out other EditTexts\r\n            editTexts[currentIndex].removeTextChangedListener(this);\r\n            editTexts[currentIndex].setText(text);\r\n            editTexts[currentIndex].setSelection(text.length());\r\n            editTexts[currentIndex].addTextChangedListener(this);\r\n\r\n            if (text.length() == 1) {\r\n                moveToNext();\r\n            } else if (text.length() == 0) {\r\n                if (!tvSendOTPbool) {\r\n                    editTexts[0].requestFocus();\r\n                } else {\r\n                    moveToPrevious();\r\n                }\r\n            }\r\n        }\r\n\r\n        private void moveToNext() {\r\n            if (!isLast)\r\n                editTexts[currentIndex + 1].requestFocus();\r\n\r\n            if (isAllEditTextsFilled() && isLast) { // isLast is optional\r\n                editTexts[currentIndex].clearFocus();\r\n                hideKeyboard();\r\n            }\r\n        }\r\n\r\n        private void moveToPrevious() {\r\n            if (!isFirst)\r\n                editTexts[currentIndex - 1].requestFocus();\r\n        }\r\n\r\n        private boolean isAllEditTextsFilled() {\r\n            for (EditText editText : editTexts)\r\n                if (editText.getText().toString().trim().length() == 0)\r\n                    return false;\r\n            return true;\r\n        }\r\n\r\n        private void hideKeyboard() {\r\n            if (getCurrentFocus() != null) {\r\n                InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);\r\n                inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PinOnKeyListener implements View.OnKeyListener {\r\n        private int currentIndex;\r\n\r\n        PinOnKeyListener(int currentIndex) {\r\n            this.currentIndex = currentIndex;\r\n        }\r\n\r\n        @Override\r\n        public boolean onKey(View v, int keyCode, KeyEvent event) {\r\n            if (keyCode == KeyEvent.KEYCODE_DEL && event.getAction() == KeyEvent.ACTION_DOWN) {\r\n                if (editTexts[currentIndex].getText().toString().isEmpty() && currentIndex != 0)\r\n                    editTexts[currentIndex - 1].requestFocus();\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LoginModule/Activities/OtpActivity.java	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ app/src/main/java/com/brainwellnessspa/LoginModule/Activities/OtpActivity.java	(date 1602837070849)
@@ -1,8 +1,10 @@
 package com.brainwellnessspa.LoginModule.Activities;
 
 import android.app.Activity;
+import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.os.CountDownTimer;
@@ -18,9 +20,17 @@
 import android.view.inputmethod.InputMethodManager;
 import android.widget.EditText;
 
+import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.databinding.DataBindingUtil;
+import androidx.localbroadcastmanager.content.LocalBroadcastManager;
 
+import com.brainwellnessspa.Utility.SmsReceiver;
+import com.facebook.appevents.AppEventsLogger;
+import com.google.android.gms.auth.api.phone.SmsRetriever;
+import com.google.android.gms.auth.api.phone.SmsRetrieverClient;
+import com.google.android.gms.tasks.OnFailureListener;
+import com.google.android.gms.tasks.Task;
 import com.google.firebase.iid.FirebaseInstanceId;
 import com.brainwellnessspa.BWSApplication;
 import com.brainwellnessspa.DashboardModule.Activities.DashboardActivity;
@@ -36,8 +46,10 @@
 import retrofit2.Callback;
 import retrofit2.Response;
 
-public class OtpActivity extends AppCompatActivity {
+public class OtpActivity extends AppCompatActivity implements
+        SmsReceiver.OTPReceiveListener {
     ActivityOtpBinding binding;
+    private SmsReceiver smsReceiver;
     String Name, Code, MobileNo;
     private EditText[] editTexts;
     boolean tvSendOTPbool = true;
@@ -45,6 +57,8 @@
     CountDownTimer countDownTimer;
     private long mLastClickTime = 0;
     public static int comeLogin = 0;
+    private BroadcastReceiver receiver;
+    AppEventsLogger logger;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -58,7 +72,7 @@
         }
 
         activity = OtpActivity.this;
-
+        logger = AppEventsLogger.newLogger(this);
         binding.tvSendCodeText.setText("We sent an SMS with a 4-digit code to " + Code + MobileNo);
 
         binding.llEditNumber.setOnClickListener(view -> {
@@ -162,6 +176,75 @@
         finish();
     }
 
+    private void startSMSListener() {
+        try {
+            smsReceiver = new SmsReceiver();
+            smsReceiver.setOTPListener(this);
+
+            IntentFilter intentFilter = new IntentFilter();
+            intentFilter.addAction(SmsRetriever.SMS_RETRIEVED_ACTION);
+            this.registerReceiver(smsReceiver, intentFilter);
+
+            SmsRetrieverClient client = SmsRetriever.getClient(this);
+
+            Task<Void> task = client.startSmsRetriever();
+            task.addOnSuccessListener(aVoid -> {
+                // API successfully started
+            });
+
+            task.addOnFailureListener(e -> {
+                /* Fail to start API */
+            });
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void onOTPReceived(String otp) {
+        String[] splited = new String[0];
+        if (otp.startsWith("[#] Your OTP is")) {
+            splited = otp.split(" ");
+        } else if (otp.startsWith("(#) Your OTP is")) {
+            splited = otp.split(" ");
+        } else {
+            splited = otp.split("is ");
+        }
+        String message = splited[7];
+        binding.edtOTP1.setText(String.valueOf(message.charAt(0)));
+        binding.edtOTP2.setText(String.valueOf(message.charAt(1)));
+        binding.edtOTP3.setText(String.valueOf(message.charAt(2)));
+        binding.edtOTP4.setText(String.valueOf(message.charAt(3)));
+
+        if (smsReceiver != null) {
+            unregisterReceiver(smsReceiver);
+            smsReceiver = null;
+        }
+    }
+
+    @Override
+    public void onOTPTimeOut() {
+//        showToast("OTP Time out");
+
+    }
+
+    @Override
+    public void onOTPReceivedError(String error) {
+//        showToast(error);
+    }
+
+    @Override
+    public void onResume() {
+        LocalBroadcastManager.getInstance(this).registerReceiver(receiver, new IntentFilter("otp"));
+        super.onResume();
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        LocalBroadcastManager.getInstance(this).unregisterReceiver(receiver);
+    }
+
     void prepareData() {
         if (BWSApplication.isNetworkConnected(OtpActivity.this)) {
             tvSendOTPbool = false;
Index: app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutOtpActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.MembershipModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.SystemClock;\r\nimport android.provider.Settings;\r\nimport android.text.Editable;\r\nimport android.text.Html;\r\nimport android.text.TextUtils;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.EditText;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.firebase.iid.FirebaseInstanceId;\r\nimport com.google.firebase.iid.InstanceIdResult;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.LoginModule.Models.OtpModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.MembershipPlanListModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.SignUpModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.SplashModule.SplashScreenActivity;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityCheckoutOtpBinding;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class CheckoutOtpActivity extends AppCompatActivity {\r\n    String Name, Code, MobileNo;\r\n    private EditText[] editTexts;\r\n    boolean tvSendOTPbool = true;\r\n    Activity activity;\r\n    Context ctx;\r\n    String TrialPeriod;\r\n    private ArrayList<MembershipPlanListModel.Plan> listModelList;\r\n    int position;\r\n    ActivityCheckoutOtpBinding binding;\r\n    CountDownTimer countDownTimer;\r\n    private long mLastClickTime = 0;\r\n    public static int comeRegister = 0;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_checkout_otp);\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            MobileNo = getIntent().getStringExtra(CONSTANTS.MobileNo);\r\n            Name = getIntent().getStringExtra(CONSTANTS.Name);\r\n            Code = getIntent().getStringExtra(CONSTANTS.Code);\r\n//            TrialPeriod = getIntent().getStringExtra(\"TrialPeriod\");\r\n//            listModelList = getIntent().getParcelableArrayListExtra(\"PlanData\");\r\n//            position = getIntent().getIntExtra(\"position\", 0);\r\n        }\r\n        activity = CheckoutOtpActivity.this;\r\n        ctx = CheckoutOtpActivity.this;\r\n        binding.tvSendCodeText.setText(\"We sent an SMS with a 4-digit code to \" + Code + MobileNo);\r\n        editTexts = new EditText[]{binding.edtOTP1, binding.edtOTP2, binding.edtOTP3, binding.edtOTP4};\r\n        binding.edtOTP1.addTextChangedListener(new PinTextWatcher(0));\r\n        binding.edtOTP2.addTextChangedListener(new PinTextWatcher(1));\r\n        binding.edtOTP3.addTextChangedListener(new PinTextWatcher(2));\r\n        binding.edtOTP4.addTextChangedListener(new PinTextWatcher(3));\r\n        binding.edtOTP1.setOnKeyListener(new PinOnKeyListener(0));\r\n        binding.edtOTP2.setOnKeyListener(new PinOnKeyListener(1));\r\n        binding.edtOTP3.setOnKeyListener(new PinOnKeyListener(2));\r\n        binding.edtOTP4.setOnKeyListener(new PinOnKeyListener(3));\r\n\r\n        binding.txtError.setText(\"\");\r\n        binding.txtError.setVisibility(View.GONE);\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            comeRegister = 0;\r\n            Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n            i.putExtra(\"MobileNo\", MobileNo);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.llEditNumber.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            comeRegister = 1;\r\n            Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n            i.putExtra(\"MobileNo\", MobileNo);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.btnSendCode.setOnClickListener(view -> {\r\n            SharedPreferences sharedPreferences2 = getSharedPreferences(CONSTANTS.Token, MODE_PRIVATE);\r\n            String fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n            if (TextUtils.isEmpty(fcm_id)) {\r\n                FirebaseInstanceId.getInstance().getInstanceId().addOnSuccessListener(activity, new OnSuccessListener<InstanceIdResult>() {\r\n                    @Override\r\n                    public void onSuccess(InstanceIdResult instanceIdResult) {\r\n                        String newToken = instanceIdResult.getToken();\r\n                        Log.e(\"newToken\", newToken);\r\n                        SharedPreferences.Editor editor = getSharedPreferences(CONSTANTS.Token, MODE_PRIVATE).edit();\r\n                        editor.putString(CONSTANTS.Token, newToken); //Friend\r\n                        editor.apply();\r\n                        editor.commit();\r\n                    }\r\n                });\r\n                fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n            }\r\n            if (BWSApplication.isNetworkConnected(CheckoutOtpActivity.this)) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                String deviceid = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);\r\n                Call<OtpModel> listCall = APIClient.getClient().getAuthOtps1(\r\n                        binding.edtOTP1.getText().toString() + \"\" +\r\n                                binding.edtOTP2.getText().toString() + \"\" +\r\n                                binding.edtOTP3.getText().toString() + \"\" +\r\n                                binding.edtOTP4.getText().toString(), fcm_id, CONSTANTS.FLAG_ONE, deviceid\r\n                        , MobileNo, CONSTANTS.FLAG_ONE);\r\n                listCall.enqueue(new Callback<OtpModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<OtpModel> call, Response<OtpModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            OtpModel otpModel = response.body();\r\n                            if (otpModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                Intent i = new Intent(CheckoutOtpActivity.this, CheckoutPaymentActivity.class);\r\n                                i.putExtra(\"MobileNo\", MobileNo);\r\n                                startActivity(i);\r\n                                finish();\r\n                            } else if (otpModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                binding.txtError.setText(otpModel.getResponseMessage());\r\n                                binding.txtError.setVisibility(View.VISIBLE);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<OtpModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n\r\n                    }\r\n                });\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getApplicationContext());\r\n            }\r\n        });\r\n\r\n        binding.llResendSms.setOnClickListener(view -> prepareData());\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        comeRegister = 0;\r\n        Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n        i.putExtra(\"MobileNo\", MobileNo);\r\n        i.putExtra(\"Name\", Name);\r\n        i.putExtra(\"Code\", Code);\r\n        startActivity(i);\r\n        finish();\r\n    }\r\n\r\n    void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            tvSendOTPbool = false;\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SignUpModel> listCall = APIClient.getClient().getSignUpDatas(MobileNo, Code, CONSTANTS.FLAG_ONE, CONSTANTS.FLAG_ONE, SplashScreenActivity.key);\r\n            listCall.enqueue(new Callback<SignUpModel>() {\r\n                @Override\r\n                public void onResponse(Call<SignUpModel> call, Response<SignUpModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SignUpModel loginModel = response.body();\r\n                        if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                            countDownTimer = new CountDownTimer(30000, 1000) {\r\n                                public void onTick(long millisUntilFinished) {\r\n                                    binding.llResendSms.setEnabled(false);\r\n                                    binding.tvResendOTP.setText(Html.fromHtml(millisUntilFinished / 1000 + \"<font color=\\\"#999999\\\">\" + \" Resent SMS\" + \"</font>\"));\r\n                                }\r\n\r\n                                public void onFinish() {\r\n                                    binding.llResendSms.setEnabled(true);\r\n                                    binding.tvResendOTP.setText(getString(R.string.resent_sms));\r\n                                    binding.tvResendOTP.setTextColor(getResources().getColor(R.color.dark_blue_gray));\r\n                                    binding.tvResendOTP.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\r\n                                    binding.tvResendOTP.getPaint().setMaskFilter(null);\r\n                                }\r\n                            }.start();\r\n                            binding.edtOTP1.requestFocus();\r\n                            binding.edtOTP1.setText(\"\");\r\n                            binding.edtOTP2.setText(\"\");\r\n                            binding.edtOTP3.setText(\"\");\r\n                            binding.edtOTP4.setText(\"\");\r\n                            tvSendOTPbool = true;\r\n                            BWSApplication.showToast(loginModel.getResponseMessage(), getApplicationContext());\r\n                        } else if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                            binding.txtError.setVisibility(View.VISIBLE);\r\n                            binding.txtError.setText(loginModel.getResponseMessage());\r\n                        } else {\r\n                            binding.txtError.setVisibility(View.VISIBLE);\r\n                            binding.txtError.setText(loginModel.getResponseMessage());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SignUpModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    BWSApplication.showToast(t.getMessage(), getApplicationContext());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getApplicationContext());\r\n        }\r\n    }\r\n\r\n    public class PinTextWatcher implements TextWatcher {\r\n        private int currentIndex;\r\n        private boolean isFirst = false, isLast = false;\r\n        private String newTypedString = \"\";\r\n\r\n        PinTextWatcher(int currentIndex) {\r\n            this.currentIndex = currentIndex;\r\n\r\n            if (currentIndex == 0)\r\n                this.isFirst = true;\r\n            else if (currentIndex == editTexts.length - 1)\r\n                this.isLast = true;\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            newTypedString = s.subSequence(start, start + count).toString().trim();\r\n            String OTP1 = binding.edtOTP1.getText().toString().trim();\r\n            String OTP2 = binding.edtOTP2.getText().toString().trim();\r\n            String OTP3 = binding.edtOTP3.getText().toString().trim();\r\n            String OTP4 = binding.edtOTP4.getText().toString().trim();\r\n            if (!OTP1.isEmpty() && !OTP2.isEmpty() && !OTP3.isEmpty() && !OTP4.isEmpty()) {\r\n                binding.btnSendCode.setEnabled(true);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnSendCode.setEnabled(false);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            String text = newTypedString;\r\n            Log.e(\"OTP VERIFICATION\", \"\" + text);\r\n\r\n            /* Detect paste event and set first char */\r\n            if (text.length() > 1)\r\n                text = String.valueOf(text.charAt(0)); // TODO: We can fill out other EditTexts\r\n            editTexts[currentIndex].removeTextChangedListener(this);\r\n            editTexts[currentIndex].setText(text);\r\n            editTexts[currentIndex].setSelection(text.length());\r\n            editTexts[currentIndex].addTextChangedListener(this);\r\n\r\n            if (text.length() == 1) {\r\n                moveToNext();\r\n            } else if (text.length() == 0) {\r\n                if (!tvSendOTPbool) {\r\n                    editTexts[0].requestFocus();\r\n                } else {\r\n                    moveToPrevious();\r\n                }\r\n            }\r\n        }\r\n\r\n        private void moveToNext() {\r\n            if (!isLast)\r\n                editTexts[currentIndex + 1].requestFocus();\r\n\r\n            if (isAllEditTextsFilled() && isLast) { // isLast is optional\r\n                editTexts[currentIndex].clearFocus();\r\n                hideKeyboard();\r\n            }\r\n        }\r\n\r\n        private void moveToPrevious() {\r\n            if (!isFirst)\r\n                editTexts[currentIndex - 1].requestFocus();\r\n        }\r\n\r\n        private boolean isAllEditTextsFilled() {\r\n            for (EditText editText : editTexts)\r\n                if (editText.getText().toString().trim().length() == 0)\r\n                    return false;\r\n            return true;\r\n        }\r\n\r\n        private void hideKeyboard() {\r\n            if (getCurrentFocus() != null) {\r\n                InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);\r\n                inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PinOnKeyListener implements View.OnKeyListener {\r\n        private int currentIndex;\r\n\r\n        PinOnKeyListener(int currentIndex) {\r\n            this.currentIndex = currentIndex;\r\n        }\r\n\r\n        @Override\r\n        public boolean onKey(View v, int keyCode, KeyEvent event) {\r\n            if (keyCode == KeyEvent.KEYCODE_DEL && event.getAction() == KeyEvent.ACTION_DOWN) {\r\n                if (editTexts[currentIndex].getText().toString().isEmpty() && currentIndex != 0)\r\n                    editTexts[currentIndex - 1].requestFocus();\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutOtpActivity.java	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutOtpActivity.java	(date 1602837070819)
@@ -1,8 +1,10 @@
 package com.brainwellnessspa.MembershipModule.Activities;
 
 import android.app.Activity;
+import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.os.CountDownTimer;
@@ -20,8 +22,14 @@
 
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.databinding.DataBindingUtil;
+import androidx.localbroadcastmanager.content.LocalBroadcastManager;
 
+import com.brainwellnessspa.Utility.SmsReceiver;
+import com.facebook.appevents.AppEventsLogger;
+import com.google.android.gms.auth.api.phone.SmsRetriever;
+import com.google.android.gms.auth.api.phone.SmsRetrieverClient;
 import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.android.gms.tasks.Task;
 import com.google.firebase.iid.FirebaseInstanceId;
 import com.google.firebase.iid.InstanceIdResult;
 import com.brainwellnessspa.BWSApplication;
@@ -40,7 +48,8 @@
 import retrofit2.Callback;
 import retrofit2.Response;
 
-public class CheckoutOtpActivity extends AppCompatActivity {
+public class CheckoutOtpActivity extends AppCompatActivity implements
+        SmsReceiver.OTPReceiveListener {
     String Name, Code, MobileNo;
     private EditText[] editTexts;
     boolean tvSendOTPbool = true;
@@ -53,6 +62,9 @@
     CountDownTimer countDownTimer;
     private long mLastClickTime = 0;
     public static int comeRegister = 0;
+    private SmsReceiver smsReceiver;
+    private BroadcastReceiver receiver;
+    AppEventsLogger logger;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -69,6 +81,7 @@
         }
         activity = CheckoutOtpActivity.this;
         ctx = CheckoutOtpActivity.this;
+        logger = AppEventsLogger.newLogger(this);
         binding.tvSendCodeText.setText("We sent an SMS with a 4-digit code to " + Code + MobileNo);
         editTexts = new EditText[]{binding.edtOTP1, binding.edtOTP2, binding.edtOTP3, binding.edtOTP4};
         binding.edtOTP1.addTextChangedListener(new PinTextWatcher(0));
@@ -182,6 +195,75 @@
         finish();
     }
 
+    private void startSMSListener() {
+        try {
+            smsReceiver = new SmsReceiver();
+            smsReceiver.setOTPListener(this);
+
+            IntentFilter intentFilter = new IntentFilter();
+            intentFilter.addAction(SmsRetriever.SMS_RETRIEVED_ACTION);
+            this.registerReceiver(smsReceiver, intentFilter);
+
+            SmsRetrieverClient client = SmsRetriever.getClient(this);
+
+            Task<Void> task = client.startSmsRetriever();
+            task.addOnSuccessListener(aVoid -> {
+                // API successfully started
+            });
+
+            task.addOnFailureListener(e -> {
+                /* Fail to start API */
+            });
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void onOTPReceived(String otp) {
+        String[] splited = new String[0];
+        if (otp.startsWith("[#] Your OTP is")) {
+            splited = otp.split(" ");
+        } else if (otp.startsWith("(#) Your OTP is")) {
+            splited = otp.split(" ");
+        } else {
+            splited = otp.split("is ");
+        }
+        String message = splited[7];
+        binding.edtOTP1.setText(String.valueOf(message.charAt(0)));
+        binding.edtOTP2.setText(String.valueOf(message.charAt(1)));
+        binding.edtOTP3.setText(String.valueOf(message.charAt(2)));
+        binding.edtOTP4.setText(String.valueOf(message.charAt(3)));
+
+        if (smsReceiver != null) {
+            unregisterReceiver(smsReceiver);
+            smsReceiver = null;
+        }
+    }
+
+    @Override
+    public void onOTPTimeOut() {
+//        showToast("OTP Time out");
+
+    }
+
+    @Override
+    public void onOTPReceivedError(String error) {
+//        showToast(error);
+    }
+
+    @Override
+    public void onResume() {
+        LocalBroadcastManager.getInstance(this).registerReceiver(receiver, new IntentFilter("otp"));
+        super.onResume();
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        LocalBroadcastManager.getInstance(this).unregisterReceiver(receiver);
+    }
+
     void prepareData() {
         if (BWSApplication.isNetworkConnected(ctx)) {
             tvSendOTPbool = false;
Index: app/src/main/java/com/brainwellnessspa/BillingOrderModule/Activities/CancelMembershipActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.BillingOrderModule.Activities;\r\n\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport com.google.android.youtube.player.YouTubeBaseActivity;\r\nimport com.google.android.youtube.player.YouTubeInitializationResult;\r\nimport com.google.android.youtube.player.YouTubePlayer;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CancelPlanModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.AppUtils;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityCancelMembershipBinding;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\n\r\npublic class CancelMembershipActivity extends YouTubeBaseActivity implements\r\n        YouTubePlayer.OnInitializedListener {\r\n    ActivityCancelMembershipBinding binding;\r\n    Context ctx;\r\n    String UserID, CancelId = \"\";\r\n    Activity activity;\r\n    private static final int RECOVERY_DIALOG_REQUEST = 1;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_cancel_membership);\r\n        ctx = CancelMembershipActivity.this;\r\n        activity = CancelMembershipActivity.this;\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        binding.llBack.setOnClickListener(view -> {\r\n            finish();\r\n//            resumeMedia();\r\n//            isPause = false;\r\n        });\r\n\r\n        if (isMediaStart) {\r\n            pauseMedia();\r\n        } else {\r\n        }\r\n\r\n        binding.youtubeView.initialize(\"AIzaSyD43ZM6bESb_pdSPzgcuCzKy8yD_45mlT8\", this);\r\n\r\n        binding.cbOne.setOnClickListener(view -> {\r\n            binding.cbOne.setChecked(true);\r\n            binding.cbTwo.setChecked(false);\r\n            binding.cbThree.setChecked(false);\r\n            binding.cbFour.setChecked(false);\r\n            CancelId = \"1\";\r\n            binding.edtCancelBox.setVisibility(View.GONE);\r\n            binding.edtCancelBox.setText(\"\");\r\n        });\r\n\r\n        binding.cbTwo.setOnClickListener(view -> {\r\n            binding.cbOne.setChecked(false);\r\n            binding.cbTwo.setChecked(true);\r\n            binding.cbThree.setChecked(false);\r\n            binding.cbFour.setChecked(false);\r\n            CancelId = \"2\";\r\n            binding.edtCancelBox.setVisibility(View.GONE);\r\n            binding.edtCancelBox.setText(\"\");\r\n        });\r\n\r\n        binding.cbThree.setOnClickListener(view -> {\r\n            binding.cbOne.setChecked(false);\r\n            binding.cbTwo.setChecked(false);\r\n            binding.cbThree.setChecked(true);\r\n            binding.cbFour.setChecked(false);\r\n            CancelId = \"3\";\r\n            binding.edtCancelBox.setVisibility(View.GONE);\r\n            binding.edtCancelBox.setText(\"\");\r\n        });\r\n\r\n        binding.cbFour.setOnClickListener(view -> {\r\n            binding.cbOne.setChecked(false);\r\n            binding.cbTwo.setChecked(false);\r\n            binding.cbThree.setChecked(false);\r\n            binding.cbFour.setChecked(true);\r\n            CancelId = \"4\";\r\n            binding.edtCancelBox.setVisibility(View.VISIBLE);\r\n        });\r\n\r\n        binding.btnCancelSubscrible.setOnClickListener(view -> {\r\n            if (isMediaStart) {\r\n                pauseMedia();\r\n            } else {\r\n\r\n            }\r\n            if (CancelId.equalsIgnoreCase(\"4\") &&\r\n                    binding.edtCancelBox.getText().toString().equalsIgnoreCase(\"\")) {\r\n                BWSApplication.showToast(\"Cancellation reason is required\", ctx);\r\n            } else {\r\n                final Dialog dialog = new Dialog(ctx);\r\n                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                dialog.setContentView(R.layout.cancel_membership);\r\n                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                final RelativeLayout tvconfirm = dialog.findViewById(R.id.tvconfirm);\r\n\r\n                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                        dialog.dismiss();\r\n                        if (isMediaStart) {\r\n                            pauseMedia();\r\n                        } else {\r\n\r\n                        }\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n\r\n                tvconfirm.setOnClickListener(v -> {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        Call<CancelPlanModel> listCall = APIClient.getClient().getCancelPlan(UserID, CancelId, binding.edtCancelBox.getText().toString());\r\n                        listCall.enqueue(new Callback<CancelPlanModel>() {\r\n                            @Override\r\n                            public void onResponse(Call<CancelPlanModel> call, Response<CancelPlanModel> response) {\r\n                                if (response.isSuccessful()) {\r\n                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    CancelPlanModel model = response.body();\r\n                                    BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                                    dialog.dismiss();\r\n                                    resumeMedia();\r\n                                    isPause = false;\r\n                                    finish();\r\n                                }\r\n                            }\r\n\r\n                            @Override\r\n                            public void onFailure(Call<CancelPlanModel> call, Throwable t) {\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                });\r\n\r\n                tvGoBack.setOnClickListener(v -> {\r\n                    dialog.dismiss();\r\n                    if (isMediaStart) {\r\n                        pauseMedia();\r\n                    } else {\r\n\r\n                    }\r\n                });\r\n                dialog.show();\r\n                dialog.setCancelable(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        if (isMediaStart) {\r\n            pauseMedia();\r\n        } else {\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        finish();\r\n//        resumeMedia();\r\n//        isPause = false;\r\n    }\r\n\r\n    @Override\r\n    public void onInitializationSuccess(YouTubePlayer.Provider provider, YouTubePlayer\r\n            youTubePlayer, boolean wasRestored) {\r\n        if (!wasRestored) {\r\n            youTubePlayer.cueVideo(\"y1rfRW6WX08\");\r\n            youTubePlayer.setPlayerStyle(YouTubePlayer.PlayerStyle.DEFAULT);\r\n      /*      PlayerUIController uiController = youTubePlayerView.getPlayerUIController();\r\n            player.showVideoTitle(false);*/\r\n            youTubePlayer.setShowFullscreenButton(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onInitializationFailure(YouTubePlayer.Provider provider, YouTubeInitializationResult errorReason) {\r\n        if (errorReason.isUserRecoverableError()) {\r\n            errorReason.getErrorDialog(this, RECOVERY_DIALOG_REQUEST).show();\r\n        } else {\r\n            String errorMessage = String.format(\r\n                    getString(R.string.error_player), errorReason.toString());\r\n            BWSApplication.showToast(errorMessage, this);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        if (requestCode == RECOVERY_DIALOG_REQUEST) {\r\n            getYouTubePlayerProvider().initialize(\"AIzaSyD43ZM6bESb_pdSPzgcuCzKy8yD_45mlT8\", this);\r\n        }\r\n    }\r\n\r\n    private YouTubePlayer.Provider getYouTubePlayerProvider() {\r\n        return binding.youtubeView;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/BillingOrderModule/Activities/CancelMembershipActivity.java	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ app/src/main/java/com/brainwellnessspa/BillingOrderModule/Activities/CancelMembershipActivity.java	(date 1602836197232)
@@ -7,12 +7,15 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.graphics.PorterDuff;
 import android.graphics.drawable.ColorDrawable;
 import android.os.Bundle;
 import android.view.KeyEvent;
+import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.Window;
+import android.widget.Button;
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
@@ -42,6 +45,8 @@
     Context ctx;
     String UserID, CancelId = "";
     Activity activity;
+    public static final String API_KEY = "AIzaSyCzqUwQUD58tA8wrINDc1OnL0RgcU52jzQ";
+    public static final String VIDEO_ID = "y1rfRW6WX08";
     private static final int RECOVERY_DIALOG_REQUEST = 1;
 
     @Override
@@ -58,13 +63,13 @@
 //            isPause = false;
         });
 
+        binding.youtubeView.initialize(API_KEY, this);
+
         if (isMediaStart) {
             pauseMedia();
         } else {
         }
 
-        binding.youtubeView.initialize("AIzaSyD43ZM6bESb_pdSPzgcuCzKy8yD_45mlT8", this);
-
         binding.cbOne.setOnClickListener(view -> {
             binding.cbOne.setChecked(true);
             binding.cbTwo.setChecked(false);
@@ -119,9 +124,8 @@
                 dialog.setContentView(R.layout.cancel_membership);
                 dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));
                 dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
-
                 final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);
-                final RelativeLayout tvconfirm = dialog.findViewById(R.id.tvconfirm);
+                final Button Btn = dialog.findViewById(R.id.Btn);
 
                 dialog.setOnKeyListener((v, keyCode, event) -> {
                     if (keyCode == KeyEvent.KEYCODE_BACK) {
@@ -136,32 +140,45 @@
                     return false;
                 });
 
-                tvconfirm.setOnClickListener(v -> {
-                    if (BWSApplication.isNetworkConnected(ctx)) {
-                        BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                        Call<CancelPlanModel> listCall = APIClient.getClient().getCancelPlan(UserID, CancelId, binding.edtCancelBox.getText().toString());
-                        listCall.enqueue(new Callback<CancelPlanModel>() {
-                            @Override
-                            public void onResponse(Call<CancelPlanModel> call, Response<CancelPlanModel> response) {
-                                if (response.isSuccessful()) {
-                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                                    CancelPlanModel model = response.body();
-                                    BWSApplication.showToast(model.getResponseMessage(), ctx);
-                                    dialog.dismiss();
-                                    resumeMedia();
-                                    isPause = false;
-                                    finish();
-                                }
-                            }
+                Btn.setOnTouchListener((view1, event) -> {
+                    switch (event.getAction()) {
+                        case MotionEvent.ACTION_DOWN: {
+                            Button views = (Button) view1;
+                            views.getBackground().setColorFilter(0x77000000, PorterDuff.Mode.SRC_ATOP);
+                            view1.invalidate();
+                            break;
+                        }
+                        case MotionEvent.ACTION_UP:
+                            if (BWSApplication.isNetworkConnected(ctx)) {
+                                Call<CancelPlanModel> listCall = APIClient.getClient().getCancelPlan(UserID, CancelId, binding.edtCancelBox.getText().toString());
+                                listCall.enqueue(new Callback<CancelPlanModel>() {
+                                    @Override
+                                    public void onResponse(Call<CancelPlanModel> call, Response<CancelPlanModel> response) {
+                                        if (response.isSuccessful()) {
+                                            CancelPlanModel model = response.body();
+                                            BWSApplication.showToast(model.getResponseMessage(), ctx);
+                                            dialog.dismiss();
+                                            resumeMedia();
+                                            isPause = false;
+                                            finish();
+                                        }
+                                    }
 
-                            @Override
-                            public void onFailure(Call<CancelPlanModel> call, Throwable t) {
-                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                            }
-                        });
-                    } else {
-                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);
+                                    @Override
+                                    public void onFailure(Call<CancelPlanModel> call, Throwable t) {
+                                    }
+                                });
+                            } else {
+                                BWSApplication.showToast(getString(R.string.no_server_found), ctx);
+                            }
+                        case MotionEvent.ACTION_CANCEL: {
+                            Button views = (Button) view1;
+                            views.getBackground().clearColorFilter();
+                            views.invalidate();
+                            break;
+                        }
                     }
+                    return true;
                 });
 
                 tvGoBack.setOnClickListener(v -> {
@@ -178,15 +195,6 @@
         });
     }
 
-    @Override
-    protected void onResume() {
-        super.onResume();
-        if (isMediaStart) {
-            pauseMedia();
-        } else {
-        }
-    }
-
     @Override
     public void onBackPressed() {
         finish();
@@ -198,10 +206,7 @@
     public void onInitializationSuccess(YouTubePlayer.Provider provider, YouTubePlayer
             youTubePlayer, boolean wasRestored) {
         if (!wasRestored) {
-            youTubePlayer.cueVideo("y1rfRW6WX08");
-            youTubePlayer.setPlayerStyle(YouTubePlayer.PlayerStyle.DEFAULT);
-      /*      PlayerUIController uiController = youTubePlayerView.getPlayerUIController();
-            player.showVideoTitle(false);*/
+            youTubePlayer.loadVideo(VIDEO_ID);
             youTubePlayer.setShowFullscreenButton(true);
         }
     }
@@ -220,7 +225,7 @@
     @Override
     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         if (requestCode == RECOVERY_DIALOG_REQUEST) {
-            getYouTubePlayerProvider().initialize("AIzaSyD43ZM6bESb_pdSPzgcuCzKy8yD_45mlT8", this);
+            getYouTubePlayerProvider().initialize(API_KEY, this);
         }
     }
 
Index: app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DownloadModule.Activities;\r\n\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ProgressBar;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.fragment.app.FragmentStatePagerAdapter;\r\n\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DownloadModule.Fragments.AudioDownloadsFragment;\r\nimport com.brainwellnessspa.DownloadModule.Fragments.PlaylistsDownlaodsFragment;\r\nimport com.brainwellnessspa.DownloadModule.Models.DownloadlistModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityDownloadsBinding;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\n\r\npublic class DownloadsActivity extends AppCompatActivity {\r\n    ActivityDownloadsBinding binding;\r\n    ArrayList<DownloadlistModel.Audio> audioList;\r\n    ArrayList<DownloadlistModel.Playlist> playlistList;\r\n    String UserID;\r\n    public static boolean ComeFrom_Playlist = false;\r\n    Context ctx;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_downloads);\r\n        ctx = DownloadsActivity.this;\r\n        SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared2.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n        try {\r\n            if (IsLock.equalsIgnoreCase(\"1\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n            }\r\n            SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                comefromDownload = \"1\";\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            comefromDownload = \"0\";\r\n            finish();\r\n        });\r\n        prepareData();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        comefromDownload = \"0\";\r\n        finish();\r\n    }\r\n\r\n    public void prepareData() {\r\n/*        if (BWSApplication.isNetworkConnected(this)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<DownloadlistModel> listCall = APIClient.getClient().getDownloadlistPlaylist(UserID);\r\n            listCall.enqueue(new Callback<DownloadlistModel>() {\r\n                @Override\r\n                public void onResponse(Call<DownloadlistModel> call, Response<DownloadlistModel> response) {\r\n                    if (response.isSuccessful()) {*/\r\n//                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n\r\n        audioList = new ArrayList<>();\r\n        playlistList = new ArrayList<>();\r\n\r\n\r\n//                        audioList = listModel.getResponseData().getAudio();\r\n//                        playlistList = listModel.getResponseData().getPlaylist();\r\n        binding.viewPager.setOffscreenPageLimit(2);\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(\"Audio\"));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(\"Playlists\"));\r\n        binding.tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);\r\n\r\n        TabAdapter adapter = new TabAdapter(getSupportFragmentManager(), ctx, binding.tabLayout.getTabCount(),\r\n                UserID, binding.progressBarHolder, binding.progressBar);\r\n        binding.viewPager.setAdapter(adapter);\r\n        binding.viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(binding.tabLayout));\r\n        if (ComeFrom_Playlist) {\r\n            binding.viewPager.setCurrentItem(1);\r\n            ComeFrom_Playlist = false;\r\n        } else {\r\n            binding.viewPager.setCurrentItem(0);\r\n        }\r\n        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                binding.viewPager.setCurrentItem(tab.getPosition());\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    /*   }\r\n\r\n       @Override\r\n       public void onFailure(Call<DownloadlistModel> call, Throwable t) {\r\n           BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n       }\r\n   });\r\n} else {\r\n   BWSApplication.showToast( getString(R.string.no_server_found), this);\r\n}*/\r\n\r\n    public class TabAdapter extends FragmentStatePagerAdapter {\r\n        int totalTabs;\r\n        String UserID;\r\n        FrameLayout progressBarHolder;\r\n        ProgressBar ImgV;\r\n        private Context myContext;\r\n\r\n        public TabAdapter(FragmentManager fm, Context myContext, int totalTabs, String UserID, FrameLayout progressBarHolder, ProgressBar ImgV) {\r\n            super(fm);\r\n            this.myContext = myContext;\r\n            this.totalTabs = totalTabs;\r\n            this.UserID = UserID;\r\n            this.progressBarHolder = progressBarHolder;\r\n            this.ImgV = ImgV;\r\n        }\r\n\r\n        @Override\r\n        public Fragment getItem(int position) {\r\n            switch (position) {\r\n                case 0:\r\n                    Bundle bundle = new Bundle();\r\n                    AudioDownloadsFragment audioDownloadsFragment = new AudioDownloadsFragment();\r\n                    bundle.putString(\"UserID\", UserID);\r\n//                    bundle.putParcelableArrayList(\"audioDownloadsFragment\", audioList);\r\n                    audioDownloadsFragment.setArguments(bundle);\r\n                    return audioDownloadsFragment;\r\n                case 1:\r\n                    bundle = new Bundle();\r\n                    PlaylistsDownlaodsFragment playlistsDownlaodsFragment = new PlaylistsDownlaodsFragment();\r\n                    bundle.putString(\"UserID\", UserID);\r\n//                    bundle.putParcelableArrayList(\"playlistsDownlaodsFragment\", playlistList);\r\n                    playlistsDownlaodsFragment.setArguments(bundle);\r\n                    return playlistsDownlaodsFragment;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getCount() {\r\n            return totalTabs;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadsActivity.java	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadsActivity.java	(date 1602837244521)
@@ -44,6 +44,10 @@
         SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
         String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
 
+        binding.llBack.setOnClickListener(view -> {
+            comefromDownload = "0";
+            finish();
+        });
         try {
             if (IsLock.equalsIgnoreCase("1") && !AudioFlag.equalsIgnoreCase("AppointmentDetailList")) {
                 SharedPreferences sharedm = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
@@ -72,10 +76,7 @@
             e.printStackTrace();
         }
 
-        binding.llBack.setOnClickListener(view -> {
-            comefromDownload = "0";
-            finish();
-        });
+
         prepareData();
     }
 
Index: app/src/main/res/layout/fragment_account.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:tools=\"http://schemas.android.com/tools\"\r\n        android:id=\"@+id/flContainer\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/white\"\r\n        tools:context=\"com.brainwellnessspa.DashboardModule.Account.AccountFragment\">\r\n\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\">\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:orientation=\"vertical\"\r\n                android:paddingHorizontal=\"@dimen/_14sdp\"\r\n                android:weightSum=\"2\">\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llUserProfile\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"0dp\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:layout_weight=\"0.3\"\r\n                    android:weightSum=\"1\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_weight=\"0.20\"\r\n                        android:gravity=\"center\"\r\n                        android:orientation=\"vertical\">\r\n\r\n                        <de.hdodenhof.circleimageview.CircleImageView\r\n                            android:id=\"@+id/civProfile\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:padding=\"@dimen/_4sdp\"\r\n                            android:src=\"@drawable/default_profile\"\r\n                            android:visibility=\"gone\" />\r\n\r\n                        <RelativeLayout\r\n                            android:id=\"@+id/rlLetter\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:padding=\"@dimen/_4sdp\"\r\n                            android:visibility=\"gone\">\r\n\r\n                            <de.hdodenhof.circleimageview.CircleImageView\r\n                                android:id=\"@+id/civLetter\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"match_parent\"\r\n                                android:layout_centerInParent=\"true\"\r\n                                android:padding=\"@dimen/_4sdp\"\r\n                                android:src=\"@color/blue\" />\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvLetter\"\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_centerInParent=\"true\"\r\n                                android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                                android:textColor=\"@color/white\"\r\n                                android:textSize=\"@dimen/_26sdp\" />\r\n                        </RelativeLayout>\r\n\r\n\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_marginLeft=\"@dimen/_12sdp\"\r\n                        android:layout_weight=\"0.65\"\r\n                        android:gravity=\"center_vertical\"\r\n                        android:orientation=\"vertical\">\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvName\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                            android:gravity=\"start\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_20sdp\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvViewProfile\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:fontFamily=\"@font/montserrat_medium\"\r\n                            android:gravity=\"start\"\r\n                            android:text=\"@string/view_profile\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_13sdp\"\r\n                            android:visibility=\"gone\" />\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"@dimen/_0sdp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_weight=\"0.15\"\r\n                        android:gravity=\"center_vertical|right\">\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:src=\"@drawable/ic_back_black_icon\" />\r\n                    </LinearLayout>\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"0dp\"\r\n                    android:layout_weight=\"1.77\"\r\n                    android:orientation=\"vertical\">\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llDownloads\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center_vertical\">\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_66sdp\"\r\n                            android:layout_height=\"@dimen/_62sdp\"\r\n                            android:padding=\"@dimen/_20sdp\"\r\n                            android:src=\"@drawable/ic_download_icon\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvDownloads\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                            android:gravity=\"start\"\r\n                            android:text=\"My Downloads\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_16sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llInvoices\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center_vertical\">\r\n\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_66sdp\"\r\n                            android:layout_height=\"@dimen/_62sdp\"\r\n                            android:padding=\"@dimen/_20sdp\"\r\n                            android:src=\"@drawable/ic_invoice_icon\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvInvoices\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                            android:gravity=\"left\"\r\n                            android:text=\"@string/invoices\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_16sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llBillingOrder\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center_vertical\">\r\n\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_66sdp\"\r\n                            android:layout_height=\"@dimen/_62sdp\"\r\n                            android:padding=\"@dimen/_21sdp\"\r\n                            android:src=\"@drawable/ic_payment_icon\" />\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:gravity=\"center_vertical\"\r\n                            android:orientation=\"vertical\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvBillingAndOrder\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                                android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                                android:gravity=\"left\"\r\n                                android:text=\"@string/billing_and_order\"\r\n                                android:textColor=\"@color/black\"\r\n                                android:textSize=\"@dimen/_16sdp\" />\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvCrtPlan\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                                android:fontFamily=\"@font/montserrat_medium\"\r\n                                android:gravity=\"start\"\r\n                                android:textColor=\"@color/light_gray\"\r\n                                android:textSize=\"@dimen/_13sdp\" />\r\n                        </LinearLayout>\r\n\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llReminder\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center_vertical\">\r\n\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_66sdp\"\r\n                            android:layout_height=\"@dimen/_62sdp\"\r\n                            android:padding=\"@dimen/_4sdp\"\r\n                            android:src=\"@drawable/ic_clock_icon\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvReminder\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                            android:gravity=\"left\"\r\n                            android:text=\"@string/reminder\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_16sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llResource\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center_vertical\">\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_66sdp\"\r\n                            android:layout_height=\"@dimen/_62sdp\"\r\n                            android:padding=\"@dimen/_4sdp\"\r\n                            android:src=\"@drawable/ic_resource_icon\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvResource\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                            android:gravity=\"left\"\r\n                            android:text=\"@string/Resources\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_16sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llFaq\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center_vertical\">\r\n\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_66sdp\"\r\n                            android:layout_height=\"@dimen/_62sdp\"\r\n                            android:padding=\"@dimen/_20sdp\"\r\n                            android:src=\"@drawable/ic_faq_icon\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvFaq\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                            android:gravity=\"left\"\r\n                            android:text=\"@string/faq\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_16sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llLogout\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center_vertical\">\r\n\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_66sdp\"\r\n                            android:layout_height=\"@dimen/_62sdp\"\r\n                            android:padding=\"@dimen/_22sdp\"\r\n                            android:src=\"@drawable/ic_logout_icon\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvLogout\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                            android:gravity=\"left\"\r\n                            android:text=\"@string/logout\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_16sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvVersion\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"bottom\"\r\n                        android:layout_marginBottom=\"@dimen/_18sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"center_horizontal|top\"\r\n                        android:textColor=\"@color/black\"\r\n                        android:textSize=\"@dimen/_14sdp\" />\r\n\r\n                </LinearLayout>\r\n\r\n\r\n            </LinearLayout>\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:gravity=\"center\"\r\n                android:padding=\"@dimen/_60sdp\">\r\n\r\n                <ProgressBar\r\n                    android:id=\"@+id/progressBar\"\r\n                    android:layout_width=\"@dimen/_50sdp\"\r\n                    android:layout_height=\"@dimen/_50sdp\"\r\n                    android:indeterminateTint=\"@color/blue\"\r\n                    android:scaleType=\"centerInside\"\r\n                    android:visibility=\"gone\" />\r\n\r\n            </LinearLayout>\r\n\r\n            <FrameLayout\r\n                android:id=\"@+id/progressBarHolder\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:alpha=\"0.4\"\r\n                android:animateLayoutChanges=\"true\"\r\n                android:background=\"#C0000000\"\r\n                android:visibility=\"gone\" />\r\n        </RelativeLayout>\r\n\r\n    </FrameLayout>\r\n</layout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_account.xml	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ app/src/main/res/layout/fragment_account.xml	(date 1602837780332)
@@ -7,6 +7,7 @@
         android:layout_width="match_parent"
         android:layout_height="match_parent"
         android:background="@color/white"
+        android:clickable="true"
         tools:context="com.brainwellnessspa.DashboardModule.Account.AccountFragment">
 
         <RelativeLayout
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/AudioFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.CancelMembershipActivity;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.DownloadAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.RecentlyPlayedAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.RecommendedAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.TopCategoriesAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.FragmentAudioBinding;\r\nimport com.brainwellnessspa.databinding.MainAudioLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.TimeZone;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.ViewAllAudioFragment.viewallAudio;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.isDownloading;\r\n\r\npublic class AudioFragment extends Fragment {\r\n    public static boolean exit = false;\r\n    public static String IsLock = \"\";\r\n    FragmentAudioBinding binding;\r\n    String UserID, AudioFlag, expDate;\r\n    List<String> fileNameList;\r\n    List<String> audioFile, playlistDownloadId;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_audio, container, false);\r\n        View view = binding.getRoot();\r\n        viewallAudio = false;\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n        if (!isDownloading) {\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(json, type);\r\n                audioFile = gson.fromJson(json1, type);\r\n            /*if(json2.equalsIgnoreCase(String.valueOf(gson))){\r\n                playlistDownloadId = new ArrayList<>();\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                String playlistIdJson = gson.toJson(playlistDownloadId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                SharedPreferences sharedy = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n                json2 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            }*/\r\n                playlistDownloadId = gson.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                    downloadMedia.encrypt1(audioFile, fileNameList, playlistDownloadId/*, playlistSongs*/);\r\n                }\r\n            }\r\n        }\r\n        prepareData();\r\n        return view;\r\n    }\r\n\r\n    public void GetAllMedia(FragmentActivity ctx, List<MainAudioModel.ResponseData> listModel) {\r\n        ArrayList<MainAudioModel.ResponseData.Detail> details = new ArrayList<>();\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = new ArrayList<>();\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData(\"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadAudioDetailsList.size() != 0) {\r\n                    for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                        MainAudioModel.ResponseData.Detail detail = new MainAudioModel.ResponseData.Detail();\r\n                        detail.setID(downloadAudioDetailsList.get(i).getID());\r\n                        detail.setName(downloadAudioDetailsList.get(i).getName());\r\n                        detail.setAudioFile(downloadAudioDetailsList.get(i).getAudioFile());\r\n                        detail.setAudioDirection(downloadAudioDetailsList.get(i).getAudioDirection());\r\n                        detail.setAudiomastercat(downloadAudioDetailsList.get(i).getAudiomastercat());\r\n                        detail.setAudioSubCategory(downloadAudioDetailsList.get(i).getAudioSubCategory());\r\n                        detail.setImageFile(downloadAudioDetailsList.get(i).getImageFile());\r\n                        detail.setLike(downloadAudioDetailsList.get(i).getLike());\r\n                        detail.setDownload(downloadAudioDetailsList.get(i).getDownload());\r\n                        detail.setAudioDuration(downloadAudioDetailsList.get(i).getAudioDuration());\r\n                        details.add(detail);\r\n                    }\r\n                    for (int i = 0; i < listModel.size(); i++) {\r\n                        if (listModel.get(i).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                            listModel.get(i).setDetails(details);\r\n                        }\r\n                    }\r\n                    MainAudioListAdapter adapter = new MainAudioListAdapter(listModel, getActivity());\r\n                    RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n                    binding.rvMainAudioList.setLayoutManager(manager);\r\n                    binding.rvMainAudioList.setItemAnimator(new DefaultItemAnimator());\r\n                    binding.rvMainAudioList.setAdapter(adapter);\r\n                } else {\r\n                    MainAudioListAdapter adapter = new MainAudioListAdapter(listModel, getActivity());\r\n                    RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n                    binding.rvMainAudioList.setLayoutManager(manager);\r\n                    binding.rvMainAudioList.setItemAnimator(new DefaultItemAnimator());\r\n                    binding.rvMainAudioList.setAdapter(adapter);\r\n                }\r\n                /*if (downloadAudioDetailsList.size() != 0) {\r\n                    MainAudioListAdapter1 adapter1 = new MainAudioListAdapter1(getActivity(),listModel);\r\n                    RecyclerView.LayoutManager manager1 = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    binding.rvMainAudioList.setLayoutManager(manager1);\r\n                    binding.rvMainAudioList.setItemAnimator(new DefaultItemAnimator());\r\n                    binding.rvMainAudioList.setAdapter(adapter1);\r\n                } else {\r\n                    binding.rvMainAudioList.setVisibility(View.GONE);\r\n                }*/\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n    }\r\n\r\n    private void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<MainAudioModel> listCall = APIClient.getClient().getMainAudioLists(UserID);\r\n            listCall.enqueue(new Callback<MainAudioModel>() {\r\n                @Override\r\n                public void onResponse(Call<MainAudioModel> call, Response<MainAudioModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        MainAudioModel listModel = response.body();\r\n                        try {\r\n                            IsLock = listModel.getResponseData().get(0).getIsLock();\r\n                            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n                            SharedPreferences.Editor editor = shared.edit();\r\n                            editor.putString(CONSTANTS.PREF_KEY_ExpDate, listModel.getResponseData().get(0).getExpireDate());\r\n                            editor.putString(CONSTANTS.PREF_KEY_IsLock, listModel.getResponseData().get(0).getIsLock());\r\n                            editor.commit();\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n                        GetAllMedia(getActivity(), listModel.getResponseData());\r\n                    } else {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<MainAudioModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            expDate = (shared1.getString(CONSTANTS.PREF_KEY_ExpDate, \"\"));\r\n//            expDate = \"2020-09-29 06:34:10\";\r\n            Log.e(\"Exp Date !!!!\", expDate);\r\n            SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n            Date Expdate = new Date();\r\n            try {\r\n                Expdate = format.parse(expDate);\r\n                Log.e(\"Exp Date Expdate!!!!\", String.valueOf(Expdate));\r\n            } catch (ParseException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n            simpleDateFormat1.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n            Date currdate = Calendar.getInstance().getTime();\r\n            Date currdate1 = new Date();\r\n            String currantDateTime = simpleDateFormat1.format(currdate);\r\n            try {\r\n                currdate1 = format.parse(currantDateTime);\r\n                Log.e(\"currant currdate !!!!\", String.valueOf(currdate1));\r\n            } catch (ParseException e) {\r\n                e.printStackTrace();\r\n            }\r\n            Log.e(\"currant Date !!!!\", currantDateTime);\r\n            if (Expdate.before(currdate1)) {\r\n                Log.e(\"app\", \"Date1 is before Date2\");\r\n                IsLock = \"1\";\r\n            } else if (Expdate.after(currdate1)) {\r\n                Log.e(\"app\", \"Date1 is after Date2\");\r\n                IsLock = \"0\";\r\n            } else if (Expdate == currdate1) {\r\n                Log.e(\"app\", \"Date1 is equal Date2\");\r\n                IsLock = \"1\";\r\n            }\r\n            ArrayList<MainAudioModel.ResponseData> responseData = new ArrayList<>();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> details = new ArrayList<>();\r\n            MainAudioModel.ResponseData listModel = new MainAudioModel.ResponseData();\r\n            listModel.setHomeID(\"1\");\r\n            listModel.setDetails(details);/*\r\n            \"UserID\": \"2\",\r\n            \"IsLock\": \"0\",*/\r\n            listModel.setView(\"My Downloads\");\r\n            listModel.setHomeID(\"1\");\r\n            listModel.setUserID(UserID);\r\n            listModel.setIsLock(IsLock);\r\n            responseData.add(listModel);\r\n            GetAllMedia(getActivity(), responseData);\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n        try {\r\n            if (IsLock.equalsIgnoreCase(\"1\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n            }\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(13, 6, 13, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(13, 6, 13, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        prepareData();\r\n    }\r\n\r\n    public class MainAudioListAdapter extends RecyclerView.Adapter<MainAudioListAdapter.MyViewHolder> {\r\n        FragmentActivity activity;\r\n        private List<MainAudioModel.ResponseData> listModelList;\r\n\r\n        public MainAudioListAdapter(List<MainAudioModel.ResponseData> listModelList, FragmentActivity activity) {\r\n            this.listModelList = listModelList;\r\n            this.activity = activity;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MainAudioLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.main_audio_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvViewAll.setOnClickListener(view -> {\r\n                Fragment viewAllAudioFragment = new ViewAllAudioFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, viewAllAudioFragment)\r\n                        .commit();\r\n                Bundle bundle = new Bundle();\r\n                bundle.putString(\"ID\", listModelList.get(position).getHomeID());\r\n                bundle.putString(\"Name\", listModelList.get(position).getView());\r\n                bundle.putString(\"Category\", \"\");\r\n                viewAllAudioFragment.setArguments(bundle);\r\n            });\r\n\r\n            if (listModelList.get(position).getDetails().size() == 0) {\r\n                holder.binding.llMainLayout.setVisibility(View.GONE);\r\n            } else {\r\n                holder.binding.llMainLayout.setVisibility(View.VISIBLE);\r\n                holder.binding.tvTitle.setText(listModelList.get(position).getView());\r\n                if (listModelList.get(position).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                    DownloadAdapter myDownloadsAdapter = new DownloadAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock());\r\n                    IsLock = listModelList.get(position).getIsLock();\r\n                    RecyclerView.LayoutManager myDownloads = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(myDownloads);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(myDownloadsAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 4) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.Library))) {\r\n                    RecommendedAdapter recommendedAdapter = new RecommendedAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock());\r\n                    IsLock = listModelList.get(position).getIsLock();\r\n                    RecyclerView.LayoutManager recommended = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(recommended);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(recommendedAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 4) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.my_like))) {\r\n                    holder.binding.llMainLayout.setVisibility(View.GONE);\r\n                    /*RecentlyPlayedAdapter recentlyPlayedAdapter = new RecentlyPlayedAdapter(listModelList.get(position).getDetails(), getActivity());\r\n                    RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(recentlyPlayed);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(recentlyPlayedAdapter);*/\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.recently_played))) {\r\n                    RecentlyPlayedAdapter recentlyPlayedAdapter = new RecentlyPlayedAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock());\r\n                    RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(recentlyPlayed);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(recentlyPlayedAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 6) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.get_inspired))) {\r\n                    RecommendedAdapter inspiredAdapter = new RecommendedAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock());\r\n                    RecyclerView.LayoutManager inspired = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(inspired);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(inspiredAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 4) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.popular))) {\r\n                    RecentlyPlayedAdapter recentlyPlayedAdapter = new RecentlyPlayedAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock());\r\n                    RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(recentlyPlayed);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(recentlyPlayedAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 6) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.top_categories))) {\r\n                    holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    TopCategoriesAdapter topCategoriesAdapter = new TopCategoriesAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getHomeID(), listModelList.get(position).getView());\r\n                    RecyclerView.LayoutManager topCategories = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(topCategories);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(topCategoriesAdapter);\r\n                }\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MainAudioLayoutBinding binding;\r\n\r\n            public MyViewHolder(MainAudioLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/AudioFragment.java	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/AudioFragment.java	(date 1602833835320)
@@ -21,6 +21,7 @@
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.brainwellnessspa.BillingOrderModule.Activities.CancelMembershipActivity;
+import com.brainwellnessspa.SplashModule.SplashScreenActivity;
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
 import com.brainwellnessspa.BWSApplication;
@@ -296,6 +297,7 @@
     public void onResume() {
         super.onResume();
         prepareData();
+        SplashScreenActivity.getLatasteUpdate(getActivity());
     }
 
     public class MainAudioListAdapter extends RecyclerView.Adapter<MainAudioListAdapter.MyViewHolder> {
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"30.0.2\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.brainwellnessspa\"\r\n        minSdkVersion 16\r\n        targetSdkVersion 30\r\n        versionCode 2\r\n        versionName \"1.0\"\r\n        multiDexEnabled true\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    lintOptions {\r\n        checkReleaseBuilds false\r\n    }\r\n    buildTypes {\r\n        debug {\r\n        debuggable true\r\n        resValue(\"string\", \"PORT_NUMBER\", \"8081\")\r\n    }\r\n\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        targetCompatibility 1.8\r\n        sourceCompatibility 1.8\r\n    }\r\n\r\n    buildFeatures {\r\n        dataBinding true\r\n    }\r\n\r\n    dexOptions {\r\n        jumboMode = true\r\n        javaMaxHeapSize \"4g\"\r\n    }\r\n\r\n    packagingOptions {\r\n        exclude 'META-INF/DEPENDENCIES'\r\n        exclude 'META-INF/LICENSE'\r\n        exclude 'META-INF/LICENSE.txt'\r\n        exclude 'META-INF/license.txt'\r\n        exclude 'META-INF/NOTICE'\r\n        exclude 'META-INF/NOTICE.txt'\r\n        exclude 'META-INF/notice.txt'\r\n        exclude 'META-INF/ASL2.0'\r\n    }\r\n}\r\n\r\ndependencies {\r\n    def room_version = \"1.1.1\"\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    testImplementation 'junit:junit:4.13'\r\n    implementation 'com.android.support:multidex:1.0.3'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'\r\n\r\n    /* TODO Firebase Dependency */\r\n    implementation 'com.google.firebase:firebase-auth:19.4.0'\r\n    implementation 'com.google.firebase:firebase-core:17.5.1'\r\n    implementation 'com.google.firebase:firebase-analytics:17.6.0'\r\n    implementation 'com.google.firebase:firebase-messaging:20.3.0'\r\n/* TODO Room Database Dependency */\r\n    implementation \"android.arch.persistence.room:runtime:$room_version\"\r\n    annotationProcessor \"android.arch.persistence.room:compiler:$room_version\"\r\n    testImplementation \"android.arch.persistence.room:testing:$room_version\"\r\n    debugImplementation 'com.amitshekhar.android:debug-db:1.0.6'\r\n    debugImplementation 'com.amitshekhar.android:debug-db-encrypt:1.0.6'\r\n\r\n    /* TODO Material Design Dependency */\r\n    implementation 'com.google.android.material:material:1.2.1'\r\n    /* TODO Bottom Menu and Fragment*/\r\n    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'\r\n    implementation 'androidx.navigation:navigation-fragment:2.3.0'\r\n    implementation 'androidx.navigation:navigation-ui:2.3.0'\r\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    /* TODO Stripe Payment Gateway */\r\n    implementation 'com.stripe:stripe-android:2.0.2'\r\n/* TODO Use Youtube Video Player */\r\n    implementation files('libs/YouTubeAndroidPlayerApi.jar')\r\n    /* TODO Cardview Design Dependency */\r\n    implementation 'androidx.cardview:cardview:1.0.0'\r\n    /* TODO Recyclerview Design & Development Dependency */\r\n    implementation 'androidx.recyclerview:recyclerview:1.1.0'\r\n    /* TODO Circle Imageview Design Dependency */\r\n    implementation 'de.hdodenhof:circleimageview:3.1.0'\r\n    /* TODO Retrofit Development Dependency */\r\n    implementation 'com.squareup.retrofit:retrofit:1.9.0'\r\n    implementation 'com.squareup.retrofit2:retrofit:2.5.0'\r\n    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'\r\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\r\n    implementation 'com.google.code.gson:gson:2.8.6'\r\n    implementation 'com.squareup.okhttp:okhttp:2.7.5'\r\n    implementation 'com.squareup.okhttp:okhttp-urlconnection:2.7.5'\r\n    implementation 'com.squareup.okhttp3:okhttp:4.7.2'\r\n    implementation 'com.squareup.okhttp3:logging-interceptor:4.7.2'\r\n    /* TODO Glide Dependency*/\r\n    implementation 'com.github.bumptech.glide:glide:3.7.0'\r\n    implementation 'com.mindorks.android:prdownloader:0.4.0'\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ app/build.gradle	(date 1602833753533)
@@ -20,9 +20,9 @@
     }
     buildTypes {
         debug {
-        debuggable true
-        resValue("string", "PORT_NUMBER", "8081")
-    }
+            debuggable true
+            resValue("string", "PORT_NUMBER", "8081")
+        }
 
         release {
             minifyEnabled false
@@ -109,4 +109,7 @@
     /* TODO Glide Dependency*/
     implementation 'com.github.bumptech.glide:glide:3.7.0'
     implementation 'com.mindorks.android:prdownloader:0.4.0'
+    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
+    implementation 'com.google.android.gms:play-services-auth:18.1.0'
+    implementation 'com.facebook.android:facebook-android-sdk:5.15.3'
 }
\ No newline at end of file
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Playlist;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.view.WindowManager;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Filter;\r\nimport android.widget.Filterable;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.ItemTouchHelper;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardModel;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ReminderStatusPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Search.SearchFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.ReminderModule.Activities.ReminderActivity;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.ItemMoveCallback;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.StartDragListener;\r\nimport com.brainwellnessspa.databinding.FragmentMyPlaylistsBinding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutBinding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutSortingBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenReminder;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity.MyPlaylistId;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity.addToPlayList;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.ComeFindAudio;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.comeRename;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.deleteFrg;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.ViewAllPlaylistFragment.GetPlaylistLibraryID;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isRemoved;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.newClick;\r\nimport static com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity.ComeFrom_Playlist;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadProgress;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class MyPlaylistsFragment extends Fragment implements StartDragListener {\r\n    public static int RefreshIconData = 0;\r\n    public static String RefreshNew = \"\";\r\n    public static int disclaimerPlayed = 0;\r\n    FragmentMyPlaylistsBinding binding;\r\n    String UserID, New, PlaylistID, PlaylistName = \"\", PlaylistImage, SearchFlag, MyDownloads = \"\", AudioFlag;\r\n    int RefreshIcon;\r\n    PlayListsAdpater adpater;\r\n    PlayListsAdpater2 adpater2;\r\n    View view;\r\n    EditText searchEditText;\r\n    ArrayList<String> changedAudio;\r\n    Activity activity;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongsList;\r\n    List<DownloadAudioDetails> oneAudioDetailsList, playlistWiseAudioDetails;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    DownloadPlaylistDetails downloadPlaylistDetails;\r\n    Dialog dialog;\r\n    List<String> fileNameList, playlistDownloadId, remainAudio;\r\n    ItemTouchHelper touchHelper;\r\n    Runnable UpdateSongTime2;\r\n    int SongListSize = 0, count;\r\n    private Handler handler1, handler2;\r\n//    private Runnable UpdateSongTime1 = new Runnable() {\r\n//        @Override\r\n//        public void run() {\r\n//            getMediaByPer(PlaylistID,SongListSize);\r\n//\r\n///*            if (fileNameList.size() != 0) {\r\n//                if (remainAudio.size() <= SongListSize) {\r\n//                    int total = SongListSize;\r\n//                    int remain = remainAudio.size();\r\n//                    int complate = total - remain;\r\n//                    long progressPercent = complate * 100 / total;\r\n//                    int downloadProgress1 = (int) progressPercent;\r\n//                    if (SongListSize == 1) {\r\n//                        if (downloadProgress <= 100) {\r\n//                            binding.pbProgress.setProgress(downloadProgress);\r\n//                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n//                            binding.ivDownloads.setVisibility(View.GONE);\r\n//                            if (downloadProgress == 100) {\r\n//                                getDownloadData();\r\n//                            }\r\n//                        }\r\n//                    } else if (downloadProgress1 <= 100) {\r\n//                        if (downloadProgress1 == 100) {\r\n//                            getDownloadData();\r\n//                            binding.pbProgress.setVisibility(View.GONE);\r\n//                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n//                        } else {\r\n//                            binding.pbProgress.setProgress(downloadProgress1);\r\n//                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n//                            binding.ivDownloads.setVisibility(View.GONE);\r\n//                        }\r\n//                    } else {\r\n//                        binding.pbProgress.setVisibility(View.GONE);\r\n//                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n//                    }\r\n//                }\r\n//                getDownloadData();\r\n//                handler1.postDelayed(this, 500);\r\n//            }else {\r\n//                binding.pbProgress.setVisibility(View.GONE);\r\n//                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                handler1.removeCallbacks(UpdateSongTime1);\r\n//                getDownloadData();\r\n//            }*/\r\n//            handler1.postDelayed(this, 500);\r\n//        }\r\n//    };\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_playlists, container, false);\r\n        view = binding.getRoot();\r\n//        handler1 = new Handler();\r\n        handler2 = new Handler();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        activity = getActivity();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        fileNameList = new ArrayList<>();\r\n        playlistDownloadId = new ArrayList<>();\r\n//        remainAudio = new ArrayList<>();\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        playlistSongsList = new ArrayList<>();\r\n        changedAudio = new ArrayList<>();\r\n        if (getArguments() != null) {\r\n            New = getArguments().getString(\"New\");\r\n            PlaylistID = getArguments().getString(\"PlaylistID\");\r\n            PlaylistName = getArguments().getString(\"PlaylistName\");\r\n            PlaylistImage = getArguments().getString(\"PlaylistImage\");\r\n            MyDownloads = getArguments().getString(\"MyDownloads\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(view1 -> callBack());\r\n        if (BWSApplication.isNetworkConnected(getActivity()) && !MyDownloads.equalsIgnoreCase(\"1\")) {\r\n            binding.llMore.setVisibility(View.VISIBLE);\r\n            binding.llMore.setClickable(true);\r\n            binding.llMore.setEnabled(true);\r\n            binding.ivMore.setImageResource(R.drawable.ic_menu_icon);\r\n            binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            binding.llMore.setVisibility(View.VISIBLE);\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setImageResource(R.drawable.ic_menu_icon);\r\n            binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n        }\r\n\r\n        binding.llMore.setOnClickListener(view13 -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            handler2.removeCallbacks(UpdateSongTime2);\r\n            Intent i = new Intent(getActivity(), MyPlaylistActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            startActivity(i);\r\n\r\n        });\r\n\r\n        binding.tvSearch.setOnClickListener(view14 -> {\r\n            Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            startActivity(i);\r\n        });\r\n\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        searchClear(searchEditText);\r\n\r\n        closeButton.setOnClickListener(v -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                binding.searchView.clearFocus();\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                try {\r\n                    if (adpater2 != null) {\r\n                        adpater2.getFilter().filter(search);\r\n                        SearchFlag = search;\r\n                        Log.e(\"searchsearch\", \"\" + search);\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView.LayoutManager playList = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists.setLayoutManager(playList);\r\n        binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        binding.llDownloads.setOnClickListener(view1 -> {\r\n            callDownload(\"\", \"\", \"\", playlistSongsList, 0, binding.llDownloads, binding.ivDownloads);\r\n        });\r\n\r\n        RefreshNew = New;\r\n        if (New.equalsIgnoreCase(\"1\")) {\r\n            binding.llAddAudio.setVisibility(View.VISIBLE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.INVISIBLE);\r\n            binding.llListing.setVisibility(View.GONE);\r\n            binding.btnAddAudio.setOnClickListener(view -> {\r\n                Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n                i.putExtra(\"PlaylistID\", PlaylistID);\r\n                startActivity(i);\r\n            });\r\n        } else if (New.equalsIgnoreCase(\"0\")) {\r\n            binding.llAddAudio.setVisibility(View.GONE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n            binding.llListing.setVisibility(View.VISIBLE);\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n        return view;\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail(String download) {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadPlaylistDetailsList.size() != 0 /*New.equalsIgnoreCase(\"1\") ||*/) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (RefreshIcon == 0) {\r\n                    enableDisableDownload(false, \"gray\");\r\n                } else if (download.equalsIgnoreCase(\"1\") /* New.equalsIgnoreCase(\"1\") ||*/) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (download.equalsIgnoreCase(\"0\") || download.equalsIgnoreCase(\"\") ||\r\n                        New.equalsIgnoreCase(\"0\") || RefreshIcon != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail2() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n   /*\r\n                    \"PlaylistDesc\": \"When life gets tough and you struggle through the days, download the Ultimate Self-development Bundle to help you in finding a new appreciation for life. Everyone can use a little help in all areas of their lives at times. There are 12 programs aimed to help your self-development:\",\r\n                    \"PlaylistMastercat\": \"Self-development\",\r\n                    \"PlaylistSubcat\": \"Self-expression, Focus, Discipline, Self-love, Mindset, Passion, Enthusiasm, Gratitude, Self-doubt, Inner Strength \",\r\n                    \"PlaylistImage\": \"https://brainwellnessspa.com.au/wp-content/uploads/2018/06/Ultimate self development bundle.jpg\",\r\n                    \"PlaylistSongs \" */\r\n                downloadAudioDetailsList = GetAllMedia();\r\n                playlistWiseAudioDetails = GetMedia();\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private void enableDisableDownload(boolean b, String color) {\r\n        if (b) {\r\n            binding.llDownloads.setClickable(true);\r\n            binding.llDownloads.setEnabled(true);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            binding.llDownloads.setClickable(false);\r\n            binding.llDownloads.setEnabled(false);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            if (color.equalsIgnoreCase(\"gray\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            } else if (color.equalsIgnoreCase(\"orange\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetAllMedia() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData1();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        view.setFocusableInTouchMode(true);\r\n        view.requestFocus();\r\n        view.setOnKeyListener((v, keyCode, event) -> {\r\n            binding.searchView.clearFocus();\r\n            if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                callBack();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        super.onResume();\r\n        if (deleteFrg == 1) {\r\n            callBack();\r\n            deleteFrg = 0;\r\n        } else if (addToPlayList) {\r\n            PlaylistID = MyPlaylistId;\r\n            prepareData(UserID, MyPlaylistId);\r\n            addToPlayList = false;\r\n        } else {\r\n            prepareData(UserID, PlaylistID);\r\n        }/* else if (addToSearch) {\r\n            prepareData(UserID, MyPlaylistIds);\r\n            addToSearch = false;\r\n        }*/\r\n        if (comeRename == 1) {\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n    }\r\n\r\n    private void callBack() {\r\n        binding.searchView.clearFocus();\r\n        if (comefrom_search == 2) {\r\n            Bundle bundle = new Bundle();\r\n            Fragment playlistFragment = new ViewAllPlaylistFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, playlistFragment)\r\n                    .commit();\r\n            bundle.putString(\"GetLibraryID\", GetPlaylistLibraryID);\r\n            bundle.putString(\"MyDownloads\", MyDownloads);\r\n            playlistFragment.setArguments(bundle);\r\n//            comefrom_search = 0;\r\n        } else if (comefrom_search == 1) {\r\n            Fragment fragment = new SearchFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, fragment)\r\n                    .commit();\r\n            comefrom_search = 0;\r\n        } else if (comefrom_search == 0) {\r\n            Fragment fragment = new PlaylistFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, fragment)\r\n                    .commit();\r\n            comefrom_search = 0;\r\n        } else if (comefrom_search == 3) {\r\n            Intent i = new Intent(getActivity(), DownloadsActivity.class);\r\n            ComeFrom_Playlist = true;\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            startActivity(i);\r\n            getActivity().finish();\r\n//            comefrom_search = 0;\r\n        }\r\n    }\r\n\r\n    private void searchClear(EditText searchEditText) {\r\n        if (ComeFindAudio == 1) {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n            ComeFindAudio = 0;\r\n        } else if (ComeFindAudio == 2) {\r\n            binding.searchView.requestFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n            ComeFindAudio = 0;\r\n        }\r\n\r\n    }\r\n\r\n    private void prepareData(String UserId, String PlaylistId) {\r\n        if (comefrom_search == 3) {\r\n            binding.llExtra.setVisibility(View.VISIBLE);\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 260);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n        binding.tvPlaylist.setText(\"Playlist\");\r\n        searchClear(searchEditText);\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        try {\r\n            if (IsLock.equalsIgnoreCase(\"1\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n            }\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                callAddTransFrag();\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                params.setMargins(10, 8, 10, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                params.setMargins(10, 8, 10, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            if (!MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                Call<SubPlayListModel> listCall = APIClient.getClient().getSubPlayLists(UserId, PlaylistId);\r\n                listCall.enqueue(new Callback<SubPlayListModel>() {\r\n                    @SuppressLint(\"ClickableViewAccessibility\")\r\n                    @Override\r\n                    public void onResponse(Call<SubPlayListModel> call, Response<SubPlayListModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                            SubPlayListModel listModel = response.body();\r\n                            try {\r\n                                if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"0\") ||\r\n                                        listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n\r\n                                } else if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"1\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                                }\r\n                            } catch (Exception e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                            getDownloadData();\r\n                            SongListSize = listModel.getResponseData().getPlaylistSongs().size();\r\n                            getMediaByPer(PlaylistId, SongListSize);\r\n                            if (listModel.getResponseData().getCreated().equalsIgnoreCase(\"1\")) {\r\n                                searchEditText.setHint(R.string.playlist_or_audio_search);\r\n                                binding.tvSearch.setHint(R.string.playlist_or_audio_search);\r\n//                                binding.tvSearch.setTextSize(14);\r\n                            } else {\r\n                                searchEditText.setHint(\"Search for audios\");\r\n                                binding.tvSearch.setHint(\"Search for audios\");\r\n                            }\r\n                            binding.rlSearch.setVisibility(View.VISIBLE);\r\n                            binding.llMore.setVisibility(View.VISIBLE);\r\n                            binding.llReminder.setVisibility(View.VISIBLE);\r\n                            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n                            binding.tvTag.setText(R.string.Audios_in_Playlist);\r\n                            binding.llReminder.setOnClickListener(view -> {\r\n                                if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"0\") ||\r\n                                        listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n                                    Intent i = new Intent(getActivity(), ReminderActivity.class);\r\n                                    ComeScreenReminder = 0;\r\n                                    i.putExtra(\"ComeFrom\", \"1\");\r\n                                    i.putExtra(\"PlaylistID\", PlaylistID);\r\n                                    i.putExtra(\"PlaylistName\", listModel.getResponseData().getPlaylistName());\r\n                                    i.putExtra(\"Time\", listModel.getResponseData().getReminderTime());\r\n                                    i.putExtra(\"Day\", listModel.getResponseData().getReminderDay());\r\n                                    startActivity(i);\r\n                                } else if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"1\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                                    dialog = new Dialog(activity);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.delete_payment_card);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(activity.getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                                    final TextView tvSubTitle = dialog.findViewById(R.id.tvSubTitle);\r\n                                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                                    final Button Btn = dialog.findViewById(R.id.Btn);\r\n                                    tvTitle.setText(\"Reminder off\");\r\n                                    tvSubTitle.setText(\"Are you sure you want to reminder off ?\");\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n                                    Btn.setOnTouchListener((view1, event) -> {\r\n                                        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                                            switch (event.getAction()) {\r\n                                                case MotionEvent.ACTION_DOWN: {\r\n                                                    Button views = (Button) view1;\r\n                                                    views.getBackground().setColorFilter(0x77000000, PorterDuff.Mode.SRC_ATOP);\r\n                                                    view1.invalidate();\r\n                                                    break;\r\n                                                }\r\n                                                case MotionEvent.ACTION_UP:\r\n                                                    Call<ReminderStatusPlaylistModel> listCall1 = APIClient.getClient().getReminderStatusPlaylist(UserID, PlaylistID, \"0\");/*set 1 or not 0 */\r\n                                                    listCall1.enqueue(new Callback<ReminderStatusPlaylistModel>() {\r\n                                                        @Override\r\n                                                        public void onResponse(Call<ReminderStatusPlaylistModel> call1, Response<ReminderStatusPlaylistModel> response1) {\r\n                                                            if (response1.isSuccessful()) {\r\n                                                                ReminderStatusPlaylistModel listModel1 = response1.body();\r\n//                                                                prepareData(UserID, PlaylistID);\r\n                                                                listModel.getResponseData().setIsReminder(listModel1.getResponseData().getIsCheck());\r\n                                                                binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n                                                                dialog.dismiss();\r\n                                                                BWSApplication.showToast(listModel1.getResponseMessage(), activity);\r\n                                                            }\r\n                                                        }\r\n\r\n                                                        @Override\r\n                                                        public void onFailure(Call<ReminderStatusPlaylistModel> call1, Throwable t) {\r\n                                                        }\r\n                                                    });\r\n\r\n\r\n                                                case MotionEvent.ACTION_CANCEL: {\r\n                                                    Button views = (Button) view1;\r\n                                                    views.getBackground().clearColorFilter();\r\n                                                    views.invalidate();\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n                                        }\r\n\r\n                                        return true;\r\n                                    });\r\n\r\n                                    tvGoBack.setOnClickListener(v -> {\r\n                                        dialog.dismiss();\r\n                                    });\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n\r\n                                }\r\n                            });\r\n                            playlistSongsList = listModel.getResponseData().getPlaylistSongs();\r\n                            downloadPlaylistDetails = new DownloadPlaylistDetails();\r\n                            downloadPlaylistDetails.setPlaylistID(listModel.getResponseData().getPlaylistID());\r\n                            downloadPlaylistDetails.setPlaylistName(listModel.getResponseData().getPlaylistName());\r\n                            downloadPlaylistDetails.setPlaylistDesc(listModel.getResponseData().getPlaylistDesc());\r\n                            downloadPlaylistDetails.setIsReminder(listModel.getResponseData().getIsReminder());\r\n                            downloadPlaylistDetails.setPlaylistMastercat(listModel.getResponseData().getPlaylistMastercat());\r\n                            downloadPlaylistDetails.setPlaylistSubcat(listModel.getResponseData().getPlaylistSubcat());\r\n                            downloadPlaylistDetails.setPlaylistImage(listModel.getResponseData().getPlaylistImage());\r\n                            downloadPlaylistDetails.setTotalAudio(listModel.getResponseData().getTotalAudio());\r\n                            downloadPlaylistDetails.setTotalDuration(listModel.getResponseData().getTotalDuration());\r\n                            downloadPlaylistDetails.setTotalhour(listModel.getResponseData().getTotalhour());\r\n                            downloadPlaylistDetails.setTotalminute(listModel.getResponseData().getTotalminute());\r\n                            downloadPlaylistDetails.setCreated(listModel.getResponseData().getCreated());\r\n                            downloadPlaylistDetails.setDownload(listModel.getResponseData().getDownload());\r\n                            downloadPlaylistDetails.setLike(listModel.getResponseData().getLike());\r\n\r\n                            setData(listModel.getResponseData());\r\n                            downloadAudioDetailsList = GetAllMedia();\r\n                            downloadPlaylistDetailsList = GetPlaylistDetail(listModel.getResponseData().getDownload());\r\n                            playlistWiseAudioDetails = GetMedia();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<SubPlayListModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                });\r\n            } else {\r\n                downloadPlaylistDetailsList = GetPlaylistDetail2();\r\n            }\r\n        } else {\r\n            downloadPlaylistDetailsList = GetPlaylistDetail2();\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private void callAddTransFrag() {\r\n        Fragment fragment = new TransparentPlayerFragment();\r\n        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n        fragmentManager1.beginTransaction()\r\n                .add(R.id.flContainer, fragment)\r\n                .commit();\r\n    }\r\n\r\n    private void getMediaByPer(String playlistID, int totalAudio) {\r\n        class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                count = DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getCountDownloadProgress(\"Compete\", playlistID);\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                downloadPlaylistDetailsList = GetPlaylistDetail(downloadPlaylistDetails.getDownload());\r\n\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    if (count <= totalAudio) {\r\n                        if (count == totalAudio) {\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        } else {\r\n                            long progressPercent = count * 100 / totalAudio;\r\n                            int downloadProgress1 = (int) progressPercent;\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            binding.pbProgress.setProgress(downloadProgress1);\r\n                            getMediaByPer(playlistID, totalAudio);\r\n//                             handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        getMediaByPer st = new getMediaByPer();\r\n        st.execute();\r\n    }\r\n\r\n    private void getDownloadData() {\r\n        try {\r\n            SharedPreferences sharedy = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n               /* remainAudio = new ArrayList<>();\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 0; i < fileNameList.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            remainAudio.add(playlistDownloadId.get(i));\r\n                        }\r\n                    }\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        if (remainAudio.size() < SongListSize) {\r\n                            handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    }\r\n                    //\r\n                } else {\r\n                    fileNameList = new ArrayList<>();\r\n                    playlistDownloadId = new ArrayList<>();\r\n                    remainAudio = new ArrayList<>();\r\n                }*/\r\n            } else {\r\n                fileNameList = new ArrayList<>();\r\n                playlistDownloadId = new ArrayList<>();\r\n//                remainAudio = new ArrayList<>();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void setData(SubPlayListModel.ResponseData listModel) {\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                5, 3, 1f, 0);\r\n        binding.ivBanner.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivBanner.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivBanner.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        if (listModel.getPlaylistName().equalsIgnoreCase(\"\") ||\r\n                listModel.getPlaylistName() == null) {\r\n            binding.tvLibraryName.setText(R.string.My_Playlist);\r\n        } else {\r\n            binding.tvLibraryName.setText(listModel.getPlaylistName());\r\n        }\r\n        binding.tvPlaylist.setText(\"Playlist\");\r\n        if (!listModel.getPlaylistImage().equalsIgnoreCase(\"\")) {\r\n            try {\r\n                Glide.with(getActivity()).load(listModel.getPlaylistImage()).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivBanner);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            binding.ivBanner.setImageResource(R.drawable.audio_bg);\r\n        }\r\n\r\n        if (listModel.getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                listModel.getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                        listModel.getTotalhour().equalsIgnoreCase(\"\")\r\n                        && listModel.getTotalminute().equalsIgnoreCase(\"\")) {\r\n            binding.tvLibraryDetail.setText(\"0 Audio | 0h 0m\");\r\n        } else {\r\n            if (listModel.getTotalminute().equalsIgnoreCase(\"\")) {\r\n                binding.tvLibraryDetail.setText(listModel.getTotalAudio() + \" Audio | \"\r\n                        + listModel.getTotalhour() + \"h 0m\");\r\n            } else {\r\n                binding.tvLibraryDetail.setText(listModel.getTotalAudio() + \" Audio | \"\r\n                        + listModel.getTotalhour() + \"h \" + listModel.getTotalminute() + \"m\");\r\n            }\r\n        }\r\n        RefreshIcon = listModel.getPlaylistSongs().size();\r\n        RefreshIconData = listModel.getPlaylistSongs().size();\r\n\r\n        if (listModel.getPlaylistSongs().size() == 0) {\r\n            binding.llAddAudio.setVisibility(View.VISIBLE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.INVISIBLE);\r\n            binding.llListing.setVisibility(View.GONE);\r\n            binding.btnAddAudio.setOnClickListener(view -> {\r\n                Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n                i.putExtra(\"PlaylistID\", PlaylistID);\r\n                startActivity(i);\r\n            });\r\n        } else {\r\n            binding.llAddAudio.setVisibility(View.GONE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n            binding.llListing.setVisibility(View.VISIBLE);\r\n            try {\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    adpater2 = new PlayListsAdpater2(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated());\r\n                    binding.rvPlayLists.setAdapter(adpater2);\r\n                    binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                    binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                    enableDisableDownload(false, \"orange\");\r\n                    binding.llReminder.setClickable(false);\r\n                    binding.llReminder.setEnabled(false);\r\n                    binding.ivReminder.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                    binding.rlSearch.setVisibility(View.GONE);\r\n                } else {\r\n                    if (listModel.getCreated().equalsIgnoreCase(\"1\")) {\r\n                        adpater = new PlayListsAdpater(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated(), this);\r\n//                        SongListSize = listModel.getPlaylistSongs().size();\r\n                        ItemTouchHelper.Callback callback = new ItemMoveCallback(adpater);\r\n                        touchHelper = new ItemTouchHelper(callback);\r\n                        touchHelper.attachToRecyclerView(binding.rvPlayLists);\r\n                        binding.rvPlayLists.setAdapter(adpater);\r\n                    } else {\r\n                        adpater2 = new PlayListsAdpater2(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated());\r\n                        binding.rvPlayLists.setAdapter(adpater2);\r\n                    }\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callTransparentFrag(int position, Context ctx, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList,\r\n                                     String myPlaylist) {\r\n        SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        if (queuePlay) {\r\n            int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n            Gson gson = new Gson();\r\n            String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                }.getType();\r\n                addToQueueModelList = gson.fromJson(json1, type1);\r\n            }\r\n            addToQueueModelList.remove(position1);\r\n            SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared2.edit();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();\r\n\r\n        }\r\n        player = 1;\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isPause = false;\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isRemoved = false;\r\n        newClick = true;\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(listModelList);\r\n        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, myPlaylist);\r\n        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n        editor.commit();\r\n        try {\r\n            callAddTransFrag();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void callRemove(String id, String PlaylistAudioId, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData, int position) {\r\n        String AudioId = id;\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SucessModel> listCall = APIClient.getClient().getRemoveAudioFromPlaylist(UserID, AudioId, PlaylistID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SucessModel listModel = response.body();\r\n                        mData.remove(position);\r\n                        if (mData.size() == 0) {\r\n                            enableDisableDownload(false, \"gray\");\r\n                        }\r\n                        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (pos == position && position < mData.size() - 1) {\r\n//                                            pos = pos + 1;\r\n                                if (isDisclaimer == 1) {\r\n//                                    BWSApplication.showToast(\"The audio shall remove after the disclaimer\", getActivity());\r\n                                } else {\r\n                                    callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\");\r\n                                }\r\n                            } else if (pos == position && position == mData.size() - 1) {\r\n                                pos = 0;\r\n                                if (isDisclaimer == 1) {\r\n//                                    BWSApplication.showToast(\"The audio shall remove after the disclaimer\", getActivity());\r\n                                } else {\r\n                                    callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\");\r\n                                }\r\n                            } else if (pos < position && pos < mData.size() - 1) {\r\n                                saveToPref(pos, mData);\r\n                            } else if (pos > position && pos == mData.size()) {\r\n                                pos = pos - 1;\r\n                                saveToPref(pos, mData);\r\n                            }\r\n                        }\r\n                        prepareData(UserID, PlaylistID);\r\n                        BWSApplication.showToast(listModel.getResponseMessage(), getActivity());\r\n                    }\r\n                }\r\n\r\n                private void saveToPref(int pos, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData) {\r\n                    SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shareddd.edit();\r\n                    Gson gson = new Gson();\r\n                    String json = gson.toJson(mData);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                    editor.commit();\r\n                    callAddTransFrag();\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private void callDownload(String id, String audioFile, String Name, ArrayList<SubPlayListModel.ResponseData.PlaylistSong>\r\n            playlistSongs, int position, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        if (id.isEmpty() && Name.isEmpty() && audioFile.isEmpty()) {\r\n            enableDisableDownload(false, \"orange\");\r\n            List<String> url = new ArrayList<>();\r\n            List<String> name = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs2 = new ArrayList<>();\r\n            playlistSongs2 = playlistSongs;\r\n            if (downloadAudioDetailsList.size() != 0) {\r\n                for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                    if (playlistSongs2.size() == 0) {\r\n                        break;\r\n                    } else {\r\n                        for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                            if (playlistSongs2.size() != 0) {\r\n                                if (playlistSongs2.get(x).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                    playlistSongs2.remove(x);\r\n                                }\r\n                                if (playlistSongs2.size() == 0) {\r\n                                    break;\r\n                                }\r\n                            } else break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (playlistSongs2.size() != 0) {\r\n                for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                    name.add(playlistSongs2.get(x).getName());\r\n                    url.add(playlistSongs2.get(x).getAudioFile());\r\n                    downloadPlaylistId.add(playlistSongs2.get(x).getPlaylistID());\r\n                }\r\n            }\r\n            byte[] encodedBytes = new byte[1024];\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url.addAll(audioFile1);\r\n                    name.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            if (url.size() != 0) {\r\n                DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url);\r\n                String nameJson = gson.toJson(name);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                fileNameList = name;\r\n                playlistDownloadId = downloadPlaylistId;\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                /*remainAudio = new ArrayList<>();\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                        remainAudio.add(playlistDownloadId.get(i));\r\n                    }\r\n                }*/\r\n                SongListSize = playlistSongs.size();\r\n//                handler1.postDelayed(UpdateSongTime1, 500);\r\n            }\r\n            binding.pbProgress.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setVisibility(View.GONE);\r\n//            String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n//            SaveMedia(EncodeBytes, dirPath, playlistSongs, i, llDownload);\r\n            getMediaByPer(PlaylistID, SongListSize);\r\n            savePlaylist();\r\n            saveAllMedia(playlistSongsList, encodedBytes);\r\n        } else {\r\n            disableDownload(llDownload, ivDownloads);\r\n            List<String> url = new ArrayList<>();\r\n            List<String> name = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url.addAll(audioFile1);\r\n                    name.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            url.add(audioFile);\r\n            name.add(Name);\r\n            downloadPlaylistId.add(\"\");\r\n            if (url.size() != 0) {\r\n                DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url);\r\n                String nameJson = gson.toJson(name);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                fileNameList = name;\r\n                playlistDownloadId = downloadPlaylistId;\r\n            }\r\n            String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n            SaveMedia(new byte[1024], dirPath, playlistSongs, position, llDownload, ivDownloads);\r\n            handler2.postDelayed(UpdateSongTime2, 200);\r\n        }\r\n    }\r\n\r\n    private void savePlaylist() {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertPlaylist(downloadPlaylistDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n                getMediaByPer(PlaylistID, SongListSize);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void saveAllMedia(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, byte[] encodedBytes) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                for (int i = 0; i < playlistSongs.size(); i++) {\r\n                    downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                    downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"0\");\r\n                    if (downloadAudioDetailsList.size() != 0) {\r\n                        for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                            if (playlistSongs.get(i).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                downloadAudioDetails.setIsDownload(\"Complete\");\r\n                                downloadAudioDetails.setDownloadProgress(100);\r\n                            } else {\r\n                                downloadAudioDetails.setIsDownload(\"pending\");\r\n                                downloadAudioDetails.setDownloadProgress(0);\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                    downloadAudioDetails.setPlaylistId(playlistSongs.get(i).getPlaylistID());\r\n                    DatabaseClient.getInstance(getActivity())\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .insertMedia(downloadAudioDetails);\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n\r\n                enableDisableDownload(false, \"orange\");\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void SaveMedia(byte[] encodeBytes, String dirPath, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, int i, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                downloadAudioDetails.setDownload(\"1\");\r\n                downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                downloadAudioDetails.setIsSingle(\"1\");\r\n                downloadAudioDetails.setPlaylistId(\"\");\r\n                downloadAudioDetails.setIsDownload(\"pending\");\r\n                downloadAudioDetails.setDownloadProgress(0);\r\n                DatabaseClient.getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                disableDownload(llDownload, ivDownloads);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public void GetMedia(String url, Context ctx, String download, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(url);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                        disableDownload(llDownload, ivDownloads);\r\n                    }\r\n                } else if (download.equalsIgnoreCase(\"1\")) {\r\n                    disableDownload(llDownload, ivDownloads);\r\n                } else {\r\n                    enableDownload(llDownload, ivDownloads);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetMedia() {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        SubPlayListModel responseData = new SubPlayListModel();\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> details = new ArrayList<>();\r\n                        SubPlayListModel.ResponseData listModel = new SubPlayListModel.ResponseData();\r\n                        listModel.setPlaylistID(downloadPlaylistDetailsList.get(0).getPlaylistID());\r\n                        listModel.setPlaylistName(downloadPlaylistDetailsList.get(0).getPlaylistName());\r\n                        listModel.setPlaylistDesc(downloadPlaylistDetailsList.get(0).getPlaylistDesc());\r\n                        listModel.setPlaylistMastercat(downloadPlaylistDetailsList.get(0).getPlaylistMastercat());\r\n                        listModel.setPlaylistSubcat(downloadPlaylistDetailsList.get(0).getPlaylistSubcat());\r\n                        listModel.setPlaylistImage(downloadPlaylistDetailsList.get(0).getPlaylistImage());\r\n                        listModel.setTotalAudio(downloadPlaylistDetailsList.get(0).getTotalAudio());\r\n                        listModel.setTotalDuration(downloadPlaylistDetailsList.get(0).getTotalDuration());\r\n                        listModel.setTotalhour(downloadPlaylistDetailsList.get(0).getTotalhour());\r\n                        listModel.setTotalminute(downloadPlaylistDetailsList.get(0).getTotalminute());\r\n                        listModel.setCreated(downloadPlaylistDetailsList.get(0).getCreated());\r\n                        listModel.setLike(downloadPlaylistDetailsList.get(0).getLike());\r\n                        listModel.setIsReminder(downloadPlaylistDetailsList.get(0).getIsReminder());\r\n                        if (playlistWiseAudioDetails.size() != 0) {\r\n                            for (int i = 0; i < playlistWiseAudioDetails.size(); i++) {\r\n                                SubPlayListModel.ResponseData.PlaylistSong detail = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                detail.setID(playlistWiseAudioDetails.get(i).getID());\r\n                                detail.setName(playlistWiseAudioDetails.get(i).getName());\r\n                                detail.setAudioFile(playlistWiseAudioDetails.get(i).getAudioFile());\r\n                                detail.setAudioDirection(playlistWiseAudioDetails.get(i).getAudioDirection());\r\n                                detail.setAudiomastercat(playlistWiseAudioDetails.get(i).getAudiomastercat());\r\n                                detail.setAudioSubCategory(playlistWiseAudioDetails.get(i).getAudioSubCategory());\r\n                                detail.setImageFile(playlistWiseAudioDetails.get(i).getImageFile());\r\n                                detail.setLike(playlistWiseAudioDetails.get(i).getLike());\r\n                                detail.setDownload(playlistWiseAudioDetails.get(i).getDownload());\r\n                                detail.setAudioDuration(playlistWiseAudioDetails.get(i).getAudioDuration());\r\n                                details.add(detail);\r\n                            }\r\n                            listModel.setPlaylistSongs(details);\r\n                        }\r\n                        setData(listModel);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    private void enableDownload(RelativeLayout llDownload, ImageView ivDownloads) {\r\n        llDownload.setClickable(true);\r\n        llDownload.setEnabled(true);\r\n        ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n        ivDownloads.setColorFilter(activity.getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n    }\r\n\r\n    private void disableDownload(RelativeLayout llDownload, ImageView ivDownloads) {\r\n        ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n        ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        llDownload.setClickable(false);\r\n        llDownload.setEnabled(false);\r\n    }\r\n\r\n    @Override\r\n    public void requestDrag(RecyclerView.ViewHolder viewHolder) {\r\n        touchHelper.startDrag(viewHolder);\r\n    }\r\n\r\n    public class PlayListsAdpater extends RecyclerView.Adapter<PlayListsAdpater.MyViewHolder> implements Filterable/*, StartDragListener*/, ItemMoveCallback.ItemTouchHelperContract {\r\n        Context ctx;\r\n        String UserID, Created, name;\r\n        StartDragListener startDragListener;\r\n        int isDownloading = 0;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                String Created, StartDragListener startDragListener) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n            this.startDragListener = startDragListener;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutSortingBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout_sorting, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @SuppressLint(\"ClickableViewAccessibility\")\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n            UpdateSongTime2 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    for (int f = 0; f < listModelList.size(); f++) {\r\n                        if (fileNameList.size() != 0) {\r\n                            for (int i = 0; i < fileNameList.size(); i++) {\r\n                                if (fileNameList.get(i).equalsIgnoreCase(mData.get(f).getName())) {\r\n                                    if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(mData.get(f).getName())) {\r\n                                        if (downloadProgress <= 100) {\r\n                                            notifyItemChanged(f);\r\n                                         /*   holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.GONE);*/\r\n                                        } else {\r\n                                            holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                                            handler2.removeCallbacks(UpdateSongTime2);\r\n                                            getDownloadData();\r\n                                        }\r\n                                    } else {\r\n                                        notifyItemChanged(f);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (downloadProgress == 0) {\r\n                        notifyDataSetChanged();\r\n                        getDownloadData();\r\n                    }\r\n                    handler2.postDelayed(this, 300);\r\n                }\r\n            };\r\n            if (fileNameList.size() != 0) {\r\n             /*   for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                        isDownloading++;\r\n                        break;\r\n                    }else{\r\n                        holder.binding.pbProgress.setVisibility(View.GONE);\r\n                    }\r\n                }*/\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(mData.get(position).getName())) {\r\n                            if (downloadProgress <= 100) {\r\n                                if (downloadProgress == 100) {\r\n                                    holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                } else {\r\n                                    holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                    holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                                }\r\n                            } else {\r\n                                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                                handler2.removeCallbacks(UpdateSongTime2);\r\n                            }\r\n                        } else {\r\n                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                            handler2.postDelayed(UpdateSongTime2, 200);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n            }\r\n            holder.binding.tvTitle.setText(mData.get(position).getName());\r\n            holder.binding.tvTime.setText(mData.get(position).getAudioDuration());\r\n            holder.binding.llSort.setOnTouchListener((v, event) -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall sort after the disclaimer\", ctx);\r\n                    } else {\r\n                        if (event.getAction() ==\r\n                                MotionEvent.ACTION_DOWN) {\r\n                            startDragListener.requestDrag(holder);\r\n                        }\r\n                        if (event.getAction() ==\r\n                                MotionEvent.ACTION_UP) {\r\n                            startDragListener.requestDrag(holder);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (event.getAction() ==\r\n                            MotionEvent.ACTION_DOWN) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                    if (event.getAction() ==\r\n                            MotionEvent.ACTION_UP) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n            String id = mData.get(position).getID();\r\n//            GetMedia(id, activity, mData.get(position).getDownload(), holder.binding.llDownload, holder.binding.ivDownloads);\r\n            for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                if (downloadAudioDetailsList.get(i).getAudioFile().equalsIgnoreCase(mData.get(position).getAudioFile())\r\n                        && downloadAudioDetailsList.get(i).getPlaylistId().equalsIgnoreCase(\"\")) {\r\n                    //disableName.add(mData.get(position).getName());\r\n                    disableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                    break;\r\n                }/* else {\r\n                    enableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                }*/\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(0, ctx, listModelList, \"myPlaylist\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    listModelList2 =  addDisclaimer();\r\n                    listModelList2.addAll(listModelList);\r\n                    callTransparentFrag(0, ctx, listModelList2, \"myPlaylist\");\r\n                }\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(position, ctx, listModelList, \"myPlaylist\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    listModelList2 =  addDisclaimer();\r\n                    listModelList2.addAll(listModelList);\r\n                    callTransparentFrag(position, ctx, listModelList2, \"myPlaylist\");\r\n                }\r\n            });\r\n\r\n//            if (changedAudio != null) {\r\n//                callDragApi();\r\n//            }\r\n            holder.binding.llDownload.setOnClickListener(view -> {\r\n                name = mData.get(position).getName();\r\n                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                callDownload(mData.get(position).getID(), mData.get(position).getAudioFile(), mData.get(position).getName(), listFilterData, position, holder.binding.llDownload, holder.binding.ivDownloads);\r\n            });\r\n            try {\r\n                holder.binding.llRemove.setOnClickListener(view -> {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall remove after the disclaimer\", ctx);\r\n                        } else {\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                                BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                            } else {\r\n                                callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                            BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                        } else {\r\n                            callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                        }\r\n                    }\r\n                });\r\n\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (listFilterData != null) {\r\n                return listFilterData.size();\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public void onRowMoved(int fromPosition, int toPosition) {\r\n            if (fromPosition < toPosition) {\r\n                for (int i = fromPosition; i < toPosition; i++) {\r\n                    Collections.swap(listModelList, i, i + 1);\r\n                }\r\n            } else {\r\n                for (int i = fromPosition; i > toPosition; i--) {\r\n                    Collections.swap(listModelList, i, i - 1);\r\n                }\r\n            }\r\n            changedAudio.clear();\r\n            for (int i = 0; i < listModelList.size(); i++) {\r\n                changedAudio.add(listModelList.get(i).getID());\r\n            }\r\n\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            if (audioPlay) {\r\n                if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (fromPosition == pos) {\r\n                            pos = toPosition;\r\n                        }/* else if (toPosition == pos) {\r\n                            if (action == 0) {\r\n                                pos = pos + 1;\r\n                            } else if (action == 1) {\r\n                                pos = pos - 1;\r\n                            }\r\n                        }*/ else if (fromPosition < pos && toPosition > pos) {\r\n                            pos = pos - 1;\r\n                        } else if ((fromPosition > pos && toPosition > pos) || (fromPosition < pos && toPosition < pos)) {\r\n                            pos = pos;\r\n                        } else if (fromPosition > pos && toPosition < pos) {\r\n                            pos = pos + 1;\r\n                        } else if (fromPosition > pos && toPosition == pos) {\r\n                            pos = pos + 1;\r\n                        } else if (fromPosition < pos && toPosition == pos) {\r\n                            pos = pos - 1;\r\n                        }\r\n                        SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shareddd.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(listModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                        editor.commit();\r\n                        callAddTransFrag();\r\n                    }\r\n                }\r\n            }\r\n            callDragApi();\r\n\r\n            notifyItemMoved(fromPosition, toPosition);\r\n\r\n         /* SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();*/\r\n\r\n        }\r\n\r\n        private void callDragApi() {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Call<CardModel> listCall = APIClient.getClient().setShortedAudio(UserID, PlaylistID, TextUtils.join(\",\", changedAudio));\r\n                listCall.enqueue(new Callback<CardModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<CardModel> call, Response<CardModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            CardModel listModel = response.body();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<CardModel> call, Throwable t) {\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onRowClear(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        binding.rvPlayLists.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutSortingBinding binding;\r\n\r\n            public MyViewHolder(MyPlaylistLayoutSortingBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> addDisclaimer() {\r\n        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n        SubPlayListModel.ResponseData.PlaylistSong  mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n        mainPlayModel.setID(\"0\");\r\n        mainPlayModel.setName(\"Disclaimer\");\r\n        mainPlayModel.setAudioFile(\"\");\r\n        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n        mainPlayModel.setAudiomastercat(\"\");\r\n        mainPlayModel.setAudioSubCategory(\"\");\r\n        mainPlayModel.setImageFile(\"\");\r\n        mainPlayModel.setLike(\"\");\r\n        mainPlayModel.setDownload(\"\");\r\n        mainPlayModel.setAudioDuration(\"0:48\");\r\n        listModelList2.add(mainPlayModel);\r\n        return listModelList2;\r\n    }\r\n\r\n    public class PlayListsAdpater2 extends RecyclerView.Adapter<PlayListsAdpater2.MyViewHolder2> implements Filterable {\r\n        Context ctx;\r\n        String UserID, Created;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater2(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                 String Created) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder2 onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout, parent, false);\r\n            return new MyViewHolder2(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder2 holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n            holder.binding.tvTitleA.setText(mData.get(position).getName());\r\n            holder.binding.tvTitleB.setText(mData.get(position).getName());\r\n            holder.binding.tvTimeA.setText(mData.get(position).getAudioDuration());\r\n            holder.binding.tvTimeB.setText(mData.get(position).getAudioDuration());\r\n            String id = mData.get(position).getID();\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n//            GetMedia(id, activity, mData.get(position).getDownload(), holder.binding.llDownload, holder.binding.ivDownloads);\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(0, ctx, listModelList, \"\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    listModelList2 =  addDisclaimer();\r\n                    listModelList2.addAll(listModelList);\r\n                    callTransparentFrag(0, ctx, listModelList2, \"\");\r\n                }\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(position, ctx, listModelList, \"\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    listModelList2 =  addDisclaimer();\r\n                    listModelList2.addAll(listModelList);\r\n                    callTransparentFrag(position, ctx, listModelList2, \"\");\r\n                }\r\n            });\r\n\r\n            if (Created.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.llMore.setVisibility(View.GONE);\r\n                holder.binding.llCenterLayoutA.setVisibility(View.GONE);\r\n                holder.binding.llCenterLayoutB.setVisibility(View.VISIBLE);\r\n                holder.binding.llDownload.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemove.setVisibility(View.VISIBLE);\r\n                holder.binding.llSort.setVisibility(View.VISIBLE);\r\n                binding.tvSearch.setVisibility(View.VISIBLE);\r\n                binding.searchView.setVisibility(View.GONE);\r\n            } else if (Created.equalsIgnoreCase(\"0\")) {\r\n                holder.binding.llMore.setVisibility(View.VISIBLE);\r\n                holder.binding.llCenterLayoutA.setVisibility(View.VISIBLE);\r\n                holder.binding.llCenterLayoutB.setVisibility(View.GONE);\r\n                holder.binding.llDownload.setVisibility(View.GONE);\r\n                holder.binding.llRemove.setVisibility(View.GONE);\r\n                holder.binding.llSort.setVisibility(View.GONE);\r\n                binding.tvSearch.setVisibility(View.GONE);\r\n                binding.searchView.setVisibility(View.VISIBLE);\r\n            }\r\n\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                holder.binding.llMore.setClickable(true);\r\n                holder.binding.llMore.setEnabled(true);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                holder.binding.llMore.setClickable(false);\r\n                holder.binding.llMore.setEnabled(false);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            holder.binding.llMore.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"You can see details after the disclaimer\", ctx);\r\n                    } else {\r\n                        Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                        i.putExtra(\"play\", \"playlist\");\r\n                        i.putExtra(\"ID\", mData.get(position).getID());\r\n                        i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                        i.putExtra(\"position\", position);\r\n                        i.putParcelableArrayListExtra(\"data\", mData);\r\n                        i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                        startActivity(i);\r\n                    }\r\n                } else {\r\n                    Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                    i.putExtra(\"play\", \"playlist\");\r\n                    i.putExtra(\"ID\", mData.get(position).getID());\r\n                    i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                    i.putExtra(\"position\", position);\r\n                    i.putParcelableArrayListExtra(\"data\", mData);\r\n                    i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listFilterData.size();\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.rvPlayLists.setVisibility(View.GONE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        Log.e(\"searchsearchsearchsearchsearch\", SearchFlag);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        public class MyViewHolder2 extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolder2(MyPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java	(date 1602825202654)
@@ -666,7 +666,7 @@
                             downloadPlaylistDetails.setIsReminder(listModel.getResponseData().getIsReminder());
                             downloadPlaylistDetails.setPlaylistMastercat(listModel.getResponseData().getPlaylistMastercat());
                             downloadPlaylistDetails.setPlaylistSubcat(listModel.getResponseData().getPlaylistSubcat());
-                            downloadPlaylistDetails.setPlaylistImage(listModel.getResponseData().getPlaylistImage());
+                            downloadPlaylistDetails.setPlaylistImage(listModel.getResponseData().getSquarePlaylistImage());
                             downloadPlaylistDetails.setTotalAudio(listModel.getResponseData().getTotalAudio());
                             downloadPlaylistDetails.setTotalDuration(listModel.getResponseData().getTotalDuration());
                             downloadPlaylistDetails.setTotalhour(listModel.getResponseData().getTotalhour());
@@ -1427,6 +1427,14 @@
                     handler2.postDelayed(this, 300);
                 }
             };
+
+            if (Created.equalsIgnoreCase("1")) {
+                binding.tvSearch.setVisibility(View.VISIBLE);
+                binding.searchView.setVisibility(View.GONE);
+            } else if (Created.equalsIgnoreCase("0")) {
+                binding.tvSearch.setVisibility(View.GONE);
+                binding.searchView.setVisibility(View.VISIBLE);
+            }
             if (fileNameList.size() != 0) {
              /*   for (int i = 0; i < fileNameList.size(); i++) {
                     if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase("")) {
Index: app/src/main/java/com/brainwellnessspa/ReminderModule/Activities/ReminderDetailsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.ReminderModule.Activities;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.ItemTouchHelper;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.ReminderModule.Models.DeleteRemiderModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.RemiderDetailsModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.ReminderStatusModel;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityReminderDetailsBinding;\r\nimport com.brainwellnessspa.databinding.RemiderDetailsLayoutBinding;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class ReminderDetailsActivity extends AppCompatActivity {\r\n    ActivityReminderDetailsBinding binding;\r\n    String UserId;\r\n    Context ctx;\r\n    Activity activity;\r\n    ArrayList<String> remiderIds = new ArrayList<>();\r\n    RemiderDetailsAdapter adapter;\r\n    public static String comeBack = \"\";\r\n    RemiderDetailsModel listReminderModel;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_reminder_details);\r\n        ctx = ReminderDetailsActivity.this;\r\n        activity = ReminderDetailsActivity.this;\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserId = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getApplicationContext());\r\n        binding.rvReminderDetails.setLayoutManager(mLayoutManager);\r\n        binding.rvReminderDetails.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        /*ItemTouchHelper itemTouchHelper = new ItemTouchHelper(simpleCallback);\r\n        itemTouchHelper.attachToRecyclerView(binding.rvReminderDetails);*/\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            finish();\r\n        });\r\n\r\n        prepareData();\r\n\r\n        binding.btnAddReminder.setOnClickListener(view -> {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                Intent i = new Intent(ctx, ReminderActivity.class);\r\n                i.putExtra(\"ComeFrom\", \"\");\r\n                i.putExtra(\"PlaylistID\", \"\");\r\n                i.putExtra(\"PlaylistName\", \"\");\r\n                i.putExtra(\"Time\", \"\");\r\n                i.putExtra(\"Day\", \"\");\r\n                startActivity(i);\r\n                finish();\r\n            } else {\r\n                BWSApplication.showToast(ctx.getString(R.string.no_server_found), ctx);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        prepareData();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        finish();\r\n    }\r\n\r\n    private void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<RemiderDetailsModel> listCall = APIClient.getClient().getGetReminderStatus(UserId);\r\n            listCall.enqueue(new Callback<RemiderDetailsModel>() {\r\n                @Override\r\n                public void onResponse(Call<RemiderDetailsModel> call, Response<RemiderDetailsModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        RemiderDetailsModel listModel = response.body();\r\n                        listReminderModel = listModel;\r\n                        adapter = new RemiderDetailsAdapter(listModel.getResponseData());\r\n                        binding.rvReminderDetails.setAdapter(adapter);\r\n                        binding.btnAddReminder.setVisibility(View.VISIBLE);\r\n                        if (listModel.getResponseData().size() == 0) {\r\n                            binding.llError.setVisibility(View.VISIBLE);\r\n                            binding.rvReminderDetails.setVisibility(View.GONE);\r\n                        } else {\r\n                            binding.llError.setVisibility(View.GONE);\r\n                            binding.rvReminderDetails.setVisibility(View.VISIBLE);\r\n                        }\r\n\r\n                        if (remiderIds.size() == 0) {\r\n                            binding.llSelectAll.setVisibility(View.GONE);\r\n                            binding.btnAddReminder.setVisibility(View.VISIBLE);\r\n                            binding.btnDeleteReminder.setVisibility(View.GONE);\r\n                        } else {\r\n                            binding.llSelectAll.setVisibility(View.VISIBLE);\r\n                            binding.btnAddReminder.setVisibility(View.GONE);\r\n                            binding.btnDeleteReminder.setVisibility(View.VISIBLE);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<RemiderDetailsModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n\r\n        binding.btnDeleteReminder.setOnClickListener(view -> {\r\n            final Dialog dialog = new Dialog(ctx);\r\n            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n            dialog.setContentView(R.layout.delete_reminder);\r\n            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n            dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n            final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n            final RelativeLayout tvconfirm = dialog.findViewById(R.id.tvconfirm);\r\n\r\n            dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                    dialog.dismiss();\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n\r\n            tvconfirm.setOnClickListener(v -> {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    Call<DeleteRemiderModel> listCall = APIClient.getClient().getDeleteRemiderStatus(UserId,\r\n                            TextUtils.join(\",\", remiderIds));\r\n                    listCall.enqueue(new Callback<DeleteRemiderModel>() {\r\n                        @Override\r\n                        public void onResponse(Call<DeleteRemiderModel> call, Response<DeleteRemiderModel> response) {\r\n                            if (response.isSuccessful()) {\r\n                                DeleteRemiderModel model = response.body();\r\n                                remiderIds.clear();\r\n                                BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                                dialog.dismiss();\r\n                                prepareData();\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFailure(Call<DeleteRemiderModel> call, Throwable t) {\r\n                        }\r\n                    });\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            });\r\n\r\n            tvGoBack.setOnClickListener(v -> {\r\n                dialog.dismiss();\r\n            });\r\n            dialog.show();\r\n            dialog.setCancelable(false);\r\n        });\r\n    }\r\n\r\n    public class RemiderDetailsAdapter extends RecyclerView.Adapter<RemiderDetailsAdapter.MyViewHolder> {\r\n        private List<RemiderDetailsModel.ResponseData> model;\r\n\r\n        public RemiderDetailsAdapter(List<RemiderDetailsModel.ResponseData> model) {\r\n            this.model = model;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            RemiderDetailsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.remider_details_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.bind.tvName.setText(model.get(position).getPlaylistName());\r\n            holder.bind.tvDate.setText(model.get(position).getReminderDay());\r\n            holder.bind.tvTime.setText(model.get(position).getReminderTime());\r\n            holder.bind.view.setClickable(false);\r\n            holder.bind.view.setEnabled(false);\r\n\r\n            /*holder.bind.llChecked.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    if (holder.bind.cbChecked.isChecked()) {\r\n//                    notifyDataSetChanged();\r\n                        if (!remiderIds.contains(model.get(position).getReminderId())) {\r\n                            remiderIds.add(model.get(position).getReminderId());\r\n                            binding.tvSelectAll.setText(remiderIds.size() + \" selected\");\r\n                        } else {\r\n                        }\r\n                    } else {\r\n                        remiderIds.remove(model.get(position).getReminderId());\r\n                        binding.tvSelectAll.setText(remiderIds.size() + \" selected\");\r\n                    }\r\n                    if (remiderIds.size() == 0) {\r\n                        binding.llSelectAll.setVisibility(View.GONE);\r\n                        binding.btnAddReminder.setVisibility(View.VISIBLE);\r\n                        binding.btnDeleteReminder.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llSelectAll.setVisibility(View.VISIBLE);\r\n                        binding.btnAddReminder.setVisibility(View.GONE);\r\n                        binding.btnDeleteReminder.setVisibility(View.VISIBLE);\r\n                    }\r\n                    if (remiderIds.size() == model.size()) {\r\n                        binding.cbChecked.setChecked(true);\r\n                        binding.tvSelectAll.setText(remiderIds.size() + \" selected\");\r\n                    }\r\n                    Log.e(\"remiderIds\", TextUtils.join(\",\", remiderIds));\r\n                }\r\n            });*/\r\n\r\n            holder.bind.cbChecked.setOnCheckedChangeListener((compoundButton, b) -> {\r\n                if (holder.bind.cbChecked.isChecked()) {\r\n//                    notifyDataSetChanged();\r\n                    if (!remiderIds.contains(model.get(position).getReminderId())) {\r\n                        remiderIds.add(model.get(position).getReminderId());\r\n                        binding.tvSelectAll.setText(remiderIds.size() + \" selected\");\r\n                    } else {\r\n                    }\r\n                } else {\r\n                    remiderIds.remove(model.get(position).getReminderId());\r\n                    binding.tvSelectAll.setText(remiderIds.size() + \" selected\");\r\n                }\r\n                if (remiderIds.size() == 0) {\r\n                    binding.llSelectAll.setVisibility(View.GONE);\r\n                    binding.btnAddReminder.setVisibility(View.VISIBLE);\r\n                    binding.btnDeleteReminder.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.llSelectAll.setVisibility(View.VISIBLE);\r\n                    binding.btnAddReminder.setVisibility(View.GONE);\r\n                    binding.btnDeleteReminder.setVisibility(View.VISIBLE);\r\n                }\r\n                if (remiderIds.size() == model.size()) {\r\n                    binding.cbChecked.setChecked(true);\r\n                    binding.tvSelectAll.setText(remiderIds.size() + \" selected\");\r\n                }\r\n                Log.e(\"remiderIds\", TextUtils.join(\",\", remiderIds));\r\n            });\r\n\r\n            binding.llClose.setOnClickListener(view -> {\r\n                remiderIds.clear();\r\n                binding.llSelectAll.setVisibility(View.GONE);\r\n                binding.cbChecked.setChecked(false);\r\n                notifyDataSetChanged();\r\n            });\r\n\r\n            /*holder.bind.llChecked.setOnClickListener(view ->  {\r\n                if (binding.cbChecked.isChecked()) {\r\n                    remiderIds.clear();\r\n                    for (int i = 0; i < model.size(); i++) {\r\n                        remiderIds.add(model.get(i).getReminderId());\r\n                    }\r\n                } else {\r\n                    binding.llSelectAll.setVisibility(View.GONE);\r\n                    remiderIds.clear();\r\n                }\r\n                Log.e(\"remiderIds\", TextUtils.join(\",\", remiderIds));\r\n                notifyDataSetChanged();\r\n            });*/\r\n\r\n            binding.cbChecked.setOnClickListener(view -> {\r\n                if (binding.cbChecked.isChecked()) {\r\n                    remiderIds.clear();\r\n                    for (int i = 0; i < model.size(); i++) {\r\n                        remiderIds.add(model.get(i).getReminderId());\r\n                    }\r\n                } else {\r\n                    binding.llSelectAll.setVisibility(View.GONE);\r\n                    remiderIds.clear();\r\n                }\r\n                Log.e(\"remiderIds\", TextUtils.join(\",\", remiderIds));\r\n                notifyDataSetChanged();\r\n            });\r\n\r\n            if (remiderIds.contains(model.get(position).getReminderId())) {\r\n                holder.bind.cbChecked.setChecked(true);\r\n                binding.tvSelectAll.setText(remiderIds.size() + \" selected\");\r\n            } else {\r\n                holder.bind.cbChecked.setChecked(false);\r\n                binding.tvSelectAll.setText(remiderIds.size() + \" selected\");\r\n            }\r\n            if (remiderIds.size() == model.size()) {\r\n                binding.cbChecked.setChecked(true);\r\n                binding.tvSelectAll.setText(remiderIds.size() + \" selected\");\r\n            }\r\n            if (model.get(position).getIsCheck().equalsIgnoreCase(\"1\")) {\r\n                holder.bind.switchStatus.setChecked(true);\r\n            } else {\r\n                holder.bind.switchStatus.setChecked(false);\r\n            }\r\n            if (model.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.bind.switchStatus.setClickable(false);\r\n                holder.bind.switchStatus.setEnabled(false);\r\n                holder.bind.llSwitchStatus.setClickable(true);\r\n                holder.bind.llSwitchStatus.setEnabled(true);\r\n                holder.bind.llSwitchStatus.setOnClickListener(view -> {\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                });\r\n            } else if (model.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.bind.switchStatus.setClickable(false);\r\n                holder.bind.switchStatus.setEnabled(false);\r\n                holder.bind.llSwitchStatus.setClickable(true);\r\n                holder.bind.llSwitchStatus.setEnabled(true);\r\n                holder.bind.llSwitchStatus.setOnClickListener(view -> {\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                });\r\n            } else if (model.get(position).getIsLock().equalsIgnoreCase(\"0\") || model.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.bind.switchStatus.setClickable(true);\r\n                holder.bind.switchStatus.setEnabled(true);\r\n                holder.bind.llSwitchStatus.setClickable(false);\r\n                holder.bind.llSwitchStatus.setEnabled(false);\r\n                holder.bind.switchStatus.setOnCheckedChangeListener((compoundButton, checked) -> {\r\n                    if (checked) {\r\n                        prepareSwitchStatus(\"1\", model.get(position).getPlaylistId());\r\n                    } else {\r\n                        prepareSwitchStatus(\"0\", model.get(position).getPlaylistId());\r\n                    }\r\n                });\r\n            }\r\n\r\n            holder.bind.llMainLayout.setOnClickListener(view -> {\r\n                Intent i = new Intent(ctx, ReminderActivity.class);\r\n                i.putExtra(\"ComeFrom\", \"1\");\r\n                i.putExtra(\"PlaylistID\", model.get(position).getPlaylistId());\r\n                i.putExtra(\"PlaylistName\", model.get(position).getPlaylistName());\r\n                i.putExtra(\"Time\", model.get(position).getReminderTime());\r\n                i.putExtra(\"Day\", model.get(position).getRDay());\r\n                startActivity(i);\r\n                finish();\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return model.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            RemiderDetailsLayoutBinding bind;\r\n\r\n            public MyViewHolder(RemiderDetailsLayoutBinding bind) {\r\n                super(bind.getRoot());\r\n                this.bind = bind;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void prepareSwitchStatus(String reminderStatus, String PlaylistID) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<ReminderStatusModel> listCall = APIClient.getClient().getReminderStatus(UserId, PlaylistID, reminderStatus);/*set 1 or not 0 */\r\n            listCall.enqueue(new Callback<ReminderStatusModel>() {\r\n                @Override\r\n                public void onResponse(Call<ReminderStatusModel> call, Response<ReminderStatusModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        ReminderStatusModel listModel = response.body();\r\n                        BWSApplication.showToast(listModel.getResponseMessage(), activity);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<ReminderStatusModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    ItemTouchHelper.SimpleCallback simpleCallback = new ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT) {\r\n        @Override\r\n        public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) {\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public void onSwiped(final RecyclerView.ViewHolder viewHolder, int direction) {\r\n            final int position = viewHolder.getAdapterPosition();\r\n            if (direction == ItemTouchHelper.LEFT) {\r\n                final Dialog dialog = new Dialog(ctx);\r\n                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                dialog.setContentView(R.layout.cancel_membership);\r\n                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                final TextView tvSubTitle = dialog.findViewById(R.id.tvSubTitle);\r\n                final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                final RelativeLayout tvconfirm = dialog.findViewById(R.id.tvconfirm);\r\n                tvTitle.setText(\"Delete Reminder\");\r\n                tvSubTitle.setText(\"Are you sure you want to delete your reminder?\");\r\n                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                        dialog.dismiss();\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n\r\n                tvconfirm.setOnClickListener(v -> {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        Call<DeleteRemiderModel> listCall = APIClient.getClient().getDeleteRemiderStatus(UserId,\r\n                                listReminderModel.getResponseData().get(position).getReminderId());\r\n                        listCall.enqueue(new Callback<DeleteRemiderModel>() {\r\n                            @Override\r\n                            public void onResponse(Call<DeleteRemiderModel> call, Response<DeleteRemiderModel> response) {\r\n                                if (response.isSuccessful()) {\r\n                                    DeleteRemiderModel model = response.body();\r\n                                    BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                                    prepareData();\r\n                                    dialog.dismiss();\r\n                                }\r\n                            }\r\n\r\n                            @Override\r\n                            public void onFailure(Call<DeleteRemiderModel> call, Throwable t) {\r\n                            }\r\n                        });\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                });\r\n\r\n                tvGoBack.setOnClickListener(v -> {\r\n                    dialog.dismiss();\r\n                    prepareData();\r\n                });\r\n                dialog.show();\r\n                dialog.setCancelable(false);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getSwipeDirs(RecyclerView recyclerView, final RecyclerView.ViewHolder viewHolder) {\r\n            final int position = viewHolder.getAdapterPosition();\r\n            return super.getSwipeDirs(recyclerView, viewHolder);\r\n        }\r\n    };\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/ReminderModule/Activities/ReminderDetailsActivity.java	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ app/src/main/java/com/brainwellnessspa/ReminderModule/Activities/ReminderDetailsActivity.java	(date 1602834716684)
@@ -424,7 +424,7 @@
             if (direction == ItemTouchHelper.LEFT) {
                 final Dialog dialog = new Dialog(ctx);
                 dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
-                dialog.setContentView(R.layout.cancel_membership);
+                dialog.setContentView(R.layout.reminder_layout);
                 dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));
                 dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
 
Index: app/src/main/java/com/brainwellnessspa/Utility/SmsReceiver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/Utility/SmsReceiver.java	(date 1602827357684)
+++ app/src/main/java/com/brainwellnessspa/Utility/SmsReceiver.java	(date 1602827357684)
@@ -0,0 +1,71 @@
+package com.brainwellnessspa.Utility;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+
+import com.google.android.gms.auth.api.phone.SmsRetriever;
+import com.google.android.gms.common.api.CommonStatusCodes;
+import com.google.android.gms.common.api.Status;
+
+public class SmsReceiver extends BroadcastReceiver {
+    private OTPReceiveListener otpListener;
+
+    public void setOTPListener(OTPReceiveListener otpListener) {
+        this.otpListener = otpListener;
+    }
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        if (SmsRetriever.SMS_RETRIEVED_ACTION.equals(intent.getAction())) {
+            Bundle extras = intent.getExtras();
+            Status status = (Status) extras.get(SmsRetriever.EXTRA_STATUS);
+            switch (status.getStatusCode()) {
+                case CommonStatusCodes.SUCCESS:
+                    //This is the full message
+                    String message = (String) extras.get(SmsRetriever.EXTRA_SMS_MESSAGE);
+
+                    /*<#> Your ExampleApp code is: 123ABC78
+                    FA+9qCX9VSu*/
+
+                    //Extract the OTP code and send to the listener
+
+                    if (otpListener != null) {
+                        otpListener.onOTPReceived(message);
+                    }
+                    break;
+                case CommonStatusCodes.TIMEOUT:
+                    // Waiting for SMS timed out (5 minutes)
+                    if (otpListener != null) {
+                        otpListener.onOTPTimeOut();
+                    }
+                    break;
+
+                case CommonStatusCodes.API_NOT_CONNECTED:
+                    if (otpListener != null) {
+                        otpListener.onOTPReceivedError("API NOT CONNECTED");
+                    }
+                    break;
+
+                case CommonStatusCodes.NETWORK_ERROR:
+                    if (otpListener != null) {
+                        otpListener.onOTPReceivedError("NETWORK ERROR");
+                    }
+                    break;
+
+                case CommonStatusCodes.ERROR:
+                    if (otpListener != null) {
+                        otpListener.onOTPReceivedError("SOME THING WENT WRONG");
+                    }
+                    break;
+            }
+        }
+    }
+
+    public interface OTPReceiveListener {
+        void onOTPReceived(String otp);
+        void onOTPTimeOut();
+        void onOTPReceivedError(String error);
+    }
+}
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ .idea/gradle.xml	(date 1602820630053)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Models/SubPlayListModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Models;\r\n\r\nimport android.os.Parcel;\r\nimport android.os.Parcelable;\r\n\r\nimport com.google.gson.annotations.Expose;\r\nimport com.google.gson.annotations.SerializedName;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class SubPlayListModel {\r\n    @SerializedName(\"ResponseData\")\r\n    @Expose\r\n    private ResponseData responseData;\r\n    @SerializedName(\"ResponseCode\")\r\n    @Expose\r\n    private String responseCode;\r\n    @SerializedName(\"ResponseMessage\")\r\n    @Expose\r\n    private String responseMessage;\r\n    @SerializedName(\"ResponseStatus\")\r\n    @Expose\r\n    private String responseStatus;\r\n\r\n    public ResponseData getResponseData() {\r\n        return responseData;\r\n    }\r\n\r\n    public void setResponseData(ResponseData responseData) {\r\n        this.responseData = responseData;\r\n    }\r\n\r\n    public String getResponseCode() {\r\n        return responseCode;\r\n    }\r\n\r\n    public void setResponseCode(String responseCode) {\r\n        this.responseCode = responseCode;\r\n    }\r\n\r\n    public String getResponseMessage() {\r\n        return responseMessage;\r\n    }\r\n\r\n    public void setResponseMessage(String responseMessage) {\r\n        this.responseMessage = responseMessage;\r\n    }\r\n\r\n    public String getResponseStatus() {\r\n        return responseStatus;\r\n    }\r\n\r\n    public void setResponseStatus(String responseStatus) {\r\n        this.responseStatus = responseStatus;\r\n    }\r\n\r\n    public static class ResponseData implements Parcelable {\r\n        @SerializedName(\"PlaylistID\")\r\n        @Expose\r\n        private String playlistID;\r\n        @SerializedName(\"PlaylistName\")\r\n        @Expose\r\n        private String playlistName;\r\n        @SerializedName(\"PlaylistDesc\")\r\n        @Expose\r\n        private String playlistDesc;\r\n        @SerializedName(\"ReminderTime\")\r\n        @Expose\r\n        private String reminderTime;\r\n        @SerializedName(\"ReminderDay\")\r\n        @Expose\r\n        private String reminderDay;\r\n        @SerializedName(\"IsReminder\")\r\n        @Expose\r\n        private String IsReminder;\r\n        @SerializedName(\"PlaylistMastercat\")\r\n        @Expose\r\n        private String playlistMastercat;\r\n        @SerializedName(\"PlaylistSubcat\")\r\n        @Expose\r\n        private String playlistSubcat;\r\n        @SerializedName(\"PlaylistImage\")\r\n        @Expose\r\n        private String playlistImage;\r\n        @SerializedName(\"PlaylistImageDetail\")\r\n        @Expose\r\n        private String playlistImageDetail;\r\n        @SerializedName(\"TotalAudio\")\r\n        @Expose\r\n        private String totalAudio;\r\n        @SerializedName(\"TotalDuration\")\r\n        @Expose\r\n        private String totalDuration;\r\n        @SerializedName(\"Totalhour\")\r\n        @Expose\r\n        private String totalhour;\r\n        @SerializedName(\"Totalminute\")\r\n        @Expose\r\n        private String totalminute;\r\n        @SerializedName(\"Created\")\r\n        @Expose\r\n        private String created;\r\n        @SerializedName(\"Download\")\r\n        @Expose\r\n        private String download;\r\n        @SerializedName(\"Like\")\r\n        @Expose\r\n        private String like;\r\n        @SerializedName(\"PlaylistSongs\")\r\n        @Expose\r\n        private ArrayList<PlaylistSong> playlistSongs = null;\r\n\r\n        public ResponseData() {\r\n        }\r\n\r\n        protected ResponseData(Parcel in) {\r\n            playlistID = in.readString();\r\n            playlistName = in.readString();\r\n            playlistDesc = in.readString();\r\n            playlistMastercat = in.readString();\r\n            playlistSubcat = in.readString();\r\n            playlistImage = in.readString();\r\n            playlistImageDetail = in.readString();\r\n            totalAudio = in.readString();\r\n            totalDuration = in.readString();\r\n            totalhour = in.readString();\r\n            totalminute = in.readString();\r\n            created = in.readString();\r\n            download = in.readString();\r\n            like = in.readString();\r\n            IsReminder = in.readString();\r\n            reminderTime = in.readString();\r\n            reminderDay = in.readString();\r\n        }\r\n\r\n        public static final Creator<ResponseData> CREATOR = new Creator<ResponseData>() {\r\n            @Override\r\n            public ResponseData createFromParcel(Parcel in) {\r\n                return new ResponseData(in);\r\n            }\r\n\r\n            @Override\r\n            public ResponseData[] newArray(int size) {\r\n                return new ResponseData[size];\r\n            }\r\n        };\r\n\r\n        public String getIsReminder() {\r\n            return IsReminder;\r\n        }\r\n\r\n        public void setIsReminder(String isReminder) {\r\n            IsReminder = isReminder;\r\n        }\r\n\r\n        public String getPlaylistID() {\r\n            return playlistID;\r\n        }\r\n\r\n        public void setPlaylistID(String playlistID) {\r\n            this.playlistID = playlistID;\r\n        }\r\n\r\n        public String getPlaylistName() {\r\n            return playlistName;\r\n        }\r\n\r\n        public void setPlaylistName(String playlistName) {\r\n            this.playlistName = playlistName;\r\n        }\r\n\r\n        public String getDownload() {\r\n            return download;\r\n        }\r\n\r\n        public void setDownload(String download) {\r\n            this.download = download;\r\n        }\r\n\r\n        public String getLike() {\r\n            return like;\r\n        }\r\n\r\n        public void setLike(String like) {\r\n            this.like = like;\r\n        }\r\n\r\n        public String getCreated() {\r\n            return created;\r\n        }\r\n\r\n        public void setCreated(String created) {\r\n            this.created = created;\r\n        }\r\n\r\n        public String getPlaylistDesc() {\r\n            return playlistDesc;\r\n        }\r\n\r\n        public void setPlaylistDesc(String playlistDesc) {\r\n            this.playlistDesc = playlistDesc;\r\n        }\r\n\r\n        public String getPlaylistMastercat() {\r\n            return playlistMastercat;\r\n        }\r\n\r\n        public void setPlaylistMastercat(String playlistMastercat) {\r\n            this.playlistMastercat = playlistMastercat;\r\n        }\r\n\r\n        public String getPlaylistSubcat() {\r\n            return playlistSubcat;\r\n        }\r\n\r\n        public void setPlaylistSubcat(String playlistSubcat) {\r\n            this.playlistSubcat = playlistSubcat;\r\n        }\r\n\r\n        public String getTotalAudio() {\r\n            return totalAudio;\r\n        }\r\n\r\n        public void setTotalAudio(String totalAudio) {\r\n            this.totalAudio = totalAudio;\r\n        }\r\n\r\n        public String getTotalDuration() {\r\n            return totalDuration;\r\n        }\r\n\r\n        public void setTotalDuration(String totalDuration) {\r\n            this.totalDuration = totalDuration;\r\n        }\r\n\r\n        public String getReminderTime() {\r\n            return reminderTime;\r\n        }\r\n\r\n        public void setReminderTime(String reminderTime) {\r\n            this.reminderTime = reminderTime;\r\n        }\r\n\r\n        public String getTotalhour() {\r\n            return totalhour;\r\n        }\r\n\r\n        public void setTotalhour(String totalhour) {\r\n            this.totalhour = totalhour;\r\n        }\r\n\r\n        public String getTotalminute() {\r\n            return totalminute;\r\n        }\r\n\r\n        public void setTotalminute(String totalminute) {\r\n            this.totalminute = totalminute;\r\n        }\r\n\r\n        public String getReminderDay() {\r\n            return reminderDay;\r\n        }\r\n\r\n        public void setReminderDay(String reminderDay) {\r\n            this.reminderDay = reminderDay;\r\n        }\r\n\r\n        public String getPlaylistImageDetail() {\r\n            return playlistImageDetail;\r\n        }\r\n\r\n        public void setPlaylistImageDetail(String playlistImageDetail) {\r\n            this.playlistImageDetail = playlistImageDetail;\r\n        }\r\n\r\n        public String getPlaylistImage() {\r\n            return playlistImage;\r\n        }\r\n\r\n        public void setPlaylistImage(String playlistImage) {\r\n            this.playlistImage = playlistImage;\r\n        }\r\n\r\n        public ArrayList<PlaylistSong> getPlaylistSongs() {\r\n            return playlistSongs;\r\n        }\r\n\r\n        public void setPlaylistSongs(ArrayList<PlaylistSong> playlistSongs) {\r\n            this.playlistSongs = playlistSongs;\r\n        }\r\n\r\n        @Override\r\n        public int describeContents() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public void writeToParcel(Parcel parcel, int i) {\r\n            parcel.writeString(playlistID);\r\n            parcel.writeString(playlistName);\r\n            parcel.writeString(playlistDesc);\r\n            parcel.writeString(playlistMastercat);\r\n            parcel.writeString(playlistSubcat);\r\n            parcel.writeString(playlistImage);\r\n            parcel.writeString(playlistImageDetail);\r\n            parcel.writeString(totalAudio);\r\n            parcel.writeString(totalDuration);\r\n            parcel.writeString(totalhour);\r\n            parcel.writeString(totalminute);\r\n            parcel.writeString(created);\r\n            parcel.writeString(like);\r\n            parcel.writeString(IsReminder);\r\n            parcel.writeString(reminderTime);\r\n            parcel.writeString(reminderDay);\r\n        }\r\n\r\n        public static class PlaylistSong implements Parcelable {\r\n            @SerializedName(\"ID\")\r\n            @Expose\r\n            private String iD;\r\n            @SerializedName(\"ImageFile\")\r\n            @Expose\r\n            private String imageFile;\r\n            @SerializedName(\"PatientID\")\r\n            @Expose\r\n            private String patientID;\r\n            @SerializedName(\"AudioDuration\")\r\n            @Expose\r\n            private String audioDuration;\r\n            @SerializedName(\"PlaylistID\")\r\n            @Expose\r\n            private String playlistID;\r\n            @SerializedName(\"AudioFile\")\r\n            @Expose\r\n            private String audioFile;\r\n            @SerializedName(\"PlaylistAudioId\")\r\n            @Expose\r\n            private String playlistAudioId;\r\n            @SerializedName(\"Name\")\r\n            @Expose\r\n            private String name;\r\n            @SerializedName(\"Download\")\r\n            @Expose\r\n            private String download;\r\n            @SerializedName(\"Like\")\r\n            @Expose\r\n            private String like;\r\n            @SerializedName(\"Audiomastercat\")\r\n            @Expose\r\n            private String audiomastercat;\r\n            @SerializedName(\"AudioSubCategory\")\r\n            @Expose\r\n            private String audioSubCategory;\r\n            @SerializedName(\"AudioDirection\")\r\n            @Expose\r\n            private String audioDirection;\r\n\r\n            public PlaylistSong() {\r\n            }\r\n\r\n            protected PlaylistSong(Parcel in) {\r\n                iD = in.readString();\r\n                imageFile = in.readString();\r\n                patientID = in.readString();\r\n                audioDuration = in.readString();\r\n                playlistID = in.readString();\r\n                audioFile = in.readString();\r\n                name = in.readString();\r\n                download = in.readString();\r\n                like = in.readString();\r\n                audiomastercat = in.readString();\r\n                audioSubCategory = in.readString();\r\n                audioDirection = in.readString();\r\n                playlistAudioId = in.readString();\r\n            }\r\n\r\n            public static final Creator<PlaylistSong> CREATOR = new Creator<PlaylistSong>() {\r\n                @Override\r\n                public PlaylistSong createFromParcel(Parcel in) {\r\n                    return new PlaylistSong(in);\r\n                }\r\n\r\n                @Override\r\n                public PlaylistSong[] newArray(int size) {\r\n                    return new PlaylistSong[size];\r\n                }\r\n            };\r\n\r\n            public String getImageFile() {\r\n                return imageFile;\r\n            }\r\n\r\n            public void setImageFile(String imageFile) {\r\n                this.imageFile = imageFile;\r\n            }\r\n\r\n            public String getName() {\r\n                return name;\r\n            }\r\n\r\n            public void setName(String name) {\r\n                this.name = name;\r\n            }\r\n\r\n            public String getDownload() {\r\n                return download;\r\n            }\r\n\r\n            public void setDownload(String download) {\r\n                this.download = download;\r\n            }\r\n\r\n            public String getLike() {\r\n                return like;\r\n            }\r\n\r\n            public void setLike(String like) {\r\n                this.like = like;\r\n            }\r\n\r\n            public String getID() {\r\n                return iD;\r\n            }\r\n\r\n            public void setID(String iD) {\r\n                this.iD = iD;\r\n            }\r\n\r\n            public String getPatientID() {\r\n                return patientID;\r\n            }\r\n\r\n            public void setPatientID(String patientID) {\r\n                this.patientID = patientID;\r\n            }\r\n\r\n            public String getPlaylistID() {\r\n                return playlistID;\r\n            }\r\n\r\n            public void setPlaylistID(String playlistID) {\r\n                this.playlistID = playlistID;\r\n            }\r\n\r\n            public String getAudioDuration() {\r\n                return audioDuration;\r\n            }\r\n\r\n            public void setAudioDuration(String audioDuration) {\r\n                this.audioDuration = audioDuration;\r\n            }\r\n\r\n            public String getPlaylistAudioId() {\r\n                return playlistAudioId;\r\n            }\r\n\r\n            public void setPlaylistAudioId(String playlistAudioId) {\r\n                this.playlistAudioId = playlistAudioId;\r\n            }\r\n\r\n            public String getAudioFile() {\r\n                return audioFile;\r\n            }\r\n\r\n            public String getAudiomastercat() {\r\n                return audiomastercat;\r\n            }\r\n\r\n            public void setAudiomastercat(String audiomastercat) {\r\n                this.audiomastercat = audiomastercat;\r\n            }\r\n\r\n            public String getAudioSubCategory() {\r\n                return audioSubCategory;\r\n            }\r\n\r\n            public void setAudioSubCategory(String audioSubCategory) {\r\n                this.audioSubCategory = audioSubCategory;\r\n            }\r\n\r\n            public String getAudioDirection() {\r\n                return audioDirection;\r\n            }\r\n\r\n            public void setAudioDirection(String audioDirection) {\r\n                this.audioDirection = audioDirection;\r\n            }\r\n\r\n            public void setAudioFile(String audioFile) {\r\n                this.audioFile = audioFile;\r\n            }\r\n\r\n            @Override\r\n            public int describeContents() {\r\n                return 0;\r\n            }\r\n\r\n            @Override\r\n            public void writeToParcel(Parcel parcel, int i) {\r\n                parcel.writeString(iD);\r\n                parcel.writeString(imageFile);\r\n                parcel.writeString(patientID);\r\n                parcel.writeString(audioDuration);\r\n                parcel.writeString(playlistID);\r\n                parcel.writeString(audioFile);\r\n                parcel.writeString(name);\r\n                parcel.writeString(download);\r\n                parcel.writeString(like);\r\n                parcel.writeString(audiomastercat);\r\n                parcel.writeString(audioSubCategory);\r\n                parcel.writeString(audioDirection);\r\n                parcel.writeString(playlistAudioId);\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Models/SubPlayListModel.java	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Models/SubPlayListModel.java	(date 1602824918505)
@@ -82,6 +82,9 @@
         @SerializedName("PlaylistImage")
         @Expose
         private String playlistImage;
+        @SerializedName("PlaylistImageSquare")
+        @Expose
+        private String squarePlaylistImage;
         @SerializedName("PlaylistImageDetail")
         @Expose
         private String playlistImageDetail;
@@ -117,9 +120,13 @@
             playlistID = in.readString();
             playlistName = in.readString();
             playlistDesc = in.readString();
+            reminderDay = in.readString();
+            reminderTime = in.readString();
+            IsReminder = in.readString();
             playlistMastercat = in.readString();
             playlistSubcat = in.readString();
             playlistImage = in.readString();
+            squarePlaylistImage = in.readString();
             playlistImageDetail = in.readString();
             totalAudio = in.readString();
             totalDuration = in.readString();
@@ -128,9 +135,6 @@
             created = in.readString();
             download = in.readString();
             like = in.readString();
-            IsReminder = in.readString();
-            reminderTime = in.readString();
-            reminderDay = in.readString();
         }
 
         public static final Creator<ResponseData> CREATOR = new Creator<ResponseData>() {
@@ -257,6 +261,14 @@
             this.totalminute = totalminute;
         }
 
+        public String getSquarePlaylistImage() {
+            return squarePlaylistImage;
+        }
+
+        public void setSquarePlaylistImage(String squarePlaylistImage) {
+            this.squarePlaylistImage = squarePlaylistImage;
+        }
+
         public String getReminderDay() {
             return reminderDay;
         }
@@ -299,19 +311,21 @@
             parcel.writeString(playlistID);
             parcel.writeString(playlistName);
             parcel.writeString(playlistDesc);
+            parcel.writeString(reminderDay);
+            parcel.writeString(reminderTime);
+            parcel.writeString(IsReminder);
             parcel.writeString(playlistMastercat);
             parcel.writeString(playlistSubcat);
             parcel.writeString(playlistImage);
+            parcel.writeString(squarePlaylistImage);
             parcel.writeString(playlistImageDetail);
             parcel.writeString(totalAudio);
             parcel.writeString(totalDuration);
             parcel.writeString(totalhour);
             parcel.writeString(totalminute);
             parcel.writeString(created);
+            parcel.writeString(download);
             parcel.writeString(like);
-            parcel.writeString(IsReminder);
-            parcel.writeString(reminderTime);
-            parcel.writeString(reminderDay);
         }
 
         public static class PlaylistSong implements Parcelable {
Index: app/src/main/res/layout/activity_cancel_membership.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/white\">\r\n\r\n        <RelativeLayout\r\n            android:id=\"@+id/rlLayout\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"@dimen/_56sdp\">\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/llBack\"\r\n                android:layout_width=\"42dp\"\r\n                android:layout_height=\"match_parent\"\r\n                android:layout_centerVertical=\"true\"\r\n                android:gravity=\"center\">\r\n\r\n                <ImageView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:src=\"@drawable/ic_left_arrow_icon\" />\r\n\r\n            </LinearLayout>\r\n\r\n            <TextView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_centerVertical=\"true\"\r\n                android:fontFamily=\"@font/montserrat_bold\"\r\n                android:gravity=\"center\"\r\n                android:text=\"@string/Cancel_Subscription\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"@dimen/_15sdp\" />\r\n\r\n        </RelativeLayout>\r\n\r\n        <com.google.android.youtube.player.YouTubePlayerView\r\n            android:id=\"@+id/youtubeView\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_below=\"@id/rlLayout\"\r\n            android:layout_marginHorizontal=\"@dimen/_16sdp\" />\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_below=\"@id/youtubeView\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/llCancelVideo\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                android:layout_marginTop=\"@dimen/_6sdp\"\r\n                android:orientation=\"vertical\">\r\n\r\n                <RelativeLayout\r\n                    android:id=\"@+id/rlPlay\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:background=\"@drawable/rouned_corner_shadow\">\r\n\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:scaleType=\"fitXY\"\r\n                        android:src=\"@drawable/cancel_mp_image\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_centerInParent=\"true\"\r\n                        android:scaleType=\"fitXY\"\r\n                        android:src=\"@drawable/ic_youtube_logo\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                </RelativeLayout>\r\n\r\n                <VideoView\r\n                    android:id=\"@+id/videoView\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"@dimen/_220sdp\"\r\n                    android:visibility=\"gone\"\r\n                    app:layout_constraintBottom_toBottomOf=\"parent\"\r\n                    app:layout_constraintLeft_toLeftOf=\"parent\"\r\n                    app:layout_constraintRight_toRightOf=\"parent\"\r\n                    app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                <TextView\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_28sdp\"\r\n                    android:fontFamily=\"@font/montserrat_bold\"\r\n                    android:gravity=\"start\"\r\n                    android:text=\"@string/Select_reason\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"@dimen/_20sdp\" />\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:orientation=\"vertical\"\r\n                    android:visibility=\"visible\">\r\n\r\n                    <CheckBox\r\n                        android:id=\"@+id/cbOne\"\r\n                        style=\"@android:style/Widget.CompoundButton.RadioButton\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginHorizontal=\"@dimen/_4sdp\"\r\n                        android:layout_marginTop=\"@dimen/_20sdp\"\r\n                        android:button=\"@drawable/radio_btn_background\"\r\n                        android:checked=\"true\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"center_vertical|start\"\r\n                        android:paddingLeft=\"@dimen/_12sdp\"\r\n                        android:text=\"@string/Feeling_better\"\r\n                        android:textColor=\"@color/black\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n\r\n                    <CheckBox\r\n                        android:id=\"@+id/cbTwo\"\r\n                        style=\"@android:style/Widget.CompoundButton.RadioButton\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginHorizontal=\"@dimen/_4sdp\"\r\n                        android:layout_marginTop=\"@dimen/_18sdp\"\r\n                        android:button=\"@drawable/radio_btn_background\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"center_vertical|start\"\r\n                        android:paddingLeft=\"@dimen/_12sdp\"\r\n                        android:text=\"@string/Condition_worse\"\r\n                        android:textColor=\"@color/black\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n\r\n                    <CheckBox\r\n                        android:id=\"@+id/cbThree\"\r\n                        style=\"@android:style/Widget.CompoundButton.RadioButton\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginHorizontal=\"@dimen/_4sdp\"\r\n                        android:layout_marginTop=\"@dimen/_18sdp\"\r\n                        android:button=\"@drawable/radio_btn_background\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"center_vertical|start\"\r\n                        android:paddingLeft=\"@dimen/_12sdp\"\r\n                        android:text=\"@string/Pricing\"\r\n                        android:textColor=\"@color/black\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n\r\n                    <CheckBox\r\n                        android:id=\"@+id/cbFour\"\r\n                        style=\"@android:style/Widget.CompoundButton.RadioButton\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginHorizontal=\"@dimen/_4sdp\"\r\n                        android:layout_marginTop=\"@dimen/_18sdp\"\r\n                        android:button=\"@drawable/radio_btn_background\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"center_vertical|start\"\r\n                        android:paddingLeft=\"@dimen/_12sdp\"\r\n                        android:text=\"@string/Other_reason\"\r\n                        android:textColor=\"@color/black\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n\r\n\r\n                    <EditText\r\n                        android:id=\"@+id/edtCancelBox\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"@dimen/_140sdp\"\r\n                        android:layout_marginLeft=\"@dimen/_10sdp\"\r\n                        android:layout_marginTop=\"@dimen/_22sdp\"\r\n                        android:layout_marginRight=\"@dimen/_10sdp\"\r\n                        android:layout_marginBottom=\"@dimen/_16sdp\"\r\n                        android:background=\"@drawable/edittext_background\"\r\n                        android:cursorVisible=\"true\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"top\"\r\n                        android:hint=\"Add your comments here\"\r\n                        android:inputType=\"textMultiLine|textVisiblePassword\"\r\n                        android:overScrollMode=\"always\"\r\n                        android:paddingLeft=\"@dimen/_8sdp\"\r\n                        android:paddingTop=\"@dimen/_8sdp\"\r\n                        android:paddingRight=\"@dimen/_8sdp\"\r\n                        android:scrollbarStyle=\"insideInset\"\r\n                        android:scrollbars=\"vertical\"\r\n                        android:singleLine=\"false\"\r\n                        android:textColor=\"@color/gray\"\r\n                        android:textCursorDrawable=\"@null\"\r\n                        android:textSize=\"@dimen/_14sdp\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                </LinearLayout>\r\n            </LinearLayout>\r\n\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:gravity=\"center\"\r\n            android:padding=\"@dimen/_60sdp\">\r\n\r\n            <ProgressBar\r\n                android:id=\"@+id/progressBar\"\r\n                android:layout_width=\"@dimen/_50sdp\"\r\n                android:layout_height=\"@dimen/_50sdp\"\r\n                android:indeterminateTint=\"@color/blue\"\r\n                android:scaleType=\"centerInside\"\r\n                android:visibility=\"gone\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <FrameLayout\r\n            android:id=\"@+id/progressBarHolder\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:alpha=\"0.4\"\r\n            android:animateLayoutChanges=\"true\"\r\n            android:background=\"#C0000000\"\r\n            android:visibility=\"gone\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/btnCancelSubscrible\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_alignParentBottom=\"true\"\r\n            android:layout_marginHorizontal=\"@dimen/_40sdp\"\r\n            android:layout_marginBottom=\"@dimen/_25sdp\"\r\n            android:background=\"@drawable/extra_round_cornor\"\r\n            android:fontFamily=\"@font/montserrat_bold\"\r\n            android:paddingVertical=\"@dimen/_4sdp\"\r\n            android:text=\"@string/Cancel_Subscription\"\r\n            android:textColor=\"@color/white\" />\r\n\r\n    </RelativeLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_cancel_membership.xml	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ app/src/main/res/layout/activity_cancel_membership.xml	(date 1602834716690)
@@ -38,17 +38,24 @@
 
         </RelativeLayout>
 
-        <com.google.android.youtube.player.YouTubePlayerView
-            android:id="@+id/youtubeView"
+        <LinearLayout
+            android:id="@+id/llPlay"
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:layout_below="@id/rlLayout"
-            android:layout_marginHorizontal="@dimen/_16sdp" />
+            android:layout_marginHorizontal="@dimen/_16sdp" >
+
+            <com.google.android.youtube.player.YouTubePlayerView
+                android:id="@+id/youtubeView"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"/>
+        </LinearLayout>
+
 
         <LinearLayout
             android:layout_width="match_parent"
             android:layout_height="match_parent"
-            android:layout_below="@id/youtubeView"
+            android:layout_below="@id/llPlay"
             android:orientation="vertical">
 
             <LinearLayout
@@ -202,31 +209,6 @@
 
         </LinearLayout>
 
-        <LinearLayout
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:gravity="center"
-            android:padding="@dimen/_60sdp">
-
-            <ProgressBar
-                android:id="@+id/progressBar"
-                android:layout_width="@dimen/_50sdp"
-                android:layout_height="@dimen/_50sdp"
-                android:indeterminateTint="@color/blue"
-                android:scaleType="centerInside"
-                android:visibility="gone" />
-
-        </LinearLayout>
-
-        <FrameLayout
-            android:id="@+id/progressBarHolder"
-            android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:alpha="0.4"
-            android:animateLayoutChanges="true"
-            android:background="#C0000000"
-            android:visibility="gone" />
-
         <Button
             android:id="@+id/btnCancelSubscrible"
             android:layout_width="match_parent"
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Models/MainPlayListModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Models;\r\n\r\nimport android.os.Parcel;\r\nimport android.os.Parcelable;\r\n\r\nimport com.google.gson.annotations.Expose;\r\nimport com.google.gson.annotations.SerializedName;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class MainPlayListModel {\r\n    @SerializedName(\"ResponseData\")\r\n    @Expose\r\n    private ArrayList<ResponseData> responseData = null;\r\n    @SerializedName(\"ResponseCode\")\r\n    @Expose\r\n    private String responseCode;\r\n    @SerializedName(\"ResponseMessage\")\r\n    @Expose\r\n    private String responseMessage;\r\n    @SerializedName(\"ResponseStatus\")\r\n    @Expose\r\n    private String responseStatus;\r\n\r\n    public ArrayList<ResponseData> getResponseData() {\r\n        return responseData;\r\n    }\r\n\r\n    public void setResponseData(ArrayList<ResponseData> responseData) {\r\n        this.responseData = responseData;\r\n    }\r\n\r\n    public String getResponseCode() {\r\n        return responseCode;\r\n    }\r\n\r\n    public void setResponseCode(String responseCode) {\r\n        this.responseCode = responseCode;\r\n    }\r\n\r\n    public String getResponseMessage() {\r\n        return responseMessage;\r\n    }\r\n\r\n    public void setResponseMessage(String responseMessage) {\r\n        this.responseMessage = responseMessage;\r\n    }\r\n\r\n    public String getResponseStatus() {\r\n        return responseStatus;\r\n    }\r\n\r\n    public void setResponseStatus(String responseStatus) {\r\n        this.responseStatus = responseStatus;\r\n    }\r\n\r\n    public static class ResponseData {\r\n        @SerializedName(\"GetLibraryID\")\r\n        @Expose\r\n        private String getLibraryID;\r\n        @SerializedName(\"View\")\r\n        @Expose\r\n        private String view;\r\n        @SerializedName(\"UserID\")\r\n        @Expose\r\n        private String userID;\r\n        @SerializedName(\"IsLock\")\r\n        @Expose\r\n        private String IsLock;\r\n        @SerializedName(\"Details\")\r\n        @Expose\r\n        private ArrayList<Detail> details = null;\r\n\r\n        public String getGetLibraryID() {\r\n            return getLibraryID;\r\n        }\r\n\r\n        public void setGetLibraryID(String getLibraryID) {\r\n            this.getLibraryID = getLibraryID;\r\n        }\r\n\r\n        public String getView() {\r\n            return view;\r\n        }\r\n\r\n        public void setView(String view) {\r\n            this.view = view;\r\n        }\r\n\r\n        public String getUserID() {\r\n            return userID;\r\n        }\r\n\r\n        public void setUserID(String userID) {\r\n            this.userID = userID;\r\n        }\r\n\r\n        public String getIsLock() {\r\n            return IsLock;\r\n        }\r\n\r\n        public void setIsLock(String isLock) {\r\n            IsLock = isLock;\r\n        }\r\n\r\n        public ArrayList<Detail> getDetails() {\r\n            return details;\r\n        }\r\n\r\n        public void setDetails(ArrayList<Detail> details) {\r\n            this.details = details;\r\n        }\r\n\r\n        public static class Detail implements Parcelable {\r\n            @SerializedName(\"PlaylistID\")\r\n            @Expose\r\n            private String playlistID;\r\n            @SerializedName(\"TotalAudio\")\r\n            @Expose\r\n            private String totalAudio;\r\n            @SerializedName(\"Totalhour\")\r\n            @Expose\r\n            private String totalhour;\r\n            @SerializedName(\"Totalminute\")\r\n            @Expose\r\n            private String totalminute;\r\n            @SerializedName(\"PlaylistName\")\r\n            @Expose\r\n            private String playlistName;\r\n            @SerializedName(\"PlaylistDesc\")\r\n            @Expose\r\n            private String playlistDesc;\r\n            @SerializedName(\"MasterCategory\")\r\n            @Expose\r\n            private String masterCategory;\r\n            @SerializedName(\"SubCategory\")\r\n            @Expose\r\n            private String subCategory;\r\n            @SerializedName(\"PlaylistImage\")\r\n            @Expose\r\n            private String playlistImage;\r\n            @SerializedName(\"PlaylistId\")\r\n            @Expose\r\n            private String playlistId;\r\n            @SerializedName(\"Audiolist\")\r\n            @Expose\r\n            private ArrayList<Audiolist> audiolist = null;\r\n\r\n            public Detail() {}\r\n            protected Detail(Parcel in) {\r\n                playlistID = in.readString();\r\n                totalAudio = in.readString();\r\n                playlistName = in.readString();\r\n                playlistDesc = in.readString();\r\n                masterCategory = in.readString();\r\n                subCategory = in.readString();\r\n                playlistImage = in.readString();\r\n                playlistId = in.readString();\r\n                totalhour = in.readString();\r\n                totalminute = in.readString();\r\n                audiolist = in.createTypedArrayList(Audiolist.CREATOR);\r\n            }\r\n\r\n            public static final Creator<Detail> CREATOR = new Creator<Detail>() {\r\n                @Override\r\n                public Detail createFromParcel(Parcel in) {\r\n                    return new Detail(in);\r\n                }\r\n\r\n                @Override\r\n                public Detail[] newArray(int size) {\r\n                    return new Detail[size];\r\n                }\r\n            };\r\n\r\n            public String getTotalAudio() {\r\n                return totalAudio;\r\n            }\r\n\r\n            public void setTotalAudio(String totalAudio) {\r\n                this.totalAudio = totalAudio;\r\n            }\r\n\r\n            public String getTotalhour() {\r\n                return totalhour;\r\n            }\r\n\r\n            public void setTotalhour(String totalhour) {\r\n                this.totalhour = totalhour;\r\n            }\r\n\r\n            public String getTotalminute() {\r\n                return totalminute;\r\n            }\r\n\r\n            public void setTotalminute(String totalminute) {\r\n                this.totalminute = totalminute;\r\n            }\r\n\r\n            public static Creator<Detail> getCREATOR() {\r\n                return CREATOR;\r\n            }\r\n\r\n            public String getPlaylistID() {\r\n                return playlistID;\r\n            }\r\n\r\n            public void setPlaylistID(String playlistID) {\r\n                this.playlistID = playlistID;\r\n            }\r\n\r\n            public String getPlaylistDesc() {\r\n                return playlistDesc;\r\n            }\r\n\r\n            public void setPlaylistDesc(String playlistDesc) {\r\n                this.masterCategory = playlistDesc;\r\n            }\r\n\r\n            public String getMasterCategory() {\r\n                return masterCategory;\r\n            }\r\n\r\n            public void setMasterCategory(String masterCategory) {\r\n                this.masterCategory = masterCategory;\r\n            }\r\n\r\n            public String getSubCategory() {\r\n                return subCategory;\r\n            }\r\n\r\n            public void setSubCategory(String subCategory) {\r\n                this.subCategory = subCategory;\r\n            }\r\n\r\n            public String getPlaylistName() {\r\n                return playlistName;\r\n            }\r\n\r\n            public void setPlaylistName(String playlistName) {\r\n                this.playlistName = playlistName;\r\n            }\r\n\r\n            public String getPlaylistImage() {\r\n                return playlistImage;\r\n            }\r\n\r\n            public void setPlaylistImage(String playlistImage) {\r\n                this.playlistImage = playlistImage;\r\n            }\r\n\r\n            public String getPlaylistId() {\r\n                return playlistId;\r\n            }\r\n\r\n            public void setPlaylistId(String playlistId) {\r\n                this.playlistId = playlistId;\r\n            }\r\n\r\n            public ArrayList<Audiolist> getAudiolist() {\r\n                return audiolist;\r\n            }\r\n\r\n            public void setAudiolist(ArrayList<Audiolist> audiolist) {\r\n                this.audiolist = audiolist;\r\n            }\r\n\r\n            @Override\r\n            public int describeContents() {\r\n                return 0;\r\n            }\r\n\r\n            @Override\r\n            public void writeToParcel(Parcel parcel, int i) {\r\n                parcel.writeString(playlistID);\r\n                parcel.writeString(totalAudio);\r\n                parcel.writeString(playlistName);\r\n                parcel.writeString(playlistDesc);\r\n                parcel.writeString(masterCategory);\r\n                parcel.writeString(subCategory);\r\n                parcel.writeString(playlistImage);\r\n                parcel.writeString(playlistId);\r\n                parcel.writeString(totalhour);\r\n                parcel.writeString(totalminute);\r\n            }\r\n\r\n            public static class Audiolist implements Parcelable {\r\n                @SerializedName(\"AudioID\")\r\n                @Expose\r\n                private String audioID;\r\n                @SerializedName(\"AudioName\")\r\n                @Expose\r\n                private String audioName;\r\n                @SerializedName(\"AudioFile\")\r\n                @Expose\r\n                private String audioFile;\r\n                @SerializedName(\"ImageFile\")\r\n                @Expose\r\n                private String imageFile;\r\n                @SerializedName(\"AudioDuration\")\r\n                @Expose\r\n                private String audioDuration;\r\n\r\n                public static final Creator<Audiolist> CREATOR = new Creator<Audiolist>() {\r\n                    @Override\r\n                    public Audiolist createFromParcel(Parcel in) {\r\n                        return new Audiolist(in);\r\n                    }\r\n\r\n                    @Override\r\n                    public Audiolist[] newArray(int size) {\r\n                        return new Audiolist[size];\r\n                    }\r\n                };\r\n\r\n                protected Audiolist(Parcel in) {\r\n                    audioID = in.readString();\r\n                    audioName = in.readString();\r\n                    audioFile = in.readString();\r\n                    imageFile = in.readString();\r\n                    audioDuration = in.readString();\r\n                }\r\n\r\n                public String getAudioID() {\r\n                    return audioID;\r\n                }\r\n\r\n                public void setAudioID(String audioID) {\r\n                    this.audioID = audioID;\r\n                }\r\n\r\n                public String getAudioName() {\r\n                    return audioName;\r\n                }\r\n\r\n                public void setAudioName(String audioName) {\r\n                    this.audioName = audioName;\r\n                }\r\n\r\n                public String getAudioFile() {\r\n                    return audioFile;\r\n                }\r\n\r\n                public void setAudioFile(String audioFile) {\r\n                    this.audioFile = audioFile;\r\n                }\r\n\r\n                public String getImageFile() {\r\n                    return imageFile;\r\n                }\r\n\r\n                public void setImageFile(String imageFile) {\r\n                    this.imageFile = imageFile;\r\n                }\r\n\r\n                public String getAudioDuration() {\r\n                    return audioDuration;\r\n                }\r\n\r\n                public void setAudioDuration(String audioDuration) {\r\n                    this.audioDuration = audioDuration;\r\n                }\r\n\r\n                @Override\r\n                public int describeContents() {\r\n                    return 0;\r\n                }\r\n\r\n                @Override\r\n                public void writeToParcel(Parcel parcel, int i) {\r\n                    parcel.writeString(audioID);\r\n                    parcel.writeString(audioName);\r\n                    parcel.writeString(audioFile);\r\n                    parcel.writeString(imageFile);\r\n                    parcel.writeString(audioDuration);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Models/MainPlayListModel.java	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Models/MainPlayListModel.java	(date 1602824694559)
@@ -150,14 +150,14 @@
             protected Detail(Parcel in) {
                 playlistID = in.readString();
                 totalAudio = in.readString();
+                totalhour = in.readString();
+                totalminute = in.readString();
                 playlistName = in.readString();
                 playlistDesc = in.readString();
                 masterCategory = in.readString();
                 subCategory = in.readString();
                 playlistImage = in.readString();
                 playlistId = in.readString();
-                totalhour = in.readString();
-                totalminute = in.readString();
                 audiolist = in.createTypedArrayList(Audiolist.CREATOR);
             }
 
@@ -274,14 +274,14 @@
             public void writeToParcel(Parcel parcel, int i) {
                 parcel.writeString(playlistID);
                 parcel.writeString(totalAudio);
+                parcel.writeString(totalhour);
+                parcel.writeString(totalminute);
                 parcel.writeString(playlistName);
                 parcel.writeString(playlistDesc);
                 parcel.writeString(masterCategory);
                 parcel.writeString(subCategory);
                 parcel.writeString(playlistImage);
                 parcel.writeString(playlistId);
-                parcel.writeString(totalhour);
-                parcel.writeString(totalminute);
             }
 
             public static class Audiolist implements Parcelable {
Index: app/src/main/res/layout/reminder_layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/reminder_layout.xml	(date 1602834716675)
+++ app/src/main/res/layout/reminder_layout.xml	(date 1602834716675)
@@ -0,0 +1,96 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center"
+    android:layout_margin="@dimen/_28sdp"
+    app:cardCornerRadius="@dimen/_11sdp">
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:focusable="true"
+        android:focusableInTouchMode="true"
+        android:orientation="vertical">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:background="@color/white"
+            android:gravity="center"
+            android:orientation="vertical">
+
+            <TextView
+                android:id="@+id/tvTitle"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:layout_marginHorizontal="@dimen/_24sdp"
+                android:layout_marginTop="@dimen/_33sdp"
+                android:fontFamily="@font/montserrat_bold"
+                android:gravity="center"
+                android:text="Cancel subscription"
+                android:textColor="@color/black"
+                android:textSize="@dimen/_18sdp" />
+
+            <TextView
+                android:id="@+id/tvSubTitle"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:layout_marginHorizontal="@dimen/_24sdp"
+                android:layout_marginTop="@dimen/_18sdp"
+                android:fontFamily="@font/montserrat_medium"
+                android:gravity="center"
+                android:text="@string/cancel_quotes"
+                android:textColor="@color/black"
+                android:textSize="@dimen/_14sdp" />
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:layout_marginHorizontal="@dimen/_16sdp"
+                android:layout_marginTop="@dimen/_28sdp"
+                android:layout_marginBottom="@dimen/_26sdp"
+                android:gravity="center"
+                android:orientation="vertical">
+
+
+                <RelativeLayout
+                    android:id="@+id/tvconfirm"
+                    android:layout_width="120dp"
+                    android:layout_height="@dimen/_35sdp"
+                    android:layout_gravity="center"
+                    android:background="@drawable/extra_blue_corner">
+
+                    <TextView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_centerInParent="true"
+                        android:fontFamily="@font/montserrat_medium"
+                        android:text="Confirm"
+                        android:textAllCaps="false"
+                        android:textColor="@color/white"
+                        android:textSize="@dimen/_14sdp" />
+
+                </RelativeLayout>
+
+                <TextView
+                    android:id="@+id/tvGoBack"
+                    android:layout_width="@dimen/_90sdp"
+                    android:layout_height="@dimen/_35sdp"
+                    android:layout_marginTop="@dimen/_10sdp"
+                    android:fontFamily="@font/montserrat_medium"
+                    android:gravity="center"
+                    android:text="Go back"
+                    android:textAllCaps="false"
+                    android:textColor="@color/dark_blue_gray"
+                    android:textSize="@dimen/_14sdp" />
+
+            </LinearLayout>
+        </LinearLayout>
+    </LinearLayout>
+</androidx.cardview.widget.CardView>
\ No newline at end of file
Index: app/release/output-metadata.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"version\": 1,\r\n  \"artifactType\": {\r\n    \"type\": \"APK\",\r\n    \"kind\": \"Directory\"\r\n  },\r\n  \"applicationId\": \"com.brainwellnessspa\",\r\n  \"variantName\": \"release\",\r\n  \"elements\": [\r\n    {\r\n      \"type\": \"SINGLE\",\r\n      \"filters\": [],\r\n      \"properties\": [],\r\n      \"versionCode\": 1,\r\n      \"versionName\": \"1.0\",\r\n      \"enabled\": true,\r\n      \"outputFile\": \"app-release.apk\"\r\n    }\r\n  ]\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/release/output-metadata.json	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ app/release/output-metadata.json	(date 1602823047009)
@@ -11,7 +11,7 @@
       "type": "SINGLE",
       "filters": [],
       "properties": [],
-      "versionCode": 1,
+      "versionCode": 2,
       "versionName": "1.0",
       "enabled": true,
       "outputFile": "app-release.apk"
Index: app/src/main/res/layout/cancel_membership.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.cardview.widget.CardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    android:layout_width=\"wrap_content\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:layout_gravity=\"center\"\r\n    android:layout_margin=\"@dimen/_28sdp\"\r\n    app:cardCornerRadius=\"@dimen/_11sdp\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:focusable=\"true\"\r\n        android:focusableInTouchMode=\"true\"\r\n        android:orientation=\"vertical\">\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:background=\"@color/white\"\r\n            android:gravity=\"center\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvTitle\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_gravity=\"center\"\r\n                android:layout_marginHorizontal=\"@dimen/_24sdp\"\r\n                android:layout_marginTop=\"@dimen/_33sdp\"\r\n                android:fontFamily=\"@font/montserrat_bold\"\r\n                android:gravity=\"center\"\r\n                android:text=\"Cancel subscription\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"@dimen/_18sdp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvSubTitle\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_gravity=\"center\"\r\n                android:layout_marginHorizontal=\"@dimen/_24sdp\"\r\n                android:layout_marginTop=\"@dimen/_18sdp\"\r\n                android:fontFamily=\"@font/montserrat_medium\"\r\n                android:gravity=\"center\"\r\n                android:text=\"@string/cancel_quotes\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"@dimen/_14sdp\" />\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_gravity=\"center\"\r\n                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                android:layout_marginTop=\"@dimen/_28sdp\"\r\n                android:layout_marginBottom=\"@dimen/_26sdp\"\r\n                android:gravity=\"center\"\r\n                android:orientation=\"vertical\">\r\n\r\n                <RelativeLayout\r\n                    android:id=\"@+id/tvconfirm\"\r\n                    android:layout_width=\"120dp\"\r\n                    android:layout_height=\"@dimen/_35sdp\"\r\n                    android:layout_gravity=\"center\"\r\n                    android:background=\"@drawable/extra_blue_corner\">\r\n\r\n                    <TextView\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_centerInParent=\"true\"\r\n                        android:fontFamily=\"@font/montserrat_medium\"\r\n                        android:text=\"Confirm\"\r\n                        android:textAllCaps=\"false\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_14sdp\" />\r\n\r\n                </RelativeLayout>\r\n\r\n                <TextView\r\n                    android:id=\"@+id/tvGoBack\"\r\n                    android:layout_width=\"@dimen/_90sdp\"\r\n                    android:layout_height=\"@dimen/_35sdp\"\r\n                    android:layout_marginTop=\"@dimen/_10sdp\"\r\n                    android:fontFamily=\"@font/montserrat_medium\"\r\n                    android:gravity=\"center\"\r\n                    android:text=\"Go back\"\r\n                    android:textAllCaps=\"false\"\r\n                    android:textColor=\"@color/dark_blue_gray\"\r\n                    android:textSize=\"@dimen/_14sdp\" />\r\n\r\n            </LinearLayout>\r\n        </LinearLayout>\r\n    </LinearLayout>\r\n</androidx.cardview.widget.CardView>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/cancel_membership.xml	(revision 04f79eccf5a0cea3399a2bba8262d100075605c2)
+++ app/src/main/res/layout/cancel_membership.xml	(date 1602834716659)
@@ -58,25 +58,21 @@
                 android:gravity="center"
                 android:orientation="vertical">
 
-                <RelativeLayout
-                    android:id="@+id/tvconfirm"
+
+                <Button
+                    android:id="@+id/Btn"
                     android:layout_width="120dp"
                     android:layout_height="@dimen/_35sdp"
+                    android:background="@drawable/extra_blue_corner"
                     android:layout_gravity="center"
-                    android:background="@drawable/extra_blue_corner">
-
-                    <TextView
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:layout_centerInParent="true"
-                        android:fontFamily="@font/montserrat_medium"
-                        android:text="Confirm"
-                        android:textAllCaps="false"
-                        android:textColor="@color/white"
-                        android:textSize="@dimen/_14sdp" />
+                    android:layout_centerInParent="true"
+                    android:fontFamily="@font/montserrat_medium"
+                    android:text="Confirm"
+                    android:gravity="center"
+                    android:textAllCaps="false"
+                    android:textColor="@color/white"
+                    android:textSize="@dimen/_14sdp" />
 
-                </RelativeLayout>
-
                 <TextView
                     android:id="@+id/tvGoBack"
                     android:layout_width="@dimen/_90sdp"
