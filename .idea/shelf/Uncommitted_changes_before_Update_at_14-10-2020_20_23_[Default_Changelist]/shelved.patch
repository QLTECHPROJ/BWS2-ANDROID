Index: app/src/main/res/layout/fragment_my_playlists.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        android:id=\"@+id/flContainer\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/white\">\r\n\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\">\r\n\r\n                <RelativeLayout\r\n                    android:id=\"@+id/rlMainLayout\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_marginBottom=\"@dimen/_18sdp\">\r\n\r\n                    <RelativeLayout\r\n                        android:id=\"@+id/llMainLayout\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"@dimen/_210sdp\">\r\n\r\n                        <ImageView\r\n                            android:id=\"@+id/ivBanner\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_centerInParent=\"true\" />\r\n\r\n                        <RelativeLayout\r\n                            android:id=\"@+id/rlLayout\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"@dimen/_56sdp\"\r\n                            android:background=\"@drawable/top_transparent_gradient\">\r\n\r\n                            <LinearLayout\r\n                                android:id=\"@+id/llBack\"\r\n                                android:layout_width=\"42dp\"\r\n                                android:layout_height=\"match_parent\"\r\n                                android:layout_centerVertical=\"true\"\r\n                                android:gravity=\"center\">\r\n\r\n                                <ImageView\r\n                                    android:layout_width=\"wrap_content\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:src=\"@drawable/ic_left_arrow_icon\"\r\n                                    app:tint=\"@color/white\" />\r\n\r\n                            </LinearLayout>\r\n\r\n                            <LinearLayout\r\n                                android:id=\"@+id/llOptions\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"match_parent\"\r\n                                android:layout_alignParentRight=\"true\"\r\n                                android:layout_marginRight=\"@dimen/_10sdp\"\r\n                                android:layout_toRightOf=\"@id/llBack\"\r\n                                android:gravity=\"end\">\r\n\r\n                                <LinearLayout\r\n                                    android:id=\"@+id/llReminder\"\r\n                                    android:layout_width=\"42dp\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:gravity=\"center\"\r\n                                    android:visibility=\"gone\">\r\n\r\n                                    <ImageView\r\n                                        android:id=\"@+id/ivReminder\"\r\n                                        android:layout_width=\"wrap_content\"\r\n                                        android:layout_height=\"wrap_content\"\r\n                                        android:src=\"@drawable/ic_clock_icon\"\r\n                                        app:tint=\"@color/white\" />\r\n\r\n                                </LinearLayout>\r\n\r\n                                <RelativeLayout\r\n                                    android:id=\"@+id/llDownloads\"\r\n                                    android:layout_width=\"42dp\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:gravity=\"center\">\r\n\r\n                                    <ProgressBar\r\n                                        android:id=\"@+id/pbProgress\"\r\n                                        style=\"?android:attr/progressBarStyleHorizontal\"\r\n                                        android:layout_width=\"match_parent\"\r\n                                        android:layout_height=\"match_parent\"\r\n                                        android:layout_centerInParent=\"true\"\r\n                                        android:background=\"@drawable/circular_shapem\"\r\n                                        android:indeterminate=\"false\"\r\n                                        android:indeterminateTint=\"@color/dark_yellow\"\r\n                                        android:max=\"100\"\r\n                                        android:progressDrawable=\"@drawable/circular_progress_barm\"\r\n                                        android:visibility=\"gone\" />\r\n\r\n                                    <ImageView\r\n                                        android:id=\"@+id/ivDownloads\"\r\n                                        android:layout_width=\"wrap_content\"\r\n                                        android:layout_height=\"wrap_content\"\r\n                                        android:layout_centerInParent=\"true\" />\r\n\r\n                                </RelativeLayout>\r\n\r\n                                <LinearLayout\r\n                                    android:id=\"@+id/llMore\"\r\n                                    android:layout_width=\"42dp\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:gravity=\"center\"\r\n                                    android:visibility=\"gone\">\r\n\r\n                                    <ImageView\r\n                                        android:id=\"@+id/ivMore\"\r\n                                        android:layout_width=\"wrap_content\"\r\n                                        android:layout_height=\"wrap_content\"\r\n                                        android:src=\"@drawable/ic_menu_icon\"\r\n                                        app:tint=\"@color/white\" />\r\n\r\n                                </LinearLayout>\r\n                            </LinearLayout>\r\n                        </RelativeLayout>\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_alignParentBottom=\"true\"\r\n                            android:background=\"@drawable/transparent_gradient\"\r\n                            android:orientation=\"vertical\"\r\n                            android:paddingBottom=\"@dimen/_16sdp\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvPlaylist\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                                android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                                android:gravity=\"start\"\r\n                                android:text=\"Playlist\"\r\n                                android:textColor=\"@color/white\"\r\n                                android:textSize=\"@dimen/_15sdp\"\r\n                                android:visibility=\"gone\" />\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvLibraryName\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                                android:layout_marginTop=\"@dimen/_6sdp\"\r\n                                android:ellipsize=\"end\"\r\n                                android:fontFamily=\"@font/montserrat_bold\"\r\n                                android:gravity=\"start\"\r\n                                android:maxLines=\"1\"\r\n                                android:textColor=\"@color/white\"\r\n                                android:textSize=\"@dimen/_22sdp\" />\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvLibraryDetail\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                                android:layout_marginTop=\"@dimen/_6sdp\"\r\n                                android:fontFamily=\"@font/montserrat_medium\"\r\n                                android:gravity=\"start\"\r\n                                android:textColor=\"@color/white\"\r\n                                android:textSize=\"@dimen/_15sdp\" />\r\n\r\n                        </LinearLayout>\r\n                    </RelativeLayout>\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ivPlaylistStatus\"\r\n                        android:layout_width=\"@dimen/_60sdp\"\r\n                        android:layout_height=\"@dimen/_60sdp\"\r\n                        android:layout_below=\"@id/llMainLayout\"\r\n                        android:layout_alignParentRight=\"true\"\r\n                        android:layout_marginTop=\"-33dp\"\r\n                        android:layout_marginRight=\"@dimen/_20sdp\"\r\n                        android:scaleType=\"fitXY\"\r\n                        android:src=\"@drawable/ic_blue_play_icon\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llAddAudio\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"310dp\"\r\n                        android:layout_below=\"@id/llMainLayout\"\r\n                        android:layout_marginTop=\"@dimen/_51sdp\"\r\n                        android:gravity=\"center\"\r\n                        android:orientation=\"vertical\"\r\n                        android:visibility=\"gone\">\r\n\r\n                        <TextView\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                            android:layout_marginTop=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_medium\"\r\n                            android:gravity=\"center\"\r\n                            android:text=\"Let's find some Audios for your playlist.\"\r\n                            android:textColor=\"@color/dark_blue_gray\"\r\n                            android:textSize=\"@dimen/_15sdp\" />\r\n\r\n                        <Button\r\n                            android:id=\"@+id/btnAddAudio\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginHorizontal=\"@dimen/_55sdp\"\r\n                            android:layout_marginTop=\"@dimen/_30sdp\"\r\n                            android:layout_marginBottom=\"@dimen/_25sdp\"\r\n                            android:background=\"@drawable/extra_round_cornor\"\r\n                            android:fontFamily=\"@font/montserrat_bold\"\r\n                            android:paddingVertical=\"@dimen/_2sdp\"\r\n                            android:text=\"@string/Add_Audio\"\r\n                            android:textColor=\"@color/white\" />\r\n\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llListing\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_below=\"@id/ivPlaylistStatus\"\r\n                        android:orientation=\"vertical\"\r\n                        android:visibility=\"visible\">\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"@dimen/_84sdp\">\r\n\r\n                            <RelativeLayout\r\n                                android:id=\"@+id/rlSearch\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"@dimen/_48sdp\"\r\n                                android:layout_gravity=\"center_vertical\"\r\n                                android:layout_marginLeft=\"@dimen/_16sdp\"\r\n                                android:layout_marginTop=\"@dimen/_15sdp\"\r\n                                android:layout_marginRight=\"@dimen/_16sdp\"\r\n                                android:layout_weight=\"2\"\r\n                                android:background=\"@drawable/rounded_extra_gray_corner\"\r\n                                android:visibility=\"visible\">\r\n\r\n                                <ImageView\r\n                                    android:id=\"@+id/button1\"\r\n                                    android:layout_width=\"@dimen/_16sdp\"\r\n                                    android:layout_height=\"@dimen/_16sdp\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:layout_marginLeft=\"@dimen/_14sdp\"\r\n                                    android:src=\"@drawable/ic_search_icon\"\r\n                                    app:tint=\"@color/dark_blue_gray\" />\r\n\r\n                                <TextView\r\n                                    android:id=\"@+id/tvSearch\"\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:layout_marginLeft=\"@dimen/_16sdp\"\r\n                                    android:layout_marginTop=\"@dimen/_20sdp\"\r\n                                    android:layout_marginRight=\"@dimen/_16sdp\"\r\n                                    android:layout_toRightOf=\"@id/button1\"\r\n                                    android:fontFamily=\"@font/montserrat_bold\"\r\n                                    android:gravity=\"start\"\r\n                                    android:text=\"\"\r\n                                    android:textColor=\"@color/light_gray\"\r\n                                    android:textSize=\"@dimen/_14sdp\"\r\n                                    android:visibility=\"gone\" />\r\n\r\n                                <androidx.appcompat.widget.SearchView\r\n                                    android:id=\"@+id/searchView\"\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:layout_toRightOf=\"@id/button1\"\r\n                                    android:iconifiedByDefault=\"false\"\r\n                                    android:singleLine=\"true\"\r\n                                    android:theme=\"@style/WallSearchView\"\r\n                                    android:visibility=\"gone\"\r\n                                    app:queryBackground=\"@null\"\r\n                                    app:queryHint=\"\"\r\n                                    app:searchHintIcon=\"@null\"\r\n                                    app:searchIcon=\"@null\" />\r\n                            </RelativeLayout>\r\n                        </LinearLayout>\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:orientation=\"vertical\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvTag\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginLeft=\"@dimen/_16sdp\"\r\n                                android:layout_marginTop=\"@dimen/_20sdp\"\r\n                                android:layout_marginRight=\"@dimen/_16sdp\"\r\n                                android:fontFamily=\"@font/montserrat_bold\"\r\n                                android:gravity=\"start\"\r\n                                android:text=\"@string/Audios_in_Playlist\"\r\n                                android:textColor=\"@color/black\"\r\n                                android:textSize=\"@dimen/_16sdp\"\r\n                                android:visibility=\"gone\" />\r\n\r\n                            <LinearLayout\r\n                                android:id=\"@+id/llSpace\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"match_parent\">\r\n\r\n                                <androidx.recyclerview.widget.RecyclerView\r\n                                    android:id=\"@+id/rvPlayLists\"\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:overScrollMode=\"never\"\r\n                                    android:paddingBottom=\"@dimen/_30sdp\" />\r\n                            </LinearLayout>\r\n\r\n                            <LinearLayout\r\n                                android:id=\"@+id/llError\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginHorizontal=\"@dimen/_22sdp\"\r\n                                android:layout_marginTop=\"@dimen/_20sdp\"\r\n                                android:gravity=\"center\"\r\n                                android:orientation=\"vertical\"\r\n                                android:visibility=\"gone\">\r\n\r\n                                <TextView\r\n                                    android:id=\"@+id/tvFound\"\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:fontFamily=\"@font/montserrat_regular\"\r\n                                    android:gravity=\"center\"\r\n                                    android:textColor=\"@color/dark_blue_gray\"\r\n                                    android:textSize=\"@dimen/_15sdp\" />\r\n\r\n                                <TextView\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:layout_marginTop=\"@dimen/_4sdp\"\r\n                                    android:fontFamily=\"@font/montserrat_regular\"\r\n                                    android:gravity=\"center\"\r\n                                    android:text=\"@string/no_data_found\"\r\n                                    android:textColor=\"@color/dark_blue_gray\"\r\n                                    android:textSize=\"@dimen/_11sdp\"\r\n                                    android:visibility=\"gone\" />\r\n\r\n                            </LinearLayout>\r\n                        </LinearLayout>\r\n\r\n                    </LinearLayout>\r\n                </RelativeLayout>\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/llExtra\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"@dimen/_70sdp\"\r\n                android:layout_alignParentBottom=\"true\"\r\n                android:background=\"@color/white\"\r\n                android:orientation=\"horizontal\"\r\n                android:visibility=\"gone\"></LinearLayout>\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:gravity=\"center\"\r\n                android:padding=\"@dimen/_60sdp\">\r\n\r\n                <ProgressBar\r\n                    android:id=\"@+id/progressBar\"\r\n                    android:layout_width=\"@dimen/_50sdp\"\r\n                    android:layout_height=\"@dimen/_50sdp\"\r\n                    android:indeterminateTint=\"@color/blue\"\r\n                    android:scaleType=\"centerInside\"\r\n                    android:visibility=\"gone\" />\r\n\r\n            </LinearLayout>\r\n\r\n            <FrameLayout\r\n                android:id=\"@+id/progressBarHolder\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:alpha=\"0.4\"\r\n                android:animateLayoutChanges=\"true\"\r\n                android:background=\"#C0000000\"\r\n                android:visibility=\"gone\" />\r\n        </RelativeLayout>\r\n    </FrameLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_my_playlists.xml	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/res/layout/fragment_my_playlists.xml	(date 1602684687583)
@@ -9,6 +9,7 @@
         android:background="@color/white">
 
         <RelativeLayout
+            android:id="@+id/rlMainLayouts"
             android:layout_width="match_parent"
             android:layout_height="match_parent">
 
Index: app/src/main/java/com/brainwellnessspa/Utility/APIInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.Utility;\r\n\r\nimport com.brainwellnessspa.AddPayment.Model.AddCardModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.BillingAddressSaveModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.BillingAddressViewModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CancelPlanModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardListModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CurrentPlanVieViewModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.PayNowDetailsModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.PlanListBillingModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.CreatePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.DirectionModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.DownloadPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.LogoutModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.NextSessionViewModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.PlaylistingModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.PreviousAppointmentsModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ReminderStatusPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.RenamePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SessionListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestionAudiosModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllPlayListModel;\r\nimport com.brainwellnessspa.DownloadModule.Models.DownloadlistModel;\r\nimport com.brainwellnessspa.FaqModule.Models.FaqListModel;\r\nimport com.brainwellnessspa.InvoiceModule.Models.InvoiceDetailModel;\r\nimport com.brainwellnessspa.InvoiceModule.Models.InvoiceListModel;\r\nimport com.brainwellnessspa.LoginModule.Models.CountryListModel;\r\nimport com.brainwellnessspa.LoginModule.Models.LoginModel;\r\nimport com.brainwellnessspa.LoginModule.Models.OtpModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.MembershipPlanListModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.SignUpModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.DeleteRemiderModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.RemiderDetailsModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.ReminderStatusModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.SelectPlaylistModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.SetReminderModel;\r\nimport com.brainwellnessspa.ResourceModule.Models.ResourceFilterModel;\r\nimport com.brainwellnessspa.ResourceModule.Models.ResourceListModel;\r\nimport com.brainwellnessspa.SplashModule.Models.VersionModel;\r\nimport com.brainwellnessspa.UserModule.Models.AddProfileModel;\r\nimport com.brainwellnessspa.UserModule.Models.ProfileUpdateModel;\r\nimport com.brainwellnessspa.UserModule.Models.ProfileViewModel;\r\nimport com.brainwellnessspa.UserModule.Models.RemoveProfileModel;\r\n\r\nimport retrofit.mime.TypedFile;\r\nimport retrofit2.Call;\r\nimport retrofit2.http.Field;\r\nimport retrofit2.http.FormUrlEncoded;\r\nimport retrofit2.http.GET;\r\nimport retrofit2.http.Multipart;\r\nimport retrofit2.http.POST;\r\nimport retrofit2.http.Part;\r\n\r\npublic interface APIInterface {\r\n\r\n  /*  @Multipart\r\n    @POST(\"/addprofileimage\")\r\n    void getAddProfile(@Part(\"UserID\") String UserID,\r\n                       @Part(\"ProfileImage\") TypedFile Avtar,\r\n                       Callback<AddProfileModel> addProfileModelCallback);*/\r\n\r\n    /*TODO UserProfileActivity */\r\n\r\n    @Multipart\r\n    @POST(\"addprofileimage\")\r\n    Call<AddProfileModel> getAddProfile(@Part(\"UserID\") String userID,\r\n                                        @Part(\"ProfileImage\") TypedFile profileImage);\r\n\r\n    /*TODO App Version*/\r\n    @POST(\"appversion\")\r\n    @FormUrlEncoded\r\n    Call<VersionModel> getVersionDatas(@Field(\"Version\") String version,\r\n                                       @Field(\"AppType\") String appType);\r\n\r\n    /* TODO LoginActivtiy & OtpActivity */\r\n    @POST(\"sendotp\")\r\n    @FormUrlEncoded\r\n    Call<LoginModel> getLoginDatas(@Field(\"MobileNo\") String mobileNo,\r\n                                   @Field(\"CountryCode\") String countryCode,\r\n                                   @Field(\"DeviceType\") String deviceType,\r\n                                   @Field(\"Resend\") String resend,\r\n                                   @Field(\"key\") String key);\r\n\r\n    /* TODO Registration */\r\n    @POST(\"signupcheckout\")\r\n    @FormUrlEncoded\r\n    Call<LoginModel> getRegData(@Field(\"MobileNo\") String mobileNo,\r\n                                @Field(\"CountryCode\") String countryCode);\r\n\r\n    /* TODO Membership Payment */\r\n    @POST(\"payment\")\r\n    @FormUrlEncoded\r\n    Call<AddCardModel> getMembershipPayment(\r\n            @Field(\"PlanId\") String planId,\r\n            @Field(\"PlanFlag\") String planFlag,\r\n            @Field(\"TokenId\") String CardId,\r\n            @Field(\"MobileNo\") String UserId);\r\n\r\n    /* TODO CheckoutGetCodeActivity */\r\n    @POST(\"signupcheckout\")\r\n    @FormUrlEncoded\r\n    Call<SignUpModel> getSignUpDatas(@Field(\"MobileNo\") String mobileNo,\r\n                                     @Field(\"CountryCode\") String countryCode,\r\n                                     @Field(\"DeviceType\") String deviceType,\r\n                                     @Field(\"Resend\") String resend,\r\n                                     @Field(\"key\") String key);\r\n\r\n    /* TODO OtpActivity */\r\n    @POST(\"authotp\")\r\n    @FormUrlEncoded\r\n    Call<OtpModel> getAuthOtps(@Field(\"OTP\") String otp,\r\n                               @Field(\"Token\") String token,\r\n                               @Field(\"DeviceType\") String deviceType,\r\n                               @Field(\"DeviceID\") String deviceID,\r\n                               @Field(\"MobileNo\") String mobileNo,\r\n                               @Field(\"SignupFlag\") String signupFlag);\r\n\r\n    /* TODO OtpActivity */\r\n    @POST(\"authotp\")\r\n    @FormUrlEncoded\r\n    Call<OtpModel> getAuthOtps1(@Field(\"OTP\") String otp,\r\n                                @Field(\"Token\") String token,\r\n                                @Field(\"DeviceType\") String deviceType,\r\n                                @Field(\"DeviceID\") String deviceID,\r\n                                @Field(\"MobileNo\") String mobileNo,\r\n                                @Field(\"SignupFlag\") String signupFlag);\r\n\r\n    /* TODO AccountFragment */\r\n    @POST(\"logout\")\r\n    @FormUrlEncoded\r\n    Call<LogoutModel> getLogout(@Field(\"UserID\") String otp,\r\n                                @Field(\"Token\") String token,\r\n                                @Field(\"Type\") String type);\r\n\r\n    /* TODO CountryActivity */\r\n    @GET(\"countrylist\")\r\n    Call<CountryListModel> getCountryLists();\r\n\r\n    /* TODO AudioFaqActivity */\r\n    @GET(\"faqlist\")\r\n    Call<FaqListModel> getFaqLists();\r\n\r\n    /* TODO UserProfileActivity */\r\n    @POST(\"profiledetail\")\r\n    @FormUrlEncoded\r\n    Call<ProfileViewModel> getProfileView(@Field(\"UserID\") String userID);\r\n\r\n    /*TODO UserProfileActivity */\r\n    @POST(\"profileupdate\")\r\n    @FormUrlEncoded\r\n    Call<ProfileUpdateModel> getProfileUpdate(@Field(\"UserID\") String userID,\r\n                                              @Field(\"Name\") String name,\r\n                                              @Field(\"Dob\") String dob,\r\n                                              @Field(\"MobileNo\") String mobileNo,\r\n                                              @Field(\"EmailId\") String emailId,\r\n                                              @Field(\"IsVerify\") String isVerify);\r\n\r\n    /* TODO Membership Plan List */\r\n    @GET(\"planlist\")\r\n    Call<MembershipPlanListModel> getMembershipPlanList();\r\n\r\n    /*TODO UserProfileActivity */\r\n    @POST(\"removeprofileimage\")\r\n    @FormUrlEncoded\r\n    Call<RemoveProfileModel> getRemoveProfile(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AudioFragment */\r\n    @POST(\"homeaudioscreen\")\r\n    @FormUrlEncoded\r\n    Call<MainAudioModel> getMainAudioLists(@Field(\"UserID\") String userID);\r\n\r\n\r\n    /* TODO PlaylistFragment */\r\n    @POST(\"getlibrary\")\r\n    @FormUrlEncoded\r\n    Call<MainPlayListModel> getMainPlayLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO ViewAllPlaylistFragment */\r\n    @POST(\"playlistongetlibrary\")\r\n    @FormUrlEncoded\r\n    Call<ViewAllPlayListModel> getViewAllPlayLists(@Field(\"UserID\") String userID,\r\n                                                   @Field(\"GetLibraryId\") String getLibraryId);\r\n\r\n    /* TODO ViewAllAudioFragment */\r\n    @POST(\"gethomeallaudio\")\r\n    @FormUrlEncoded\r\n    Call<ViewAllAudioListModel> getViewAllAudioLists(@Field(\"UserID\") String userID,\r\n                                                     @Field(\"GetHomeId\") String HomeId,\r\n                                                     @Field(\"CategoryName\") String CategoryName);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"playlistdetails\")\r\n    @FormUrlEncoded\r\n    Call<SubPlayListModel> getSubPlayLists(@Field(\"UserID\") String userID,\r\n                                           @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"addaudiosearch\")\r\n    @FormUrlEncoded\r\n    Call<SuggestionAudiosModel> getAddSearchAudio(@Field(\"AudioName\") String audioName,\r\n                                                  @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO AddAudioActivity & SearchFragment */\r\n    @POST(\"suggestedaudio\")\r\n    @FormUrlEncoded\r\n    Call<SuggestedModel> getSuggestedLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO SearchFragment */\r\n    @POST(\"suggestedplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SearchPlaylistModel> getSuggestedPlayLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO SearchFragment */\r\n    @POST(\"searchonsuggestedlist\")\r\n    @FormUrlEncoded\r\n    Call<SearchBothModel> getSearchBoth(@Field(\"UserID\") String userID,\r\n                                        @Field(\"SuggestedName\") String suggestedName);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"addaudiotoplaylist\")\r\n    @FormUrlEncoded\r\n    Call<AddToPlaylist> getAddSearchAudioFromPlaylist(@Field(\"UserID\") String userID,\r\n                                                      @Field(\"AudioId\") String audioId,\r\n                                                      @Field(\"PlaylistId\") String playlistId,\r\n                                                      @Field(\"FromPlaylistId\") String fromPlaylistId);\r\n\r\n    /* TODO BillingAddressFragment */\r\n    @POST(\"billingaddress\")\r\n    @FormUrlEncoded\r\n    Call<BillingAddressViewModel> getBillingAddressView(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO BillingAddressFragment */\r\n    @POST(\"payonbillingorder\")\r\n    @FormUrlEncoded\r\n    Call<PayNowDetailsModel> getPayNowDetails(@Field(\"UserID\") String userID,\r\n                                              @Field(\"CardId\") String cardId,\r\n                                              @Field(\"PlanId\") String planId,\r\n                                              @Field(\"PlanType\") String planType,\r\n                                              @Field(\"invoicePayId\") String invoicePayId,\r\n                                              @Field(\"PlanStatus\") String planStatus);\r\n\r\n    /* TODO BillingAddressFragment */\r\n    @POST(\"billingdetailsave\")\r\n    @FormUrlEncoded\r\n    Call<BillingAddressSaveModel> getBillingAddressSave(@Field(\"UserID\") String userID,\r\n                                                        @Field(\"Name\") String name,\r\n                                                        @Field(\"Email\") String email,\r\n                                                        @Field(\"Country\") String country,\r\n                                                        @Field(\"AddressLine1\") String addressLine1,\r\n                                                        @Field(\"AddressLine2\") String addressLine2,\r\n                                                        @Field(\"Suburb\") String suburb,\r\n                                                        @Field(\"State\") String state,\r\n                                                        @Field(\"Postcode\") String postcode);\r\n\r\n    /* TODO CurrentPlanFragment */\r\n    @POST(\"billingorder\")\r\n    @FormUrlEncoded\r\n    Call<CurrentPlanVieViewModel> getCurrentPlanView(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO CancelMembershipActivity */\r\n    @POST(\"cancelplan\")\r\n    @FormUrlEncoded\r\n    Call<CancelPlanModel> getCancelPlan(@Field(\"UserID\") String userID,\r\n                                        @Field(\"CancelId\") String cancelId,\r\n                                        @Field(\"CancelReason\") String cancelReason);\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"nextsessionview\")\r\n    @FormUrlEncoded\r\n    Call<NextSessionViewModel> getNextSessionVIew(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"appointmentcategorylist\")\r\n    @FormUrlEncoded\r\n    Call<PreviousAppointmentsModel> getAppointmentVIew(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"appointmentsession\")\r\n    @FormUrlEncoded\r\n    Call<SessionListModel> getAppointmentSession(@Field(\"UserID\") String userID,\r\n                                                 @Field(\"AppointmentName\") String appointmentName\r\n    );\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"appointmentdetail\")\r\n    @FormUrlEncoded\r\n    Call<AppointmentDetailModel> getAppointmentDetails(@Field(\"UserID\") String userID,\r\n                                                       @Field(\"AppointmentTypeId\") String appointmentTypeId);\r\n\r\n    /* TODO ReminderActivity */\r\n    @POST(\"setreminder\")\r\n    @FormUrlEncoded\r\n    Call<SetReminderModel> SetReminder(@Field(\"PlaylistId\") String PlaylistId,\r\n                                       @Field(\"UserID\") String userID,\r\n                                       @Field(\"IsSingle\") String IsSingle,\r\n                                       @Field(\"ReminderTime\") String ReminderTime,\r\n                                       @Field(\"ReminderDay\") String ReminderDay\r\n    );\r\n\r\n    /* TODO PlayWellnessActivity */\r\n    @POST(\"recentlyplayed\")\r\n    @FormUrlEncoded\r\n    Call<SucessModel> getRecentlyplayed(@Field(\"AudioId\") String audioId,\r\n                                        @Field(\"UserID\") String userID);\r\n\r\n    /* TODO AddQueueActivity */\r\n    @POST(\"audiodetail\")\r\n    @FormUrlEncoded\r\n    Call<DirectionModel> getAudioDetailLists(@Field(\"UserID\") String userID,\r\n                                             @Field(\"AudioId\") String audioId);\r\n\r\n    /* TODO AddPaymentActivity */\r\n    @POST(\"cardadd\")\r\n    @FormUrlEncoded\r\n    Call<AddCardModel> getAddCard(@Field(\"UserID\") String userID,\r\n                                  @Field(\"TokenId\") String tokenId);\r\n\r\n    /* TODO MembershipChangeActivity */\r\n    @POST(\"planlistonbilling\")\r\n    @FormUrlEncoded\r\n    Call<PlanListBillingModel> getPlanListBilling(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO PaymentFragment & AllCardAdapter*/\r\n    @POST(\"cardlist\")\r\n    @FormUrlEncoded\r\n    Call<CardListModel> getCardLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AllCardAdapter */\r\n    @POST(\"carddefault\")\r\n    @FormUrlEncoded\r\n    Call<CardListModel> getChangeCard(@Field(\"UserID\") String userID,\r\n                                      @Field(\"CardId\") String cardId);\r\n\r\n    /* TODO AllCardAdapter */\r\n    @POST(\"cardremove\")\r\n    @FormUrlEncoded\r\n    Call<CardModel> getRemoveCard(@Field(\"UserID\") String userID,\r\n                                  @Field(\"CardId\") String cardId);\r\n\r\n    /* TODO AddQueueActivity */\r\n    @POST(\"audiolike\")\r\n    @FormUrlEncoded\r\n    Call<AudioLikeModel> getAudioLike(@Field(\"AudioId\") String audioId,\r\n                                      @Field(\"UserID\") String userID);\r\n\r\n    /* TODO PlaylistFragment & AddPlaylistActivity*/\r\n    @POST(\"createplaylist\")\r\n    @FormUrlEncoded\r\n    Call<CreatePlaylistModel> getCreatePlaylist(@Field(\"UserID\") String userID,\r\n                                                @Field(\"PlaylistName\") String playlistName);\r\n\r\n    /* TODO MyPlaylistActivity */\r\n    @POST(\"renameplaylist\")\r\n    @FormUrlEncoded\r\n    Call<RenamePlaylistModel> getRenamePlaylist(@Field(\"UserID\") String userID,\r\n                                                @Field(\"PlaylistId\") String playlistId,\r\n                                                @Field(\"PlaylistNewName\") String playlistNewName);\r\n\r\n    /* TODO MyPlaylistActivity */\r\n    @POST(\"removeaudiofromplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SucessModel> getRemoveAudioFromPlaylist(@Field(\"UserID\") String userID,\r\n                                                 @Field(\"AudioId\") String audioId,\r\n                                                 @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"deleteplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SucessModel> getDeletePlaylist(@Field(\"UserID\") String userID,\r\n                                        @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO AddPlaylistActivity */\r\n    @POST(\"playlist\")\r\n    @FormUrlEncoded\r\n    Call<PlaylistingModel> getPlaylisting(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO set Shorted Audio from created Playlist */\r\n    @POST(\"sortingplaylistaudio\")\r\n    @FormUrlEncoded\r\n    Call<CardModel> setShortedAudio(@Field(\"UserID\") String userID,\r\n                                    @Field(\"PlaylistId\") String playListId,\r\n                                    @Field(\"PlaylistAudioId\") String audioId);\r\n\r\n    /* TODO AddQueueActivity & PlayWellnessActivity */\r\n    @POST(\"downloads\")\r\n    @FormUrlEncoded\r\n    Call<DownloadPlaylistModel> getDownloadlistPlaylist(@Field(\"UserID\") String userID,\r\n                                                        @Field(\"AudioId\") String audioId,\r\n                                                        @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO InvoiceActivity */\r\n    @POST(\"invoicelist\")\r\n    @FormUrlEncoded\r\n    Call<InvoiceListModel> getInvoicelistPlaylist(@Field(\"UserID\") String userID,\r\n                                                  @Field(\"Flag\") String flag);\r\n\r\n    /* TODO InvoiceReceiptFragment */\r\n    @POST(\"invoicedetaildownload\")\r\n    @FormUrlEncoded\r\n    Call<InvoiceDetailModel> getInvoiceDetailPlaylist(@Field(\"UserID\") String userID,\r\n                                                      @Field(\"InvoiceId\") String invoiceId,\r\n                                                      @Field(\"Flag\") String flag);\r\n\r\n    /* TODO DownloadsActivity */\r\n    @POST(\"downloadlist\")\r\n    @FormUrlEncoded\r\n    Call<DownloadlistModel> getDownloadlistPlaylist(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AppsFragment & AudioBooksFragment & DocumentariesFragment & PodcastsFragment & WebsiteFragment */\r\n    @POST(\"resourcelist\")\r\n    @FormUrlEncoded\r\n    Call<ResourceListModel> getResourcLists(@Field(\"UserID\") String userID,\r\n                                            @Field(\"ResourceTypeId\") String resourceTypeId,\r\n                                            @Field(\"Category\") String category);\r\n\r\n    /* TODO ResourceActivity */\r\n    @POST(\"resourcecategorylist\")\r\n    @FormUrlEncoded\r\n    Call<ResourceFilterModel> getResourcFilterLists(@Field(\"UserID\") String userID);\r\n\r\n\r\n    /* TODO ReminderDetailsActivity */\r\n    @POST(\"getreminder\")\r\n    @FormUrlEncoded\r\n    Call<RemiderDetailsModel> getGetReminderStatus(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO ReminderDetailsActivity */\r\n    @POST(\"deletereminder\")\r\n    @FormUrlEncoded\r\n    Call<DeleteRemiderModel> getDeleteRemiderStatus(@Field(\"UserID\") String userID,\r\n                                                    @Field(\"ReminderId\") String reminderId);\r\n\r\n    /* TODO ReminderActivity */\r\n    @POST(\"reminderstatus\")\r\n    @FormUrlEncoded\r\n    Call<ReminderStatusModel> getReminderStatus(@Field(\"UserID\") String userID,\r\n                                                @Field(\"PlaylistId\") String playlistId,\r\n                                                @Field(\"ReminderStatus\") String reminderStatus);\r\n\r\n    /* TODO ReminderActivity */\r\n    @POST(\"reminderstatus\")\r\n    @FormUrlEncoded\r\n    Call<ReminderStatusPlaylistModel> getReminderStatusPlaylist(@Field(\"UserID\") String userID,\r\n                                                                @Field(\"PlaylistId\") String playlistId,\r\n                                                                @Field(\"ReminderStatus\") String reminderStatus);\r\n\r\n    /* TODO SelectPlaylistActivity */\r\n    @POST(\"allplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SelectPlaylistModel> getAllPlayListing(@Field(\"UserID\") String userID);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/Utility/APIInterface.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/Utility/APIInterface.java	(date 1602677076655)
@@ -152,6 +152,10 @@
     @GET("faqlist")
     Call<FaqListModel> getFaqLists();
 
+    /* TODO AudioFaqActivity */
+    @GET("faqlistmembership")
+    Call<FaqListModel> getFaqListings();
+
     /* TODO UserProfileActivity */
     @POST("profiledetail")
     @FormUrlEncoded
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Playlist;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.view.WindowManager;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Filter;\r\nimport android.widget.Filterable;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.ItemTouchHelper;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardModel;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ReminderStatusPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Search.SearchFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.ReminderModule.Activities.ReminderActivity;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.ItemMoveCallback;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.StartDragListener;\r\nimport com.brainwellnessspa.databinding.FragmentMyPlaylistsBinding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenReminder;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity.MyPlaylistId;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity.addToPlayList;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.ComeFindAudio;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.comeRename;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.deleteFrg;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.ViewAllPlaylistFragment.GetPlaylistLibraryID;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity.ComeFrom_Playlist;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadProgress;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class MyPlaylistsFragment extends Fragment implements StartDragListener {\r\n    public static int RefreshIconData = 0;\r\n    public static String RefreshNew = \"\";\r\n    public static int disclaimerPlayed = 0;\r\n    FragmentMyPlaylistsBinding binding;\r\n    String UserID, New, PlaylistID, PlaylistName = \"\", PlaylistImage, SearchFlag, MyDownloads = \"\", AudioFlag;\r\n    int RefreshIcon;\r\n    PlayListsAdpater adpater;\r\n    PlayListsAdpater2 adpater2;\r\n    View view;\r\n    EditText searchEditText;\r\n    ArrayList<String> changedAudio;\r\n    Activity activity;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongsList;\r\n    List<DownloadAudioDetails> oneAudioDetailsList, playlistWiseAudioDetails;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    DownloadPlaylistDetails downloadPlaylistDetails;\r\n    Dialog dialog;\r\n    List<String> fileNameList, playlistDownloadId, remainAudio;\r\n    ItemTouchHelper touchHelper;\r\n    Runnable UpdateSongTime2;\r\n    int SongListSize = 0, count;\r\n    private Handler handler1, handler2;\r\n//    private Runnable UpdateSongTime1 = new Runnable() {\r\n//        @Override\r\n//        public void run() {\r\n//            getMediaByPer(PlaylistID,SongListSize);\r\n//\r\n///*            if (fileNameList.size() != 0) {\r\n//                if (remainAudio.size() <= SongListSize) {\r\n//                    int total = SongListSize;\r\n//                    int remain = remainAudio.size();\r\n//                    int complate = total - remain;\r\n//                    long progressPercent = complate * 100 / total;\r\n//                    int downloadProgress1 = (int) progressPercent;\r\n//                    if (SongListSize == 1) {\r\n//                        if (downloadProgress <= 100) {\r\n//                            binding.pbProgress.setProgress(downloadProgress);\r\n//                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n//                            binding.ivDownloads.setVisibility(View.GONE);\r\n//                            if (downloadProgress == 100) {\r\n//                                getDownloadData();\r\n//                            }\r\n//                        }\r\n//                    } else if (downloadProgress1 <= 100) {\r\n//                        if (downloadProgress1 == 100) {\r\n//                            getDownloadData();\r\n//                            binding.pbProgress.setVisibility(View.GONE);\r\n//                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n//                        } else {\r\n//                            binding.pbProgress.setProgress(downloadProgress1);\r\n//                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n//                            binding.ivDownloads.setVisibility(View.GONE);\r\n//                        }\r\n//                    } else {\r\n//                        binding.pbProgress.setVisibility(View.GONE);\r\n//                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n//                    }\r\n//                }\r\n//                getDownloadData();\r\n//                handler1.postDelayed(this, 500);\r\n//            }else {\r\n//                binding.pbProgress.setVisibility(View.GONE);\r\n//                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                handler1.removeCallbacks(UpdateSongTime1);\r\n//                getDownloadData();\r\n//            }*/\r\n//            handler1.postDelayed(this, 500);\r\n//        }\r\n//    };\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_playlists, container, false);\r\n        view = binding.getRoot();\r\n//        handler1 = new Handler();\r\n        handler2 = new Handler();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        activity = getActivity();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        fileNameList = new ArrayList<>();\r\n        playlistDownloadId = new ArrayList<>();\r\n//        remainAudio = new ArrayList<>();\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        playlistSongsList = new ArrayList<>();\r\n        changedAudio = new ArrayList<>();\r\n        if (getArguments() != null) {\r\n            New = getArguments().getString(\"New\");\r\n            PlaylistID = getArguments().getString(\"PlaylistID\");\r\n            PlaylistName = getArguments().getString(\"PlaylistName\");\r\n            PlaylistImage = getArguments().getString(\"PlaylistImage\");\r\n            MyDownloads = getArguments().getString(\"MyDownloads\");\r\n        }\r\n        binding.llBack.setOnClickListener(view1 -> callBack());\r\n        if (BWSApplication.isNetworkConnected(getActivity()) && !MyDownloads.equalsIgnoreCase(\"1\")) {\r\n            binding.llMore.setVisibility(View.VISIBLE);\r\n            binding.llMore.setClickable(true);\r\n            binding.llMore.setEnabled(true);\r\n            binding.ivMore.setImageResource(R.drawable.ic_menu_icon);\r\n            binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            binding.llMore.setVisibility(View.VISIBLE);\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setImageResource(R.drawable.ic_menu_icon);\r\n            binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n        }\r\n\r\n        binding.llMore.setOnClickListener(view13 -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            handler2.removeCallbacks(UpdateSongTime2);\r\n            Intent i = new Intent(getActivity(), MyPlaylistActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            startActivity(i);\r\n\r\n        });\r\n\r\n        binding.tvSearch.setOnClickListener(view14 -> {\r\n            Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            startActivity(i);\r\n        });\r\n\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        searchClear(searchEditText);\r\n\r\n        closeButton.setOnClickListener(v -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                binding.searchView.clearFocus();\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n\r\n                } else {\r\n                    try {\r\n                        if (adpater2 != null) {\r\n                            adpater2.getFilter().filter(search);\r\n                            SearchFlag = search;\r\n                            Log.e(\"searchsearch\", \"\" + search);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView.LayoutManager playList = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists.setLayoutManager(playList);\r\n        binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        binding.llDownloads.setOnClickListener(view1 -> {\r\n            callDownload(\"\", \"\", \"\", playlistSongsList, 0, binding.llDownloads, binding.ivDownloads);\r\n        });\r\n\r\n        RefreshNew = New;\r\n        if (New.equalsIgnoreCase(\"1\")) {\r\n            binding.llAddAudio.setVisibility(View.VISIBLE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.INVISIBLE);\r\n            binding.llListing.setVisibility(View.GONE);\r\n            binding.btnAddAudio.setOnClickListener(view -> {\r\n                Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n                i.putExtra(\"PlaylistID\", PlaylistID);\r\n                startActivity(i);\r\n            });\r\n        } else if (New.equalsIgnoreCase(\"0\")) {\r\n            binding.llAddAudio.setVisibility(View.GONE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n            binding.llListing.setVisibility(View.VISIBLE);\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n        return view;\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail(String download) {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadPlaylistDetailsList.size() != 0 /*New.equalsIgnoreCase(\"1\") ||*/) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (RefreshIcon == 0) {\r\n                    enableDisableDownload(false, \"gray\");\r\n                } else if (download.equalsIgnoreCase(\"1\") /* New.equalsIgnoreCase(\"1\") ||*/) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (download.equalsIgnoreCase(\"0\") || download.equalsIgnoreCase(\"\") ||\r\n                        New.equalsIgnoreCase(\"0\") || RefreshIcon != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail2() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n   /*\r\n                    \"PlaylistDesc\": \"When life gets tough and you struggle through the days, download the Ultimate Self-development Bundle to help you in finding a new appreciation for life. Everyone can use a little help in all areas of their lives at times. There are 12 programs aimed to help your self-development:\",\r\n                    \"PlaylistMastercat\": \"Self-development\",\r\n                    \"PlaylistSubcat\": \"Self-expression, Focus, Discipline, Self-love, Mindset, Passion, Enthusiasm, Gratitude, Self-doubt, Inner Strength \",\r\n                    \"PlaylistImage\": \"https://brainwellnessspa.com.au/wp-content/uploads/2018/06/Ultimate self development bundle.jpg\",\r\n                    \"PlaylistSongs \" */\r\n                downloadAudioDetailsList = GetAllMedia();\r\n                playlistWiseAudioDetails = GetMedia();\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private void enableDisableDownload(boolean b, String color) {\r\n        if (b) {\r\n            binding.llDownloads.setClickable(true);\r\n            binding.llDownloads.setEnabled(true);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            binding.llDownloads.setClickable(false);\r\n            binding.llDownloads.setEnabled(false);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            if (color.equalsIgnoreCase(\"gray\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            } else if (color.equalsIgnoreCase(\"orange\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetAllMedia() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData1();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        view.setFocusableInTouchMode(true);\r\n        view.requestFocus();\r\n        view.setOnKeyListener((v, keyCode, event) -> {\r\n            binding.searchView.clearFocus();\r\n            if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                callBack();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        super.onResume();\r\n        if (deleteFrg == 1) {\r\n            callBack();\r\n            deleteFrg = 0;\r\n        } else if (addToPlayList) {\r\n            PlaylistID = MyPlaylistId;\r\n            prepareData(UserID, MyPlaylistId);\r\n            addToPlayList = false;\r\n        } else {\r\n            prepareData(UserID, PlaylistID);\r\n        }/* else if (addToSearch) {\r\n            prepareData(UserID, MyPlaylistIds);\r\n            addToSearch = false;\r\n        }*/\r\n        if (comeRename == 1) {\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n    }\r\n\r\n    private void callBack() {\r\n        binding.searchView.clearFocus();\r\n        if (comefrom_search == 2) {\r\n            Bundle bundle = new Bundle();\r\n            Fragment playlistFragment = new ViewAllPlaylistFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, playlistFragment)\r\n                    .commit();\r\n            bundle.putString(\"GetLibraryID\", GetPlaylistLibraryID);\r\n            bundle.putString(\"MyDownloads\", MyDownloads);\r\n            playlistFragment.setArguments(bundle);\r\n//            comefrom_search = 0;\r\n        } else if (comefrom_search == 1) {\r\n            Fragment fragment = new SearchFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, fragment)\r\n                    .commit();\r\n            comefrom_search = 0;\r\n        } else if (comefrom_search == 0) {\r\n            Fragment fragment = new PlaylistFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, fragment)\r\n                    .commit();\r\n            comefrom_search = 0;\r\n        } else if (comefrom_search == 3) {\r\n            Intent i = new Intent(getActivity(), DownloadsActivity.class);\r\n            ComeFrom_Playlist = true;\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            startActivity(i);\r\n            getActivity().finish();\r\n//            comefrom_search = 0;\r\n        }\r\n    }\r\n\r\n    private void searchClear(EditText searchEditText) {\r\n        if (ComeFindAudio == 1) {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n            ComeFindAudio = 0;\r\n        } else if (ComeFindAudio == 2) {\r\n            binding.searchView.requestFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n            ComeFindAudio = 0;\r\n        }\r\n\r\n    }\r\n\r\n    private void prepareData(String UserId, String PlaylistId) {\r\n        if (comefrom_search == 3) {\r\n            binding.llExtra.setVisibility(View.VISIBLE);\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 260);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n\r\n        searchClear(searchEditText);\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        try {\r\n            if (IsLock.equalsIgnoreCase(\"1\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n            }\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                if (comefrom_search == 1) {\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                } else {\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                }\r\n\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                params.setMargins(10, 8, 10, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                params.setMargins(10, 8, 10, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            if (!MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                Call<SubPlayListModel> listCall = APIClient.getClient().getSubPlayLists(UserId, PlaylistId);\r\n                listCall.enqueue(new Callback<SubPlayListModel>() {\r\n                    @SuppressLint(\"ClickableViewAccessibility\")\r\n                    @Override\r\n                    public void onResponse(Call<SubPlayListModel> call, Response<SubPlayListModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                            SubPlayListModel listModel = response.body();\r\n                            try {\r\n                                if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"0\") ||\r\n                                        listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n\r\n                                } else if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"1\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                                }\r\n                            } catch (Exception e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                            getDownloadData();\r\n                            SongListSize = listModel.getResponseData().getPlaylistSongs().size();\r\n                            getMediaByPer(PlaylistId, SongListSize);\r\n                            if (listModel.getResponseData().getCreated().equalsIgnoreCase(\"1\")) {\r\n                                searchEditText.setHint(R.string.playlist_or_audio_search);\r\n                                binding.tvSearch.setHint(R.string.playlist_or_audio_search);\r\n//                                binding.tvSearch.setTextSize(14);\r\n                            } else {\r\n                                searchEditText.setHint(\"Search for audios\");\r\n                                binding.tvSearch.setHint(\"Search for audios\");\r\n                            }\r\n                            binding.rlSearch.setVisibility(View.VISIBLE);\r\n                            binding.llMore.setVisibility(View.VISIBLE);\r\n                            binding.llReminder.setVisibility(View.VISIBLE);\r\n                            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n                            binding.tvTag.setText(R.string.Audios_in_Playlist);\r\n                            binding.llReminder.setOnClickListener(view -> {\r\n                                if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"0\") ||\r\n                                        listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n                                    Intent i = new Intent(getActivity(), ReminderActivity.class);\r\n                                    ComeScreenReminder = 0;\r\n                                    i.putExtra(\"ComeFrom\", \"1\");\r\n                                    i.putExtra(\"PlaylistID\", PlaylistID);\r\n                                    i.putExtra(\"PlaylistName\", listModel.getResponseData().getPlaylistName());\r\n                                    i.putExtra(\"Time\", listModel.getResponseData().getReminderTime());\r\n                                    i.putExtra(\"Day\", listModel.getResponseData().getReminderDay());\r\n                                    startActivity(i);\r\n                                } else if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"1\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                                    dialog = new Dialog(activity);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.delete_payment_card);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(activity.getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                                    final TextView tvSubTitle = dialog.findViewById(R.id.tvSubTitle);\r\n                                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                                    final Button Btn = dialog.findViewById(R.id.Btn);\r\n                                    tvTitle.setText(\"Reminder off\");\r\n                                    tvSubTitle.setText(\"Are you sure you want to reminder off ?\");\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n                                    Btn.setOnTouchListener((view1, event) -> {\r\n                                        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                                            switch (event.getAction()) {\r\n                                                case MotionEvent.ACTION_DOWN: {\r\n                                                    Button views = (Button) view1;\r\n                                                    views.getBackground().setColorFilter(0x77000000, PorterDuff.Mode.SRC_ATOP);\r\n                                                    view1.invalidate();\r\n                                                    break;\r\n                                                }\r\n                                                case MotionEvent.ACTION_UP:\r\n                                                    Call<ReminderStatusPlaylistModel> listCall1 = APIClient.getClient().getReminderStatusPlaylist(UserID, PlaylistID, \"0\");/*set 1 or not 0 */\r\n                                                    listCall1.enqueue(new Callback<ReminderStatusPlaylistModel>() {\r\n                                                        @Override\r\n                                                        public void onResponse(Call<ReminderStatusPlaylistModel> call1, Response<ReminderStatusPlaylistModel> response1) {\r\n                                                            if (response1.isSuccessful()) {\r\n                                                                ReminderStatusPlaylistModel listModel1 = response1.body();\r\n//                                                                prepareData(UserID, PlaylistID);\r\n                                                                listModel.getResponseData().setIsReminder(listModel1.getResponseData().getIsCheck());\r\n                                                                binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n                                                                dialog.dismiss();\r\n                                                                BWSApplication.showToast(listModel1.getResponseMessage(), activity);\r\n                                                            }\r\n                                                        }\r\n\r\n                                                        @Override\r\n                                                        public void onFailure(Call<ReminderStatusPlaylistModel> call1, Throwable t) {\r\n                                                        }\r\n                                                    });\r\n\r\n\r\n                                                case MotionEvent.ACTION_CANCEL: {\r\n                                                    Button views = (Button) view1;\r\n                                                    views.getBackground().clearColorFilter();\r\n                                                    views.invalidate();\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n                                        }\r\n\r\n                                        return true;\r\n                                    });\r\n\r\n                                    tvGoBack.setOnClickListener(v -> {\r\n                                        dialog.dismiss();\r\n                                    });\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n\r\n                                }\r\n                            });\r\n                            playlistSongsList = listModel.getResponseData().getPlaylistSongs();\r\n                            downloadPlaylistDetails = new DownloadPlaylistDetails();\r\n                            downloadPlaylistDetails.setPlaylistID(listModel.getResponseData().getPlaylistID());\r\n                            downloadPlaylistDetails.setPlaylistName(listModel.getResponseData().getPlaylistName());\r\n                            downloadPlaylistDetails.setPlaylistDesc(listModel.getResponseData().getPlaylistDesc());\r\n                            downloadPlaylistDetails.setIsReminder(listModel.getResponseData().getIsReminder());\r\n                            downloadPlaylistDetails.setPlaylistMastercat(listModel.getResponseData().getPlaylistMastercat());\r\n                            downloadPlaylistDetails.setPlaylistSubcat(listModel.getResponseData().getPlaylistSubcat());\r\n                            downloadPlaylistDetails.setPlaylistImage(listModel.getResponseData().getPlaylistImage());\r\n                            downloadPlaylistDetails.setTotalAudio(listModel.getResponseData().getTotalAudio());\r\n                            downloadPlaylistDetails.setTotalDuration(listModel.getResponseData().getTotalDuration());\r\n                            downloadPlaylistDetails.setTotalhour(listModel.getResponseData().getTotalhour());\r\n                            downloadPlaylistDetails.setTotalminute(listModel.getResponseData().getTotalminute());\r\n                            downloadPlaylistDetails.setCreated(listModel.getResponseData().getCreated());\r\n                            downloadPlaylistDetails.setDownload(listModel.getResponseData().getDownload());\r\n                            downloadPlaylistDetails.setLike(listModel.getResponseData().getLike());\r\n\r\n                            setData(listModel.getResponseData());\r\n                            downloadAudioDetailsList = GetAllMedia();\r\n                            downloadPlaylistDetailsList = GetPlaylistDetail(listModel.getResponseData().getDownload());\r\n                            playlistWiseAudioDetails = GetMedia();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<SubPlayListModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                });\r\n            } else {\r\n                downloadPlaylistDetailsList = GetPlaylistDetail2();\r\n            }\r\n        } else {\r\n            downloadPlaylistDetailsList = GetPlaylistDetail2();\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private void getMediaByPer(String playlistID, int totalAudio) {\r\n        class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                count = DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getCountDownloadProgress(\"Compete\", playlistID);\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                downloadPlaylistDetailsList = GetPlaylistDetail(downloadPlaylistDetails.getDownload());\r\n\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    if (count <= totalAudio) {\r\n                        if (count == totalAudio) {\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        } else {\r\n                            long progressPercent = count * 100 / totalAudio;\r\n                            int downloadProgress1 = (int) progressPercent;\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            binding.pbProgress.setProgress(downloadProgress1);\r\n                            getMediaByPer(playlistID, totalAudio);\r\n//                             handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getMediaByPer st = new getMediaByPer();\r\n        st.execute();\r\n    }\r\n\r\n    private void getDownloadData() {\r\n        try {\r\n            SharedPreferences sharedy = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n               /* remainAudio = new ArrayList<>();\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 0; i < fileNameList.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            remainAudio.add(playlistDownloadId.get(i));\r\n                        }\r\n                    }\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        if (remainAudio.size() < SongListSize) {\r\n                            handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    }\r\n                    //\r\n                } else {\r\n                    fileNameList = new ArrayList<>();\r\n                    playlistDownloadId = new ArrayList<>();\r\n                    remainAudio = new ArrayList<>();\r\n                }*/\r\n            } else {\r\n                fileNameList = new ArrayList<>();\r\n                playlistDownloadId = new ArrayList<>();\r\n//                remainAudio = new ArrayList<>();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void setData(SubPlayListModel.ResponseData listModel) {\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                5, 3, 1f, 0);\r\n        binding.ivBanner.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivBanner.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivBanner.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        if (listModel.getPlaylistName().equalsIgnoreCase(\"\") ||\r\n                listModel.getPlaylistName() == null) {\r\n            binding.tvLibraryName.setText(R.string.My_Playlist);\r\n        } else {\r\n            binding.tvLibraryName.setText(listModel.getPlaylistName());\r\n        }\r\n        binding.tvPlaylist.setText(\"Playlist\");\r\n        if (!listModel.getPlaylistImage().equalsIgnoreCase(\"\")) {\r\n            try {\r\n                Glide.with(getActivity()).load(listModel.getPlaylistImage()).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivBanner);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            binding.ivBanner.setImageResource(R.drawable.audio_bg);\r\n        }\r\n\r\n        if (listModel.getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                listModel.getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                        listModel.getTotalhour().equalsIgnoreCase(\"\")\r\n                        && listModel.getTotalminute().equalsIgnoreCase(\"\")) {\r\n            binding.tvLibraryDetail.setText(\"0 Audio | 0h 0m\");\r\n        } else {\r\n            if (listModel.getTotalminute().equalsIgnoreCase(\"\")) {\r\n                binding.tvLibraryDetail.setText(listModel.getTotalAudio() + \" Audio | \"\r\n                        + listModel.getTotalhour() + \"h 0m\");\r\n            } else {\r\n                binding.tvLibraryDetail.setText(listModel.getTotalAudio() + \" Audio | \"\r\n                        + listModel.getTotalhour() + \"h \" + listModel.getTotalminute() + \"m\");\r\n            }\r\n        }\r\n        RefreshIcon = listModel.getPlaylistSongs().size();\r\n        RefreshIconData = listModel.getPlaylistSongs().size();\r\n\r\n        if (listModel.getPlaylistSongs().size() == 0) {\r\n            binding.llAddAudio.setVisibility(View.VISIBLE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.INVISIBLE);\r\n            binding.llListing.setVisibility(View.GONE);\r\n            binding.btnAddAudio.setOnClickListener(view -> {\r\n                Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n                i.putExtra(\"PlaylistID\", PlaylistID);\r\n                startActivity(i);\r\n            });\r\n        } else {\r\n            binding.llAddAudio.setVisibility(View.GONE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n            binding.llListing.setVisibility(View.VISIBLE);\r\n            try {\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    adpater2 = new PlayListsAdpater2(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated());\r\n                    binding.rvPlayLists.setAdapter(adpater2);\r\n                    binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                    binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                    enableDisableDownload(false, \"orange\");\r\n                    binding.llReminder.setClickable(false);\r\n                    binding.llReminder.setEnabled(false);\r\n                    binding.ivReminder.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                    binding.rlSearch.setVisibility(View.GONE);\r\n                } else {\r\n                    if (listModel.getCreated().equalsIgnoreCase(\"1\")) {\r\n                        adpater = new PlayListsAdpater(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated(), this);\r\n//                        SongListSize = listModel.getPlaylistSongs().size();\r\n                        ItemTouchHelper.Callback callback = new ItemMoveCallback(adpater);\r\n                        touchHelper = new ItemTouchHelper(callback);\r\n                        touchHelper.attachToRecyclerView(binding.rvPlayLists);\r\n                        binding.rvPlayLists.setAdapter(adpater);\r\n                    } else {\r\n                        adpater2 = new PlayListsAdpater2(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated());\r\n                        binding.rvPlayLists.setAdapter(adpater2);\r\n                    }\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callTransparentFrag(int position, Context ctx, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList,\r\n                                     String myPlaylist) {\r\n        SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        if (queuePlay) {\r\n            int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n            Gson gson = new Gson();\r\n            String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                }.getType();\r\n                addToQueueModelList = gson.fromJson(json1, type1);\r\n            }\r\n            addToQueueModelList.remove(position1);\r\n            SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared2.edit();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();\r\n\r\n        }\r\n        player = 1;\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isPause = false;\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(listModelList);\r\n        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, myPlaylist);\r\n        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n        editor.commit();\r\n        try {\r\n            if (comefrom_search == 1) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n            } else {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void callRemove(String id, String PlaylistAudioId, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData, int position) {\r\n        String AudioId = id;\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SucessModel> listCall = APIClient.getClient().getRemoveAudioFromPlaylist(UserID, AudioId, PlaylistID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SucessModel listModel = response.body();\r\n                        mData.remove(position);\r\n                        if (mData.size() == 0) {\r\n                            enableDisableDownload(false, \"gray\");\r\n                        }\r\n                        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (pos == position && position < mData.size() - 1) {\r\n//                                            pos = pos + 1;\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", getActivity());\r\n                                } else {\r\n                                    callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\");\r\n                                }\r\n                            } else if (pos == position && position == mData.size() - 1) {\r\n                                pos = 0;\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", getActivity());\r\n                                } else {\r\n                                    callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\");\r\n                                }\r\n                            } else if (pos < position && pos < mData.size() - 1) {\r\n                                saveToPref(pos, mData);\r\n                            } else if (pos > position && pos == mData.size()) {\r\n                                pos = pos - 1;\r\n                                saveToPref(pos, mData);\r\n                            }/*else if(pos != position || pos > mData.size()){}*/\r\n\r\n//                                        callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\");\r\n                        }\r\n                        //      adpater.notifyItemRemoved(position);\r\n                        prepareData(UserID, PlaylistID);\r\n                        BWSApplication.showToast(listModel.getResponseMessage(), getActivity());\r\n                    }\r\n                }\r\n\r\n                private void saveToPref(int pos, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData) {\r\n                    SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shareddd.edit();\r\n                    Gson gson = new Gson();\r\n                    String json = gson.toJson(mData);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                    editor.commit();\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private void callDownload(String id, String audioFile, String Name, ArrayList<SubPlayListModel.ResponseData.PlaylistSong>\r\n            playlistSongs, int position, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        if (id.isEmpty() && Name.isEmpty() && audioFile.isEmpty()) {\r\n            enableDisableDownload(false, \"orange\");\r\n            List<String> url = new ArrayList<>();\r\n            List<String> name = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs2 = new ArrayList<>();\r\n            playlistSongs2 = playlistSongs;\r\n            if (downloadAudioDetailsList.size() != 0) {\r\n                for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                    if (playlistSongs2.size() == 0) {\r\n                        break;\r\n                    } else {\r\n                        for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                            if (playlistSongs2.size() != 0) {\r\n                                if (playlistSongs2.get(x).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                    playlistSongs2.remove(x);\r\n                                }\r\n                                if (playlistSongs2.size() == 0) {\r\n                                    break;\r\n                                }\r\n                            } else break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (playlistSongs2.size() != 0) {\r\n                for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                    name.add(playlistSongs2.get(x).getName());\r\n                    url.add(playlistSongs2.get(x).getAudioFile());\r\n                    downloadPlaylistId.add(playlistSongs2.get(x).getPlaylistID());\r\n                }\r\n            }\r\n            byte[] encodedBytes = new byte[1024];\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url.addAll(audioFile1);\r\n                    name.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            if (url.size() != 0) {\r\n                DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url);\r\n                String nameJson = gson.toJson(name);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                fileNameList = name;\r\n                playlistDownloadId = downloadPlaylistId;\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                /*remainAudio = new ArrayList<>();\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                        remainAudio.add(playlistDownloadId.get(i));\r\n                    }\r\n                }*/\r\n                SongListSize = playlistSongs.size();\r\n//                handler1.postDelayed(UpdateSongTime1, 500);\r\n            }\r\n            binding.pbProgress.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setVisibility(View.GONE);\r\n//            String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n//            SaveMedia(EncodeBytes, dirPath, playlistSongs, i, llDownload);\r\n            savePlaylist();\r\n            saveAllMedia(playlistSongsList, encodedBytes);\r\n        } else {\r\n            disableDownload(llDownload, ivDownloads);\r\n            List<String> url = new ArrayList<>();\r\n            List<String> name = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url.addAll(audioFile1);\r\n                    name.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            url.add(audioFile);\r\n            name.add(Name);\r\n            downloadPlaylistId.add(\"\");\r\n            if (url.size() != 0) {\r\n                DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url);\r\n                String nameJson = gson.toJson(name);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                fileNameList = name;\r\n                playlistDownloadId = downloadPlaylistId;\r\n            }\r\n            String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n            SaveMedia(new byte[1024], dirPath, playlistSongs, position, llDownload, ivDownloads);\r\n            handler2.postDelayed(UpdateSongTime2, 200);\r\n        }\r\n    }\r\n\r\n    private void savePlaylist() {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertPlaylist(downloadPlaylistDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n                getMediaByPer(PlaylistID, SongListSize);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void saveAllMedia(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, byte[] encodedBytes) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                for (int i = 0; i < playlistSongs.size(); i++) {\r\n                    downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                    downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"0\");\r\n                    if (downloadAudioDetailsList.size() != 0) {\r\n                        for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                            if (playlistSongs.get(i).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                downloadAudioDetails.setIsDownload(\"Complete\");\r\n                                downloadAudioDetails.setDownloadProgress(100);\r\n                            } else {\r\n                                downloadAudioDetails.setIsDownload(\"pending\");\r\n                                downloadAudioDetails.setDownloadProgress(0);\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                    downloadAudioDetails.setPlaylistId(playlistSongs.get(i).getPlaylistID());\r\n                    DatabaseClient.getInstance(getActivity())\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .insertMedia(downloadAudioDetails);\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n\r\n                enableDisableDownload(false, \"orange\");\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void SaveMedia(byte[] encodeBytes, String dirPath, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, int i, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                downloadAudioDetails.setDownload(\"1\");\r\n                downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                downloadAudioDetails.setIsSingle(\"1\");\r\n                downloadAudioDetails.setPlaylistId(\"\");\r\n                downloadAudioDetails.setIsDownload(\"pending\");\r\n                downloadAudioDetails.setDownloadProgress(0);\r\n                DatabaseClient.getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                disableDownload(llDownload, ivDownloads);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public void GetMedia(String url, Context ctx, String download, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(url);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                        disableDownload(llDownload, ivDownloads);\r\n                    }\r\n                } else if (download.equalsIgnoreCase(\"1\")) {\r\n                    disableDownload(llDownload, ivDownloads);\r\n                } else {\r\n                    enableDownload(llDownload, ivDownloads);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetMedia() {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        SubPlayListModel responseData = new SubPlayListModel();\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> details = new ArrayList<>();\r\n                        SubPlayListModel.ResponseData listModel = new SubPlayListModel.ResponseData();\r\n                        listModel.setPlaylistID(downloadPlaylistDetailsList.get(0).getPlaylistID());\r\n                        listModel.setPlaylistName(downloadPlaylistDetailsList.get(0).getPlaylistName());\r\n                        listModel.setPlaylistDesc(downloadPlaylistDetailsList.get(0).getPlaylistDesc());\r\n                        listModel.setPlaylistMastercat(downloadPlaylistDetailsList.get(0).getPlaylistMastercat());\r\n                        listModel.setPlaylistSubcat(downloadPlaylistDetailsList.get(0).getPlaylistSubcat());\r\n                        listModel.setPlaylistImage(downloadPlaylistDetailsList.get(0).getPlaylistImage());\r\n                        listModel.setTotalAudio(downloadPlaylistDetailsList.get(0).getTotalAudio());\r\n                        listModel.setTotalDuration(downloadPlaylistDetailsList.get(0).getTotalDuration());\r\n                        listModel.setTotalhour(downloadPlaylistDetailsList.get(0).getTotalhour());\r\n                        listModel.setTotalminute(downloadPlaylistDetailsList.get(0).getTotalminute());\r\n                        listModel.setCreated(downloadPlaylistDetailsList.get(0).getCreated());\r\n                        listModel.setLike(downloadPlaylistDetailsList.get(0).getLike());\r\n                        listModel.setIsReminder(downloadPlaylistDetailsList.get(0).getIsReminder());\r\n                        if (playlistWiseAudioDetails.size() != 0) {\r\n                            for (int i = 0; i < playlistWiseAudioDetails.size(); i++) {\r\n                                SubPlayListModel.ResponseData.PlaylistSong detail = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                detail.setID(playlistWiseAudioDetails.get(i).getID());\r\n                                detail.setName(playlistWiseAudioDetails.get(i).getName());\r\n                                detail.setAudioFile(playlistWiseAudioDetails.get(i).getAudioFile());\r\n                                detail.setAudioDirection(playlistWiseAudioDetails.get(i).getAudioDirection());\r\n                                detail.setAudiomastercat(playlistWiseAudioDetails.get(i).getAudiomastercat());\r\n                                detail.setAudioSubCategory(playlistWiseAudioDetails.get(i).getAudioSubCategory());\r\n                                detail.setImageFile(playlistWiseAudioDetails.get(i).getImageFile());\r\n                                detail.setLike(playlistWiseAudioDetails.get(i).getLike());\r\n                                detail.setDownload(playlistWiseAudioDetails.get(i).getDownload());\r\n                                detail.setAudioDuration(playlistWiseAudioDetails.get(i).getAudioDuration());\r\n                                details.add(detail);\r\n                            }\r\n                            listModel.setPlaylistSongs(details);\r\n                        }\r\n                        setData(listModel);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    private void enableDownload(RelativeLayout llDownload, ImageView ivDownloads) {\r\n        llDownload.setClickable(true);\r\n        llDownload.setEnabled(true);\r\n        ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n        ivDownloads.setColorFilter(activity.getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n    }\r\n\r\n    private void disableDownload(RelativeLayout llDownload, ImageView ivDownloads) {\r\n        ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n        ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        llDownload.setClickable(false);\r\n        llDownload.setEnabled(false);\r\n    }\r\n\r\n    @Override\r\n    public void requestDrag(RecyclerView.ViewHolder viewHolder) {\r\n        touchHelper.startDrag(viewHolder);\r\n    }\r\n\r\n    public class PlayListsAdpater extends RecyclerView.Adapter<PlayListsAdpater.MyViewHolder> implements Filterable/*, StartDragListener*/, ItemMoveCallback.ItemTouchHelperContract {\r\n        Context ctx;\r\n        String UserID, Created, name;\r\n        StartDragListener startDragListener;\r\n        int isDownloading = 0;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                String Created, StartDragListener startDragListener) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n            this.startDragListener = startDragListener;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @SuppressLint(\"ClickableViewAccessibility\")\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n            UpdateSongTime2 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    for (int f = 0; f < listModelList.size(); f++) {\r\n                        if (fileNameList.size() != 0) {\r\n                            for (int i = 0; i < fileNameList.size(); i++) {\r\n                                if (fileNameList.get(i).equalsIgnoreCase(mData.get(f).getName())) {\r\n                                    if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(mData.get(f).getName())) {\r\n                                        if (downloadProgress <= 100) {\r\n                                            notifyItemChanged(f);\r\n                                         /*   holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.GONE);*/\r\n                                        } else {\r\n                                            holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                                            handler2.removeCallbacks(UpdateSongTime2);\r\n                                            getDownloadData();\r\n                                        }\r\n                                    } else {\r\n                                        notifyItemChanged(f);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (downloadProgress == 0) {\r\n                        notifyDataSetChanged();\r\n                        getDownloadData();\r\n                    }\r\n                    handler2.postDelayed(this, 300);\r\n                }\r\n            };\r\n            if (fileNameList.size() != 0) {\r\n             /*   for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                        isDownloading++;\r\n                        break;\r\n                    }else{\r\n                        holder.binding.pbProgress.setVisibility(View.GONE);\r\n                    }\r\n                }*/\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(mData.get(position).getName())) {\r\n                            if (downloadProgress <= 100) {\r\n                                if (downloadProgress == 100) {\r\n                                    holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                } else {\r\n                                    holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                    holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                                }\r\n                            } else {\r\n                                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                                handler2.removeCallbacks(UpdateSongTime2);\r\n                            }\r\n                        } else {\r\n                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                            handler2.postDelayed(UpdateSongTime2, 200);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n            }\r\n            holder.binding.tvTitleA.setText(mData.get(position).getName());\r\n            holder.binding.tvTitleB.setText(mData.get(position).getName());\r\n            holder.binding.tvTimeA.setText(mData.get(position).getAudioDuration());\r\n            holder.binding.tvTimeB.setText(mData.get(position).getAudioDuration());\r\n            holder.binding.llSort.setOnTouchListener((v, event) -> {\r\n                if (event.getAction() ==\r\n                        MotionEvent.ACTION_DOWN) {\r\n                    startDragListener.requestDrag(holder);\r\n                }\r\n                if (event.getAction() ==\r\n                        MotionEvent.ACTION_UP) {\r\n                    startDragListener.requestDrag(holder);\r\n                }\r\n                return false;\r\n            });\r\n            String id = mData.get(position).getID();\r\n//            GetMedia(id, activity, mData.get(position).getDownload(), holder.binding.llDownload, holder.binding.ivDownloads);\r\n            for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                if (downloadAudioDetailsList.get(i).getAudioFile().equalsIgnoreCase(mData.get(position).getAudioFile())\r\n                        && downloadAudioDetailsList.get(i).getPlaylistId().equalsIgnoreCase(\"\")) {\r\n                    //disableName.add(mData.get(position).getName());\r\n                    disableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                    break;\r\n                }/* else {\r\n                    enableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                }*/\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(0, ctx, listModelList, \"myPlaylist\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    callTransparentFrag(0, ctx, listModelList, \"myPlaylist\");\r\n                }\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(position, ctx, listModelList, \"myPlaylist\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    callTransparentFrag(position, ctx, listModelList, \"myPlaylist\");\r\n                }\r\n            });\r\n\r\n            if (Created.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.llMore.setVisibility(View.GONE);\r\n                holder.binding.llCenterLayoutA.setVisibility(View.GONE);\r\n                holder.binding.llCenterLayoutB.setVisibility(View.VISIBLE);\r\n                holder.binding.llDownload.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemove.setVisibility(View.VISIBLE);\r\n                holder.binding.llSort.setVisibility(View.VISIBLE);\r\n                binding.tvSearch.setVisibility(View.VISIBLE);\r\n                binding.searchView.setVisibility(View.GONE);\r\n            } else if (Created.equalsIgnoreCase(\"0\")) {\r\n                holder.binding.llMore.setVisibility(View.VISIBLE);\r\n                holder.binding.llCenterLayoutA.setVisibility(View.VISIBLE);\r\n                holder.binding.llCenterLayoutB.setVisibility(View.GONE);\r\n                holder.binding.llDownload.setVisibility(View.GONE);\r\n                holder.binding.llRemove.setVisibility(View.GONE);\r\n                holder.binding.llSort.setVisibility(View.GONE);\r\n                binding.tvSearch.setVisibility(View.GONE);\r\n                binding.searchView.setVisibility(View.VISIBLE);\r\n            }\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                holder.binding.llMore.setClickable(true);\r\n                holder.binding.llMore.setEnabled(true);\r\n                holder.binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                holder.binding.llMore.setClickable(false);\r\n                holder.binding.llMore.setEnabled(false);\r\n                holder.binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            }\r\n            holder.binding.llMore.setOnClickListener(view -> {\r\n                Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                i.putExtra(\"play\", \"myPlayList\");\r\n                i.putExtra(\"ID\", mData.get(position).getID());\r\n                i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                i.putExtra(\"position\", position);\r\n                i.putParcelableArrayListExtra(\"data\", mData);\r\n                i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                startActivity(i);\r\n                getActivity().finish();\r\n            });\r\n\r\n//            if (changedAudio != null) {\r\n//                callDragApi();\r\n//            }\r\n            holder.binding.llDownload.setOnClickListener(view -> {\r\n                name = mData.get(position).getName();\r\n                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                callDownload(mData.get(position).getID(), mData.get(position).getAudioFile(), mData.get(position).getName(), listFilterData, position, holder.binding.llDownload, holder.binding.ivDownloads);\r\n            });\r\n            try {\r\n                holder.binding.llRemove.setOnClickListener(view -> {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                        BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                    } else {\r\n                        callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                    }\r\n                });\r\n\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (listFilterData != null) {\r\n                return listFilterData.size();\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public void onRowMoved(int fromPosition, int toPosition) {\r\n            if (fromPosition < toPosition) {\r\n                for (int i = fromPosition; i < toPosition; i++) {\r\n                    Collections.swap(listModelList, i, i + 1);\r\n                }\r\n            } else {\r\n                for (int i = fromPosition; i > toPosition; i--) {\r\n                    Collections.swap(listModelList, i, i - 1);\r\n                }\r\n            }\r\n            changedAudio.clear();\r\n            for (int i = 0; i < listModelList.size(); i++) {\r\n                changedAudio.add(listModelList.get(i).getID());\r\n            }\r\n\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            if (audioPlay) {\r\n                if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (fromPosition == pos) {\r\n                            pos = toPosition;\r\n                        }/* else if (toPosition == pos) {\r\n                            if (action == 0) {\r\n                                pos = pos + 1;\r\n                            } else if (action == 1) {\r\n                                pos = pos - 1;\r\n                            }\r\n                        }*/ else if (fromPosition < pos && toPosition > pos) {\r\n                            pos = pos - 1;\r\n                        } else if ((fromPosition > pos && toPosition > pos) || (fromPosition < pos && toPosition < pos)) {\r\n                            pos = pos;\r\n                        } else if (fromPosition > pos && toPosition < pos) {\r\n                            pos = pos + 1;\r\n                        } else if (fromPosition > pos && toPosition == pos) {\r\n                            pos = pos + 1;\r\n                        } else if (fromPosition < pos && toPosition == pos) {\r\n                            pos = pos - 1;\r\n                        }\r\n                        SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shareddd.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(listModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                        editor.commit();\r\n                        Fragment fragment = new TransparentPlayerFragment();\r\n                        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                        fragmentManager1.beginTransaction()\r\n                                .add(R.id.flContainer, fragment)\r\n                                .commit();\r\n                    }\r\n                }\r\n            }\r\n            callDragApi();\r\n\r\n            notifyItemMoved(fromPosition, toPosition);\r\n\r\n         /* SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();*/\r\n\r\n        }\r\n\r\n\r\n        private void callDragApi() {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Call<CardModel> listCall = APIClient.getClient().setShortedAudio(UserID, PlaylistID, TextUtils.join(\",\", changedAudio));\r\n                listCall.enqueue(new Callback<CardModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<CardModel> call, Response<CardModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            CardModel listModel = response.body();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<CardModel> call, Throwable t) {\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onRowClear(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.rvPlayLists.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolder(MyPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PlayListsAdpater2 extends RecyclerView.Adapter<PlayListsAdpater2.MyViewHolder2> implements Filterable {\r\n        Context ctx;\r\n        String UserID, Created;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater2(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                 String Created) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder2 onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout, parent, false);\r\n            return new MyViewHolder2(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder2 holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n            holder.binding.tvTitleA.setText(mData.get(position).getName());\r\n            holder.binding.tvTitleB.setText(mData.get(position).getName());\r\n            holder.binding.tvTimeA.setText(mData.get(position).getAudioDuration());\r\n            holder.binding.tvTimeB.setText(mData.get(position).getAudioDuration());\r\n            String id = mData.get(position).getID();\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n//            GetMedia(id, activity, mData.get(position).getDownload(), holder.binding.llDownload, holder.binding.ivDownloads);\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(0, ctx, listModelList, \"\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    callTransparentFrag(0, ctx, listModelList, \"\");\r\n                }\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(position, ctx, listModelList, \"\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    callTransparentFrag(position, ctx, listModelList, \"\");\r\n                }\r\n            });\r\n\r\n//            if (Created.equalsIgnoreCase(\"1\")) {\r\n//                holder.binding.llMore.setVisibility(View.GONE);\r\n//                holder.binding.llCenterLayoutA.setVisibility(View.GONE);\r\n//                holder.binding.llCenterLayoutB.setVisibility(View.VISIBLE);\r\n//                holder.binding.llDownload.setVisibility(View.VISIBLE);\r\n//                holder.binding.llRemove.setVisibility(View.VISIBLE);\r\n//                holder.binding.llSort.setVisibility(View.VISIBLE);\r\n//                binding.tvSearch.setVisibility(View.VISIBLE);\r\n//                binding.searchView.setVisibility(View.GONE);\r\n//            } else if (Created.equalsIgnoreCase(\"0\")) {\r\n            holder.binding.llMore.setVisibility(View.VISIBLE);\r\n            holder.binding.llCenterLayoutA.setVisibility(View.VISIBLE);\r\n            holder.binding.llCenterLayoutB.setVisibility(View.GONE);\r\n            holder.binding.llDownload.setVisibility(View.GONE);\r\n            holder.binding.llRemove.setVisibility(View.GONE);\r\n            holder.binding.llSort.setVisibility(View.GONE);\r\n            binding.tvSearch.setVisibility(View.GONE);\r\n            binding.searchView.setVisibility(View.VISIBLE);\r\n//            }\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                holder.binding.llMore.setClickable(true);\r\n                holder.binding.llMore.setEnabled(true);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                holder.binding.llMore.setClickable(false);\r\n                holder.binding.llMore.setEnabled(false);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            holder.binding.llMore.setOnClickListener(view -> {\r\n                Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                i.putExtra(\"play\", \"playlist\");\r\n                i.putExtra(\"ID\", mData.get(position).getID());\r\n                i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                i.putExtra(\"position\", position);\r\n                i.putParcelableArrayListExtra(\"data\", mData);\r\n                i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                startActivity(i);\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (listFilterData != null) {\r\n                return listFilterData.size();\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.tvFound.setText(\"Search term not found please use another one\");\r\n                        binding.rvPlayLists.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        public class MyViewHolder2 extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolder2(MyPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java	(date 1602687204826)
@@ -199,6 +199,8 @@
             PlaylistImage = getArguments().getString("PlaylistImage");
             MyDownloads = getArguments().getString("MyDownloads");
         }
+        binding.rlMainLayouts.setClickable(false);
+        binding.rlMainLayouts.setEnabled( false);
         binding.llBack.setOnClickListener(view1 -> callBack());
         if (BWSApplication.isNetworkConnected(getActivity()) && !MyDownloads.equalsIgnoreCase("1")) {
             binding.llMore.setVisibility(View.VISIBLE);
@@ -1937,7 +1939,7 @@
                 protected void publishResults(CharSequence charSequence, FilterResults filterResults) {
                     if (listFilterData.size() == 0) {
                         binding.llError.setVisibility(View.VISIBLE);
-                        binding.tvFound.setText("Search term not found please use another one");
+                        binding.tvFound.setText("Couldn't find "+SearchFlag+". Try searching again");
                         binding.rvPlayLists.setVisibility(View.GONE);
                     } else {
                         binding.llError.setVisibility(View.GONE);
Index: app/src/main/java/com/brainwellnessspa/LoginModule/Activities/CountrySelectActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.LoginModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.EditText;\r\nimport android.widget.Filter;\r\nimport android.widget.Filterable;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.LoginModule.Models.CountryListModel;\r\nimport com.brainwellnessspa.MembershipModule.Activities.CheckoutGetCodeActivity;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityCountrySelectBinding;\r\nimport com.brainwellnessspa.databinding.CountryLayoutBinding;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class CountrySelectActivity extends AppCompatActivity {\r\n    ActivityCountrySelectBinding binding;\r\n    CountrySelectAdapter adapter;\r\n    //    String TrialPeriod;\r\n//    private ArrayList<MembershipPlanListModel.Plan> listModelList;\r\n//    int position;\r\n    Context ctx;\r\n    Activity activity;\r\n    String Name, Code, MobileNo, Check;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_country_select);\r\n        ctx = CountrySelectActivity.this;\r\n        activity = CountrySelectActivity.this;\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            MobileNo = getIntent().getStringExtra(CONSTANTS.MobileNo);\r\n            Name = getIntent().getStringExtra(CONSTANTS.Name);\r\n            Code = getIntent().getStringExtra(CONSTANTS.Code);\r\n            Check = getIntent().getStringExtra(CONSTANTS.Check);\r\n//            TrialPeriod = getIntent().getStringExtra(\"TrialPeriod\");\r\n//            listModelList = getIntent().getParcelableArrayListExtra(\"PlanData\");\r\n//            position = getIntent().getIntExtra(\"position\", 0);\r\n        }\r\n        binding.llBack.setOnClickListener(view -> {\r\n            if (Check.equalsIgnoreCase(\"0\")) {\r\n                Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n                i.putExtra(\"Name\", Name);\r\n                i.putExtra(\"Code\", Code);\r\n                i.putExtra(\"MobileNo\", MobileNo);\r\n                startActivity(i);\r\n                finish();\r\n            } else if (Check.equalsIgnoreCase(\"1\")) {\r\n                Intent i = new Intent(ctx, LoginActivity.class);\r\n                i.putExtra(\"Name\", Name);\r\n                i.putExtra(\"Code\", Code);\r\n                i.putExtra(\"MobileNo\", MobileNo);\r\n                startActivity(i);\r\n                finish();\r\n            }\r\n        });\r\n\r\n        binding.searchView.onActionViewExpanded();\r\n        EditText searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n\r\n        closeButton.setOnClickListener(view -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n        searchEditText.setHint(\"Search for country\");\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                try {\r\n                    adapter.getFilter().filter(search);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getApplicationContext());\r\n        binding.rvCountryList.setLayoutManager(mLayoutManager);\r\n        binding.rvCountryList.setItemAnimator(new DefaultItemAnimator());\r\n        if (BWSApplication.isNetworkConnected(this)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<CountryListModel> listCall = APIClient.getClient().getCountryLists();\r\n            listCall.enqueue(new Callback<CountryListModel>() {\r\n                @Override\r\n                public void onResponse(Call<CountryListModel> call, Response<CountryListModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        CountryListModel listModel = response.body();\r\n                        if (listModel != null) {\r\n                            adapter = new CountrySelectAdapter(listModel.getResponseData());\r\n                        }\r\n                        binding.rvCountryList.setAdapter(adapter);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<CountryListModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), this);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (Check.equalsIgnoreCase(\"0\")) {\r\n            Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            i.putExtra(\"MobileNo\", MobileNo);\r\n            startActivity(i);\r\n            finish();\r\n        } else if (Check.equalsIgnoreCase(\"1\")) {\r\n            Intent i = new Intent(ctx, LoginActivity.class);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            i.putExtra(\"MobileNo\", MobileNo);\r\n            startActivity(i);\r\n            finish();\r\n        }\r\n    }\r\n\r\n    public class CountrySelectAdapter extends RecyclerView.Adapter<CountrySelectAdapter.MyViewHolder> implements Filterable {\r\n        private List<CountryListModel.ResponseData> modelList;\r\n        private List<CountryListModel.ResponseData> listFilterData;\r\n\r\n        public CountrySelectAdapter(List<CountryListModel.ResponseData> modelList) {\r\n            this.modelList = modelList;\r\n            this.listFilterData = modelList;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            CountryLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.country_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            final CountryListModel.ResponseData mData = listFilterData.get(position);\r\n            holder.binding.tvCountryName.setText(mData.getName());\r\n            holder.binding.tvCountryCode.setText(\"+\" + mData.getCode());\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                String conutry = \"+\" + mData.getCode();\r\n                if (Check.equalsIgnoreCase(\"0\")) {\r\n                    Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n                    i.putExtra(\"Name\", mData.getName());\r\n                    i.putExtra(\"Code\", conutry);\r\n                    i.putExtra(\"MobileNo\", MobileNo);\r\n                    ctx.startActivity(i);\r\n                    finish();\r\n                } else if (Check.equalsIgnoreCase(\"1\")) {\r\n                    Intent i = new Intent(ctx, LoginActivity.class);\r\n                    i.putExtra(\"Name\", mData.getName());\r\n                    i.putExtra(\"Code\", conutry);\r\n                    i.putExtra(\"MobileNo\", MobileNo);\r\n                    ctx.startActivity(i);\r\n                    finish();\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listFilterData.size();\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = modelList;\r\n                    } else {\r\n                        List<CountryListModel.ResponseData> filteredList = new ArrayList<>();\r\n                        for (CountryListModel.ResponseData row : modelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.tvFound.setVisibility(View.VISIBLE);\r\n                        binding.rvCountryList.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.tvFound.setVisibility(View.GONE);\r\n                        binding.rvCountryList.setVisibility(View.VISIBLE);\r\n                        listFilterData = (List<CountryListModel.ResponseData>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            CountryLayoutBinding binding;\r\n\r\n            public MyViewHolder(CountryLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LoginModule/Activities/CountrySelectActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/LoginModule/Activities/CountrySelectActivity.java	(date 1602678990477)
@@ -45,7 +45,7 @@
 //    int position;
     Context ctx;
     Activity activity;
-    String Name, Code, MobileNo, Check;
+    String Name, Code, MobileNo, Check,searchFilter;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -106,6 +106,7 @@
             public boolean onQueryTextChange(String search) {
                 try {
                     adapter.getFilter().filter(search);
+                    searchFilter = search;
                 } catch (Exception e) {
                     e.printStackTrace();
                 }
@@ -234,6 +235,7 @@
                 protected void publishResults(CharSequence charSequence, FilterResults filterResults) {
                     if (listFilterData.size() == 0) {
                         binding.tvFound.setVisibility(View.VISIBLE);
+                        binding.tvFound.setText("Couldn't find "+ searchFilter +". Try searching again");
                         binding.rvCountryList.setVisibility(View.GONE);
                     } else {
                         binding.tvFound.setVisibility(View.GONE);
Index: app/src/main/java/com/brainwellnessspa/LoginModule/Activities/OtpActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.LoginModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.SystemClock;\r\nimport android.provider.Settings;\r\nimport android.text.Editable;\r\nimport android.text.Html;\r\nimport android.text.TextUtils;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.EditText;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport com.google.firebase.iid.FirebaseInstanceId;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Activities.DashboardActivity;\r\nimport com.brainwellnessspa.LoginModule.Models.LoginModel;\r\nimport com.brainwellnessspa.LoginModule.Models.OtpModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.SplashModule.SplashScreenActivity;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityOtpBinding;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class OtpActivity extends AppCompatActivity {\r\n    ActivityOtpBinding binding;\r\n    String Name, Code, MobileNo;\r\n    private EditText[] editTexts;\r\n    boolean tvSendOTPbool = true;\r\n    Activity activity;\r\n    CountDownTimer countDownTimer;\r\n    private long mLastClickTime = 0;\r\n    public static int comeLogin  = 0;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_otp);\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            MobileNo = getIntent().getStringExtra(CONSTANTS.MobileNo);\r\n            Name = getIntent().getStringExtra(CONSTANTS.Name);\r\n            Code = getIntent().getStringExtra(CONSTANTS.Code);\r\n        }\r\n\r\n        activity = OtpActivity.this;\r\n\r\n        binding.tvSendCodeText.setText(\"We sent an SMS with a 4-digit code to \" + Code + MobileNo);\r\n\r\n        binding.llEditNumber.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            comeLogin = 1;\r\n            Intent i = new Intent(OtpActivity.this, LoginActivity.class);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            i.putExtra(CONSTANTS.MobileNo, MobileNo);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        editTexts = new EditText[]{binding.edtOTP1, binding.edtOTP2, binding.edtOTP3, binding.edtOTP4};\r\n        binding.edtOTP1.addTextChangedListener(new PinTextWatcher(0));\r\n        binding.edtOTP2.addTextChangedListener(new PinTextWatcher(1));\r\n        binding.edtOTP3.addTextChangedListener(new PinTextWatcher(2));\r\n        binding.edtOTP4.addTextChangedListener(new PinTextWatcher(3));\r\n        binding.edtOTP1.setOnKeyListener(new PinOnKeyListener(0));\r\n        binding.edtOTP2.setOnKeyListener(new PinOnKeyListener(1));\r\n        binding.edtOTP3.setOnKeyListener(new PinOnKeyListener(2));\r\n        binding.edtOTP4.setOnKeyListener(new PinOnKeyListener(3));\r\n\r\n        binding.txtError.setText(\"\");\r\n        binding.txtError.setVisibility(View.GONE);\r\n\r\n        binding.btnSendCode.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                SharedPreferences sharedPreferences2 = getSharedPreferences(CONSTANTS.Token, Context.MODE_PRIVATE);\r\n                String fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n                if (TextUtils.isEmpty(fcm_id)) {\r\n                    FirebaseInstanceId.getInstance().getInstanceId().addOnSuccessListener(activity, instanceIdResult -> {\r\n                        String newToken = instanceIdResult.getToken();\r\n                        Log.e(\"newToken\", newToken);\r\n                        SharedPreferences.Editor editor = getSharedPreferences(CONSTANTS.Token, Context.MODE_PRIVATE).edit();\r\n                        editor.putString(CONSTANTS.Token, newToken); //Friend\r\n                        editor.apply();\r\n                        editor.commit();\r\n                    });\r\n                    fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n                }\r\n                if (binding.edtOTP1.getText().toString().equalsIgnoreCase(\"\") ||\r\n                        binding.edtOTP2.getText().toString().equalsIgnoreCase(\"\") ||\r\n                        binding.edtOTP3.getText().toString().equalsIgnoreCase(\"\") ||\r\n                        binding.edtOTP4.getText().toString().equalsIgnoreCase(\"\")) {\r\n                    binding.txtError.setText(\"Please enter the OTP\");\r\n                    binding.txtError.setVisibility(View.VISIBLE);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(OtpActivity.this)) {\r\n                        BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        Call<OtpModel> listCall = APIClient.getClient().getAuthOtps(\r\n                                binding.edtOTP1.getText().toString() + \"\" +\r\n                                        binding.edtOTP2.getText().toString() + \"\" +\r\n                                        binding.edtOTP3.getText().toString() + \"\" +\r\n                                        binding.edtOTP4.getText().toString(), fcm_id, CONSTANTS.FLAG_ONE,\r\n                                Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID), MobileNo, CONSTANTS.FLAG_ZERO);\r\n                        listCall.enqueue(new Callback<OtpModel>() {\r\n                            @Override\r\n                            public void onResponse(Call<OtpModel> call, Response<OtpModel> response) {\r\n                                if (response.isSuccessful()) {\r\n                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    OtpModel otpModel = response.body();\r\n                                    if (otpModel.getResponseData().getError().equalsIgnoreCase(\"0\") ||\r\n                                            otpModel.getResponseData().getError().equalsIgnoreCase(\"\")) {\r\n                                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n                                        SharedPreferences.Editor editor = shared.edit();\r\n                                        editor.putString(CONSTANTS.PREF_KEY_UserID, otpModel.getResponseData().getUserID());\r\n                                        editor.putString(CONSTANTS.PREF_KEY_MobileNo, otpModel.getResponseData().getPhoneNumber());\r\n                                        editor.commit();\r\n                                        BWSApplication.showToast(otpModel.getResponseMessage(), OtpActivity.this);\r\n                                        Intent i = new Intent(OtpActivity.this, DashboardActivity.class);\r\n                                        startActivity(i);\r\n                                        finish();\r\n                                    } else if (otpModel.getResponseData().getError().equalsIgnoreCase(\"1\")) {\r\n                                        binding.txtError.setText(otpModel.getResponseMessage());\r\n                                        binding.txtError.setVisibility(View.VISIBLE);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            @Override\r\n                            public void onFailure(Call<OtpModel> call, Throwable t) {\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), OtpActivity.this);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        binding.llResendSms.setOnClickListener(view -> prepareData());\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        comeLogin = 0;\r\n        Intent i = new Intent(OtpActivity.this, LoginActivity.class);\r\n        i.putExtra(\"Name\", Name);\r\n        i.putExtra(\"Code\", Code);\r\n        i.putExtra(CONSTANTS.MobileNo, MobileNo);\r\n        startActivity(i);\r\n        finish();\r\n    }\r\n\r\n    void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(OtpActivity.this)) {\r\n            tvSendOTPbool = false;\r\n            binding.txtError.setText(\"\");\r\n            binding.txtError.setVisibility(View.GONE);\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<LoginModel> listCall = APIClient.getClient().getLoginDatas(MobileNo, Code, CONSTANTS.FLAG_ONE, CONSTANTS.FLAG_ONE, SplashScreenActivity.key);\r\n            listCall.enqueue(new Callback<LoginModel>() {\r\n                @Override\r\n                public void onResponse(Call<LoginModel> call, Response<LoginModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        LoginModel loginModel = response.body();\r\n                        if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                            countDownTimer = new CountDownTimer(30000, 1000) {\r\n                                public void onTick(long millisUntilFinished) {\r\n                                    binding.llResendSms.setEnabled(false);\r\n                                    binding.tvResendOTP.setText(Html.fromHtml(millisUntilFinished / 1000 + \"<font color=\\\"#999999\\\">\" + \" Resent SMS\" + \"</font>\"));\r\n                                }\r\n\r\n                                public void onFinish() {\r\n                                    binding.llResendSms.setEnabled(true);\r\n                                    binding.tvResendOTP.setText(getString(R.string.resent_sms));\r\n                                    binding.tvResendOTP.setTextColor(getResources().getColor(R.color.white));\r\n                                    binding.tvResendOTP.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\r\n                                    binding.tvResendOTP.getPaint().setMaskFilter(null);\r\n                                }\r\n                            }.start();\r\n                            binding.edtOTP1.requestFocus();\r\n                            binding.edtOTP1.setText(\"\");\r\n                            binding.edtOTP2.setText(\"\");\r\n                            binding.edtOTP3.setText(\"\");\r\n                            binding.edtOTP4.setText(\"\");\r\n                            tvSendOTPbool = true;\r\n                            BWSApplication.showToast(loginModel.getResponseMessage(), OtpActivity.this);\r\n                        } else {\r\n                            binding.txtError.setVisibility(View.VISIBLE);\r\n                            binding.txtError.setText(loginModel.getResponseMessage());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<LoginModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    BWSApplication.showToast(t.getMessage(), OtpActivity.this);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), OtpActivity.this);\r\n        }\r\n    }\r\n\r\n    public class PinTextWatcher implements TextWatcher {\r\n        private int currentIndex;\r\n        private boolean isFirst = false, isLast = false;\r\n        private String newTypedString = \"\";\r\n\r\n        PinTextWatcher(int currentIndex) {\r\n            this.currentIndex = currentIndex;\r\n\r\n            if (currentIndex == 0)\r\n                this.isFirst = true;\r\n            else if (currentIndex == editTexts.length - 1)\r\n                this.isLast = true;\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            newTypedString = s.subSequence(start, start + count).toString().trim();\r\n            String OTP1 = binding.edtOTP1.getText().toString().trim();\r\n            String OTP2 = binding.edtOTP2.getText().toString().trim();\r\n            String OTP3 = binding.edtOTP3.getText().toString().trim();\r\n            String OTP4 = binding.edtOTP4.getText().toString().trim();\r\n            if (!OTP1.isEmpty() && !OTP2.isEmpty() && !OTP3.isEmpty() && !OTP4.isEmpty()) {\r\n                binding.btnSendCode.setEnabled(true);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnSendCode.setEnabled(false);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            String text = newTypedString;\r\n            Log.e(\"OTP VERIFICATION\", \"\" + text);\r\n\r\n            /* Detect paste event and set first char */\r\n            if (text.length() > 1)\r\n                text = String.valueOf(text.charAt(0)); // TODO: We can fill out other EditTexts\r\n            editTexts[currentIndex].removeTextChangedListener(this);\r\n            editTexts[currentIndex].setText(text);\r\n            editTexts[currentIndex].setSelection(text.length());\r\n            editTexts[currentIndex].addTextChangedListener(this);\r\n\r\n            if (text.length() == 1) {\r\n                moveToNext();\r\n            } else if (text.length() == 0) {\r\n                if (!tvSendOTPbool) {\r\n                    editTexts[0].requestFocus();\r\n                } else {\r\n                    moveToPrevious();\r\n                }\r\n            }\r\n        }\r\n\r\n        private void moveToNext() {\r\n            if (!isLast)\r\n                editTexts[currentIndex + 1].requestFocus();\r\n\r\n            if (isAllEditTextsFilled() && isLast) { // isLast is optional\r\n                editTexts[currentIndex].clearFocus();\r\n                hideKeyboard();\r\n            }\r\n        }\r\n\r\n        private void moveToPrevious() {\r\n            if (!isFirst)\r\n                editTexts[currentIndex - 1].requestFocus();\r\n        }\r\n\r\n        private boolean isAllEditTextsFilled() {\r\n            for (EditText editText : editTexts)\r\n                if (editText.getText().toString().trim().length() == 0)\r\n                    return false;\r\n            return true;\r\n        }\r\n\r\n        private void hideKeyboard() {\r\n            if (getCurrentFocus() != null) {\r\n                InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);\r\n                inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PinOnKeyListener implements View.OnKeyListener {\r\n        private int currentIndex;\r\n\r\n        PinOnKeyListener(int currentIndex) {\r\n            this.currentIndex = currentIndex;\r\n        }\r\n\r\n        @Override\r\n        public boolean onKey(View v, int keyCode, KeyEvent event) {\r\n            if (keyCode == KeyEvent.KEYCODE_DEL && event.getAction() == KeyEvent.ACTION_DOWN) {\r\n                if (editTexts[currentIndex].getText().toString().isEmpty() && currentIndex != 0)\r\n                    editTexts[currentIndex - 1].requestFocus();\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LoginModule/Activities/OtpActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/LoginModule/Activities/OtpActivity.java	(date 1602678080826)
@@ -44,7 +44,7 @@
     Activity activity;
     CountDownTimer countDownTimer;
     private long mLastClickTime = 0;
-    public static int comeLogin  = 0;
+    public static int comeLogin = 0;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -104,54 +104,47 @@
                     });
                     fcm_id = sharedPreferences2.getString(CONSTANTS.Token, "");
                 }
-                if (binding.edtOTP1.getText().toString().equalsIgnoreCase("") ||
-                        binding.edtOTP2.getText().toString().equalsIgnoreCase("") ||
-                        binding.edtOTP3.getText().toString().equalsIgnoreCase("") ||
-                        binding.edtOTP4.getText().toString().equalsIgnoreCase("")) {
-                    binding.txtError.setText("Please enter the OTP");
-                    binding.txtError.setVisibility(View.VISIBLE);
-                } else {
-                    if (BWSApplication.isNetworkConnected(OtpActivity.this)) {
-                        BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                        Call<OtpModel> listCall = APIClient.getClient().getAuthOtps(
-                                binding.edtOTP1.getText().toString() + "" +
-                                        binding.edtOTP2.getText().toString() + "" +
-                                        binding.edtOTP3.getText().toString() + "" +
-                                        binding.edtOTP4.getText().toString(), fcm_id, CONSTANTS.FLAG_ONE,
-                                Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID), MobileNo, CONSTANTS.FLAG_ZERO);
-                        listCall.enqueue(new Callback<OtpModel>() {
-                            @Override
-                            public void onResponse(Call<OtpModel> call, Response<OtpModel> response) {
-                                if (response.isSuccessful()) {
-                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                                    OtpModel otpModel = response.body();
-                                    if (otpModel.getResponseData().getError().equalsIgnoreCase("0") ||
-                                            otpModel.getResponseData().getError().equalsIgnoreCase("")) {
-                                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);
-                                        SharedPreferences.Editor editor = shared.edit();
-                                        editor.putString(CONSTANTS.PREF_KEY_UserID, otpModel.getResponseData().getUserID());
-                                        editor.putString(CONSTANTS.PREF_KEY_MobileNo, otpModel.getResponseData().getPhoneNumber());
-                                        editor.commit();
-                                        BWSApplication.showToast(otpModel.getResponseMessage(), OtpActivity.this);
-                                        Intent i = new Intent(OtpActivity.this, DashboardActivity.class);
-                                        startActivity(i);
-                                        finish();
-                                    } else if (otpModel.getResponseData().getError().equalsIgnoreCase("1")) {
-                                        binding.txtError.setText(otpModel.getResponseMessage());
-                                        binding.txtError.setVisibility(View.VISIBLE);
-                                    }
-                                }
-                            }
+                if (BWSApplication.isNetworkConnected(OtpActivity.this)) {
+                    BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                    Call<OtpModel> listCall = APIClient.getClient().getAuthOtps(
+                            binding.edtOTP1.getText().toString() + "" +
+                                    binding.edtOTP2.getText().toString() + "" +
+                                    binding.edtOTP3.getText().toString() + "" +
+                                    binding.edtOTP4.getText().toString(), fcm_id, CONSTANTS.FLAG_ONE,
+                            Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID), MobileNo, CONSTANTS.FLAG_ZERO);
+                    listCall.enqueue(new Callback<OtpModel>() {
+                        @Override
+                        public void onResponse(Call<OtpModel> call, Response<OtpModel> response) {
+                            if (response.isSuccessful()) {
+                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                                OtpModel otpModel = response.body();
+                                if (otpModel.getResponseData().getError().equalsIgnoreCase("0") ||
+                                        otpModel.getResponseData().getError().equalsIgnoreCase("")) {
+                                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);
+                                    SharedPreferences.Editor editor = shared.edit();
+                                    editor.putString(CONSTANTS.PREF_KEY_UserID, otpModel.getResponseData().getUserID());
+                                    editor.putString(CONSTANTS.PREF_KEY_MobileNo, otpModel.getResponseData().getPhoneNumber());
+                                    editor.commit();
+                                    BWSApplication.showToast(otpModel.getResponseMessage(), OtpActivity.this);
+                                    Intent i = new Intent(OtpActivity.this, DashboardActivity.class);
+                                    startActivity(i);
+                                    finish();
+                                } else if (otpModel.getResponseData().getError().equalsIgnoreCase("1")) {
+                                    binding.txtError.setText(otpModel.getResponseMessage());
+                                    binding.txtError.setVisibility(View.VISIBLE);
+                                }
+                            }
+                        }
 
-                            @Override
-                            public void onFailure(Call<OtpModel> call, Throwable t) {
-                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                            }
-                        });
-                    } else {
-                        BWSApplication.showToast(getString(R.string.no_server_found), OtpActivity.this);
-                    }
+                        @Override
+                        public void onFailure(Call<OtpModel> call, Throwable t) {
+                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                        }
+                    });
+                } else {
+                    BWSApplication.showToast(getString(R.string.no_server_found), OtpActivity.this);
                 }
+
             }
         });
 
Index: app/src/main/java/com/brainwellnessspa/LoginModule/Activities/LoginActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.LoginModule.Activities;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.os.SystemClock;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.LoginModule.Models.LoginModel;\r\nimport com.brainwellnessspa.MembershipModule.Activities.MembershipActivity;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.SplashModule.SplashScreenActivity;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.WebView.TncActivity;\r\nimport com.brainwellnessspa.databinding.ActivityLoginBinding;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.LoginModule.Activities.OtpActivity.comeLogin;\r\n\r\npublic class LoginActivity extends AppCompatActivity {\r\n    ActivityLoginBinding binding;\r\n    String Name = \"\", Code = \"\", MobileNo = \"\";\r\n    Context ctx;\r\n    Activity activity;\r\n    private long mLastClickTime = 0;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_login);\r\n\r\n        ctx = LoginActivity.this;\r\n        activity = LoginActivity.this;\r\n        if (getIntent().getExtras() != null) {\r\n            Name = getIntent().getStringExtra(CONSTANTS.Name);\r\n            Code = getIntent().getStringExtra(CONSTANTS.Code);\r\n            MobileNo = getIntent().getStringExtra(CONSTANTS.MobileNo);\r\n        }\r\n        binding.edtNumber.addTextChangedListener(loginTextWatcher);\r\n        if (Code.equalsIgnoreCase(\"\") || Name.equalsIgnoreCase(\"\")) {\r\n            binding.tvCountryCode.setText(R.string.code);\r\n            binding.tvCountry.setText(R.string.Australia);\r\n            binding.edtNumber.setText(\"\");\r\n        } else {\r\n            binding.tvCountryCode.setText(Code);\r\n            binding.tvCountry.setText(Name);\r\n        }\r\n\r\n        if (MobileNo.equalsIgnoreCase(\"\")) {\r\n            binding.edtNumber.setText(\"\");\r\n        } else {\r\n            binding.edtNumber.setText(MobileNo);\r\n        }\r\n\r\n        binding.rlCountrySelect.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            Intent i = new Intent(ctx, CountrySelectActivity.class);\r\n            i.putExtra(CONSTANTS.Name, binding.tvCountry.getText().toString());\r\n            i.putExtra(CONSTANTS.Code, binding.tvCountryCode.getText().toString());\r\n            i.putExtra(CONSTANTS.MobileNo, binding.edtNumber.getText().toString());\r\n            i.putExtra(CONSTANTS.Check, \"1\");\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        if (comeLogin == 1) {\r\n            binding.edtNumber.requestFocus();\r\n            InputMethodManager imm = (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);\r\n            imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, InputMethodManager.HIDE_IMPLICIT_ONLY);\r\n        }\r\n\r\n        binding.tvtncs.setOnClickListener(view -> {\r\n            Intent i = new Intent(ctx, TncActivity.class);\r\n            i.putExtra(CONSTANTS.Web, \"Tnc\");\r\n            startActivity(i);\r\n        });\r\n\r\n        binding.tvPrivacyPolicys.setOnClickListener(view -> {\r\n            Intent i = new Intent(ctx, TncActivity.class);\r\n            i.putExtra(CONSTANTS.Web, \"PrivacyPolicy\");\r\n            startActivity(i);\r\n        });\r\n\r\n        binding.tvDisclaimers.setOnClickListener(view -> {\r\n            final Dialog dialog = new Dialog(ctx);\r\n            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n            dialog.setContentView(R.layout.full_desc_layout);\r\n            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n            dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n            final TextView tvDesc = dialog.findViewById(R.id.tvDesc);\r\n            final RelativeLayout tvClose = dialog.findViewById(R.id.tvClose);\r\n            tvTitle.setText(R.string.Disclaimer);\r\n            tvDesc.setText(R.string.Disclaimer_text);\r\n            dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                    dialog.dismiss();\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n\r\n            tvClose.setOnClickListener(v -> dialog.dismiss());\r\n            dialog.show();\r\n            dialog.setCancelable(false);\r\n        });\r\n\r\n        binding.btnSendCode.setOnClickListener(view -> {\r\n            prepareData();\r\n        });\r\n\r\n        InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n        inputMethodManager.toggleSoftInputFromWindow(binding.edtNumber.getApplicationWindowToken(), InputMethodManager.SHOW_FORCED, 0);\r\n\r\n        binding.tvRegister.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                    return;\r\n                }\r\n                mLastClickTime = SystemClock.elapsedRealtime();\r\n                Intent i = new Intent(ctx, MembershipActivity.class);\r\n                startActivity(i);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        finishAffinity();\r\n    }\r\n\r\n    void prepareData() {\r\n        if (binding.edtNumber.getText().toString().isEmpty()) {\r\n            binding.edtNumber.setFocusable(true);\r\n            binding.edtNumber.requestFocus();\r\n            binding.txtError.setVisibility(View.VISIBLE);\r\n            binding.txtError.setText(getString(R.string.Please_enter_your_mobile_number));\r\n        } else if (binding.edtNumber.getText().toString().length() == 1 || binding.edtNumber.getText().toString().length() < 8 ||\r\n                binding.edtNumber.getText().toString().length() > 10) {\r\n            binding.edtNumber.setFocusable(true);\r\n            binding.edtNumber.requestFocus();\r\n            binding.txtError.setVisibility(View.VISIBLE);\r\n            binding.txtError.setText(getString(R.string.not_valid_mobile_number));\r\n        } else {\r\n            binding.txtError.setVisibility(View.GONE);\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                Call<LoginModel> listCall = APIClient.getClient().getLoginDatas(binding.edtNumber.getText().toString(), binding.tvCountryCode.getText().toString(), CONSTANTS.FLAG_ONE, CONSTANTS.FLAG_ZERO, SplashScreenActivity.key);\r\n                listCall.enqueue(new Callback<LoginModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<LoginModel> call, Response<LoginModel> response) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        binding.txtError.setVisibility(View.GONE);\r\n                        if (response.isSuccessful()) {\r\n                            LoginModel loginModel = response.body();\r\n                            if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                                    return;\r\n                                }\r\n                                mLastClickTime = SystemClock.elapsedRealtime();\r\n                                Intent i = new Intent(ctx, OtpActivity.class);\r\n                                i.putExtra(\"MobileNo\", binding.edtNumber.getText().toString());\r\n                                i.putExtra(\"Name\", binding.tvCountry.getText().toString());\r\n                                i.putExtra(\"Code\", binding.tvCountryCode.getText().toString());\r\n                                startActivity(i);\r\n                                finish();\r\n                                BWSApplication.showToast(loginModel.getResponseMessage(), ctx);\r\n                            } else if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                binding.txtError.setVisibility(View.VISIBLE);\r\n                                binding.txtError.setText(loginModel.getResponseMessage());\r\n                            }\r\n                        } else {\r\n                            BWSApplication.showToast(response.message(), ctx);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<LoginModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    }\r\n                });\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n    private TextWatcher loginTextWatcher = new TextWatcher() {\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            String number = binding.edtNumber.getText().toString().trim();\r\n            if (!number.isEmpty()) {\r\n                binding.btnSendCode.setEnabled(true);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnSendCode.setEnabled(false);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n        }\r\n    };\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LoginModule/Activities/LoginActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/LoginModule/Activities/LoginActivity.java	(date 1602677846959)
@@ -154,17 +154,12 @@
     }
 
     void prepareData() {
-        if (binding.edtNumber.getText().toString().isEmpty()) {
-            binding.edtNumber.setFocusable(true);
-            binding.edtNumber.requestFocus();
-            binding.txtError.setVisibility(View.VISIBLE);
-            binding.txtError.setText(getString(R.string.Please_enter_your_mobile_number));
-        } else if (binding.edtNumber.getText().toString().length() == 1 || binding.edtNumber.getText().toString().length() < 8 ||
+        if (binding.edtNumber.getText().toString().length() == 1 || binding.edtNumber.getText().toString().length() < 8 ||
                 binding.edtNumber.getText().toString().length() > 10) {
             binding.edtNumber.setFocusable(true);
             binding.edtNumber.requestFocus();
             binding.txtError.setVisibility(View.VISIBLE);
-            binding.txtError.setText(getString(R.string.not_valid_mobile_number));
+            binding.txtError.setText(getString(R.string.not_valids_mobile_number));
         } else {
             binding.txtError.setVisibility(View.GONE);
             if (BWSApplication.isNetworkConnected(ctx)) {
Index: app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/MembershipActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.MembershipModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.FaqModule.Models.FaqListModel;\r\nimport com.brainwellnessspa.MembershipModule.Adapters.MembershipPlanAdapter;\r\nimport com.brainwellnessspa.MembershipModule.Adapters.SubscriptionAdapter;\r\nimport com.brainwellnessspa.MembershipModule.Models.MembershipPlanListModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.WebView.TncActivity;\r\nimport com.brainwellnessspa.databinding.ActivityMembershipBinding;\r\nimport com.brainwellnessspa.databinding.AudioFaqLayoutBinding;\r\n\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class MembershipActivity extends AppCompatActivity {\r\n    ActivityMembershipBinding binding;\r\n    SubscriptionAdapter subscriptionAdapter;\r\n    MembershipPlanAdapter membershipPlanAdapter;\r\n    Context ctx;\r\n    MembershipFaqAdapter adapter;\r\n    private long mLastClickTime = 0;\r\n    Activity activity;\r\n//    String PlanPosition, PlanID, PlanAmount, PlanCurrency, PlanInterval, PlanImage, PlanTenure, PlanNextRenewal, SubName;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_membership);\r\n        ctx = MembershipActivity.this;\r\n        activity = MembershipActivity.this;\r\n        binding.llBack.setOnClickListener(view -> finish());\r\n\r\n        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(ctx, LinearLayoutManager.HORIZONTAL, false);\r\n        binding.rvList.setLayoutManager(mLayoutManager);\r\n        binding.rvList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager mLayoutManager1 = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlanList.setLayoutManager(mLayoutManager1);\r\n        binding.rvPlanList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager serachList = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvFaqList.setLayoutManager(serachList);\r\n        binding.rvFaqList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        if (BWSApplication.isNetworkConnected(this)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<FaqListModel> listCall = APIClient.getClient().getFaqLists();\r\n            listCall.enqueue(new Callback<FaqListModel>() {\r\n                @Override\r\n                public void onResponse(Call<FaqListModel> call, Response<FaqListModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        FaqListModel listModel = response.body();\r\n                        binding.tvFaqTitle.setText(R.string.f_A_Q);\r\n                        adapter = new MembershipFaqAdapter(listModel.getResponseData(), ctx, binding.rvFaqList, binding.tvFound);\r\n                        binding.rvFaqList.setAdapter(adapter);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<FaqListModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), this);\r\n        }\r\n        prepareMembershipData();\r\n    }\r\n\r\n    private void prepareMembershipData() {\r\n        if (BWSApplication.isNetworkConnected(this)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<MembershipPlanListModel> listCall = APIClient.getClient().getMembershipPlanList();\r\n            listCall.enqueue(new Callback<MembershipPlanListModel>() {\r\n                @Override\r\n                public void onResponse(Call<MembershipPlanListModel> call, Response<MembershipPlanListModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        MembershipPlanListModel membershipPlanListModel = response.body();\r\n                        if (membershipPlanListModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                            binding.btnFreeJoin.setVisibility(View.VISIBLE);\r\n                            binding.tvTitle.setText(membershipPlanListModel.getResponseData().getTitle());\r\n                            binding.tvDesc.setText(membershipPlanListModel.getResponseData().getDesc());\r\n                            binding.tvTag.setText(R.string.membership_title);\r\n                            binding.tvText.setText(getString(R.string.privacy_policy_t_n_c));\r\n                            binding.tvtncs.setText(getString(R.string.t_n_csm));\r\n                            binding.tvPrivacyPolicys.setText(getString(R.string.privacy_policysm));\r\n                            binding.tvAnd.setText(getString(R.string.and));\r\n                            binding.tvDisclaimers.setText(R.string.disclaimers);\r\n                            binding.tvtncs.getPaint().setUnderlineText(true);\r\n                            binding.tvPrivacyPolicys.getPaint().setUnderlineText(true);\r\n                            binding.tvDisclaimers.getPaint().setUnderlineText(true);\r\n                            binding.tvtncs.setOnClickListener(view -> {\r\n                                Intent i = new Intent(ctx, TncActivity.class);\r\n                                i.putExtra(CONSTANTS.Web, \"Tnc\");\r\n                                startActivity(i);\r\n                            });\r\n\r\n                            binding.tvPrivacyPolicys.setOnClickListener(view -> {\r\n                                Intent i = new Intent(ctx, TncActivity.class);\r\n                                i.putExtra(CONSTANTS.Web, \"PrivacyPolicy\");\r\n                                startActivity(i);\r\n                            });\r\n\r\n                            binding.tvDisclaimers.setOnClickListener(view -> {\r\n                                final Dialog dialog = new Dialog(ctx);\r\n                                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                dialog.setContentView(R.layout.full_desc_layout);\r\n                                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                                final TextView tvDesc = dialog.findViewById(R.id.tvDesc);\r\n                                final RelativeLayout tvClose = dialog.findViewById(R.id.tvClose);\r\n                                tvTitle.setText(R.string.Disclaimer);\r\n                                tvDesc.setText(R.string.Disclaimer_text);\r\n                                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                        dialog.dismiss();\r\n                                        return true;\r\n                                    }\r\n                                    return false;\r\n                                });\r\n\r\n                                tvClose.setOnClickListener(v -> dialog.dismiss());\r\n                                dialog.show();\r\n                                dialog.setCancelable(false);\r\n                            });\r\n                            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                                    5, 3, 1f, 0);\r\n                            binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n                            binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n                            binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n                            binding.ivRestaurantImage.setImageResource(R.drawable.ic_membership_banner);\r\n\r\n                            membershipPlanAdapter = new MembershipPlanAdapter(membershipPlanListModel.getResponseData().getPlan(), ctx, binding.btnFreeJoin,\r\n                                    membershipPlanListModel.getResponseData().getTrialPeriod());\r\n                            binding.rvPlanList.setAdapter(membershipPlanAdapter);\r\n\r\n                            subscriptionAdapter = new SubscriptionAdapter(membershipPlanListModel.getResponseData().getAudioFiles(), ctx);\r\n                            binding.rvList.setAdapter(subscriptionAdapter);\r\n\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<MembershipPlanListModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), this);\r\n        }\r\n    }\r\n\r\n    public class MembershipFaqAdapter extends RecyclerView.Adapter<MembershipFaqAdapter.MyViewHolder> {\r\n        private List<FaqListModel.ResponseData> modelList;\r\n        Context ctx;\r\n        RecyclerView rvFaqList;\r\n        TextView tvFound;\r\n\r\n        public MembershipFaqAdapter(List<FaqListModel.ResponseData> modelList, Context ctx, RecyclerView rvFaqList, TextView tvFound) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n            this.rvFaqList = rvFaqList;\r\n            this.tvFound = tvFound;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            AudioFaqLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.audio_faq_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(modelList.get(position).getTitle());\r\n            holder.binding.tvDesc.setText(modelList.get(position).getDesc());\r\n\r\n            holder.binding.ivClickRight.setOnClickListener(view -> {\r\n                holder.binding.llMainLayout.setBackgroundResource(R.color.discalimer_gray);\r\n                holder.binding.tvDesc.setFocusable(true);\r\n                holder.binding.tvDesc.requestFocus();\r\n                holder.binding.tvDesc.setVisibility(View.VISIBLE);\r\n                holder.binding.ivClickRight.setVisibility(View.GONE);\r\n                holder.binding.ivClickDown.setVisibility(View.VISIBLE);\r\n                holder.binding.ivClickDown.setImageResource(R.drawable.ic_down_black_icon);\r\n            });\r\n\r\n            holder.binding.ivClickDown.setOnClickListener(view -> {\r\n                holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                holder.binding.tvDesc.setVisibility(View.GONE);\r\n                holder.binding.ivClickRight.setVisibility(View.VISIBLE);\r\n                holder.binding.ivClickDown.setVisibility(View.GONE);\r\n                holder.binding.ivClickDown.setImageResource(R.drawable.ic_back_black_icon);\r\n            });\r\n\r\n            if (modelList.size() == 0) {\r\n                tvFound.setVisibility(View.GONE);\r\n                rvFaqList.setVisibility(View.GONE);\r\n            } else {\r\n                tvFound.setVisibility(View.GONE);\r\n                rvFaqList.setVisibility(View.VISIBLE);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return modelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            AudioFaqLayoutBinding binding;\r\n\r\n            public MyViewHolder(AudioFaqLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/MembershipActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/MembershipActivity.java	(date 1602681403892)
@@ -73,7 +73,7 @@
 
         if (BWSApplication.isNetworkConnected(this)) {
             BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-            Call<FaqListModel> listCall = APIClient.getClient().getFaqLists();
+            Call<FaqListModel> listCall = APIClient.getClient().getFaqListings();
             listCall.enqueue(new Callback<FaqListModel>() {
                 @Override
                 public void onResponse(Call<FaqListModel> call, Response<FaqListModel> response) {
Index: app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutPaymentActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.MembershipModule.Activities;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Paint;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.Spannable;\r\nimport android.text.TextWatcher;\r\nimport android.text.style.ReplacementSpan;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.ImageView;\r\nimport android.widget.NumberPicker;\r\nimport android.widget.TextView;\r\n\r\nimport com.brainwellnessspa.AddPayment.AddPaymentActivity;\r\nimport com.brainwellnessspa.AddPayment.Model.AddCardModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityCheckoutPaymentBinding;\r\nimport com.brainwellnessspa.databinding.YeardialogBinding;\r\nimport com.stripe.android.Stripe;\r\nimport com.stripe.android.TokenCallback;\r\nimport com.stripe.android.model.Card;\r\nimport com.stripe.android.model.Token;\r\n\r\nimport java.util.Calendar;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.MembershipModule.Adapters.MembershipPlanAdapter.planFlag;\r\nimport static com.brainwellnessspa.MembershipModule.Adapters.MembershipPlanAdapter.planId;\r\nimport static com.brainwellnessspa.MembershipModule.Adapters.MembershipPlanAdapter.price;\r\n\r\npublic class CheckoutPaymentActivity extends AppCompatActivity {\r\n    ActivityCheckoutPaymentBinding binding;\r\n    String MobileNo;\r\n    Context context;\r\n    Activity activity;\r\n    Dialog d;\r\n    int a = 0;\r\n    int year, month;\r\n    YeardialogBinding binding1;\r\n    String strToken;\r\n    private long mLastClickTime = 0;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_checkout_payment);\r\n        context = CheckoutPaymentActivity.this;\r\n        activity = CheckoutPaymentActivity.this;\r\n        if (getIntent() != null) {\r\n            MobileNo = getIntent().getStringExtra(\"MobileNo\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                finish();\r\n            }\r\n        });\r\n\r\n        year = Calendar.getInstance().get(Calendar.YEAR);\r\n        month = Calendar.getInstance().get(Calendar.MONTH);\r\n        month = month + 1;\r\n        d = new Dialog(context);\r\n        d.setTitle(\"Year Picker\");\r\n        binding1 = DataBindingUtil.inflate(LayoutInflater.from(context),\r\n                R.layout.yeardialog, null, false);\r\n        d.setContentView(binding1.getRoot());\r\n       /* binding.etNumber.addTextChangedListener(addCardTextWatcher);\r\n        binding.etName.addTextChangedListener(addCardTextWatcher);\r\n        binding.textMonth.addTextChangedListener(addCardTextWatcher);\r\n        binding.etCvv.addTextChangedListener(addCardTextWatcher);*/\r\n\r\n//        DecimalFormat precision = new DecimalFormat(\"#.##\");\r\n        binding.tvDoller.setText(\"$\" + price);\r\n//        binding.tvDoller.setText(\"$\" + precision.format(price));\r\n        binding.etNumber.addTextChangedListener(new TextWatcher() {\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                if (binding.etNumber.getText().toString().length() == 16) {\r\n                    binding.etName.requestFocus();\r\n                }\r\n            }\r\n\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            }\r\n\r\n            public void afterTextChanged(Editable s) {\r\n            }\r\n        });\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(CheckoutPaymentActivity.this, 0,\r\n                5, 3, 1f, 0);\r\n        binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        binding.ivRestaurantImage.setImageResource(R.drawable.ic_checkout_card_logo);\r\n        binding.opendilog.setOnClickListener(v -> {\r\n            a = 1;\r\n            showYearDialog();\r\n        });\r\n\r\n        AddPaymentActivity.CreditCardFormatTextWatcher tv = new AddPaymentActivity.CreditCardFormatTextWatcher(binding.etNumber);\r\n        binding.etNumber.addTextChangedListener(tv);\r\n        binding.etName.addTextChangedListener(addCardTextWatcher);\r\n        binding.etNumber.addTextChangedListener(addCardTextWatcher);\r\n        binding.etCvv.addTextChangedListener(addCardTextWatcher);\r\n        binding.textMonth.addTextChangedListener(addCardTextWatcher);\r\n        binding.btnPayment.setOnClickListener(view -> {\r\n            if (binding.textMonth.getText().toString().equalsIgnoreCase(\"Expiry Date\")\r\n                    && a == 0 && binding.etNumber.getText().toString().equalsIgnoreCase(\"\")\r\n                    && binding.etCvv.getText().toString().equalsIgnoreCase(\"\")\r\n                    && binding.etName.getText().toString().equalsIgnoreCase(\"\")) {\r\n                binding.txtError.setText(\"I'll need your inputs\");\r\n            } else if (binding.etNumber.getText().toString().equalsIgnoreCase(\"\")) {\r\n                binding.tlNumber.setError(\"Please provide your card number\");\r\n                binding.txtError.setText(\"\");\r\n                binding.tlName.setError(\"\");\r\n            } else if (binding.etNumber.getText().toString().length() <= 15 || binding.etNumber.getText().toString().length() > 16) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"Please use the correct card number\");\r\n                binding.txtError.setText(\"\");\r\n            } else if (binding.etName.getText().toString().equalsIgnoreCase(\"\")) {\r\n                binding.tlName.setError(\"Please provide the card holder's name\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"\");\r\n            } else if (binding1.MonthPicker.getValue() < month && binding1.YearPicker.getValue() == year) {\r\n                binding.txtError.setText(\"The expiry date that you have used is incorrect\");\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n            } else if (binding.textMonth.getText().toString().equalsIgnoreCase(\"Expiry Date\") || a == 0) {\r\n                binding.txtError.setText(\"Please provide the expiry date\");\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n            } else if (binding.etCvv.getText().toString().matches(\"\")) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"Please provide the CVV\");\r\n            } else if (binding.etCvv.getText().toString().length() < 3) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"The CVV you have used is incorrect\");\r\n            } else {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"\");\r\n                final String strCardNo = binding.etNumber.getText().toString().trim().replaceAll(\"\\\\s+\", \"\");\r\n                int months = binding1.MonthPicker.getValue();\r\n                int Years = binding1.YearPicker.getValue();\r\n                Card card = new Card(strCardNo, months, Years, binding.etCvv.getText().toString());\r\n\r\n                new Stripe().createToken(card, getString(R.string.stipe_test_key), new TokenCallback() {\r\n                    @Override\r\n                    public void onError(Exception error) {\r\n                        Log.e(\"error.........\", \"\" + error.toString());\r\n                        BWSApplication.showToast(\"Invalid Card Details\", getApplicationContext());\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onSuccess(Token token) {\r\n                        strToken = token.getId();\r\n                        Log.e(\"strToken.............\", \"\" + strToken);\r\n                        if (!strToken.equalsIgnoreCase(\"\")) {\r\n                            if (BWSApplication.isNetworkConnected(context)) {\r\n                                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                Call<AddCardModel> listCall = APIClient.getClient().getMembershipPayment(planId, planFlag, strToken, MobileNo);\r\n                                listCall.enqueue(new Callback<AddCardModel>() {\r\n                                    @Override\r\n                                    public void onResponse(Call<AddCardModel> call, Response<AddCardModel> response) {\r\n                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        if (response.isSuccessful()) {\r\n                                            AddCardModel cardModel = response.body();\r\n                                            if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n                                                keyboard.hideSoftInputFromWindow(view.getWindowToken(), 0);\r\n                                                if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);\r\n                                                    SharedPreferences.Editor editor = shared.edit();\r\n                                                    editor.putString(CONSTANTS.PREF_KEY_UserID, cardModel.getResponseData().getUserId());\r\n                                                    editor.putString(CONSTANTS.PREF_KEY_MobileNo, MobileNo);\r\n                                                    editor.commit();\r\n                                                    Intent i = new Intent(CheckoutPaymentActivity.this, ThankYouMpActivity.class);\r\n                                                    startActivity(i);\r\n                                                    finish();\r\n                                                } else if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                                } else {\r\n                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                                }\r\n                                            } else {\r\n                                                BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onFailure(Call<AddCardModel> call, Throwable t) {\r\n                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                BWSApplication.showToast(getString(R.string.no_server_found), context);\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        finish();\r\n    }\r\n\r\n      private TextWatcher addCardTextWatcher = new TextWatcher() {\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            String CardNo = binding.etNumber.getText().toString().trim();\r\n            String CardName = binding.etName.getText().toString().trim();\r\n            String Month = binding.textMonth.getText().toString().trim();\r\n            String CVV = binding.etCvv.getText().toString().trim();\r\n            if (!CardNo.isEmpty() || !CardName.isEmpty() || !Month.isEmpty() || !CVV.isEmpty()) {\r\n                binding.btnPayment.setEnabled(true);\r\n                binding.btnPayment.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnPayment.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnPayment.setEnabled(false);\r\n                binding.btnPayment.setTextColor(getResources().getColor(R.color.light_gray));\r\n                binding.btnPayment.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n        }\r\n    };\r\n\r\n    public void showYearDialog() {\r\n        binding1.MonthPicker.setMaxValue(12);\r\n        binding1.MonthPicker.setMinValue(1);\r\n        binding1.MonthPicker.setWrapSelectorWheel(false);\r\n        binding1.MonthPicker.setValue(month);\r\n        binding1.MonthPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);\r\n        binding1.YearPicker.setMaxValue(year + 80);\r\n        binding1.YearPicker.setMinValue(year);\r\n        binding1.YearPicker.setWrapSelectorWheel(false);\r\n        binding1.YearPicker.setValue(year);\r\n        binding1.YearPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);\r\n\r\n        binding1.set.setOnClickListener(v -> {\r\n            if (binding1.MonthPicker.getValue() < month && binding1.YearPicker.getValue() == year) {\r\n                binding.txtError.setText(\"Please Select Valid Month And Year\");\r\n                d.dismiss();\r\n            } else {\r\n                binding.textMonth.setText(\" \" + binding1.MonthPicker.getValue() + \" / \" + binding1.YearPicker.getValue());\r\n                binding.txtError.setText(\"\");\r\n                d.dismiss();\r\n            }\r\n        });\r\n        binding1.cancle.setOnClickListener(v -> {\r\n            d.dismiss();\r\n        });\r\n        d.show();\r\n    }\r\n\r\n    public static class CreditCardFormatTextWatcher implements TextWatcher {\r\n        public static final int NO_MAX_LENGTH = -1;\r\n        private int maxLength = NO_MAX_LENGTH;\r\n        private int paddingPx;\r\n        private boolean internalStopFormatFlag;\r\n\r\n        public CreditCardFormatTextWatcher(@NonNull TextView textView) {\r\n            setPaddingEm(textView, 1f);\r\n        }\r\n\r\n        public static void formatCardNumber(@NonNull Editable ccNumber, int paddingPx, int maxLength) {\r\n            int textLength = ccNumber.length();\r\n            // first remove any previous span\r\n            AddPaymentActivity.CreditCardFormatTextWatcher.PaddingRightSpan[] spans = ccNumber.getSpans(0, ccNumber.length(), AddPaymentActivity.CreditCardFormatTextWatcher.PaddingRightSpan.class);\r\n            for (int i = 0; i < spans.length; i++) {\r\n                ccNumber.removeSpan(spans[i]);\r\n            }\r\n            // then truncate to max length\r\n            if (maxLength > 0 && textLength > maxLength - 1) {\r\n                ccNumber.replace(maxLength, textLength, \"\");\r\n            }\r\n            // finally add margin spans\r\n            for (int i = 1; i <= ((textLength - 1) / 4); i++) {\r\n                int end = i * 4;\r\n                int start = end - 1;\r\n                AddPaymentActivity.CreditCardFormatTextWatcher.PaddingRightSpan marginSPan = new AddPaymentActivity.CreditCardFormatTextWatcher.PaddingRightSpan(paddingPx);\r\n                ccNumber.setSpan(marginSPan, start, end, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n            }\r\n        }\r\n\r\n\r\n        public void setPaddingPx(int paddingPx) {\r\n            this.paddingPx = paddingPx;\r\n        }\r\n\r\n\r\n        public void setPaddingEm(@NonNull TextView textView, float em) {\r\n            float emSize = textView.getPaint().measureText(\"x\");\r\n            setPaddingPx((int) (em * emSize));\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            if (internalStopFormatFlag) {\r\n                return;\r\n            }\r\n            internalStopFormatFlag = true;\r\n            formatCardNumber(s, paddingPx, maxLength);\r\n            internalStopFormatFlag = false;\r\n        }\r\n\r\n        public static class PaddingRightSpan extends ReplacementSpan {\r\n\r\n            private int mPadding;\r\n\r\n            public PaddingRightSpan(int padding) {\r\n                mPadding = padding;\r\n            }\r\n\r\n            @Override\r\n            public int getSize(@NonNull Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {\r\n                float[] widths = new float[end - start];\r\n                paint.getTextWidths(text, start, end, widths);\r\n                int sum = mPadding;\r\n                for (int i = 0; i < widths.length; i++) {\r\n                    sum += widths[i];\r\n                }\r\n                return sum;\r\n            }\r\n\r\n            @Override\r\n            public void draw(@NonNull Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, @NonNull Paint paint) {\r\n                canvas.drawText(text, start, end, x, y, paint);\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutPaymentActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutPaymentActivity.java	(date 1602682751886)
@@ -124,39 +124,34 @@
         binding.etCvv.addTextChangedListener(addCardTextWatcher);
         binding.textMonth.addTextChangedListener(addCardTextWatcher);
         binding.btnPayment.setOnClickListener(view -> {
-            if (binding.textMonth.getText().toString().equalsIgnoreCase("Expiry Date")
-                    && a == 0 && binding.etNumber.getText().toString().equalsIgnoreCase("")
-                    && binding.etCvv.getText().toString().equalsIgnoreCase("")
-                    && binding.etName.getText().toString().equalsIgnoreCase("")) {
-                binding.txtError.setText("I'll need your inputs");
-            } else if (binding.etNumber.getText().toString().equalsIgnoreCase("")) {
-                binding.tlNumber.setError("Please provide your card number");
+           if (binding.etNumber.getText().toString().equalsIgnoreCase("")) {
+                binding.tlNumber.setError("Card number is required.");
                 binding.txtError.setText("");
                 binding.tlName.setError("");
             } else if (binding.etNumber.getText().toString().length() <= 15 || binding.etNumber.getText().toString().length() > 16) {
                 binding.tlName.setError("");
-                binding.tlNumber.setError("Please use the correct card number");
+                binding.tlNumber.setError("Card number is required.");
                 binding.txtError.setText("");
             } else if (binding.etName.getText().toString().equalsIgnoreCase("")) {
-                binding.tlName.setError("Please provide the card holder's name");
+                binding.tlName.setError("Card name is required");
                 binding.tlNumber.setError("");
                 binding.txtError.setText("");
             } else if (binding1.MonthPicker.getValue() < month && binding1.YearPicker.getValue() == year) {
-                binding.txtError.setText("The expiry date that you have used is incorrect");
+                binding.txtError.setText("Please enter a valid expiry mm/yyyy");
                 binding.tlName.setError("");
                 binding.tlNumber.setError("");
             } else if (binding.textMonth.getText().toString().equalsIgnoreCase("Expiry Date") || a == 0) {
-                binding.txtError.setText("Please provide the expiry date");
+                binding.txtError.setText("Expiry month is required");
                 binding.tlName.setError("");
                 binding.tlNumber.setError("");
             } else if (binding.etCvv.getText().toString().matches("")) {
                 binding.tlName.setError("");
                 binding.tlNumber.setError("");
-                binding.txtError.setText("Please provide the CVV");
+                binding.txtError.setText("CVV is required");
             } else if (binding.etCvv.getText().toString().length() < 3) {
                 binding.tlName.setError("");
                 binding.tlNumber.setError("");
-                binding.txtError.setText("The CVV you have used is incorrect");
+                binding.txtError.setText("Please enter a valid CVV number");
             } else {
                 binding.tlName.setError("");
                 binding.tlNumber.setError("");
@@ -170,7 +165,7 @@
                     @Override
                     public void onError(Exception error) {
                         Log.e("error.........", "" + error.toString());
-                        BWSApplication.showToast("Invalid Card Details", getApplicationContext());
+                        BWSApplication.showToast("Please enter valid card details", getApplicationContext());
                         BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
                     }
 
Index: app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutOtpActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.MembershipModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.SystemClock;\r\nimport android.provider.Settings;\r\nimport android.text.Editable;\r\nimport android.text.Html;\r\nimport android.text.TextUtils;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.EditText;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.firebase.iid.FirebaseInstanceId;\r\nimport com.google.firebase.iid.InstanceIdResult;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.LoginModule.Models.OtpModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.MembershipPlanListModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.SignUpModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.SplashModule.SplashScreenActivity;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityCheckoutOtpBinding;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class CheckoutOtpActivity extends AppCompatActivity {\r\n    String Name, Code, MobileNo;\r\n    private EditText[] editTexts;\r\n    boolean tvSendOTPbool = true;\r\n    Activity activity;\r\n    Context ctx;\r\n    String TrialPeriod;\r\n    private ArrayList<MembershipPlanListModel.Plan> listModelList;\r\n    int position;\r\n    ActivityCheckoutOtpBinding binding;\r\n    CountDownTimer countDownTimer;\r\n    private long mLastClickTime = 0;\r\n    public static int comeRegister = 0;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_checkout_otp);\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            MobileNo = getIntent().getStringExtra(CONSTANTS.MobileNo);\r\n            Name = getIntent().getStringExtra(CONSTANTS.Name);\r\n            Code = getIntent().getStringExtra(CONSTANTS.Code);\r\n//            TrialPeriod = getIntent().getStringExtra(\"TrialPeriod\");\r\n//            listModelList = getIntent().getParcelableArrayListExtra(\"PlanData\");\r\n//            position = getIntent().getIntExtra(\"position\", 0);\r\n        }\r\n        activity = CheckoutOtpActivity.this;\r\n        ctx = CheckoutOtpActivity.this;\r\n        binding.tvSendCodeText.setText(\"We sent an SMS with a 4-digit code to \" + Code + MobileNo);\r\n        editTexts = new EditText[]{binding.edtOTP1, binding.edtOTP2, binding.edtOTP3, binding.edtOTP4};\r\n        binding.edtOTP1.addTextChangedListener(new PinTextWatcher(0));\r\n        binding.edtOTP2.addTextChangedListener(new PinTextWatcher(1));\r\n        binding.edtOTP3.addTextChangedListener(new PinTextWatcher(2));\r\n        binding.edtOTP4.addTextChangedListener(new PinTextWatcher(3));\r\n        binding.edtOTP1.setOnKeyListener(new PinOnKeyListener(0));\r\n        binding.edtOTP2.setOnKeyListener(new PinOnKeyListener(1));\r\n        binding.edtOTP3.setOnKeyListener(new PinOnKeyListener(2));\r\n        binding.edtOTP4.setOnKeyListener(new PinOnKeyListener(3));\r\n\r\n        binding.txtError.setText(\"\");\r\n        binding.txtError.setVisibility(View.GONE);\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            comeRegister = 0;\r\n            Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n            i.putExtra(\"MobileNo\", MobileNo);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.llEditNumber.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            comeRegister = 1;\r\n            Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n            i.putExtra(\"MobileNo\", MobileNo);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.btnSendCode.setOnClickListener(view -> {\r\n            SharedPreferences sharedPreferences2 = getSharedPreferences(CONSTANTS.Token, MODE_PRIVATE);\r\n            String fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n            if (TextUtils.isEmpty(fcm_id)) {\r\n                FirebaseInstanceId.getInstance().getInstanceId().addOnSuccessListener(activity, new OnSuccessListener<InstanceIdResult>() {\r\n                    @Override\r\n                    public void onSuccess(InstanceIdResult instanceIdResult) {\r\n                        String newToken = instanceIdResult.getToken();\r\n                        Log.e(\"newToken\", newToken);\r\n                        SharedPreferences.Editor editor = getSharedPreferences(CONSTANTS.Token, MODE_PRIVATE).edit();\r\n                        editor.putString(CONSTANTS.Token, newToken); //Friend\r\n                        editor.apply();\r\n                        editor.commit();\r\n                    }\r\n                });\r\n                fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n            }\r\n            if (binding.edtOTP1.getText().toString().equalsIgnoreCase(\"\") ||\r\n                    binding.edtOTP2.getText().toString().equalsIgnoreCase(\"\") ||\r\n                    binding.edtOTP3.getText().toString().equalsIgnoreCase(\"\") ||\r\n                    binding.edtOTP4.getText().toString().equalsIgnoreCase(\"\")) {\r\n                binding.txtError.setText(\"Please enter the OTP\");\r\n                binding.txtError.setVisibility(View.VISIBLE);\r\n            } else {\r\n                if (BWSApplication.isNetworkConnected(CheckoutOtpActivity.this)) {\r\n                    BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    String deviceid = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);\r\n                    Call<OtpModel> listCall = APIClient.getClient().getAuthOtps1(\r\n                            binding.edtOTP1.getText().toString() + \"\" +\r\n                                    binding.edtOTP2.getText().toString() + \"\" +\r\n                                    binding.edtOTP3.getText().toString() + \"\" +\r\n                                    binding.edtOTP4.getText().toString(), fcm_id, CONSTANTS.FLAG_ONE, deviceid\r\n                            , MobileNo, CONSTANTS.FLAG_ONE);\r\n                    listCall.enqueue(new Callback<OtpModel>() {\r\n                        @Override\r\n                        public void onResponse(Call<OtpModel> call, Response<OtpModel> response) {\r\n                            if (response.isSuccessful()) {\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                OtpModel otpModel = response.body();\r\n                                if (otpModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                    Intent i = new Intent(CheckoutOtpActivity.this, CheckoutPaymentActivity.class);\r\n                                    i.putExtra(\"MobileNo\", MobileNo);\r\n                                    startActivity(i);\r\n                                    finish();\r\n                                } else if (otpModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                    binding.txtError.setText(otpModel.getResponseMessage());\r\n                                    binding.txtError.setVisibility(View.VISIBLE);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFailure(Call<OtpModel> call, Throwable t) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n\r\n                        }\r\n                    });\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), getApplicationContext());\r\n                }\r\n            }\r\n        });\r\n\r\n        binding.llResendSms.setOnClickListener(view -> prepareData());\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        comeRegister = 0;\r\n        Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n        i.putExtra(\"MobileNo\", MobileNo);\r\n        i.putExtra(\"Name\", Name);\r\n        i.putExtra(\"Code\", Code);\r\n        startActivity(i);\r\n        finish();\r\n    }\r\n\r\n    void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            tvSendOTPbool = false;\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SignUpModel> listCall = APIClient.getClient().getSignUpDatas(MobileNo, Code, CONSTANTS.FLAG_ONE, CONSTANTS.FLAG_ONE, SplashScreenActivity.key);\r\n            listCall.enqueue(new Callback<SignUpModel>() {\r\n                @Override\r\n                public void onResponse(Call<SignUpModel> call, Response<SignUpModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SignUpModel loginModel = response.body();\r\n                        if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                            countDownTimer = new CountDownTimer(30000, 1000) {\r\n                                public void onTick(long millisUntilFinished) {\r\n                                    binding.llResendSms.setEnabled(false);\r\n                                    binding.tvResendOTP.setText(Html.fromHtml(millisUntilFinished / 1000 + \"<font color=\\\"#999999\\\">\" + \" Resent SMS\" + \"</font>\"));\r\n                                }\r\n\r\n                                public void onFinish() {\r\n                                    binding.llResendSms.setEnabled(true);\r\n                                    binding.tvResendOTP.setText(getString(R.string.resent_sms));\r\n                                    binding.tvResendOTP.setTextColor(getResources().getColor(R.color.dark_blue_gray));\r\n                                    binding.tvResendOTP.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\r\n                                    binding.tvResendOTP.getPaint().setMaskFilter(null);\r\n                                }\r\n                            }.start();\r\n                            binding.edtOTP1.requestFocus();\r\n                            binding.edtOTP1.setText(\"\");\r\n                            binding.edtOTP2.setText(\"\");\r\n                            binding.edtOTP3.setText(\"\");\r\n                            binding.edtOTP4.setText(\"\");\r\n                            tvSendOTPbool = true;\r\n                            BWSApplication.showToast(loginModel.getResponseMessage(), getApplicationContext());\r\n                        } else if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                            binding.txtError.setVisibility(View.VISIBLE);\r\n                            binding.txtError.setText(loginModel.getResponseMessage());\r\n                        } else {\r\n                            binding.txtError.setVisibility(View.VISIBLE);\r\n                            binding.txtError.setText(loginModel.getResponseMessage());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SignUpModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    BWSApplication.showToast(t.getMessage(), getApplicationContext());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getApplicationContext());\r\n        }\r\n    }\r\n\r\n    public class PinTextWatcher implements TextWatcher {\r\n        private int currentIndex;\r\n        private boolean isFirst = false, isLast = false;\r\n        private String newTypedString = \"\";\r\n\r\n        PinTextWatcher(int currentIndex) {\r\n            this.currentIndex = currentIndex;\r\n\r\n            if (currentIndex == 0)\r\n                this.isFirst = true;\r\n            else if (currentIndex == editTexts.length - 1)\r\n                this.isLast = true;\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            newTypedString = s.subSequence(start, start + count).toString().trim();\r\n            String OTP1 = binding.edtOTP1.getText().toString().trim();\r\n            String OTP2 = binding.edtOTP2.getText().toString().trim();\r\n            String OTP3 = binding.edtOTP3.getText().toString().trim();\r\n            String OTP4 = binding.edtOTP4.getText().toString().trim();\r\n            if (!OTP1.isEmpty() && !OTP2.isEmpty() && !OTP3.isEmpty() && !OTP4.isEmpty()) {\r\n                binding.btnSendCode.setEnabled(true);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnSendCode.setEnabled(false);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            String text = newTypedString;\r\n            Log.e(\"OTP VERIFICATION\", \"\" + text);\r\n\r\n            /* Detect paste event and set first char */\r\n            if (text.length() > 1)\r\n                text = String.valueOf(text.charAt(0)); // TODO: We can fill out other EditTexts\r\n            editTexts[currentIndex].removeTextChangedListener(this);\r\n            editTexts[currentIndex].setText(text);\r\n            editTexts[currentIndex].setSelection(text.length());\r\n            editTexts[currentIndex].addTextChangedListener(this);\r\n\r\n            if (text.length() == 1) {\r\n                moveToNext();\r\n            } else if (text.length() == 0) {\r\n                if (!tvSendOTPbool) {\r\n                    editTexts[0].requestFocus();\r\n                } else {\r\n                    moveToPrevious();\r\n                }\r\n            }\r\n        }\r\n\r\n        private void moveToNext() {\r\n            if (!isLast)\r\n                editTexts[currentIndex + 1].requestFocus();\r\n\r\n            if (isAllEditTextsFilled() && isLast) { // isLast is optional\r\n                editTexts[currentIndex].clearFocus();\r\n                hideKeyboard();\r\n            }\r\n        }\r\n\r\n        private void moveToPrevious() {\r\n            if (!isFirst)\r\n                editTexts[currentIndex - 1].requestFocus();\r\n        }\r\n\r\n        private boolean isAllEditTextsFilled() {\r\n            for (EditText editText : editTexts)\r\n                if (editText.getText().toString().trim().length() == 0)\r\n                    return false;\r\n            return true;\r\n        }\r\n\r\n        private void hideKeyboard() {\r\n            if (getCurrentFocus() != null) {\r\n                InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);\r\n                inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PinOnKeyListener implements View.OnKeyListener {\r\n        private int currentIndex;\r\n\r\n        PinOnKeyListener(int currentIndex) {\r\n            this.currentIndex = currentIndex;\r\n        }\r\n\r\n        @Override\r\n        public boolean onKey(View v, int keyCode, KeyEvent event) {\r\n            if (keyCode == KeyEvent.KEYCODE_DEL && event.getAction() == KeyEvent.ACTION_DOWN) {\r\n                if (editTexts[currentIndex].getText().toString().isEmpty() && currentIndex != 0)\r\n                    editTexts[currentIndex - 1].requestFocus();\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutOtpActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutOtpActivity.java	(date 1602678080847)
@@ -128,49 +128,41 @@
                 });
                 fcm_id = sharedPreferences2.getString(CONSTANTS.Token, "");
             }
-            if (binding.edtOTP1.getText().toString().equalsIgnoreCase("") ||
-                    binding.edtOTP2.getText().toString().equalsIgnoreCase("") ||
-                    binding.edtOTP3.getText().toString().equalsIgnoreCase("") ||
-                    binding.edtOTP4.getText().toString().equalsIgnoreCase("")) {
-                binding.txtError.setText("Please enter the OTP");
-                binding.txtError.setVisibility(View.VISIBLE);
-            } else {
-                if (BWSApplication.isNetworkConnected(CheckoutOtpActivity.this)) {
-                    BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                    String deviceid = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);
-                    Call<OtpModel> listCall = APIClient.getClient().getAuthOtps1(
-                            binding.edtOTP1.getText().toString() + "" +
-                                    binding.edtOTP2.getText().toString() + "" +
-                                    binding.edtOTP3.getText().toString() + "" +
-                                    binding.edtOTP4.getText().toString(), fcm_id, CONSTANTS.FLAG_ONE, deviceid
-                            , MobileNo, CONSTANTS.FLAG_ONE);
-                    listCall.enqueue(new Callback<OtpModel>() {
-                        @Override
-                        public void onResponse(Call<OtpModel> call, Response<OtpModel> response) {
-                            if (response.isSuccessful()) {
-                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                                OtpModel otpModel = response.body();
-                                if (otpModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {
-                                    Intent i = new Intent(CheckoutOtpActivity.this, CheckoutPaymentActivity.class);
-                                    i.putExtra("MobileNo", MobileNo);
-                                    startActivity(i);
-                                    finish();
-                                } else if (otpModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {
-                                    binding.txtError.setText(otpModel.getResponseMessage());
-                                    binding.txtError.setVisibility(View.VISIBLE);
-                                }
-                            }
-                        }
+            if (BWSApplication.isNetworkConnected(CheckoutOtpActivity.this)) {
+                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                String deviceid = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);
+                Call<OtpModel> listCall = APIClient.getClient().getAuthOtps1(
+                        binding.edtOTP1.getText().toString() + "" +
+                                binding.edtOTP2.getText().toString() + "" +
+                                binding.edtOTP3.getText().toString() + "" +
+                                binding.edtOTP4.getText().toString(), fcm_id, CONSTANTS.FLAG_ONE, deviceid
+                        , MobileNo, CONSTANTS.FLAG_ONE);
+                listCall.enqueue(new Callback<OtpModel>() {
+                    @Override
+                    public void onResponse(Call<OtpModel> call, Response<OtpModel> response) {
+                        if (response.isSuccessful()) {
+                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                            OtpModel otpModel = response.body();
+                            if (otpModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {
+                                Intent i = new Intent(CheckoutOtpActivity.this, CheckoutPaymentActivity.class);
+                                i.putExtra("MobileNo", MobileNo);
+                                startActivity(i);
+                                finish();
+                            } else if (otpModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {
+                                binding.txtError.setText(otpModel.getResponseMessage());
+                                binding.txtError.setVisibility(View.VISIBLE);
+                            }
+                        }
+                    }
 
-                        @Override
-                        public void onFailure(Call<OtpModel> call, Throwable t) {
-                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                    @Override
+                    public void onFailure(Call<OtpModel> call, Throwable t) {
+                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
 
-                        }
-                    });
-                } else {
-                    BWSApplication.showToast(getString(R.string.no_server_found), getApplicationContext());
-                }
+                    }
+                });
+            } else {
+                BWSApplication.showToast(getString(R.string.no_server_found), getApplicationContext());
             }
         });
 
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">Brain Wellness Spa</string>\r\n\r\n    <string name=\"ResponseCodesuccess\">200</string>\r\n    <string name=\"ResponseCodefail\">401</string>\r\n    <string name=\"stipe_test_key\">pk_test_Mm4d65j7STTpLo0YrkYGmaWH00tQO1qMnv</string>\r\n    <string name=\"stipe_live_key\">pk_live_nmRApzuiZfmKRruPcnpYhurb00tFp2EYYP</string>\r\n\r\n    <string name=\"sign_in\">Sign In</string>\r\n    <string name=\"enter_phone_number\">Enter Phone Number</string>\r\n    <string name=\"enter_mobile_number\">Enter Mobile Number</string>\r\n    <string name=\"mobile_number\">Mobile Number</string>\r\n    <string name=\"enter_your_code\">Enter your code</string>\r\n    <string name=\"phone_number\">Phone Number</string>\r\n    <string name=\"send_code_text\">We will send you a code by SMS to confirm your mobile number.</string>\r\n    <string name=\"register_text\"><u>Not a Member? Register</u></string>\r\n    <string name=\"privacy_policy\">Privacy Policy</string>\r\n    <string name=\"privacy_policy_t_n_c\">By clicking on Register or Sign up you agree to our</string>\r\n    <string name=\"get_the_code\">Get SMS code</string>\r\n    <string name=\"choose_your_country\">Choose your country</string>\r\n    <string name=\"enter_otp\">Enter OTP</string>\r\n    <string name=\"enter_sms\">Enter SMS Code</string>\r\n    <string name=\"resent_sms\">Resend SMS</string>\r\n    <string name=\"edit_phone_number\">Edit mobile number</string>\r\n    <string name=\"t_n_c\">Terms &amp; Conditions</string>\r\n    <string name=\"title_activity_dashboard\">MainActivity</string>\r\n    <string name=\"title_audio\">AUDIO</string>\r\n    <string name=\"title_playlist\">PLAYLIST</string>\r\n    <string name=\"title_appointment\">APPOINTMENT</string>\r\n    <string name=\"title_account\">ACCOUNT</string>\r\n    <string name=\"title_search\">SEARCH</string>\r\n    <string name=\"thank_u\">Thank You</string>\r\n    <string name=\"thank_u_quotes\">Congratulations on joining the Brain Wellness Spa Audio Membership</string>\r\n    <string name=\"explore_app\">Explore app</string>\r\n    <string name=\"view_invoice\"><u>View Invoice</u></string>\r\n    <string name=\"downloads\">Downloads</string>\r\n    <string name=\"invoices\">Invoices</string>\r\n    <string name=\"logout\">Log out</string>\r\n    <string name=\"faq\">FAQ</string>\r\n    <string name=\"reminder\">Reminder</string>\r\n    <string name=\"billing_and_order\">Billing and Order</string>\r\n    <string name=\"view_profile\">View Profile</string>\r\n    <string name=\"profile\">Profile</string>\r\n    <string name=\"Full_Name\">Full Name</string>\r\n    <string name=\"Date_of_Birth\">Date of Birth</string>\r\n    <string name=\"Mobile_Number\">Mobile Number</string>\r\n    <string name=\"Email_Address\">Email Address</string>\r\n    <string name=\"Downloads\">Downloads</string>\r\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\r\n    <string name=\"Invoice\">Invoice</string>\r\n    <string name=\"Billing_and_Order\">Billing and Order</string>\r\n    <string name=\"Cancel_Subscription\">Cancel Subscription</string>\r\n    <string name=\"Cancel\">Cancel</string>\r\n    <string name=\"cancel_quotes\">Are you sure you want to cancel your subscription?</string>\r\n    <string name=\"reminder_quotes\">Are you sure you want to delete your reminder?</string>\r\n    <string name=\"go_back\">Go Back</string>\r\n    <string name=\"Country\">Country</string>\r\n    <string name=\"Postcode\">Postcode</string>\r\n    <string name=\"State\">State</string>\r\n    <string name=\"Save\">Save</string>\r\n    <string name=\"Address_Line_One\">Address Line 1</string>\r\n    <string name=\"Address_Line_Two\">Address Line 2 (Optional)</string>\r\n    <string name=\"City\">Suburb / Town / City</string>\r\n    <string name=\"Card_Number\">Card Number</string>\r\n    <string name=\"Card_Holder_Name\">Card Holder Name</string>\r\n    <string name=\"Cvv\">CVV</string>\r\n    <string name=\"Add_New_Card\">Add New Card</string>\r\n    <string name=\"FAQ\">FAQ</string>\r\n    <string name=\"disclaimer\"><b>Disclaimer:</b> The Brain Wellness Spa offers a unique, alternative and drug free method created by our founder Terri Bowman aimed to assist people encountering struggles in their daily lives, to find inner peace and overcome negative thoughts and emotions (the Brain Wellness Spa Method).\\n\\nThe Brain Wellness Spa Method is not a scientific method. \\n\\nThe testimonials of our clients speak for themselves and we are so proud of the incredible results they have achieved – we want to help you and are committed to assisting you find a way to live a better life. However, as with any service, we accept that it may not be right for everyone and that results may vary from client to client. Accordingly, we make no promises or representations that our service will work for you but we invite you to try it for yourself.</string>\r\n    <string name=\"Disclaimer\">Disclaimer</string>\r\n    <string name=\"Audio\">Audio</string>\r\n    <string name=\"Playlist\">Playlist</string>\r\n    <string name=\"Help\">Help</string>\r\n    <string name=\"Reminder\">Reminder</string>\r\n    <string name=\"Set_a_Reminder\">Set a Reminder</string>\r\n    <string name=\"Repeat\">Repeat</string>\r\n    <string name=\"Membership\">Membership</string>\r\n    <string name=\"month_free\">Join Now – Get 1 Month Free</string>\r\n    <string name=\"Order_Summary\">Order Summary</string>\r\n    <string name=\"Proceed_to_checkout\">Proceed to checkout</string>\r\n    <string name=\"Checkout\">Checkout</string>\r\n    <string name=\"Next\">Next</string>\r\n    <string name=\"Complete_Payment\">Complete Payment</string>\r\n    <string name=\"Explore\">Explore</string>\r\n    <string name=\"Recently_Played\">Recently Played</string>\r\n    <string name=\"My_Downloads\">My Downloads</string>\r\n    <string name=\"View_all\">View all</string>\r\n    <string name=\"Recommended\">Recommended</string>\r\n    <string name=\"Get_Inspired\">Get Inspired !</string>\r\n    <string name=\"Popular\">Popular</string>\r\n    <string name=\"Top_Categories\">Top Categories</string>\r\n    <string name=\"Appointment\">Appointment</string>\r\n    <string name=\"Next_Session\">Next Session</string>\r\n    <string name=\"Previous_Appointments\">Previous Appointments</string>\r\n    <string name=\"Create_playlist\">Create playlist</string>\r\n    <string name=\"give_playlist_name\">Give your playlist a name.</string>\r\n    <string name=\"Your_Created\">Your Created</string>\r\n    <string name=\"Suggested_Audios\">Suggested Audios</string>\r\n    <string name=\"Recommended_Audios\">Recommended  Audios</string>\r\n    <string name=\"Suggested_Playlist\">Suggested Playlist</string>\r\n    <string name=\"Recommendeds_Playlist\">Recommended Playlist</string>\r\n    <string name=\"View_order_details\">View order details</string>\r\n    <string name=\"Payment_information\">Payment information</string>\r\n    <string name=\"Order_summary\">Order summary</string>\r\n    <string name=\"NOW_PLAYING_FROM\">NOW PLAYING FROM</string>\r\n    <string name=\"Download_audio\">Download audio</string>\r\n    <string name=\"Like\">Like</string>\r\n    <string name=\"Add_to_Playlist\">Add to Playlist</string>\r\n    <string name=\"Add_to_Queue\">Add to Queue</string>\r\n    <string name=\"Shuffle\">Shuffle</string>\r\n    <string name=\"Go_to_queue\">Go to queue</string>\r\n    <string name=\"Directions\">Directions</string>\r\n    <string name=\"Now_Playing\">Now Playing</string>\r\n    <string name=\"Next_in_queue\">Next in queue</string>\r\n    <string name=\"close_queue\">Close queue</string>\r\n    <string name=\"Self_development\">Self-development</string>\r\n    <string name=\"Add_Audio\">Add Audio</string>\r\n    <string name=\"Add_Audios\">Add Audios</string>\r\n    <string name=\"Suggested\">Suggested</string>\r\n    <string name=\"Session\">Session</string>\r\n    <string name=\"Appointment_Details\">Appointment Details</string>\r\n    <string name=\"Complete_the_Booklet\">Complete the Booklet</string>\r\n    <string name=\"Download_PDF\">Download PDF</string>\r\n    <string name=\"Book_Now\">Book Now</string>\r\n    <string name=\"Audios_in_Playlist\">Audios in Playlist</string>\r\n    <string name=\"New_PLaylist\">New PLaylist</string>\r\n    <string name=\"Rename_playlist\">Rename playlist</string>\r\n    <string name=\"Delete_playlist\">Delete playlist</string>\r\n    <string name=\"Download_playlist\">Download playlist</string>\r\n    <string name=\"Add_playlist\">Add to playlist</string>\r\n    <string name=\"delete_quotes\">Are you sure you want to delete Self-development playlist?</string>\r\n    <string name=\"Close\">Close</string>\r\n    <string name=\"Description\">Description</string>\r\n    <string name=\"Resource\">Resource</string>\r\n    <string name=\"Resources\">Resources</string>\r\n    <string name=\"Select_reason\">Select reason</string>\r\n    <string name=\"logout_quotes\">Are you sure you want to log out Brain Wellness Spa?</string>\r\n    <string name=\"Discover_More\">Discover More</string>\r\n    <string name=\"error_player\">There was an error initializing the YouTubePlayer (%1$s)</string>\r\n    <string name=\"no_server_found\">You are not currently connected to internet. Please try again.!</string>\r\n    <string name=\"not_valid_number\">Please enter a valid mobile number</string>\r\n    <string name=\"not_valid_mobile_number\">Please use a valid mobile number</string>\r\n    <string name=\"no_add_digits\">Wait a sec! We need to exchange digits to get started</string>\r\n    <string name=\"Please_enter_your_mobile_number\">Please enter your mobile number</string>\r\n    <string name=\"Australia\">Australia</string>\r\n    <string name=\"code\">+61</string>\r\n    <string name=\"my_download\">MyDownload</string>\r\n    <string name=\"my_like\">MyLike</string>\r\n    <string name=\"recently_played\">Recently Played</string>\r\n    <string name=\"recommended\">Recommended</string>\r\n    <string name=\"Library\">Library</string>\r\n    <string name=\"get_inspired\">Get Inspired</string>\r\n    <string name=\"popular\">Popular</string>\r\n    <string name=\"top_categories\">Top Categories</string>\r\n    <string name=\"Rename\">Rename</string>\r\n    <string name=\"notvalid_number\">It seems your mobile number not exist in our system.</string>\r\n    <string name=\"valid_name\">Please enter name</string>\r\n    <string name=\"takePhoto\">Take photo</string>\r\n    <string name=\"chooseFromGallary\">Choose from gallery</string>\r\n    <string name=\"cancel\">Cancel</string>\r\n    <string name=\"addPhoto\">Add photo!</string>\r\n    <string name=\"removeProfilePicture\">Remove profile picture</string>\r\n    <string name=\"your_created\">Your Created</string>\r\n    <string name=\"MyDownloads\">MyDownloads</string>\r\n    <string name=\"populars\">Popular</string>\r\n    <string name=\"Bundle\">Bundle</string>\r\n    <string name=\"Recommended_Playlist\">Recommended Playlist</string>\r\n    <string name=\"first_card_chars\">XXXX XXXX XXXX </string>\r\n    <string name=\"blank_all_fields\">Hey! I\\'ll need your inputs</string>\r\n    <string name=\"valid_card_no_error\">Hey! Seems like the card number is out of whack. Fancy a retry?</string>\r\n    <string name=\"valid_expiry_error\">Hey! I\\'ll need you to add expiry details</string>\r\n    <string name=\"valid_cvv_error\">Hey! I\\'ll need you to add the CVV</string>\r\n    <string name=\"invalid_expiry_date\">Hey! Seems like the expiry details are out of whack. Fancy a retry?</string>\r\n    <string name=\"invalid_cvv_error\">Hey! Seems like the CVV is out of whack. Fancy a retry?</string>\r\n    <string name=\"blank_card_no_error\">Hey! I\\'ll need you to add card number</string>\r\n    <string name=\"blank_card_holder_name_error\">Hey! I\\'ll need you to add cardholder name</string>\r\n    <string name=\"Audio_Book\">Audio Books</string>\r\n    <string name=\"Podcasts\">Podcasts</string>\r\n    <string name=\"Apps\">Apps</string>\r\n    <string name=\"Website\">Website</string>\r\n    <string name=\"Websites\">Websites</string>\r\n    <string name=\"Documentaries\">Documentaries</string>\r\n    <string name=\"My_Playlist\">My Playlist</string>\r\n    <string name=\"background_image\">Background Image</string>\r\n    <string name=\"Search_for_audio\">Search for audio</string>\r\n    <string name=\"Feeling_better\">Feeling better</string>\r\n    <string name=\"Condition_worse\">Condition worse</string>\r\n    <string name=\"Pricing\">Pricing</string>\r\n    <string name=\"Other_reason\">Other reason</string>\r\n    <string name=\"Appointment_Header\">There are no upcoming appointments scheduled. Would you like to <b>Book a new appointment?</b></string>\r\n    <string name=\"Rename_your_playlist\">Rename your playlist .</string>\r\n    <string name=\"no_data_found\">Try searching again using a diffrent spelling or keyword.</string>\r\n    <string name=\"f_A_Q\">Frequently Asked Questions</string>\r\n    <string name=\"Find_in_playlist\">Find in playlist</string>\r\n    <string name=\"Remove_from_this_playlist\">Remove from this playlist</string>\r\n    <string name=\"Pay_Now\">Pay Now</string>\r\n    <string name=\"Active\">Active</string>\r\n    <string name=\"InActive\">InActive</string>\r\n    <string name=\"Suspended\">Suspended</string>\r\n    <string name=\"Cancelled\">Cancelled</string>\r\n    <string name=\"Proceed_to_plan\">Proceed to plan</string>\r\n    <string name=\"Select_Playlist\">Select Playlist</string>\r\n    <string name=\"Add_New_Reminder\">Add New Reminder</string>\r\n    <string name=\"Delete_Reminder\">Delete Reminder</string>\r\n    <string name=\"Payment\">Payment</string>\r\n\r\n    <string name=\"default_notification_channel_id\">10001</string>\r\n    <string name=\"Delete_payment_card\">Delete payment card</string>\r\n    <string name=\"delete_payment_quotes\">Are you sure you want to delete the payment card ?</string>\r\n    <string name=\"sucess_playlist\">Sucessfully added to playlist</string>\r\n    <string name=\"Guest\">Guest</string>\r\n    <string name=\"membership_title\">Access More Than 65 Audio Programs.</string>\r\n    <string name=\"t_n_cs\"><u>T&amp;Cs</u></string>\r\n    <string name=\"t_n_csm\">T&amp;Cs,</string>\r\n    <string name=\"privacy_policysm\">Privacy Policy </string>\r\n    <string name=\"privacy_policys\">, <u>Privacy Policy</u> </string>\r\n    <string name=\"disclaimers\"><u>Disclaimer</u></string>\r\n    <string name=\"playlist_or_audio_search\">Add or search for audio, playlist</string>\r\n    <string name=\"and\">and</string>\r\n    <string name=\"Disclaimer_text\" >The Brain Wellness Spa offers a unique, alternative and drug free method created by our founder Terri Bowman aimed to assist people encountering struggles in their daily lives, to find inner peace and overcome negative thoughts and emotions (the Brain Wellness Spa Method).\\n\\nThe Brain Wellness Spa Method is not a scientific method. \\n\\nThe testimonials of our clients speak for themselves and we are so proud of the incredible results they have achieved – we want to help you and are committed to assisting you find a way to live a better life. However, as with any service, we accept that it may not be right for everyone and that results may vary from client to client. Accordingly, we make no promises or representations that our service will work for you but we invite you to try it for yourself.</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/res/values/strings.xml	(date 1602683658336)
@@ -140,6 +140,7 @@
     <string name="no_server_found">You are not currently connected to internet. Please try again.!</string>
     <string name="not_valid_number">Please enter a valid mobile number</string>
     <string name="not_valid_mobile_number">Please use a valid mobile number</string>
+    <string name="not_valids_mobile_number">Please enter a valid mobile number</string>
     <string name="no_add_digits">Wait a sec! We need to exchange digits to get started</string>
     <string name="Please_enter_your_mobile_number">Please enter your mobile number</string>
     <string name="Australia">Australia</string>
@@ -218,4 +219,5 @@
     <string name="playlist_or_audio_search">Add or search for audio, playlist</string>
     <string name="and">and</string>
     <string name="Disclaimer_text" >The Brain Wellness Spa offers a unique, alternative and drug free method created by our founder Terri Bowman aimed to assist people encountering struggles in their daily lives, to find inner peace and overcome negative thoughts and emotions (the Brain Wellness Spa Method).\n\nThe Brain Wellness Spa Method is not a scientific method. \n\nThe testimonials of our clients speak for themselves and we are so proud of the incredible results they have achieved – we want to help you and are committed to assisting you find a way to live a better life. However, as with any service, we accept that it may not be right for everyone and that results may vary from client to client. Accordingly, we make no promises or representations that our service will work for you but we invite you to try it for yourself.</string>
+    <string name="General">General</string>
 </resources>
\ No newline at end of file
Index: app/src/main/res/layout/activity_country_select.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        xmlns:tools=\"http://schemas.android.com/tools\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/dark_blue_gray\"\r\n        tools:context=\"com.brainwellnessspa.LoginModule.Activities.CountrySelectActivity\">\r\n\r\n        <androidx.appcompat.widget.Toolbar\r\n            android:id=\"@+id/toolbar\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"@dimen/_56sdp\"\r\n            android:contentInsetStart=\"@dimen/_0sdp\"\r\n            android:contentInsetLeft=\"@dimen/_0sdp\"\r\n            android:contentInsetEnd=\"@dimen/_0sdp\"\r\n            android:contentInsetRight=\"@dimen/_0sdp\"\r\n            android:elevation=\"@dimen/_2sdp\"\r\n            android:minHeight=\"?attr/actionBarSize\"\r\n            android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\r\n            app:contentInsetEnd=\"@dimen/_0sdp\"\r\n            app:contentInsetLeft=\"@dimen/_0sdp\"\r\n            app:contentInsetRight=\"@dimen/_0sdp\"\r\n            app:contentInsetStart=\"@dimen/_0sdp\"\r\n            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\r\n            app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\">\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"@dimen/_56sdp\">\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llBack\"\r\n                    android:layout_width=\"42dp\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_centerVertical=\"true\"\r\n                    android:gravity=\"center\">\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"@dimen/_22sdp\"\r\n                        android:layout_height=\"@dimen/_22sdp\"\r\n                        android:layout_marginLeft=\"@dimen/_10sdp\"\r\n                        android:src=\"@drawable/ic_close_icon\"\r\n                        app:tint=\"@color/white\" />\r\n\r\n                </LinearLayout>\r\n\r\n                <TextView\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_centerInParent=\"true\"\r\n                    android:layout_gravity=\"center\"\r\n                    android:fontFamily=\"@font/montserrat_bold\"\r\n                    android:gravity=\"center\"\r\n                    android:text=\"@string/choose_your_country\"\r\n                    android:textColor=\"@color/white\"\r\n                    android:textSize=\"@dimen/_16sdp\" />\r\n\r\n            </RelativeLayout>\r\n        </androidx.appcompat.widget.Toolbar>\r\n\r\n        <androidx.cardview.widget.CardView\r\n            android:id=\"@+id/cvSearch\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"@dimen/_48sdp\"\r\n            android:layout_below=\"@id/toolbar\"\r\n            android:layout_marginLeft=\"@dimen/_16sdp\"\r\n            android:layout_marginTop=\"@dimen/_16sdp\"\r\n            android:layout_marginRight=\"@dimen/_16sdp\"\r\n            app:cardCornerRadius=\"@dimen/_22sdp\">\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:layout_gravity=\"center_vertical\"\r\n                android:layout_weight=\"2\">\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/button1\"\r\n                    android:layout_width=\"@dimen/_16sdp\"\r\n                    android:layout_height=\"@dimen/_16sdp\"\r\n                    android:layout_centerVertical=\"true\"\r\n                    android:layout_marginLeft=\"@dimen/_14sdp\"\r\n                    android:src=\"@drawable/ic_search_icon\"\r\n                    app:tint=\"@color/dark_blue_gray\" />\r\n\r\n                <androidx.appcompat.widget.SearchView\r\n                    android:id=\"@+id/searchView\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_centerVertical=\"true\"\r\n                    android:layout_toRightOf=\"@id/button1\"\r\n                    android:focusable=\"true\"\r\n                    android:iconifiedByDefault=\"false\"\r\n                    android:singleLine=\"true\"\r\n                    android:theme=\"@style/WallSearchView\"\r\n                    app:queryBackground=\"@null\"\r\n                    app:queryHint=\"Search for country\"\r\n                    app:searchHintIcon=\"@null\"\r\n                    app:searchIcon=\"@null\" />\r\n\r\n\r\n            </RelativeLayout>\r\n        </androidx.cardview.widget.CardView>\r\n\r\n        <androidx.recyclerview.widget.RecyclerView\r\n            android:id=\"@+id/rvCountryList\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginLeft=\"@dimen/_16sdp\"\r\n            android:layout_marginTop=\"@dimen/_20sdp\"\r\n            android:layout_marginRight=\"@dimen/_16sdp\"\r\n            android:overScrollMode=\"never\"\r\n            android:layout_below=\"@id/cvSearch\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/tvFound\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_centerInParent=\"true\"\r\n            android:layout_marginHorizontal=\"@dimen/_28sdp\"\r\n            android:fontFamily=\"@font/montserrat_regular\"\r\n            android:gravity=\"center\"\r\n            android:text=\"Search term not found please use another one\"\r\n            android:textColor=\"@color/white\"\r\n            android:textSize=\"@dimen/_16sdp\"\r\n            android:visibility=\"gone\" />\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:gravity=\"center\"\r\n            android:padding=\"@dimen/_60sdp\">\r\n\r\n            <ProgressBar\r\n                android:id=\"@+id/progressBar\"\r\n                android:layout_width=\"@dimen/_50sdp\"\r\n                android:layout_height=\"@dimen/_50sdp\"\r\n                android:indeterminateTint=\"@color/blue\"\r\n                android:scaleType=\"centerInside\"\r\n                android:visibility=\"gone\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <FrameLayout\r\n            android:id=\"@+id/progressBarHolder\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:alpha=\"0.4\"\r\n            android:animateLayoutChanges=\"true\"\r\n            android:background=\"#C0000000\"\r\n            android:visibility=\"gone\" />\r\n    </RelativeLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_country_select.xml	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/res/layout/activity_country_select.xml	(date 1602678990471)
@@ -123,7 +123,6 @@
             android:layout_marginHorizontal="@dimen/_28sdp"
             android:fontFamily="@font/montserrat_regular"
             android:gravity="center"
-            android:text="Search term not found please use another one"
             android:textColor="@color/white"
             android:textSize="@dimen/_16sdp"
             android:visibility="gone" />
Index: app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutGetCodeActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.MembershipModule.Activities;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.os.SystemClock;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.LoginModule.Activities.CountrySelectActivity;\r\nimport com.brainwellnessspa.MembershipModule.Models.MembershipPlanListModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.SignUpModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.SplashModule.SplashScreenActivity;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityCheckoutGetCodeBinding;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.MembershipModule.Activities.CheckoutOtpActivity.comeRegister;\r\n\r\npublic class CheckoutGetCodeActivity extends AppCompatActivity {\r\n    ActivityCheckoutGetCodeBinding binding;\r\n    String Name = \"\", Code = \"\", MobileNo = \"\";\r\n    Context ctx;\r\n    Activity activity;\r\n    String TrialPeriod;\r\n    private ArrayList<MembershipPlanListModel.Plan> listModelList;\r\n    int position;\r\n    private long mLastClickTime = 0;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_checkout_get_code);\r\n        ctx = CheckoutGetCodeActivity.this;\r\n        activity = CheckoutGetCodeActivity.this;\r\n\r\n        if (getIntent().hasExtra(\"Name\")) {\r\n            Name = getIntent().getStringExtra(CONSTANTS.Name);\r\n            Code = getIntent().getStringExtra(CONSTANTS.Code);\r\n            MobileNo = getIntent().getStringExtra(CONSTANTS.MobileNo);\r\n//            TrialPeriod = getIntent().getStringExtra(\"TrialPeriod\");\r\n//            listModelList = getIntent().getParcelableArrayListExtra(\"PlanData\");\r\n//            position = getIntent().getIntExtra(\"position\", 0);\r\n        }\r\n        binding.edtNumber.addTextChangedListener(signupTextWatcher);\r\n        if (Code.equalsIgnoreCase(\"\") || Name.equalsIgnoreCase(\"\")) {\r\n            binding.tvCountryCode.setText(R.string.code);\r\n            binding.tvCountry.setText(R.string.Australia);\r\n        } else {\r\n            binding.tvCountryCode.setText(Code);\r\n            binding.tvCountry.setText(Name);\r\n        }\r\n        if (MobileNo.equalsIgnoreCase(\"\")) {\r\n            binding.edtNumber.setText(\"\");\r\n        } else {\r\n            binding.edtNumber.setText(MobileNo);\r\n        }\r\n\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n//                Intent i = new Intent(ctx, OrderSummaryActivity.class);\r\n//                i.putParcelableArrayListExtra(\"PlanData\",listModelList);\r\n//                i.putExtra(\"TrialPeriod\",TrialPeriod);\r\n//                i.putExtra(\"position\",position);\r\n//                startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.rlCountrySelect.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            Intent i = new Intent(ctx, CountrySelectActivity.class);\r\n//                i.putParcelableArrayListExtra(\"PlanData\",listModelList);\r\n//                i.putExtra(\"TrialPeriod\",TrialPeriod);\r\n//                i.putExtra(\"position\",position);\r\n            i.putExtra(\"Name\", binding.tvCountry.getText().toString());\r\n            i.putExtra(\"Code\", binding.tvCountryCode.getText().toString());\r\n            i.putExtra(\"MobileNo\", binding.edtNumber.getText().toString());\r\n            i.putExtra(\"Check\", \"0\");\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n        if (comeRegister == 1) {\r\n            binding.edtNumber.requestFocus();\r\n            InputMethodManager imm = (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);\r\n            imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, InputMethodManager.HIDE_IMPLICIT_ONLY);\r\n        }\r\n\r\n        InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n        inputMethodManager.toggleSoftInputFromWindow(binding.edtNumber.getApplicationWindowToken(), InputMethodManager.SHOW_FORCED, 0);\r\n\r\n        binding.btnSendCode.setOnClickListener(view -> prepareData());\r\n    }\r\n\r\n    void prepareData() {\r\n        if (binding.edtNumber.getText().toString().isEmpty()) {\r\n            binding.edtNumber.setFocusable(true);\r\n            binding.edtNumber.requestFocus();\r\n            binding.txtError.setVisibility(View.VISIBLE);\r\n            binding.txtError.setText(getString(R.string.Please_enter_your_mobile_number));\r\n        } else if (binding.edtNumber.getText().toString().length() == 0 || binding.edtNumber.getText().toString().length() < 8 ||\r\n                binding.edtNumber.getText().toString().length() > 10) {\r\n            binding.edtNumber.setFocusable(true);\r\n            binding.edtNumber.requestFocus();\r\n            binding.txtError.setVisibility(View.VISIBLE);\r\n            binding.txtError.setText(getString(R.string.not_valid_mobile_number));\r\n        } else {\r\n            binding.txtError.setVisibility(View.GONE);\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                Call<SignUpModel> listCall = APIClient.getClient().getSignUpDatas(binding.edtNumber.getText().toString(), binding.tvCountryCode.getText().toString(), CONSTANTS.FLAG_ONE, CONSTANTS.FLAG_ZERO, SplashScreenActivity.key);\r\n                listCall.enqueue(new Callback<SignUpModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<SignUpModel> call, Response<SignUpModel> response) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        if (response.isSuccessful()) {\r\n                            SignUpModel loginModel = response.body();\r\n                            if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                Intent i = new Intent(ctx, CheckoutOtpActivity.class);\r\n//                            i.putParcelableArrayListExtra(\"PlanData\",listModelList);\r\n//                            i.putExtra(\"TrialPeriod\",TrialPeriod);\r\n//                            i.putExtra(\"position\",position);\r\n                                i.putExtra(\"MobileNo\", binding.edtNumber.getText().toString());\r\n                                i.putExtra(\"Name\", binding.tvCountry.getText().toString());\r\n                                i.putExtra(\"Code\", binding.tvCountryCode.getText().toString());\r\n                                BWSApplication.showToast(loginModel.getResponseMessage(), ctx);\r\n                                startActivity(i);\r\n                                finish();\r\n                            } else if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                binding.txtError.setVisibility(View.VISIBLE);\r\n                                binding.txtError.setText(loginModel.getResponseMessage());\r\n                            }\r\n                        } else {\r\n                            BWSApplication.showToast(response.message(), ctx);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<SignUpModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    }\r\n                });\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n    private TextWatcher signupTextWatcher = new TextWatcher() {\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            String number = binding.edtNumber.getText().toString().trim();\r\n            if (!number.isEmpty()) {\r\n                binding.btnSendCode.setEnabled(true);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnSendCode.setEnabled(false);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n        }\r\n    };\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutGetCodeActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutGetCodeActivity.java	(date 1602677959924)
@@ -109,17 +109,12 @@
     }
 
     void prepareData() {
-        if (binding.edtNumber.getText().toString().isEmpty()) {
-            binding.edtNumber.setFocusable(true);
-            binding.edtNumber.requestFocus();
-            binding.txtError.setVisibility(View.VISIBLE);
-            binding.txtError.setText(getString(R.string.Please_enter_your_mobile_number));
-        } else if (binding.edtNumber.getText().toString().length() == 0 || binding.edtNumber.getText().toString().length() < 8 ||
+       if (binding.edtNumber.getText().toString().length() == 0 || binding.edtNumber.getText().toString().length() < 8 ||
                 binding.edtNumber.getText().toString().length() > 10) {
             binding.edtNumber.setFocusable(true);
             binding.edtNumber.requestFocus();
             binding.txtError.setVisibility(View.VISIBLE);
-            binding.txtError.setText(getString(R.string.not_valid_mobile_number));
+            binding.txtError.setText(getString(R.string.not_valids_mobile_number));
         } else {
             binding.txtError.setVisibility(View.GONE);
             if (BWSApplication.isNetworkConnected(ctx)) {
Index: app/src/main/java/com/brainwellnessspa/BillingOrderModule/Fragments/BillingAddressFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.BillingOrderModule.Fragments;\r\n\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.BillingAddressSaveModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.BillingAddressViewModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.FragmentBillingAddressBinding;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class BillingAddressFragment extends Fragment {\r\n    FragmentBillingAddressBinding binding;\r\n    String UserID, UserName, UserEmail, UserMobileNumber, UserCountry, UserAddressLine1, UserCity, UserState, UserPostCode;\r\n\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_billing_address, container, false);\r\n        View view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        getPrepareData();\r\n        binding.etName.addTextChangedListener(billingTextWatcher);\r\n        binding.etEmail.addTextChangedListener(billingTextWatcher);\r\n        binding.etMobileNumber.addTextChangedListener(billingTextWatcher);\r\n        binding.etCountry.addTextChangedListener(billingTextWatcher);\r\n        binding.etAddressLine1.addTextChangedListener(billingTextWatcher);\r\n        binding.etCity.addTextChangedListener(billingTextWatcher);\r\n        binding.etState.addTextChangedListener(billingTextWatcher);\r\n        binding.etPostCode.addTextChangedListener(billingTextWatcher);\r\n        binding.btnSave.setOnClickListener(view1 -> {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlEmail.setError(\"\");\r\n                binding.tlMobileNumber.setError(\"\");\r\n                binding.tlCountry.setError(\"\");\r\n                binding.tlAddressLine1.setError(\"\");\r\n                binding.tlCity.setError(\"\");\r\n                binding.tlState.setError(\"\");\r\n                binding.tlPostCode.setError(\"\");\r\n                if (binding.etName.getText().toString().equalsIgnoreCase(\"\")) {\r\n                    binding.tlName.setError(\"Please enter your full name\");\r\n                } else if (binding.etEmail.getText().toString().equalsIgnoreCase(\"\")) {\r\n                    binding.tlEmail.setError(\"Please enter your email address\");\r\n                } else if (!binding.etEmail.getText().toString().equalsIgnoreCase(\"\")\r\n                        && !BWSApplication.isEmailValid(binding.etEmail.getText().toString())) {\r\n                    binding.tlEmail.setError(\"Please provide a valid email address\");\r\n                } else if (binding.etMobileNumber.getText().toString().equalsIgnoreCase(\"\")) {\r\n                    binding.tlMobileNumber.setError(\"please enter mobile number\");\r\n                } else if (binding.etCountry.getText().toString().equalsIgnoreCase(\"\")) {\r\n                    binding.tlCountry.setError(\"Please provide valid country details\");\r\n                } else if (binding.etAddressLine1.getText().toString().equalsIgnoreCase(\"\")) {\r\n                    binding.tlAddressLine1.setError(\"Please provide the address details\");\r\n                } else if (binding.etCity.getText().toString().equalsIgnoreCase(\"\")) {\r\n                    binding.tlCity.setError(\"Please provide suburb/town/city details\");\r\n                } else if (binding.etState.getText().toString().equalsIgnoreCase(\"\")) {\r\n                    binding.tlState.setError(\"Please provide the state you reside in\");\r\n                } else if (binding.etPostCode.getText().toString().equalsIgnoreCase(\"\")) {\r\n                    binding.tlPostCode.setError(\"Please provide a postal code\");\r\n                } else {\r\n                    BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    Call<BillingAddressSaveModel> listCall = APIClient.getClient().getBillingAddressSave(UserID,\r\n                            binding.etName.getText().toString(), binding.etEmail.getText().toString(),\r\n                            binding.etCountry.getText().toString(), binding.etAddressLine1.getText().toString(),\r\n                            binding.etAddressLine2.getText().toString(), binding.etCity.getText().toString(),\r\n                            binding.etState.getText().toString(),\r\n                            binding.etPostCode.getText().toString());\r\n                    listCall.enqueue(new Callback<BillingAddressSaveModel>() {\r\n                        @Override\r\n                        public void onResponse(Call<BillingAddressSaveModel> call, Response<BillingAddressSaveModel> response) {\r\n                            if (response.isSuccessful()) {\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                                BillingAddressSaveModel listModel = response.body();\r\n                                BWSApplication.showToast(listModel.getResponseMessage(), getActivity());\r\n                                getActivity().finish();\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFailure(Call<BillingAddressSaveModel> call, Throwable t) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        });\r\n        return view;\r\n    }\r\n\r\n    private void getPrepareData() {\r\n        BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n        Call<BillingAddressViewModel> listCall = APIClient.getClient().getBillingAddressView(UserID);\r\n        listCall.enqueue(new Callback<BillingAddressViewModel>() {\r\n            @Override\r\n            public void onResponse(Call<BillingAddressViewModel> call, Response<BillingAddressViewModel> response) {\r\n                if (response.isSuccessful()) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    BillingAddressViewModel listModel = response.body();\r\n                    if (listModel.getResponseData().getName().equalsIgnoreCase(\"\") ||\r\n                            listModel.getResponseData().getName().equalsIgnoreCase(\" \") ||\r\n                            listModel.getResponseData().getName() == null) {\r\n                        binding.etName.setText(\"\");\r\n                    } else {\r\n                        binding.etName.setText(listModel.getResponseData().getName());\r\n                    }\r\n                    UserName = listModel.getResponseData().getName();\r\n                    UserEmail = listModel.getResponseData().getEmail();\r\n                    UserMobileNumber = listModel.getResponseData().getPhoneNumber();\r\n                    UserCountry = listModel.getResponseData().getCountry();\r\n                    UserAddressLine1 = listModel.getResponseData().getAddress1();\r\n                    UserCity = listModel.getResponseData().getSuburb();\r\n                    UserState = listModel.getResponseData().getState();\r\n                    UserPostCode = listModel.getResponseData().getPostcode();\r\n                    binding.etEmail.setText(listModel.getResponseData().getEmail());\r\n                    binding.etMobileNumber.setText(listModel.getResponseData().getPhoneNumber());\r\n                    binding.etMobileNumber.setEnabled(false);\r\n                    binding.etMobileNumber.setClickable(false);\r\n                    binding.etCountry.setText(listModel.getResponseData().getCountry());\r\n                    binding.etAddressLine1.setText(listModel.getResponseData().getAddress1());\r\n                    binding.etAddressLine2.setText(listModel.getResponseData().getAddress2());\r\n                    binding.etCity.setText(listModel.getResponseData().getSuburb());\r\n                    binding.etState.setText(listModel.getResponseData().getState());\r\n                    binding.etPostCode.setText(listModel.getResponseData().getPostcode());\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<BillingAddressViewModel> call, Throwable t) {\r\n                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            }\r\n        });\r\n    }\r\n\r\n    private TextWatcher billingTextWatcher = new TextWatcher() {\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            String Name = binding.etName.getText().toString().trim();\r\n            String Email = binding.etEmail.getText().toString().trim();\r\n            String MobileNumber = binding.etMobileNumber.getText().toString().trim();\r\n            String Country = binding.etCountry.getText().toString().trim();\r\n            String AddressLine1 = binding.etAddressLine1.getText().toString().trim();\r\n            String City = binding.etCity.getText().toString().trim();\r\n            String State = binding.etState.getText().toString().trim();\r\n            String PostCode = binding.etPostCode.getText().toString().trim();\r\n\r\n            if (Name.equalsIgnoreCase(UserName) && Email.equalsIgnoreCase(UserEmail) && MobileNumber.equalsIgnoreCase(UserMobileNumber)\r\n                    && Country.equalsIgnoreCase(UserCountry) && AddressLine1.equalsIgnoreCase(UserAddressLine1)\r\n                    && City.equalsIgnoreCase(UserCity) && State.equalsIgnoreCase(UserState)\r\n                    && PostCode.equalsIgnoreCase(UserPostCode)) {\r\n                binding.btnSave.setEnabled(false);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            } else if (!Name.equalsIgnoreCase(UserName)) {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else if (!Email.equalsIgnoreCase(UserEmail)) {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else if (!MobileNumber.equalsIgnoreCase(UserMobileNumber)) {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else if (!Country.equalsIgnoreCase(UserCountry)) {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else if (!AddressLine1.equalsIgnoreCase(UserAddressLine1)) {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else if (!City.equalsIgnoreCase(UserCity)) {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else if (!State.equalsIgnoreCase(UserState)) {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else if (!PostCode.equalsIgnoreCase(UserPostCode)) {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n        }\r\n    };\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/BillingOrderModule/Fragments/BillingAddressFragment.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/BillingOrderModule/Fragments/BillingAddressFragment.java	(date 1602680368708)
@@ -57,24 +57,24 @@
                 binding.tlState.setError("");
                 binding.tlPostCode.setError("");
                 if (binding.etName.getText().toString().equalsIgnoreCase("")) {
-                    binding.tlName.setError("Please enter your full name");
+                    binding.tlName.setError("Name is required");
                 } else if (binding.etEmail.getText().toString().equalsIgnoreCase("")) {
-                    binding.tlEmail.setError("Please enter your email address");
+                    binding.tlEmail.setError("Email address is required");
                 } else if (!binding.etEmail.getText().toString().equalsIgnoreCase("")
                         && !BWSApplication.isEmailValid(binding.etEmail.getText().toString())) {
-                    binding.tlEmail.setError("Please provide a valid email address");
+                    binding.tlEmail.setError("Please enter a valid email address");
                 } else if (binding.etMobileNumber.getText().toString().equalsIgnoreCase("")) {
                     binding.tlMobileNumber.setError("please enter mobile number");
                 } else if (binding.etCountry.getText().toString().equalsIgnoreCase("")) {
-                    binding.tlCountry.setError("Please provide valid country details");
+                    binding.tlCountry.setError("Please enter a valid country");
                 } else if (binding.etAddressLine1.getText().toString().equalsIgnoreCase("")) {
-                    binding.tlAddressLine1.setError("Please provide the address details");
+                    binding.tlAddressLine1.setError("Address Line is required");
                 } else if (binding.etCity.getText().toString().equalsIgnoreCase("")) {
-                    binding.tlCity.setError("Please provide suburb/town/city details");
+                    binding.tlCity.setError("Suburb / Town / City is required");
                 } else if (binding.etState.getText().toString().equalsIgnoreCase("")) {
-                    binding.tlState.setError("Please provide the state you reside in");
+                    binding.tlState.setError("State is required");
                 } else if (binding.etPostCode.getText().toString().equalsIgnoreCase("")) {
-                    binding.tlPostCode.setError("Please provide a postal code");
+                    binding.tlPostCode.setError("Postcode is required");
                 } else {
                     BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
                     Call<BillingAddressSaveModel> listCall = APIClient.getClient().getBillingAddressSave(UserID,
Index: app/src/main/java/com/brainwellnessspa/BillingOrderModule/Activities/CancelMembershipActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.BillingOrderModule.Activities;\r\n\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport com.google.android.youtube.player.YouTubeBaseActivity;\r\nimport com.google.android.youtube.player.YouTubeInitializationResult;\r\nimport com.google.android.youtube.player.YouTubePlayer;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CancelPlanModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.AppUtils;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityCancelMembershipBinding;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\n\r\npublic class CancelMembershipActivity extends YouTubeBaseActivity implements\r\n        YouTubePlayer.OnInitializedListener {\r\n    ActivityCancelMembershipBinding binding;\r\n    Context ctx;\r\n    String UserID, CancelId = \"\";\r\n    Activity activity;\r\n    private static final int RECOVERY_DIALOG_REQUEST = 1;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_cancel_membership);\r\n        ctx = CancelMembershipActivity.this;\r\n        activity = CancelMembershipActivity.this;\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        binding.llBack.setOnClickListener(view -> {\r\n            finish();\r\n//            resumeMedia();\r\n//            isPause = false;\r\n        });\r\n\r\n        if (isMediaStart) {\r\n            pauseMedia();\r\n        } else {\r\n        }\r\n\r\n        binding.youtubeView.initialize(\"AIzaSyD43ZM6bESb_pdSPzgcuCzKy8yD_45mlT8\", this);\r\n\r\n        binding.cbOne.setOnClickListener(view -> {\r\n            binding.cbOne.setChecked(true);\r\n            binding.cbTwo.setChecked(false);\r\n            binding.cbThree.setChecked(false);\r\n            binding.cbFour.setChecked(false);\r\n            CancelId = \"1\";\r\n            binding.edtCancelBox.setVisibility(View.GONE);\r\n            binding.edtCancelBox.setText(\"\");\r\n        });\r\n\r\n        binding.cbTwo.setOnClickListener(view -> {\r\n            binding.cbOne.setChecked(false);\r\n            binding.cbTwo.setChecked(true);\r\n            binding.cbThree.setChecked(false);\r\n            binding.cbFour.setChecked(false);\r\n            CancelId = \"2\";\r\n            binding.edtCancelBox.setVisibility(View.GONE);\r\n            binding.edtCancelBox.setText(\"\");\r\n        });\r\n\r\n        binding.cbThree.setOnClickListener(view -> {\r\n            binding.cbOne.setChecked(false);\r\n            binding.cbTwo.setChecked(false);\r\n            binding.cbThree.setChecked(true);\r\n            binding.cbFour.setChecked(false);\r\n            CancelId = \"3\";\r\n            binding.edtCancelBox.setVisibility(View.GONE);\r\n            binding.edtCancelBox.setText(\"\");\r\n        });\r\n\r\n        binding.cbFour.setOnClickListener(view -> {\r\n            binding.cbOne.setChecked(false);\r\n            binding.cbTwo.setChecked(false);\r\n            binding.cbThree.setChecked(false);\r\n            binding.cbFour.setChecked(true);\r\n            CancelId = \"4\";\r\n            binding.edtCancelBox.setVisibility(View.VISIBLE);\r\n        });\r\n\r\n        binding.btnCancelSubscrible.setOnClickListener(view -> {\r\n            if (isMediaStart) {\r\n                pauseMedia();\r\n            } else {\r\n\r\n            }\r\n            if (CancelId.equalsIgnoreCase(\"4\") &&\r\n                    binding.edtCancelBox.getText().toString().equalsIgnoreCase(\"\")) {\r\n                BWSApplication.showToast(\"Please enter reason\", ctx);\r\n            } else {\r\n                final Dialog dialog = new Dialog(ctx);\r\n                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                dialog.setContentView(R.layout.cancel_membership);\r\n                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                final RelativeLayout tvconfirm = dialog.findViewById(R.id.tvconfirm);\r\n\r\n                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                        dialog.dismiss();\r\n                        if (isMediaStart) {\r\n                            pauseMedia();\r\n                        } else {\r\n\r\n                        }\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n\r\n                tvconfirm.setOnClickListener(v -> {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        Call<CancelPlanModel> listCall = APIClient.getClient().getCancelPlan(UserID, CancelId, binding.edtCancelBox.getText().toString());\r\n                        listCall.enqueue(new Callback<CancelPlanModel>() {\r\n                            @Override\r\n                            public void onResponse(Call<CancelPlanModel> call, Response<CancelPlanModel> response) {\r\n                                if (response.isSuccessful()) {\r\n                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    CancelPlanModel model = response.body();\r\n                                    BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                                    dialog.dismiss();\r\n                                    resumeMedia();\r\n                                    isPause = false;\r\n                                    finish();\r\n                                }\r\n                            }\r\n\r\n                            @Override\r\n                            public void onFailure(Call<CancelPlanModel> call, Throwable t) {\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                });\r\n\r\n                tvGoBack.setOnClickListener(v -> {\r\n                    dialog.dismiss();\r\n                    if (isMediaStart) {\r\n                        pauseMedia();\r\n                    } else {\r\n\r\n                    }\r\n                });\r\n                dialog.show();\r\n                dialog.setCancelable(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        if (isMediaStart) {\r\n            pauseMedia();\r\n        } else {\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        finish();\r\n//        resumeMedia();\r\n//        isPause = false;\r\n    }\r\n\r\n    @Override\r\n    public void onInitializationSuccess(YouTubePlayer.Provider provider, YouTubePlayer\r\n            youTubePlayer, boolean wasRestored) {\r\n        if (!wasRestored) {\r\n            youTubePlayer.cueVideo(\"y1rfRW6WX08\");\r\n            youTubePlayer.setPlayerStyle(YouTubePlayer.PlayerStyle.DEFAULT);\r\n      /*      PlayerUIController uiController = youTubePlayerView.getPlayerUIController();\r\n            player.showVideoTitle(false);*/\r\n            youTubePlayer.setShowFullscreenButton(true);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onInitializationFailure(YouTubePlayer.Provider provider, YouTubeInitializationResult errorReason) {\r\n        if (errorReason.isUserRecoverableError()) {\r\n            errorReason.getErrorDialog(this, RECOVERY_DIALOG_REQUEST).show();\r\n        } else {\r\n            String errorMessage = String.format(\r\n                    getString(R.string.error_player), errorReason.toString());\r\n            BWSApplication.showToast(errorMessage, this);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        if (requestCode == RECOVERY_DIALOG_REQUEST) {\r\n            getYouTubePlayerProvider().initialize(\"AIzaSyD43ZM6bESb_pdSPzgcuCzKy8yD_45mlT8\", this);\r\n        }\r\n    }\r\n\r\n    private YouTubePlayer.Provider getYouTubePlayerProvider() {\r\n        return binding.youtubeView;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/BillingOrderModule/Activities/CancelMembershipActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/BillingOrderModule/Activities/CancelMembershipActivity.java	(date 1602682017211)
@@ -112,7 +112,7 @@
             }
             if (CancelId.equalsIgnoreCase("4") &&
                     binding.edtCancelBox.getText().toString().equalsIgnoreCase("")) {
-                BWSApplication.showToast("Please enter reason", ctx);
+                BWSApplication.showToast("Cancellation reason is required", ctx);
             } else {
                 final Dialog dialog = new Dialog(ctx);
                 dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
Index: app/src/main/java/com/brainwellnessspa/DownloadModule/Adapters/PlaylistsDownloadsAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DownloadModule.Adapters;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Handler;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.databinding.AudioDownloadsLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.DownloadsLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isRemoved;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.disclaimer;\r\n\r\npublic class PlaylistsDownloadsAdapter extends RecyclerView.Adapter<PlaylistsDownloadsAdapter.MyViewHolder> {\r\n    FragmentActivity ctx;\r\n    String UserID;\r\n    FrameLayout progressBarHolder;\r\n    ProgressBar ImgV;\r\n    List<DownloadAudioDetails> playlistWiseAudioDetails;\r\n    List<DownloadAudioDetails> oneAudioDetailsList;\r\n    List<DownloadPlaylistDetails> playlistList;\r\n    LinearLayout llError;\r\n    TextView tvFound;\r\n    int count;\r\n    RecyclerView rvDownloadsList;\r\n    Runnable UpdateSongTime1;\r\n    Handler handler1;\r\n    List<String> fileNameList = new ArrayList<>(), playlistDownloadId = new ArrayList<>(), remainAudio = new ArrayList<>();\r\n    private List<DownloadPlaylistDetails> listModelList;\r\n\r\n    public PlaylistsDownloadsAdapter(List<DownloadPlaylistDetails> listModelList, FragmentActivity ctx, String UserID,\r\n                                     FrameLayout progressBarHolder, ProgressBar ImgV, LinearLayout llError, TextView tvFound, RecyclerView rvDownloadsList) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.UserID = UserID;\r\n        this.progressBarHolder = progressBarHolder;\r\n        this.ImgV = ImgV;\r\n        this.llError = llError;\r\n        this.tvFound = tvFound;\r\n        this.rvDownloadsList = rvDownloadsList;\r\n        handler1 = new Handler();\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        oneAudioDetailsList = new ArrayList<>();\r\n//        getDownloadData();\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        AudioDownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.audio_downloads_layout, parent, false);\r\n        return new MyViewHolder(v);\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getPlaylistName());\r\n        UpdateSongTime1 = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                for (int i = 0; i < listModelList.size(); i++) {\r\n                    getMediaByPer(listModelList.get(i).getPlaylistID(), listModelList.get(i).getTotalAudio(), holder.binding.pbProgress);\r\n                }\r\n\r\n            }\r\n        };\r\n     /*   if(fileNameList.size()!=0){\r\n            if(playlistDownloadId.contains(listModelList.get(position).getPlaylistID())){\r\n                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                handler1.postDelayed(UpdateSongTime1,500);\r\n            }else{\r\n                holder.binding.pbProgress.setVisibility(View.GONE);\r\n            }\r\n        }*/\r\n        getMediaByPer(listModelList.get(position).getPlaylistID(), listModelList.get(position).getTotalAudio(), holder.binding.pbProgress);\r\n        if (listModelList.get(position).getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                listModelList.get(position).getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                        listModelList.get(position).getTotalhour().equalsIgnoreCase(\"\")\r\n                        && listModelList.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n            holder.binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n        } else {\r\n            if (listModelList.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                holder.binding.tvTime.setText(listModelList.get(position).getTotalAudio() + \" Audio | \"\r\n                        + listModelList.get(position).getTotalhour() + \"h 0m\");\r\n            } else {\r\n                holder.binding.tvTime.setText(listModelList.get(position).getTotalAudio() +\r\n                        \" Audios | \" + listModelList.get(position).getTotalhour() + \"h \" + listModelList.get(position).getTotalminute() + \"m\");\r\n            }\r\n        }\r\n\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                1, 1, 0.12f, 0);\r\n        holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        Glide.with(ctx).load(listModelList.get(position).getPlaylistImage()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n        holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                i.putExtra(\"ComeFrom\", \"Plan\");\r\n                ctx.startActivity(i);\r\n            }if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n            } else if (IsLock.equalsIgnoreCase(\"0\")\r\n                    || IsLock.equalsIgnoreCase(\"\")) {\r\n                comefromDownload = \"1\";\r\n                playlistWiseAudioDetails = GetMedia(listModelList.get(position).getPlaylistID());\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n        /*        Intent i = new Intent(ctx, DownloadedPlaylist.class);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                i.putExtra(\"PlaylistID\", listModelList.get(position).getPlaylistID());\r\n                i.putExtra(\"PlaylistName\", listModelList.get(position).getPlaylistName());\r\n                i.putExtra(\"PlaylistImage\", listModelList.get(position).getPlaylistImage());\r\n                i.putExtra(\"PlaylistImage\", listModelList.get(position).getPlaylistImage());\r\n                ctx.startActivity(i);\r\n                ctx.finish();*/\r\n            }\r\n        });\r\n        holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n            final Dialog dialog = new Dialog(ctx);\r\n            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n            dialog.setContentView(R.layout.logout_layout);\r\n            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));\r\n            dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n            final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n            final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n            final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n            final Button Btn = dialog.findViewById(R.id.Btn);\r\n            tvTitle.setText(\"Remove audio\");\r\n            tvHeader.setText(\"Are you sure you want to remove \" + listModelList.get(position).getPlaylistName() +\" playlist?\");\r\n            Btn.setText(\"Confirm\");\r\n            dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                    dialog.dismiss();\r\n                }\r\n                return false;\r\n            });\r\n\r\n            Btn.setOnClickListener(v -> {\r\n                playlistWiseAudioDetails = GetPlaylistMedia(listModelList.get(position).getPlaylistID());\r\n                dialog.dismiss();\r\n            });\r\n\r\n            tvGoBack.setOnClickListener(v -> dialog.dismiss());\r\n            dialog.show();\r\n            dialog.setCancelable(false);\r\n        });\r\n    }\r\n\r\n    private void getMediaByPer(String playlistID, String totalAudio, ProgressBar pbProgress) {\r\n        class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                count = DatabaseClient.getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getCountDownloadProgress(\"Compete\", playlistID);\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (count < Integer.parseInt(totalAudio)) {\r\n                    long progressPercent = count * 100 / Integer.parseInt(totalAudio);\r\n                    int downloadProgress1 = (int) progressPercent;\r\n                    pbProgress.setVisibility(View.VISIBLE);\r\n                    pbProgress.setProgress(downloadProgress1);\r\n                    handler1.postDelayed(UpdateSongTime1, 500);\r\n                } else {\r\n                    pbProgress.setVisibility(View.GONE);\r\n                    handler1.removeCallbacks(UpdateSongTime1);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getMediaByPer st = new getMediaByPer();\r\n        st.execute();\r\n    }\r\n\r\n  /*  void getDownloadData() {\r\n        SharedPreferences sharedx = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            fileNameList = gson.fromJson(json, type);\r\n            for (int i = 0; i < fileNameList.size(); i++) {\r\n                if (playlistDownloadId.get(i).equalsIgnoreCase(listModelList.get(i).getPlaylistID())) {\r\n                    remainAudio.add(playlistDownloadId.get(i));\r\n                }\r\n            }\r\n        } else {\r\n            fileNameList = new ArrayList<>();\r\n            playlistDownloadId = new ArrayList<>();\r\n            remainAudio = new ArrayList<>();\r\n        }\r\n    }*/\r\n\r\n    public void GetSingleMedia(String AudioFile, Context ctx, String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(AudioFile);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.size() == 1) {\r\n                        FileUtils.deleteDownloadedFile(ctx, oneAudioDetailsList.get(0).getName());\r\n                    }\r\n                }\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia sts = new GetMedia();\r\n        sts.execute();\r\n    }\r\n\r\n    private void deleteDownloadFile(Context applicationContext, String PlaylistId) {\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(applicationContext)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deleteByPlaylistId(PlaylistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                notifyItemRemoved(position);\r\n                deletePlaylist(PlaylistId);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void deletePlaylist(String playlistId) {\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deletePlaylist(playlistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                playlistList = new ArrayList<>();\r\n                GetAllMedia(ctx);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void GetAllMedia(FragmentActivity activity) {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllPlaylist();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (playlistList.size() != 0) {\r\n                    llError.setVisibility(View.GONE);\r\n                    tvFound.setVisibility(View.GONE);\r\n                    PlaylistsDownloadsAdapter adapter = new PlaylistsDownloadsAdapter(playlistList, ctx, UserID, progressBarHolder, ImgV, llError, tvFound, rvDownloadsList);\r\n                    rvDownloadsList.setAdapter(adapter);\r\n                } else {\r\n                    llError.setVisibility(View.VISIBLE);\r\n                    tvFound.setVisibility(View.VISIBLE);\r\n                    rvDownloadsList.setVisibility(View.GONE);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetTask getTask = new GetTask();\r\n        getTask.execute();\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetMedia(String playlistID) {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                if(queuePlay){\r\n                    int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                    Gson gson = new Gson();\r\n                    String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                    if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                        Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                        }.getType();\r\n                        addToQueueModelList = gson.fromJson(json1, type1);\r\n                    }\r\n                    addToQueueModelList.remove(position1);\r\n                    SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared2.edit();\r\n                    String json = gson.toJson(addToQueueModelList);\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                    editor.commit();\r\n\r\n                }\r\n                player = 1;\r\n                if (isPrepare || isMediaStart || isPause) {\r\n                    stopMedia();\r\n                }\r\n                isPause = false;\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n                disclaimer = false;\r\n                isRemoved = false;\r\n                SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(playlistWiseAudioDetails);\r\n                editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, playlistID);\r\n                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"Downloadlist\");\r\n                editor.commit();\r\n                try {\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = ctx.getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetPlaylistMedia(String playlistID) {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                deleteDownloadFile(ctx.getApplicationContext(), playlistID);\r\n                for (int i = 0; i < playlistWiseAudioDetails.size(); i++) {\r\n                    GetSingleMedia(playlistWiseAudioDetails.get(i).getAudioFile(), ctx.getApplicationContext(), playlistID);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return listModelList.size();\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        AudioDownloadsLayoutBinding binding;\r\n\r\n        public MyViewHolder(AudioDownloadsLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DownloadModule/Adapters/PlaylistsDownloadsAdapter.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/DownloadModule/Adapters/PlaylistsDownloadsAdapter.java	(date 1602683135026)
@@ -194,7 +194,7 @@
             final TextView tvTitle = dialog.findViewById(R.id.tvTitle);
             final Button Btn = dialog.findViewById(R.id.Btn);
             tvTitle.setText("Remove audio");
-            tvHeader.setText("Are you sure you want to remove " + listModelList.get(position).getPlaylistName() +" playlist?");
+            tvHeader.setText("Are you sure you want to remove the " + listModelList.get(position).getPlaylistName() +" from downloads??");
             Btn.setText("Confirm");
             dialog.setOnKeyListener((v, keyCode, event) -> {
                 if (keyCode == KeyEvent.KEYCODE_BACK) {
Index: app/src/main/res/layout/activity_faq.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        xmlns:tools=\"http://schemas.android.com/tools\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/light_white\"\r\n        tools:context=\"com.brainwellnessspa.FaqModule.Activities.FaqActivity\">\r\n\r\n        <RelativeLayout\r\n            android:id=\"@+id/rlLayout\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"@dimen/_56sdp\">\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/llBack\"\r\n                android:layout_width=\"42dp\"\r\n                android:layout_height=\"match_parent\"\r\n                android:layout_centerVertical=\"true\"\r\n                android:gravity=\"center\">\r\n\r\n                <ImageView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:src=\"@drawable/ic_left_arrow_icon\"\r\n                    app:tint=\"@color/black\" />\r\n\r\n            </LinearLayout>\r\n\r\n            <TextView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_centerVertical=\"true\"\r\n                android:fontFamily=\"@font/montserrat_bold\"\r\n                android:gravity=\"center\"\r\n                android:text=\"@string/FAQ\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"@dimen/_15sdp\" />\r\n\r\n        </RelativeLayout>\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_below=\"@id/rlLayout\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <androidx.cardview.widget.CardView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                android:layout_marginTop=\"@dimen/_10sdp\"\r\n                android:elevation=\"3.6dp\">\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llAudio\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:orientation=\"horizontal\"\r\n                    android:paddingHorizontal=\"@dimen/_14sdp\"\r\n                    android:paddingVertical=\"@dimen/_8sdp\"\r\n                    android:weightSum=\"1\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_weight=\"0.83\"\r\n                        android:gravity=\"center_vertical\"\r\n                        android:orientation=\"vertical\">\r\n\r\n                        <TextView\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:fontFamily=\"@font/montserrat_medium\"\r\n                            android:gravity=\"center_vertical\"\r\n                            android:text=\"@string/Audio\"\r\n                            android:textColor=\"@color/light_black\"\r\n                            android:textSize=\"@dimen/_14sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <RelativeLayout\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_weight=\"0.17\">\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_40sdp\"\r\n                            android:layout_height=\"@dimen/_40sdp\"\r\n                            android:layout_alignParentRight=\"true\"\r\n                            android:paddingVertical=\"@dimen/_2sdp\"\r\n                            android:src=\"@drawable/ic_back_black_icon\"\r\n                            app:tint=\"@color/dark_blue_gray\" />\r\n                    </RelativeLayout>\r\n                </LinearLayout>\r\n            </androidx.cardview.widget.CardView>\r\n\r\n            <androidx.cardview.widget.CardView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                android:layout_marginTop=\"@dimen/_16sdp\"\r\n                android:elevation=\"3.6dp\">\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llPlaylists\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:orientation=\"horizontal\"\r\n                    android:paddingHorizontal=\"@dimen/_14sdp\"\r\n                    android:paddingVertical=\"@dimen/_8sdp\"\r\n                    android:weightSum=\"1\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_weight=\"0.83\"\r\n                        android:gravity=\"center_vertical\"\r\n                        android:orientation=\"vertical\">\r\n\r\n                        <TextView\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:fontFamily=\"@font/montserrat_medium\"\r\n                            android:gravity=\"center_vertical\"\r\n                            android:text=\"@string/Playlist\"\r\n                            android:textColor=\"@color/light_black\"\r\n                            android:textSize=\"@dimen/_14sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <RelativeLayout\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_weight=\"0.17\">\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_40sdp\"\r\n                            android:layout_height=\"@dimen/_40sdp\"\r\n                            android:layout_alignParentRight=\"true\"\r\n                            android:paddingVertical=\"@dimen/_2sdp\"\r\n                            android:src=\"@drawable/ic_back_black_icon\"\r\n                            app:tint=\"@color/dark_blue_gray\" />\r\n                    </RelativeLayout>\r\n                </LinearLayout>\r\n            </androidx.cardview.widget.CardView>\r\n\r\n            <androidx.cardview.widget.CardView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                android:layout_marginTop=\"@dimen/_16sdp\"\r\n                android:layout_marginBottom=\"@dimen/_20sdp\"\r\n                android:elevation=\"3.6dp\">\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llHelp\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:orientation=\"horizontal\"\r\n                    android:paddingHorizontal=\"@dimen/_14sdp\"\r\n                    android:paddingVertical=\"@dimen/_8sdp\"\r\n                    android:weightSum=\"1\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_weight=\"0.83\"\r\n                        android:gravity=\"center_vertical\"\r\n                        android:orientation=\"vertical\">\r\n\r\n                        <TextView\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:fontFamily=\"@font/montserrat_medium\"\r\n                            android:gravity=\"center_vertical\"\r\n                            android:text=\"@string/Help\"\r\n                            android:textColor=\"@color/light_black\"\r\n                            android:textSize=\"@dimen/_14sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <RelativeLayout\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_weight=\"0.17\">\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_40sdp\"\r\n                            android:layout_height=\"@dimen/_40sdp\"\r\n                            android:layout_alignParentRight=\"true\"\r\n                            android:paddingVertical=\"@dimen/_2sdp\"\r\n                            android:src=\"@drawable/ic_back_black_icon\"\r\n                            app:tint=\"@color/dark_blue_gray\" />\r\n                    </RelativeLayout>\r\n                </LinearLayout>\r\n            </androidx.cardview.widget.CardView>\r\n        </LinearLayout>\r\n\r\n\r\n        <TextView\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_alignParentBottom=\"true\"\r\n            android:background=\"@color/discalimer_gray\"\r\n            android:fontFamily=\"@font/montserrat_italic\"\r\n            android:justificationMode=\"inter_word\"\r\n            android:paddingHorizontal=\"@dimen/_16sdp\"\r\n            android:paddingTop=\"@dimen/_20sdp\"\r\n            android:paddingBottom=\"@dimen/_20sdp\"\r\n            android:text=\"@string/disclaimer\"\r\n            android:textColor=\"@color/black\"\r\n            android:textSize=\"@dimen/_13sdp\" />\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:gravity=\"center\"\r\n            android:padding=\"@dimen/_60sdp\">\r\n\r\n            <ProgressBar\r\n                android:id=\"@+id/progressBar\"\r\n                android:layout_width=\"@dimen/_50sdp\"\r\n                android:layout_height=\"@dimen/_50sdp\"\r\n                android:indeterminateTint=\"@color/blue\"\r\n                android:scaleType=\"centerInside\"\r\n                android:visibility=\"gone\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <FrameLayout\r\n            android:id=\"@+id/progressBarHolder\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:alpha=\"0.4\"\r\n            android:animateLayoutChanges=\"true\"\r\n            android:background=\"#C0000000\"\r\n            android:visibility=\"gone\" />\r\n    </RelativeLayout>\r\n\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_faq.xml	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/res/layout/activity_faq.xml	(date 1602683658433)
@@ -174,7 +174,7 @@
                             android:layout_height="wrap_content"
                             android:fontFamily="@font/montserrat_medium"
                             android:gravity="center_vertical"
-                            android:text="@string/Help"
+                            android:text="@string/General"
                             android:textColor="@color/light_black"
                             android:textSize="@dimen/_14sdp" />
                     </LinearLayout>
Index: app/src/main/java/com/brainwellnessspa/DownloadModule/Adapters/AudioDownlaodsAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DownloadModule.Adapters;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Handler;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.AudioDownloadsLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isRemoved;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadProgress;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.disclaimer;\r\n\r\npublic class AudioDownlaodsAdapter extends RecyclerView.Adapter<AudioDownlaodsAdapter.MyViewHolder> {\r\n    public static String comefromDownload = \"\";\r\n    FragmentActivity ctx;\r\n    String UserID;\r\n    FrameLayout progressBarHolder;\r\n    ProgressBar ImgV;\r\n    LinearLayout llError;\r\n    RecyclerView rvDownloadsList;\r\n    TextView tvFound;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    Runnable UpdateSongTime1;\r\n    List<String> fileNameList = new ArrayList<>(), playlistDownloadId = new ArrayList<>();\r\n    private List<DownloadAudioDetails> listModelList;\r\n    private Handler handler1;\r\n\r\n    public AudioDownlaodsAdapter(List<DownloadAudioDetails> listModelList, FragmentActivity ctx, String UserID,\r\n                                 FrameLayout progressBarHolder, ProgressBar ImgV, LinearLayout llError, RecyclerView rvDownloadsList, TextView tvFound) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.UserID = UserID;\r\n        this.progressBarHolder = progressBarHolder;\r\n        this.ImgV = ImgV;\r\n        this.llError = llError;\r\n        this.rvDownloadsList = rvDownloadsList;\r\n        this.tvFound = tvFound;\r\n        handler1 = new Handler();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        SharedPreferences sharedx = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type = new TypeToken<List<String>>() {\r\n            }.getType();\r\n//            fileNameList = gson.fromJson(json, type);\r\n        }\r\n        getDownloadData();\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        AudioDownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.audio_downloads_layout, parent, false);\r\n        return new MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        UpdateSongTime1 = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                for (int f = 0; f < listModelList.size(); f++) {\r\n                    if (fileNameList.size() != 0) {\r\n                        for (int i = 0; i < fileNameList.size(); i++) {\r\n                            if (fileNameList.get(i).equalsIgnoreCase(listModelList.get(f).getName())) {\r\n                                if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(listModelList.get(f).getName())) {\r\n                                    if (downloadProgress <= 100) {\r\n                                        notifyItemChanged(f);\r\n                                         /*   holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.GONE);*/\r\n                                    } else {\r\n                                        holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                        //                                            handler2.removeCallbacks(UpdateSongTime2);\r\n                                        getDownloadData();\r\n                                    }\r\n                                } else {\r\n                                    notifyItemChanged(f);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (downloadProgress == 0) {\r\n                    notifyDataSetChanged();\r\n                    getDownloadData();\r\n                }\r\n                handler1.postDelayed(this, 300);\r\n            }\r\n        };\r\n    /*    if (fileNameList.size() != 0) {\r\n            if (fileNameList.contains(listModelList.get(position).getName())) {\r\n                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                handler1.postDelayed(UpdateSongTime1, 500);\r\n            } else {\r\n                holder.binding.pbProgress.setVisibility(View.INVISIBLE);\r\n            }\r\n        }else {\r\n            holder.binding.pbProgress.setVisibility(View.INVISIBLE);\r\n        }*/\r\n        if (fileNameList.size() != 0) {\r\n             /*   for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                        isDownloading++;\r\n                        break;\r\n                    }else{\r\n                        holder.binding.pbProgress.setVisibility(View.GONE);\r\n                    }\r\n                }*/\r\n            for (int i = 0; i < fileNameList.size(); i++) {\r\n                if (fileNameList.get(i).equalsIgnoreCase(listModelList.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                    if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(listModelList.get(position).getName())) {\r\n                        if (downloadProgress <= 100) {\r\n                            if (downloadProgress == 100) {\r\n                                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                            } else {\r\n                                holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            }\r\n                        } else {\r\n                            holder.binding.pbProgress.setVisibility(View.GONE);\r\n//                                handler2.removeCallbacks(UpdateSongTime2);\r\n                        }\r\n                    } else {\r\n                        holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                        handler1.postDelayed(UpdateSongTime1, 300);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n        }\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        holder.binding.tvTime.setText(listModelList.get(position).getAudioDuration());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                1, 1, 0.12f, 0);\r\n        holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n        holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n        comefromDownload = \"1\";\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        }else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                i.putExtra(\"ComeFrom\", \"Plan\");\r\n                ctx.startActivity(i);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                comefromDownload = \"1\";\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n          /*      DownloadMedia downloadMedia = new DownloadMedia(ctx.getApplicationContext());\r\n                try {\r\n                    FileDescriptor fileDescriptor = FileUtils.getTempFileDescriptor(ctx.getApplicationContext(), downloadMedia.decrypt(listModelList.get(position).getName()));\r\n                    play2(fileDescriptor);\r\n                    playMedia();\r\n\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }*/\r\n                try {\r\n                    SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    if(queuePlay){\r\n                        int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                        Gson gson = new Gson();\r\n                        String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                            }.getType();\r\n                            addToQueueModelList = gson.fromJson(json1, type1);\r\n                        }\r\n                        addToQueueModelList.remove(position1);\r\n                        SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared2.edit();\r\n                        String json = gson.toJson(addToQueueModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                        editor.commit();\r\n\r\n                    }\r\n                    player = 1;\r\n                    if (isPrepare || isMediaStart || isPause) {\r\n                        stopMedia();\r\n                    }\r\n                    isPause = false;\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                    disclaimer = false;\r\n                    isRemoved = false;\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = ctx.getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                    SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared.edit();\r\n                    Gson gson = new Gson();\r\n                    String json = gson.toJson(listModelList.get(position));\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"DownloadListAudio\");\r\n                    editor.commit();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n\r\n        holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n            final Dialog dialog = new Dialog(ctx);\r\n            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n            dialog.setContentView(R.layout.logout_layout);\r\n            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));\r\n            dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n            final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n            final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n            final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n            final Button Btn = dialog.findViewById(R.id.Btn);\r\n            tvTitle.setText(\"Remove audio\");\r\n            tvHeader.setText(\"Are you sure you want to remove \" + listModelList.get(position).getName() +\" audio?\");\r\n            Btn.setText(\"Confirm\");\r\n            dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                    dialog.dismiss();\r\n                }\r\n                return false;\r\n            });\r\n\r\n            Btn.setOnClickListener(v -> {\r\n                String AudioFile = listModelList.get(position).getAudioFile();\r\n                String AudioName = listModelList.get(position).getName();\r\n                deleteDownloadFile(ctx.getApplicationContext(), AudioFile, AudioName, position);\r\n                dialog.dismiss();\r\n            });\r\n\r\n            tvGoBack.setOnClickListener(v -> dialog.dismiss());\r\n            dialog.show();\r\n            dialog.setCancelable(false);\r\n        });\r\n    }\r\n\r\n    private void getDownloadData() {\r\n        try {\r\n            SharedPreferences sharedy = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n                if (fileNameList.size() != 0) {\r\n                    handler1.postDelayed(UpdateSongTime1, 500);\r\n                } else {\r\n                    fileNameList = new ArrayList<>();\r\n                    playlistDownloadId = new ArrayList<>();\r\n                }\r\n            } else {\r\n                fileNameList = new ArrayList<>();\r\n                playlistDownloadId = new ArrayList<>();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void deleteDownloadFile(Context applicationContext, String audioFile, String audioName, int position) {\r\n        FileUtils.deleteDownloadedFile(applicationContext, audioName);\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(applicationContext)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deleteByAudioFile(audioFile, \"\");\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                listModelList = new ArrayList<>();\r\n                listModelList = GetAllMedia(ctx);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetAllMedia(FragmentActivity ctx) {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData(\"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadAudioDetailsList.size() != 0) {\r\n                    if (downloadAudioDetailsList.size() == 0) {\r\n                        tvFound.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        llError.setVisibility(View.GONE);\r\n                        AudioDownlaodsAdapter adapter = new AudioDownlaodsAdapter(downloadAudioDetailsList, ctx, UserID, progressBarHolder, ImgV, llError, rvDownloadsList, tvFound);\r\n                        rvDownloadsList.setAdapter(adapter);\r\n                    }\r\n                    llError.setVisibility(View.GONE);\r\n                    rvDownloadsList.setVisibility(View.VISIBLE);\r\n                } else {\r\n                    llError.setVisibility(View.VISIBLE);\r\n                    rvDownloadsList.setVisibility(View.GONE);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return listModelList.size();\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        AudioDownloadsLayoutBinding binding;\r\n\r\n        public MyViewHolder(AudioDownloadsLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DownloadModule/Adapters/AudioDownlaodsAdapter.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/DownloadModule/Adapters/AudioDownlaodsAdapter.java	(date 1602683135033)
@@ -291,7 +291,7 @@
             final TextView tvTitle = dialog.findViewById(R.id.tvTitle);
             final Button Btn = dialog.findViewById(R.id.Btn);
             tvTitle.setText("Remove audio");
-            tvHeader.setText("Are you sure you want to remove " + listModelList.get(position).getName() +" audio?");
+            tvHeader.setText("Are you sure you want to remove the " + listModelList.get(position).getName() +" from downloads?");
             Btn.setText("Confirm");
             dialog.setOnKeyListener((v, keyCode, event) -> {
                 if (keyCode == KeyEvent.KEYCODE_BACK) {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/PlaylistFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Playlist;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.CreatePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.FragmentPlaylistBinding;\r\nimport com.brainwellnessspa.databinding.MainAudioLayoutBinding;\r\nimport com.brainwellnessspa.databinding.PlaylistCustomLayoutBinding;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.ComeNotification;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isRemoved;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.disclaimer;\r\nimport static com.brainwellnessspa.Utility.MyFirebaseMessagingService.Notification_PlaylistId;\r\nimport static com.brainwellnessspa.Utility.MyFirebaseMessagingService.Notification_PlaylistName;\r\n\r\npublic class PlaylistFragment extends Fragment {\r\n    FragmentPlaylistBinding binding;\r\n    String UserID, Check = \"\", AudioFlag;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    List<DownloadAudioDetails> playlistWiseAudioDetails = new ArrayList<>();\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_playlist, container, false);\r\n        View view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (getArguments() != null) {\r\n            Check = getArguments().getString(\"Check\");\r\n        }\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvMainPlayList.setLayoutManager(manager);\r\n        binding.rvMainPlayList.setItemAnimator(new DefaultItemAnimator());\r\n        if(ComeNotification == 1){\r\n            Bundle bundle = new Bundle();\r\n            Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            bundle.putString(\"New\", \"0\");\r\n            bundle.putString(\"PlaylistID\", Notification_PlaylistId);\r\n            bundle.putString(\"PlaylistName\", Notification_PlaylistName);\r\n            bundle.putString(\"PlaylistImage\", \"\");\r\n            bundle.putString(\"MyDownloads\", \"0\");\r\n            myPlaylistsFragment.setArguments(bundle);\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, myPlaylistsFragment)\r\n                    .commit();\r\n            ComeNotification = 0;\r\n        }\r\n        prepareData();\r\n\r\n        return view;\r\n    }\r\n\r\n    private void callMyPlaylistsFragment(String s, String id, String name, String playlistImage, String MyDownloads) {\r\n        try {\r\n            comefrom_search = 0;\r\n            Bundle bundle = new Bundle();\r\n            Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            bundle.putString(\"New\", s);\r\n            bundle.putString(\"PlaylistID\", id);\r\n            bundle.putString(\"PlaylistName\", name);\r\n            bundle.putString(\"PlaylistImage\", playlistImage);\r\n            bundle.putString(\"MyDownloads\", MyDownloads);\r\n            myPlaylistsFragment.setArguments(bundle);\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, myPlaylistsFragment)\r\n                    .commit();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        prepareData();\r\n    }\r\n\r\n    private void prepareData() {\r\n        try {\r\n            if (IsLock.equalsIgnoreCase(\"1\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n            }\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(13, 6, 13, 200);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(13, 6, 13, 0);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<MainPlayListModel> listCall = APIClient.getClient().getMainPlayLists(UserID);\r\n            listCall.enqueue(new Callback<MainPlayListModel>() {\r\n                @Override\r\n                public void onResponse(Call<MainPlayListModel> call, Response<MainPlayListModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        MainPlayListModel listModel = response.body();\r\n                        binding.rlCreatePlaylist.setVisibility(View.VISIBLE);\r\n                        downloadPlaylistDetailsList = GetPlaylistDetail(listModel.getResponseData());\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<MainPlayListModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            ArrayList<MainPlayListModel.ResponseData> responseData = new ArrayList<>();\r\n            ArrayList<MainPlayListModel.ResponseData.Detail> details = new ArrayList<>();\r\n            MainPlayListModel.ResponseData listModel = new MainPlayListModel.ResponseData();\r\n            listModel.setGetLibraryID(\"2\");\r\n            listModel.setDetails(details);\r\n            listModel.setUserID(UserID);\r\n            listModel.setView(\"My Downloads\");\r\n            listModel.setIsLock(IsLock);\r\n            responseData.add(listModel);\r\n            downloadPlaylistDetailsList = GetPlaylistDetail(responseData);\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail(ArrayList<MainPlayListModel.ResponseData> responseData) {\r\n        ArrayList<MainPlayListModel.ResponseData.Detail> details = new ArrayList<>();\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllPlaylist();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    for (int i = 0; i < downloadPlaylistDetailsList.size(); i++) {\r\n                        MainPlayListModel.ResponseData.Detail detail = new MainPlayListModel.ResponseData.Detail();\r\n                        detail.setTotalAudio(downloadPlaylistDetailsList.get(i).getTotalAudio());\r\n                        detail.setTotalhour(downloadPlaylistDetailsList.get(i).getTotalhour());\r\n                        detail.setTotalminute(downloadPlaylistDetailsList.get(i).getTotalminute());\r\n                        detail.setPlaylistID(downloadPlaylistDetailsList.get(i).getPlaylistID());\r\n                        detail.setPlaylistDesc(downloadPlaylistDetailsList.get(i).getPlaylistDesc());\r\n                        detail.setMasterCategory(downloadPlaylistDetailsList.get(i).getPlaylistMastercat());\r\n                        detail.setSubCategory(downloadPlaylistDetailsList.get(i).getPlaylistSubcat());\r\n                        detail.setPlaylistName(downloadPlaylistDetailsList.get(i).getPlaylistName());\r\n                        detail.setPlaylistImage(downloadPlaylistDetailsList.get(i).getPlaylistImage());\r\n                        detail.setPlaylistId(downloadPlaylistDetailsList.get(i).getPlaylistID());\r\n                        details.add(detail);\r\n                    }\r\n                    for (int i = 0; i < responseData.size(); i++) {\r\n                        if (responseData.get(i).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                            responseData.get(i).setDetails(details);\r\n                        }\r\n                    }\r\n\r\n                    MainPlayListAdapter adapter = new MainPlayListAdapter(responseData, getActivity());\r\n                    binding.rvMainPlayList.setAdapter(adapter);\r\n                } else {\r\n                    MainPlayListAdapter adapter = new MainPlayListAdapter(responseData, getActivity());\r\n                    binding.rvMainPlayList.setAdapter(adapter);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    public class MainPlayListAdapter extends RecyclerView.Adapter<MainPlayListAdapter.MyViewHolder> {\r\n        Context ctx;\r\n        private ArrayList<MainPlayListModel.ResponseData> listModelList;\r\n\r\n        public MainPlayListAdapter(ArrayList<MainPlayListModel.ResponseData> listModelList, Context ctx) {\r\n            this.listModelList = listModelList;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MainAudioLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.main_audio_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            if (listModelList.get(position).getDetails() != null &&\r\n                    listModelList.get(position).getDetails().size() > 2) {\r\n                holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n            } else {\r\n                holder.binding.tvViewAll.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.tvViewAll.setOnClickListener(view -> {\r\n                Fragment viewAllPlaylistFragment = new ViewAllPlaylistFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, viewAllPlaylistFragment)\r\n                        .commit();\r\n                Bundle bundle = new Bundle();\r\n                if (listModelList.get(position).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                    bundle.putString(\"MyDownloads\", \"1\");\r\n                } else {\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                }\r\n                bundle.putString(\"GetLibraryID\", listModelList.get(position).getGetLibraryID());\r\n                bundle.putString(\"Name\", listModelList.get(position).getView());\r\n                viewAllPlaylistFragment.setArguments(bundle);\r\n            });\r\n            if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            binding.rlCreatePlaylist.setOnClickListener(view -> {\r\n                if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    binding.ivLock.setVisibility(View.GONE);\r\n                    final Dialog dialog = new Dialog(getActivity());\r\n                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                    dialog.setContentView(R.layout.create_palylist);\r\n                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                    final EditText edtCreate = dialog.findViewById(R.id.edtCreate);\r\n                    final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                    final Button btnSendCode = dialog.findViewById(R.id.btnSendCode);\r\n                    edtCreate.requestFocus();\r\n                    TextWatcher popupTextWatcher = new TextWatcher() {\r\n                        @Override\r\n                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                        }\r\n\r\n                        @Override\r\n                        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                            String number = edtCreate.getText().toString().trim();\r\n                            if (!number.isEmpty()) {\r\n                                btnSendCode.setEnabled(true);\r\n                                btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                            } else {\r\n                                btnSendCode.setEnabled(false);\r\n                                btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void afterTextChanged(Editable s) {\r\n                        }\r\n                    };\r\n\r\n\r\n                    edtCreate.addTextChangedListener(popupTextWatcher);\r\n                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                            dialog.dismiss();\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    });\r\n\r\n                    btnSendCode.setOnClickListener(view1 -> {\r\n                        if (edtCreate.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            BWSApplication.showToast(\"Please provide the playlist's name\", getActivity());\r\n                        } else {\r\n                            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                                Call<CreatePlaylistModel> listCall = APIClient.getClient().getCreatePlaylist(UserID, edtCreate.getText().toString());\r\n                                listCall.enqueue(new Callback<CreatePlaylistModel>() {\r\n                                    @Override\r\n                                    public void onResponse(Call<CreatePlaylistModel> call, Response<CreatePlaylistModel> response) {\r\n                                        if (response.isSuccessful()) {\r\n                                            CreatePlaylistModel listModel = response.body();\r\n                                            if (listModel.getResponseData().getIscreated().equalsIgnoreCase(\"0\")) {\r\n                                                BWSApplication.showToast(listModel.getResponseMessage(), getActivity());\r\n                                            } else if (listModel.getResponseData().getIscreated().equalsIgnoreCase(\"1\") ||\r\n                                                    listModel.getResponseData().getIscreated().equalsIgnoreCase(\"\")) {\r\n                                                callMyPlaylistsFragment(\"1\", listModel.getResponseData().getId(), listModel.getResponseData().getName(), \"\", \"0\");\r\n                                                dialog.dismiss();\r\n                                            }\r\n\r\n                                        }\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onFailure(Call<CreatePlaylistModel> call, Throwable t) {\r\n                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    tvCancel.setOnClickListener(v -> dialog.dismiss());\r\n                    dialog.show();\r\n                    dialog.setCancelable(false);\r\n                }\r\n            });\r\n\r\n            GridLayoutManager manager = new GridLayoutManager(getActivity(), 2);\r\n            holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n            holder.binding.rvMainAudio.setLayoutManager(manager);\r\n\r\n            if (listModelList.get(position).getDetails().size() == 0) {\r\n                holder.binding.llMainLayout.setVisibility(View.GONE);\r\n            } else {\r\n                holder.binding.llMainLayout.setVisibility(View.VISIBLE);\r\n                holder.binding.tvTitle.setText(listModelList.get(position).getView());\r\n                if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.your_created))) {\r\n                    PlaylistAdapter adapter1 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"0\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter1);\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                    PlaylistAdapter adapter2 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"1\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter2);\r\n\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.Recommended_Playlist))) {\r\n                    PlaylistAdapter adapter3 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"0\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter3);\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.populars))) {\r\n                    PlaylistAdapter adapter4 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"0\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter4);\r\n                }\r\n            }\r\n\r\n            if (!listModelList.get(position).getDetails().equals(\"\")) {\r\n\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MainAudioLayoutBinding binding;\r\n\r\n            public MyViewHolder(MainAudioLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getMedia(String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                player = 1;\r\n                if (isPrepare || isMediaStart || isPause) {\r\n                    stopMedia();\r\n                }\r\n                isPause = false;\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n                disclaimer = false;\r\n                isRemoved = false;\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(playlistWiseAudioDetails);\r\n                editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, playlistID);\r\n                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"Downloadlist\");\r\n                editor.commit();\r\n                try {\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public class PlaylistAdapter extends RecyclerView.Adapter<PlaylistAdapter.MyViewHolder> {\r\n        Context ctx;\r\n        String IsLock, MyDownloads;\r\n        private ArrayList<MainPlayListModel.ResponseData.Detail> listModelList;\r\n\r\n        public PlaylistAdapter(ArrayList<MainPlayListModel.ResponseData.Detail> listModelList, Context ctx, String IsLock, String MyDownloads) {\r\n            this.listModelList = listModelList;\r\n            this.ctx = ctx;\r\n            this.IsLock = IsLock;\r\n            this.MyDownloads = MyDownloads;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            PlaylistCustomLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.playlist_custom_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.44f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n\r\n            holder.binding.tvPlaylistName.setText(listModelList.get(position).getPlaylistName());\r\n            Glide.with(ctx).load(listModelList.get(position).getPlaylistImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else  if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.rlMainLayout.setOnClickListener(view -> {\r\n                if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                        getMedia(listModelList.get(position).getPlaylistID());\r\n                    } else {\r\n                        callMyPlaylistsFragment(\"0\", listModelList.get(position).getPlaylistID(), listModelList.get(position).getPlaylistName(),\r\n                                listModelList.get(position).getPlaylistImage(), MyDownloads);\r\n                    }\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (2 > listModelList.size()) {\r\n                return listModelList.size();\r\n            } else {\r\n                return 2;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            PlaylistCustomLayoutBinding binding;\r\n\r\n            public MyViewHolder(PlaylistCustomLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/PlaylistFragment.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/PlaylistFragment.java	(date 1602679608700)
@@ -89,7 +89,7 @@
         RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);
         binding.rvMainPlayList.setLayoutManager(manager);
         binding.rvMainPlayList.setItemAnimator(new DefaultItemAnimator());
-        if(ComeNotification == 1){
+        if (ComeNotification == 1) {
             Bundle bundle = new Bundle();
             Fragment myPlaylistsFragment = new MyPlaylistsFragment();
             FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();
@@ -365,35 +365,31 @@
                     });
 
                     btnSendCode.setOnClickListener(view1 -> {
-                        if (edtCreate.getText().toString().equalsIgnoreCase("")) {
-                            BWSApplication.showToast("Please provide the playlist's name", getActivity());
-                        } else {
-                            if (BWSApplication.isNetworkConnected(getActivity())) {
-                                Call<CreatePlaylistModel> listCall = APIClient.getClient().getCreatePlaylist(UserID, edtCreate.getText().toString());
-                                listCall.enqueue(new Callback<CreatePlaylistModel>() {
-                                    @Override
-                                    public void onResponse(Call<CreatePlaylistModel> call, Response<CreatePlaylistModel> response) {
-                                        if (response.isSuccessful()) {
-                                            CreatePlaylistModel listModel = response.body();
-                                            if (listModel.getResponseData().getIscreated().equalsIgnoreCase("0")) {
-                                                BWSApplication.showToast(listModel.getResponseMessage(), getActivity());
-                                            } else if (listModel.getResponseData().getIscreated().equalsIgnoreCase("1") ||
-                                                    listModel.getResponseData().getIscreated().equalsIgnoreCase("")) {
-                                                callMyPlaylistsFragment("1", listModel.getResponseData().getId(), listModel.getResponseData().getName(), "", "0");
-                                                dialog.dismiss();
-                                            }
+                        if (BWSApplication.isNetworkConnected(getActivity())) {
+                            Call<CreatePlaylistModel> listCall = APIClient.getClient().getCreatePlaylist(UserID, edtCreate.getText().toString());
+                            listCall.enqueue(new Callback<CreatePlaylistModel>() {
+                                @Override
+                                public void onResponse(Call<CreatePlaylistModel> call, Response<CreatePlaylistModel> response) {
+                                    if (response.isSuccessful()) {
+                                        CreatePlaylistModel listModel = response.body();
+                                        if (listModel.getResponseData().getIscreated().equalsIgnoreCase("0")) {
+                                            BWSApplication.showToast(listModel.getResponseMessage(), getActivity());
+                                        } else if (listModel.getResponseData().getIscreated().equalsIgnoreCase("1") ||
+                                                listModel.getResponseData().getIscreated().equalsIgnoreCase("")) {
+                                            callMyPlaylistsFragment("1", listModel.getResponseData().getId(), listModel.getResponseData().getName(), "", "0");
+                                            dialog.dismiss();
+                                        }
 
-                                        }
-                                    }
+                                    }
+                                }
 
-                                    @Override
-                                    public void onFailure(Call<CreatePlaylistModel> call, Throwable t) {
-                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
-                                    }
-                                });
-                            } else {
-                                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());
-                            }
+                                @Override
+                                public void onFailure(Call<CreatePlaylistModel> call, Throwable t) {
+                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
+                                }
+                            });
+                        } else {
+                            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());
                         }
                     });
 
@@ -538,9 +534,9 @@
 
             if (IsLock.equalsIgnoreCase("1")) {
                 holder.binding.ivLock.setVisibility(View.VISIBLE);
-            } else  if (IsLock.equalsIgnoreCase("2")) {
+            } else if (IsLock.equalsIgnoreCase("2")) {
                 holder.binding.ivLock.setVisibility(View.VISIBLE);
-            }else if (IsLock.equalsIgnoreCase("0") || IsLock.equalsIgnoreCase("")) {
+            } else if (IsLock.equalsIgnoreCase("0") || IsLock.equalsIgnoreCase("")) {
                 holder.binding.ivLock.setVisibility(View.GONE);
             }
 
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/MyPlaylistActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.SystemClock;\r\nimport android.text.Editable;\r\nimport android.text.Selection;\r\nimport android.text.TextWatcher;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Adapters.DirectionAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Models.RenamePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Playlist.PlaylistFragment;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityMyPlaylistBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.RefreshIconData;\r\n\r\npublic class MyPlaylistActivity extends AppCompatActivity {\r\n    public static int deleteFrg = 0;\r\n    public static int ComeFindAudio = 0;\r\n    ActivityMyPlaylistBinding binding;\r\n    String UserID, PlaylistID, Download = \"\";\r\n    Context ctx;\r\n    Activity activity;\r\n    public static int comeAddPlaylist = 0;\r\n    public static int comeRename = 0;\r\n    private long mLastClickTime = 0;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    List<DownloadAudioDetails> playlistWiseAudioDetails;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    DownloadPlaylistDetails downloadPlaylistDetails;\r\n    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongsList;\r\n    List<String> fileNameList, playlistDownloadId, remainAudio;\r\n    int SongListSize = 0, count;\r\n  /*  private Handler handler1;\r\n    private Runnable UpdateSongTime1 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n*//*            if (fileNameList.size() != 0) {\r\n                if (remainAudio.size() <= SongListSize) {\r\n                    int total = SongListSize;\r\n                    int remain = remainAudio.size();\r\n                    int complate = total - remain;\r\n                    long progressPercent = complate * 100 / total;\r\n                    int downloadProgress1 = (int) progressPercent;\r\n                    if (SongListSize == 1) {\r\n                        if (downloadProgress <= 100) {\r\n                            binding.pbProgress.setProgress(downloadProgress);\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            if(downloadProgress == 100){\r\n                                getDownloadData();\r\n                            }\r\n                        }\r\n                    } else if (downloadProgress1 <= 100) {\r\n                        if(downloadProgress1 == 100){\r\n                            getDownloadData();\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        }else{\r\n                            binding.pbProgress.setProgress(downloadProgress1);\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                getDownloadData();\r\n                handler1.postDelayed(this, 500);\r\n            }else{\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n                getDownloadData();\r\n            }*//*\r\n//            getMediaByPer(PlaylistID,SongListSize);\r\n        }\r\n    };*/\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_my_playlist);\r\n        ctx = MyPlaylistActivity.this;\r\n        activity = MyPlaylistActivity.this;\r\n//        handler1 = new Handler();\r\n        fileNameList = new ArrayList<>();\r\n        playlistDownloadId = new ArrayList<>();\r\n        remainAudio = new ArrayList<>();\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        playlistSongsList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        if (getIntent().getExtras() != null) {\r\n            PlaylistID = getIntent().getStringExtra(CONSTANTS.PlaylistID);\r\n        }\r\n        getPrepareData();\r\n        downloadAudioDetailsList = GetAllMedia();\r\n        downloadPlaylistDetailsList = GetPlaylistDetail();\r\n        binding.llBack.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                ComeFindAudio = 1;\r\n//                handler1.removeCallbacks(UpdateSongTime1);\r\n                finish();\r\n            }\r\n        });\r\n\r\n\r\n        binding.llDownload.setOnClickListener(view -> callDownload());\r\n    }\r\n\r\n    /*  private void getMediaByPer(String playlistID, int totalAudio) {\r\n          class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n\r\n              @Override\r\n              protected Void doInBackground(Void... voids) {\r\n                  count= DatabaseClient.getInstance(ctx)\r\n                          .getaudioDatabase()\r\n                          .taskDao()\r\n                          .getCountDownloadProgress(\"Compete\",playlistID);\r\n\r\n                  return null;\r\n              }\r\n\r\n              @Override\r\n              protected void onPostExecute(Void aVoid) {\r\n                  downloadPlaylistDetailsList = GetPlaylistDetail();\r\n                  if(downloadPlaylistDetailsList.size()!=0) {\r\n                      if (count < totalAudio) {\r\n                          long progressPercent = count * 100 / totalAudio;\r\n                          int downloadProgress1 = (int) progressPercent;\r\n                          binding.pbProgress.setVisibility(View.VISIBLE);\r\n                          binding.ivDownloads.setVisibility(View.GONE);\r\n                          binding.pbProgress.setProgress(downloadProgress1);\r\n                          handler1.postDelayed(UpdateSongTime1, 300);\r\n                      } else {\r\n                          binding.pbProgress.setVisibility(View.GONE);\r\n                          binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                          handler1.removeCallbacks(UpdateSongTime1);\r\n                      }\r\n                  }\r\n                  super.onPostExecute(aVoid);\r\n              }\r\n          }\r\n\r\n          getMediaByPer st = new getMediaByPer();\r\n          st.execute();\r\n      }*/\r\n/*\r\n    private void getDownloadData() {\r\n        try {\r\n            SharedPreferences sharedy = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n                remainAudio = new ArrayList<>();\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 0; i < fileNameList.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            remainAudio.add(playlistDownloadId.get(i));\r\n                        }\r\n                    }\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        if (remainAudio.size() < SongListSize) {\r\n                            handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    }\r\n                    //\r\n                }else {\r\n                    fileNameList = new ArrayList<>();\r\n                    playlistDownloadId = new ArrayList<>();\r\n                    remainAudio = new ArrayList<>();\r\n                }\r\n            } else {\r\n                fileNameList = new ArrayList<>();\r\n                playlistDownloadId = new ArrayList<>();\r\n                remainAudio = new ArrayList<>();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n*/\r\n    public List<DownloadAudioDetails> GetAllMedia() {\r\n\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData1();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }\r\n\r\n    private void callDownload() {\r\n        List<String> url = new ArrayList<>();\r\n        List<String> name = new ArrayList<>();\r\n        List<String> downloadPlaylistId = new ArrayList<>();\r\n        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs2 = new ArrayList<>();\r\n        playlistSongs2 = playlistSongsList;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                if (playlistSongs2.size() == 0) {\r\n                    break;\r\n                } else {\r\n                    for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                        if (playlistSongs2.size() != 0) {\r\n                            if (playlistSongs2.get(x).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                playlistSongs2.remove(x);\r\n                            }\r\n                            if (playlistSongs2.size() == 0) {\r\n                                break;\r\n                            }\r\n                        } else break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (int x = 0; x < playlistSongs2.size(); x++) {\r\n            name.add(playlistSongs2.get(x).getName());\r\n            url.add(playlistSongs2.get(x).getAudioFile());\r\n            downloadPlaylistId.add(playlistSongs2.get(x).getPlaylistID());\r\n        }\r\n        enableDisableDownload(false, \"orange\");\r\n        byte[] encodedBytes = new byte[1024];\r\n\r\n        SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n        Gson gson1 = new Gson();\r\n        String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n        String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n        String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n            Type type = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> fileNameList = gson1.fromJson(json, type);\r\n            List<String> audioFile = gson1.fromJson(json1, type);\r\n            List<String> playlistId1 = gson1.fromJson(json2, type);\r\n            if (fileNameList.size() != 0) {\r\n                url.addAll(audioFile);\r\n                name.addAll(fileNameList);\r\n                downloadPlaylistId.addAll(playlistId1);\r\n            }\r\n        }\r\n\r\n        if (url.size() != 0) {\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n            downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String urlJson = gson.toJson(url);\r\n            String nameJson = gson.toJson(name);\r\n            String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n            fileNameList = name;\r\n            playlistDownloadId = downloadPlaylistId;\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n            editor.commit();\r\n        }\r\n        SongListSize = playlistSongsList.size();\r\n        savePlaylist();\r\n        saveAllMedia(playlistSongsList, encodedBytes);\r\n\r\n    }\r\n\r\n    private void savePlaylist() {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                DatabaseClient.getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertPlaylist(downloadPlaylistDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n//                getMediaByPer(PlaylistID,SongListSize);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void saveAllMedia(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, byte[] encodedBytes) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                for (int i = 0; i < playlistSongs.size(); i++) {\r\n                    downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                    downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"0\");\r\n                    downloadAudioDetails.setPlaylistId(playlistSongs.get(i).getPlaylistID());\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                    DatabaseClient.getInstance(ctx)\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .insertMedia(downloadAudioDetails);\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n                enableDisableDownload(false, \"orange\");\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        ComeFindAudio = 1;\r\n//        handler1.removeCallbacks(UpdateSongTime1);\r\n        finish();\r\n    }\r\n\r\n    private void getPrepareData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SubPlayListModel> listCall = APIClient.getClient().getSubPlayLists(UserID, PlaylistID);\r\n            listCall.enqueue(new Callback<SubPlayListModel>() {\r\n                @Override\r\n                public void onResponse(Call<SubPlayListModel> call, Response<SubPlayListModel> response) {\r\n                    try {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            SubPlayListModel model = response.body();\r\n                            playlistSongsList = model.getResponseData().getPlaylistSongs();\r\n                            downloadPlaylistDetails = new DownloadPlaylistDetails();\r\n                            downloadPlaylistDetails.setPlaylistID(model.getResponseData().getPlaylistID());\r\n                            downloadPlaylistDetails.setPlaylistName(model.getResponseData().getPlaylistName());\r\n                            downloadPlaylistDetails.setPlaylistDesc(model.getResponseData().getPlaylistDesc());\r\n                            downloadPlaylistDetails.setIsReminder(model.getResponseData().getIsReminder());\r\n                            downloadPlaylistDetails.setPlaylistMastercat(model.getResponseData().getPlaylistMastercat());\r\n                            downloadPlaylistDetails.setPlaylistSubcat(model.getResponseData().getPlaylistSubcat());\r\n                            downloadPlaylistDetails.setPlaylistImage(model.getResponseData().getPlaylistImage());\r\n                            downloadPlaylistDetails.setTotalAudio(model.getResponseData().getTotalAudio());\r\n                            downloadPlaylistDetails.setTotalDuration(model.getResponseData().getTotalDuration());\r\n                            downloadPlaylistDetails.setTotalhour(model.getResponseData().getTotalhour());\r\n                            downloadPlaylistDetails.setTotalminute(model.getResponseData().getTotalminute());\r\n                            downloadPlaylistDetails.setCreated(model.getResponseData().getCreated());\r\n                            downloadPlaylistDetails.setDownload(model.getResponseData().getDownload());\r\n                            downloadPlaylistDetails.setLike(model.getResponseData().getLike());\r\n                            binding.tvName.setText(model.getResponseData().getPlaylistName());\r\n                            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 20,\r\n                                    1, 1, 0.54f, 20);\r\n                            binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n                            binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n                            binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n                            if (!model.getResponseData().getPlaylistImage().equalsIgnoreCase(\"\")) {\r\n                                Glide.with(ctx).load(model.getResponseData().getPlaylistImage())\r\n                                        .thumbnail(0.05f)\r\n                                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                            } else {\r\n                                binding.ivRestaurantImage.setImageResource(R.drawable.ic_playlist_bg);\r\n                            }\r\n//                            getDownloadData();\r\n                            SongListSize = model.getResponseData().getPlaylistSongs().size();\r\n//                            getMediaByPer(PlaylistID,SongListSize);\r\n//                            SongListSize = model.getResponseData().getPlaylistSongs().size();\r\n                            Download = model.getResponseData().getDownload();\r\n                            binding.llAddPlaylist.setVisibility(View.VISIBLE);\r\n//                            getDownloadData();\r\n                            binding.llAddPlaylist.setOnClickListener(view -> {\r\n                                comeAddPlaylist = 1;\r\n                                if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                                    return;\r\n                                }\r\n                                mLastClickTime = SystemClock.elapsedRealtime();\r\n                                Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                                i.putExtra(\"AudioId\", \"\");\r\n                                i.putExtra(\"PlaylistID\", model.getResponseData().getPlaylistID());\r\n                                startActivity(i);\r\n                                finish();\r\n                            });\r\n                            if (model.getResponseData().getCreated().equalsIgnoreCase(\"1\")) {\r\n                                binding.llOptions.setVisibility(View.GONE);\r\n                                binding.llRename.setVisibility(View.VISIBLE);\r\n                                binding.llDelete.setVisibility(View.VISIBLE);\r\n                                binding.llFind.setVisibility(View.GONE);\r\n                            } else if (model.getResponseData().getCreated().equalsIgnoreCase(\"0\")) {\r\n                                binding.llOptions.setVisibility(View.VISIBLE);\r\n                                binding.llRename.setVisibility(View.GONE);\r\n                                binding.llDelete.setVisibility(View.GONE);\r\n                                binding.llFind.setVisibility(View.VISIBLE);\r\n                            }\r\n\r\n                            binding.llFind.setOnClickListener(view -> {\r\n                                ComeFindAudio = 2;\r\n                                finish();\r\n                            });\r\n                            if (model.getResponseData().getPlaylistMastercat().equalsIgnoreCase(\"\")) {\r\n                                binding.tvDesc.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.tvDesc.setVisibility(View.VISIBLE);\r\n                                binding.tvDesc.setText(model.getResponseData().getPlaylistMastercat());\r\n                            }\r\n\r\n                            if (model.getResponseData().getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                                    model.getResponseData().getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                                            model.getResponseData().getTotalhour().equalsIgnoreCase(\"\")\r\n                                            && model.getResponseData().getTotalminute().equalsIgnoreCase(\"\")) {\r\n                                binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n                            } else {\r\n                                if (model.getResponseData().getTotalminute().equalsIgnoreCase(\"\")) {\r\n                                    binding.tvTime.setText(model.getResponseData().getTotalAudio() + \" Audio | \"\r\n                                            + model.getResponseData().getTotalhour() + \"h 0m\");\r\n                                } else {\r\n                                    binding.tvTime.setText(model.getResponseData().getTotalAudio() + \" Audio | \"\r\n                                            + model.getResponseData().getTotalhour() + \"h \" + model.getResponseData().getTotalminute() + \"m\");\r\n                                }\r\n                            }\r\n\r\n                            if (model.getResponseData().getPlaylistDesc().equalsIgnoreCase(\"\")) {\r\n                                binding.tvTitleDec.setVisibility(View.GONE);\r\n                                binding.tvSubDec.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.tvTitleDec.setVisibility(View.VISIBLE);\r\n                                binding.tvSubDec.setVisibility(View.VISIBLE);\r\n                            }\r\n\r\n                            binding.tvSubDec.setText(model.getResponseData().getPlaylistDesc());\r\n                            int linecount = binding.tvSubDec.getLineCount();\r\n                            if (linecount >= 4) {\r\n                                binding.tvReadMore.setVisibility(View.VISIBLE);\r\n                            } else {\r\n                                binding.tvReadMore.setVisibility(View.GONE);\r\n                            }\r\n\r\n                            binding.tvReadMore.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View view) {\r\n                                    final Dialog dialog = new Dialog(ctx);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.full_desc_layout);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvDesc = dialog.findViewById(R.id.tvDesc);\r\n                                    final RelativeLayout tvClose = dialog.findViewById(R.id.tvClose);\r\n                                    tvDesc.setText(model.getResponseData().getPlaylistDesc());\r\n\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n\r\n                                    tvClose.setOnClickListener(v -> dialog.dismiss());\r\n\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n                                }\r\n                            });\r\n\r\n                    /*    if (model.getResponseData().getDownload().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                            binding.tvDownload.setTextColor(getResources().getColor(R.color.light_gray));\r\n                            binding.llDownload.setClickable(false);\r\n                            binding.llDownload.setEnabled(false);\r\n                        } else if (!model.getResponseData().getDownload().equalsIgnoreCase(\"\")) {\r\n                            binding.llDownload.setClickable(true);\r\n                            binding.llDownload.setEnabled(true);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n                            binding.tvDownload.setTextColor(getResources().getColor(R.color.white));\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                        }*/\r\n\r\n                            binding.llDownload.setVisibility(View.VISIBLE);\r\n\r\n/*\r\n                            binding.llDownload.setOnClickListener(view -> {\r\n                                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                    BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    Call<DownloadPlaylistModel> listCall13 = null;\r\n                                    listCall13 = APIClient.getClient().getDownloadlistPlaylist(UserID, \"\", PlaylistID);\r\n                                    listCall13.enqueue(new Callback<DownloadPlaylistModel>() {\r\n                                        @Override\r\n                                        public void onResponse(Call<DownloadPlaylistModel> call13, Response<DownloadPlaylistModel> response13) {\r\n                                            if (response13.isSuccessful()) {\r\n                                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                DownloadPlaylistModel model1 = response13.body();\r\n                                                BWSApplication.showToast(model1.getResponseMessage(), ctx);\r\n                                            }\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void onFailure(Call<DownloadPlaylistModel> call13, Throwable t) {\r\n                                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        }\r\n                                    });\r\n\r\n                                } else {\r\n                                    Toast.makeText(getApplicationContext(), getString(R.string.no_server_found), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            });\r\n*/\r\n\r\n                            String[] elements = model.getResponseData().getPlaylistSubcat().split(\",\");\r\n                            List<String> direction = Arrays.asList(elements);\r\n\r\n                            DirectionAdapter directionAdapter = new DirectionAdapter(direction, ctx);\r\n                            RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(ctx, LinearLayoutManager.HORIZONTAL, false);\r\n                            binding.rvDirlist.setLayoutManager(recentlyPlayed);\r\n                            binding.rvDirlist.setItemAnimator(new DefaultItemAnimator());\r\n                            binding.rvDirlist.setAdapter(directionAdapter);\r\n                            String PlaylistID = model.getResponseData().getPlaylistID();\r\n                            binding.llRename.setOnClickListener(view -> {\r\n                                final Dialog dialog = new Dialog(ctx);\r\n                                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                dialog.setContentView(R.layout.create_palylist);\r\n                                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                final EditText edtCreate = dialog.findViewById(R.id.edtCreate);\r\n                                final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                                final TextView tvHeading = dialog.findViewById(R.id.tvHeading);\r\n                                final Button btnSendCode = dialog.findViewById(R.id.btnSendCode);\r\n                                tvHeading.setText(R.string.Rename_your_playlist);\r\n                                btnSendCode.setText(R.string.Save);\r\n                                edtCreate.requestFocus();\r\n                                edtCreate.setText(model.getResponseData().getPlaylistName());\r\n                                int position1 = edtCreate.getText().length();\r\n                                Editable editObj = edtCreate.getText();\r\n                                Selection.setSelection(editObj, position1);\r\n                                btnSendCode.setEnabled(true);\r\n                                btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                        dialog.dismiss();\r\n                                        return true;\r\n                                    }\r\n                                    return false;\r\n                                });\r\n\r\n                                TextWatcher popupTextWatcher = new TextWatcher() {\r\n                                    @Override\r\n                                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                                        String number = edtCreate.getText().toString().trim();\r\n                                        if (!number.isEmpty()) {\r\n                                            btnSendCode.setEnabled(true);\r\n                                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                            btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                                        } else {\r\n                                            btnSendCode.setEnabled(false);\r\n                                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                            btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n                                        }\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void afterTextChanged(Editable s) {\r\n                                    }\r\n                                };\r\n\r\n\r\n                                edtCreate.addTextChangedListener(popupTextWatcher);\r\n\r\n                                btnSendCode.setOnClickListener(view1 -> {\r\n                                    if (edtCreate.getText().toString().equalsIgnoreCase(\"\")) {\r\n                                        BWSApplication.showToast(\"Please provide the playlist's name\", ctx);\r\n                                    } else {\r\n                                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                            Call<RenamePlaylistModel> listCall1 = APIClient.getClient().getRenamePlaylist(UserID, PlaylistID, edtCreate.getText().toString());\r\n                                            listCall1.enqueue(new Callback<RenamePlaylistModel>() {\r\n                                                @Override\r\n                                                public void onResponse(Call<RenamePlaylistModel> call1, Response<RenamePlaylistModel> response1) {\r\n                                                    if (response1.isSuccessful()) {\r\n                                                        comeRename = 1;\r\n                                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                        RenamePlaylistModel listModel = response1.body();\r\n                                                        BWSApplication.showToast(listModel.getResponseMessage(), ctx);\r\n                                                        dialog.dismiss();\r\n                                                        finish();\r\n                                                    }\r\n                                                }\r\n\r\n                                                @Override\r\n                                                public void onFailure(Call<RenamePlaylistModel> call1, Throwable t) {\r\n                                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                }\r\n                                            });\r\n                                        } else {\r\n                                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                                        }\r\n                                    }\r\n                                });\r\n                                tvCancel.setOnClickListener(v -> dialog.dismiss());\r\n                                dialog.show();\r\n                                dialog.setCancelable(false);\r\n                            });\r\n\r\n                            binding.llDelete.setOnClickListener(view -> {\r\n                                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                    BWSApplication.showToast(\"Currently this playlist is in player,so you can't delete this playlist as of now\", ctx);\r\n                                } else {\r\n                                    final Dialog dialog = new Dialog(ctx);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.delete_playlist);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                                    final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n                                    final RelativeLayout tvconfirm = dialog.findViewById(R.id.tvconfirm);\r\n                                    tvHeader.setText(\"Are you sure you want to delete \" + model.getResponseData().getPlaylistName() + \"  playlist?\");\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            Fragment playlistFragment = new PlaylistFragment();\r\n                                            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                                            fragmentManager1.beginTransaction()\r\n                                                    .add(R.id.flContainer, playlistFragment)\r\n                                                    .commit();\r\n                                            Bundle bundle = new Bundle();\r\n                                            playlistFragment.setArguments(bundle);\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n\r\n                                    tvconfirm.setOnClickListener(v -> {\r\n                                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                            Call<SucessModel> listCall12 = APIClient.getClient().getDeletePlaylist(UserID, PlaylistID);\r\n                                            listCall12.enqueue(new Callback<SucessModel>() {\r\n                                                @Override\r\n                                                public void onResponse(Call<SucessModel> call12, Response<SucessModel> response12) {\r\n                                                    if (response12.isSuccessful()) {\r\n                                                        deleteFrg = 1;\r\n                                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                        SucessModel listModel = response12.body();\r\n                                                        dialog.dismiss();\r\n                                                        BWSApplication.showToast(listModel.getResponseMessage(), ctx);\r\n                                                        finish();\r\n                                                    }\r\n                                                }\r\n\r\n                                                @Override\r\n                                                public void onFailure(Call<SucessModel> call12, Throwable t) {\r\n                                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                }\r\n                                            });\r\n                                        } else {\r\n                                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                                        }\r\n                                    });\r\n\r\n                                    tvGoBack.setOnClickListener(v -> dialog.dismiss());\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n                                }\r\n                            });\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SubPlayListModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (RefreshIconData == 0) {\r\n                    enableDisableDownload(false, \"gray\");\r\n                } else if (Download.equalsIgnoreCase(\"1\")) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (Download.equalsIgnoreCase(\"0\") || Download.equalsIgnoreCase(\"\") ||\r\n                        RefreshIconData != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                } else if (downloadPlaylistDetailsList.size() == 0 && RefreshIconData != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                }\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private void enableDisableDownload(boolean b, String color) {\r\n        if (b) {\r\n            binding.llDownload.setClickable(true);\r\n            binding.llDownload.setEnabled(true);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.tvDownload.setTextColor(getResources().getColor(R.color.white));\r\n        } else {\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.llDownload.setClickable(false);\r\n            binding.llDownload.setEnabled(false);\r\n            if (color.equalsIgnoreCase(\"gray\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            } else if (color.equalsIgnoreCase(\"orange\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n            }\r\n            binding.tvDownload.setTextColor(getResources().getColor(R.color.white));\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/MyPlaylistActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/MyPlaylistActivity.java	(date 1602679531458)
@@ -666,34 +666,31 @@
                                 edtCreate.addTextChangedListener(popupTextWatcher);
 
                                 btnSendCode.setOnClickListener(view1 -> {
-                                    if (edtCreate.getText().toString().equalsIgnoreCase("")) {
-                                        BWSApplication.showToast("Please provide the playlist's name", ctx);
-                                    } else {
-                                        if (BWSApplication.isNetworkConnected(ctx)) {
-                                            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                                            Call<RenamePlaylistModel> listCall1 = APIClient.getClient().getRenamePlaylist(UserID, PlaylistID, edtCreate.getText().toString());
-                                            listCall1.enqueue(new Callback<RenamePlaylistModel>() {
-                                                @Override
-                                                public void onResponse(Call<RenamePlaylistModel> call1, Response<RenamePlaylistModel> response1) {
-                                                    if (response1.isSuccessful()) {
-                                                        comeRename = 1;
-                                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                                                        RenamePlaylistModel listModel = response1.body();
-                                                        BWSApplication.showToast(listModel.getResponseMessage(), ctx);
-                                                        dialog.dismiss();
-                                                        finish();
-                                                    }
-                                                }
+                                    if (BWSApplication.isNetworkConnected(ctx)) {
+                                        BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                                        Call<RenamePlaylistModel> listCall1 = APIClient.getClient().getRenamePlaylist(UserID, PlaylistID, edtCreate.getText().toString());
+                                        listCall1.enqueue(new Callback<RenamePlaylistModel>() {
+                                            @Override
+                                            public void onResponse(Call<RenamePlaylistModel> call1, Response<RenamePlaylistModel> response1) {
+                                                if (response1.isSuccessful()) {
+                                                    comeRename = 1;
+                                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                                                    RenamePlaylistModel listModel = response1.body();
+                                                    BWSApplication.showToast(listModel.getResponseMessage(), ctx);
+                                                    dialog.dismiss();
+                                                    finish();
+                                                }
+                                            }
 
-                                                @Override
-                                                public void onFailure(Call<RenamePlaylistModel> call1, Throwable t) {
-                                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                                                }
-                                            });
-                                        } else {
-                                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);
-                                        }
+                                            @Override
+                                            public void onFailure(Call<RenamePlaylistModel> call1, Throwable t) {
+                                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                                            }
+                                        });
+                                    } else {
+                                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);
                                     }
+
                                 });
                                 tvCancel.setOnClickListener(v -> dialog.dismiss());
                                 dialog.show();
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/DashboardActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.navigation.ui.AppBarConfiguration;\r\nimport androidx.navigation.ui.NavigationUI;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.databinding.ActivityDashboardBinding;\r\n\r\nimport static com.brainwellnessspa.InvoiceModule.Activities.InvoiceActivity.invoiceToDashboard;\r\n\r\npublic class DashboardActivity extends AppCompatActivity {\r\n    public static int player = 0;\r\n    ActivityDashboardBinding binding;\r\n    boolean doubleBackToExitPressedOnce = false;\r\n    public static int ComeNotification = 0;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_dashboard);\r\n        AppBarConfiguration appBarConfiguration = new AppBarConfiguration.Builder(\r\n                R.id.navigation_audio, R.id.navigation_playlist, R.id.navigation_search,\r\n                R.id.navigation_appointment, R.id.navigation_account).build();\r\n        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);\r\n//        NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration);\r\n        NavigationUI.setupWithNavController(binding.navView, navController);\r\n        if(ComeNotification == 1){\r\n            binding.navView.setSelectedItemId(R.id.navigation_playlist);\r\n        }else{\r\n            if (binding.navView.getSelectedItemId() == R.id.navigation_audio) {\r\n                binding.navView.setSelectedItemId(R.id.navigation_audio);\r\n            }\r\n        }\r\n     /*   String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        try {\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }*/\r\n//\r\n//        ConnectivityManager connMgr = (ConnectivityManager)\r\n//                getSystemService(Context.CONNECTIVITY_SERVICE);\r\n//// Checks if the device is on a metered network\r\n//        if (connMgr.isActiveNetworkMetered()) {\r\n//            // Checks user’s Data Saver settings.\r\n//            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n//                switch (connMgr.getRestrictBackgroundStatus()) {\r\n//                    case ConnectivityManager.RESTRICT_BACKGROUND_STATUS_ENABLED:\r\n//                        // Background data usage is blocked for this app. Wherever possible,\r\n//                        // the app should also use less data in the foreground.\r\n//\r\n//                    case ConnectivityManager.RESTRICT_BACKGROUND_STATUS_WHITELISTED:\r\n//                        // The app is allowed to bypass Data Saver. Nevertheless, wherever possible,\r\n//                        // the app should use less data in the foreground and background.\r\n//\r\n//                    case ConnectivityManager.RESTRICT_BACKGROUND_STATUS_DISABLED:\r\n//                        // Data Saver is disabled. Since the device is connected to a\r\n//                        // metered network, the app should use less data wherever possible.\r\n//                }\r\n//            }\r\n//        } else {\r\n//            // The device is not on a metered network.\r\n//            // Use data as required to perform syncs, downloads, and updates.\r\n//        }\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (invoiceToDashboard == 1) {\r\n            finishAffinity();\r\n            /*if (doubleBackToExitPressedOnce) {\r\n                super.onBackPressed();\r\n                return;\r\n            }\r\n\r\n            this.doubleBackToExitPressedOnce = true;\r\n            BWSApplication.showToast(\"Press again to exit.\", DashboardActivity.this);\r\n\r\n            new Handler().postDelayed(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    doubleBackToExitPressedOnce = false;\r\n                }\r\n            }, 2000);*/\r\n        }\r\n\r\n        if (binding.navView.getSelectedItemId() == R.id.navigation_audio) {\r\n            binding.navView.setSelectedItemId(R.id.navigation_audio);\r\n            if (doubleBackToExitPressedOnce) {\r\n                super.onBackPressed();\r\n                return;\r\n            }\r\n\r\n            this.doubleBackToExitPressedOnce = true;\r\n            BWSApplication.showToast(\"Press again to exit.\", DashboardActivity.this);\r\n\r\n            new Handler().postDelayed(() -> doubleBackToExitPressedOnce = false, 2000);\r\n        } else {\r\n            super.onBackPressed();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n//        MusicService.releasePlayer();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/DashboardActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/DashboardActivity.java	(date 1602680575912)
@@ -111,7 +111,7 @@
             }
 
             this.doubleBackToExitPressedOnce = true;
-            BWSApplication.showToast("Press again to exit.", DashboardActivity.this);
+            BWSApplication.showToast("Press again to exit", DashboardActivity.this);
 
             new Handler().postDelayed(() -> doubleBackToExitPressedOnce = false, 2000);
         } else {
Index: app/src/main/java/com/brainwellnessspa/ReminderModule/Activities/ReminderActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.ReminderModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.app.TimePickerDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.ReminderModule.Models.SelectPlaylistModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.SetReminderModel;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityReminderBinding;\r\nimport com.brainwellnessspa.databinding.SelectPlaylistLayoutBinding;\r\n\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.Clock;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.TimeZone;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenReminder;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.IsLock;\r\n\r\npublic class ReminderActivity extends AppCompatActivity {\r\n    ActivityReminderBinding binding;\r\n    Activity activity;\r\n    Context context;\r\n    Dialog dialog;\r\n    String am_pm, hourString, minuteSting, UserId, PlaylistID = \"\", PlaylistName = \"\", ComeFrom = \"\", Time = \"\", Day = \"\", currantTime;\r\n    ArrayList<String> remiderDays = new ArrayList<>();\r\n    private int mHour, mMinute;\r\n    SelectPlaylistAdapter adapter;\r\n    TimePickerDialog timePickerDialog;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_reminder);\r\n        context = ReminderActivity.this;\r\n        activity = ReminderActivity.this;\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserId = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            ComeFrom = getIntent().getStringExtra(\"ComeFrom\");\r\n            PlaylistID = getIntent().getStringExtra(CONSTANTS.PlaylistID);\r\n            PlaylistName = getIntent().getStringExtra(\"PlaylistName\");\r\n        }\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            Time = getIntent().getStringExtra(\"Time\");\r\n            Day = getIntent().getStringExtra(\"Day\");\r\n        }\r\n\r\n        RefreshButton();\r\n        ShowPlaylistName();\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            if (ComeScreenReminder == 1) {\r\n                Intent i = new Intent(context, ReminderDetailsActivity.class);\r\n                startActivity(i);\r\n                finish();\r\n            } else {\r\n                finish();\r\n            }\r\n        });\r\n\r\n        if (Time.equalsIgnoreCase(\"\") || Time.equalsIgnoreCase(\"0\")) {\r\n            SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat(\"hh:mm a\");\r\n            /*if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {\r\n                Clock clock = Clock.systemDefaultZone();\r\n                String timezone = (String.valueOf(clock.getZone()));\r\n                simpleDateFormat1.setTimeZone(TimeZone.getTimeZone(timezone));\r\n            } else {*/\r\n            simpleDateFormat1.setTimeZone(TimeZone.getTimeZone(\"GMT+8\"));\r\n//            }\r\n            DateFormat df = DateFormat.getTimeInstance();\r\n            String gmtTime = df.format(new Date());\r\n            Date currdate = new Date();\r\n            try {\r\n                currdate = simpleDateFormat1.parse(gmtTime);\r\n                Log.e(\"currant currdate !!!!\", String.valueOf(currdate));\r\n            } catch (ParseException e) {\r\n                e.printStackTrace();\r\n            }\r\n            currantTime = simpleDateFormat1.format(currdate);\r\n//            Calendar rightNow = Calendar.getInstance();\r\n//            int currentHourIn12Format = rightNow.get(Calendar.HOUR);\r\n//            int currentminIn12Format = rightNow.get(Calendar.MINUTE);\r\n//            int ampm = rightNow.get(Calendar.AM_PM);\r\n            binding.tvTime.setText(currantTime);\r\n        } else {\r\n            binding.tvTime.setText(Time);\r\n            currantTime = Time;\r\n        }\r\n\r\n        binding.llSelectTime.setOnClickListener(view -> {\r\n            final Calendar c = Calendar.getInstance();\r\n//            TimeZone tz = c.getTimeZone();\r\n//            c.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\r\n//            Log.e(\"GMTTTTTT\", tz.getDisplayName());\r\n            SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat(\"hh:mm a\");\r\n            simpleDateFormat1.setTimeZone(TimeZone.getTimeZone(\"GMT+8\"));\r\n//            }\r\n            DateFormat df = DateFormat.getTimeInstance();\r\n            String gmtTime = df.format(new Date());\r\n            Date currdate = new Date();\r\n            try {\r\n                currdate = simpleDateFormat1.parse(gmtTime);\r\n                Log.e(\"currant currdate !!!!\", String.valueOf(currdate));\r\n            } catch (ParseException e) {\r\n                e.printStackTrace();\r\n            }\r\n            currantTime = simpleDateFormat1.format(currdate);\r\n            String[] time = currantTime.split(\":\");\r\n            String min[] = time[1].split(\" \");\r\n            mHour = Integer.parseInt(time[0]);\r\n//            mHour = c.get(Calendar.HOUR_OF_DAY);\r\n            mMinute = Integer.parseInt(min[0]);\r\n            String displayAmPm = min[1];\r\n            if (displayAmPm.equalsIgnoreCase(\"p.m\") || displayAmPm.equalsIgnoreCase(\"PM\")) {\r\n                mHour = mHour + 12;\r\n            }\r\n            timePickerDialog = new TimePickerDialog(ReminderActivity.this, R.style.TimePickerTheme,\r\n                    (view1, hourOfDay, minute) -> {\r\n                        if (hourOfDay < 10) {\r\n                            hourString = \"0\" + hourOfDay;\r\n                            am_pm = \"AM\";\r\n                        } else if (hourOfDay > 12) {\r\n                            am_pm = \"PM\";\r\n                            hourOfDay = hourOfDay - 12;\r\n                            hourString = \"\" + hourOfDay;\r\n                            if (hourOfDay < 10) {\r\n                                hourString = \"0\" + hourString;\r\n                            }\r\n                        } else {\r\n                            hourString = \"\" + hourOfDay;\r\n                            am_pm = \"AM\";\r\n                        }\r\n                        if (minute < 10)\r\n                            minuteSting = \"0\" + minute;\r\n                        else\r\n                            minuteSting = \"\" + minute;\r\n\r\n                        binding.tvTime.setText(hourString + \":\" + minuteSting + \" \" + am_pm);\r\n                        ShowPlaylistName();\r\n                    }, mHour, mMinute, false);\r\n            timePickerDialog.show();\r\n        });\r\n\r\n        if (Day.contains(\"0\")) {\r\n            ShowDaysSelection(\"0\", binding.tvSunday);\r\n        }\r\n\r\n        if (Day.contains(\"1\")) {\r\n            ShowDaysSelection(\"1\", binding.tvMonday);\r\n        }\r\n\r\n        if (Day.contains(\"2\")) {\r\n            ShowDaysSelection(\"2\", binding.tvTuesday);\r\n        }\r\n\r\n        if (Day.contains(\"3\")) {\r\n            ShowDaysSelection(\"3\", binding.tvWednesday);\r\n        }\r\n\r\n        if (Day.contains(\"4\")) {\r\n            ShowDaysSelection(\"4\", binding.tvThursday);\r\n        }\r\n\r\n        if (Day.contains(\"5\")) {\r\n            ShowDaysSelection(\"5\", binding.tvFriday);\r\n        }\r\n\r\n        if (Day.contains(\"6\")) {\r\n            ShowDaysSelection(\"6\", binding.tvSaturday);\r\n        }\r\n        Log.e(\"remiderDays\", TextUtils.join(\",\", remiderDays));\r\n\r\n        binding.llSunday.setOnClickListener(view -> {\r\n            DaysSelection(\"0\", binding.tvSunday);\r\n            RefreshButton();\r\n        });\r\n\r\n        binding.llMonday.setOnClickListener(view -> {\r\n            DaysSelection(\"1\", binding.tvMonday);\r\n            RefreshButton();\r\n        });\r\n\r\n        binding.llTuesday.setOnClickListener(view -> {\r\n            DaysSelection(\"2\", binding.tvTuesday);\r\n            RefreshButton();\r\n        });\r\n\r\n        binding.llWednesday.setOnClickListener(view -> {\r\n            DaysSelection(\"3\", binding.tvWednesday);\r\n            RefreshButton();\r\n        });\r\n\r\n        binding.llThursday.setOnClickListener(view -> {\r\n            DaysSelection(\"4\", binding.tvThursday);\r\n            RefreshButton();\r\n        });\r\n\r\n        binding.llFriday.setOnClickListener(view -> {\r\n            DaysSelection(\"5\", binding.tvFriday);\r\n            RefreshButton();\r\n        });\r\n\r\n        binding.llSaturday.setOnClickListener(view -> {\r\n            DaysSelection(\"6\", binding.tvSaturday);\r\n            RefreshButton();\r\n        });\r\n\r\n        if (ComeFrom.equalsIgnoreCase(\"\")) {\r\n            binding.ivArrow.setVisibility(View.VISIBLE);\r\n            binding.llSelectPlaylist.setOnClickListener(view -> {\r\n                dialog = new Dialog(context);\r\n                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                dialog.setContentView(R.layout.select_playlist);\r\n                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                final LinearLayout llBack = dialog.findViewById(R.id.llBack);\r\n                final LinearLayout llError = dialog.findViewById(R.id.llError);\r\n                final RecyclerView rvSelectPlaylist = dialog.findViewById(R.id.rvSelectPlaylist);\r\n                final ProgressBar progressBar = dialog.findViewById(R.id.progressBar);\r\n                final FrameLayout progressBarHolder = dialog.findViewById(R.id.progressBarHolder);\r\n                llBack.setOnClickListener(view12 -> dialog.dismiss());\r\n\r\n                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                        dialog.dismiss();\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n\r\n                RecyclerView.LayoutManager manager = new LinearLayoutManager(getApplicationContext());\r\n                rvSelectPlaylist.setLayoutManager(manager);\r\n                rvSelectPlaylist.setItemAnimator(new DefaultItemAnimator());\r\n\r\n                prepareData(rvSelectPlaylist, llError, progressBar, progressBarHolder);\r\n                dialog.show();\r\n                dialog.setCancelable(false);\r\n            });\r\n        } else if (ComeFrom.equalsIgnoreCase(\"1\")) {\r\n            binding.ivArrow.setVisibility(View.GONE);\r\n        }\r\n\r\n    }\r\n\r\n    private void ShowDaysSelection(String value, TextView textView) {\r\n        RefreshButton();\r\n        remiderDays.add(value);\r\n        textView.setTextColor(getResources().getColor(R.color.extra_light_blue));\r\n        textView.setBackground(getResources().getDrawable(R.drawable.fill_transparent_bg));\r\n    }\r\n\r\n    private void DaysSelection(String value, TextView textView) {\r\n        if (!remiderDays.contains(value)) {\r\n            remiderDays.add(value);\r\n            textView.setTextColor(getResources().getColor(R.color.extra_light_blue));\r\n            textView.setBackground(getResources().getDrawable(R.drawable.fill_transparent_bg));\r\n        } else {\r\n            remiderDays.remove(value);\r\n            textView.setTextColor(getResources().getColor(R.color.dark_blue_gray));\r\n            textView.setBackground(getResources().getDrawable(R.drawable.transparent_bg));\r\n        }\r\n        Log.e(\"remiderDays\", TextUtils.join(\",\", remiderDays));\r\n    }\r\n\r\n    private void ShowPlaylistName() {\r\n        if (PlaylistName.equalsIgnoreCase(\"\")) {\r\n            binding.tvPlaylistName.setText(\"Select Playlist\");\r\n        } else {\r\n            binding.tvPlaylistName.setText(PlaylistName);\r\n        }\r\n        binding.btnSave.setOnClickListener(view -> {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                Intent i = new Intent(context, MembershipChangeActivity.class);\r\n                i.putExtra(\"ComeFrom\", \"Plan\");\r\n                startActivity(i);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                BWSApplication.showToast(\"Please re-activate your membership plan\", context);\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                if (PlaylistName.equalsIgnoreCase(\"\")) {\r\n                    BWSApplication.showToast(\"Please select playlist name\", context);\r\n                } else if (remiderDays.size() == 0) {\r\n                    BWSApplication.showToast(\"Please select days\", context);\r\n                } else {\r\n                    String sendTime = binding.tvTime.getText().toString();\r\n                    SimpleDateFormat simpleDateFormat1x = new SimpleDateFormat(\"hh:mm a\");\r\n                    simpleDateFormat1x.setTimeZone(TimeZone.getTimeZone(\"GMT+8\"));\r\n                    Date currdatex = new Date();\r\n                    try {\r\n                        currdatex = simpleDateFormat1x.parse(sendTime);\r\n                        Log.e(\"sendTime currdate !!!!\", String.valueOf(sendTime));\r\n                    } catch (ParseException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    sendTime = simpleDateFormat1x.format(currdatex);\r\n                    Log.e(\"sendTime currdate###\", sendTime);\r\n\r\n                    if (BWSApplication.isNetworkConnected(context)) {\r\n                        BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        Call<SetReminderModel> listCall = APIClient.getClient().SetReminder(PlaylistID, UserId, CONSTANTS.FLAG_ONE,\r\n                                binding.tvTime.getText().toString(), TextUtils.join(\",\", remiderDays));\r\n                        listCall.enqueue(new Callback<SetReminderModel>() {\r\n                            @Override\r\n                            public void onResponse(Call<SetReminderModel> call, Response<SetReminderModel> response) {\r\n                                if (response.isSuccessful()) {\r\n                                    Log.e(\"remiderDays\", TextUtils.join(\",\", remiderDays));\r\n                                    remiderDays.clear();\r\n                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    SetReminderModel listModel = response.body();\r\n                                    BWSApplication.showToast(listModel.getResponseMessage(), activity);\r\n                                    if (ComeScreenReminder == 1) {\r\n                                        Intent i = new Intent(context, ReminderDetailsActivity.class);\r\n                                        startActivity(i);\r\n                                        finish();\r\n                                    } else {\r\n                                        finish();\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            @Override\r\n                            public void onFailure(Call<SetReminderModel> call, Throwable t) {\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), context);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        RefreshButton();\r\n    }\r\n\r\n    public void RefreshButton() {\r\n        if (!PlaylistName.equalsIgnoreCase(\"\") || remiderDays.size() != 0) {\r\n            binding.btnSave.setEnabled(true);\r\n            binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n            binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n        } else {\r\n            binding.btnSave.setEnabled(false);\r\n            binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n            binding.btnSave.setBackgroundResource(R.drawable.gray_extra_round_corners);\r\n        }\r\n    }\r\n\r\n    private void prepareData(RecyclerView rvSelectPlaylist, LinearLayout llError, ProgressBar progressBar, FrameLayout progressBarHolder) {\r\n        if (BWSApplication.isNetworkConnected(context)) {\r\n            BWSApplication.showProgressBar(progressBar, progressBarHolder, activity);\r\n            Call<SelectPlaylistModel> listCall = APIClient.getClient().getAllPlayListing(UserId);\r\n            listCall.enqueue(new Callback<SelectPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<SelectPlaylistModel> call, Response<SelectPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(progressBar, progressBarHolder, activity);\r\n                        SelectPlaylistModel listModel = response.body();\r\n                        adapter = new SelectPlaylistAdapter(listModel.getResponseData());\r\n                        rvSelectPlaylist.setAdapter(adapter);\r\n\r\n                        if (listModel.getResponseData().size() == 0) {\r\n                            llError.setVisibility(View.GONE);\r\n                            rvSelectPlaylist.setVisibility(View.GONE);\r\n                        } else {\r\n                            llError.setVisibility(View.GONE);\r\n                            rvSelectPlaylist.setVisibility(View.VISIBLE);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SelectPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(progressBar, progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), context);\r\n        }\r\n    }\r\n\r\n    public class SelectPlaylistAdapter extends RecyclerView.Adapter<SelectPlaylistAdapter.MyViewHolder> {\r\n        private List<SelectPlaylistModel.ResponseData> model;\r\n        public int mSelectedItem = -1;\r\n\r\n        public SelectPlaylistAdapter(List<SelectPlaylistModel.ResponseData> model) {\r\n            this.model = model;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            SelectPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.select_playlist_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.cbChecked.setTag(model.get(position));\r\n            holder.binding.cbChecked.setChecked(position == mSelectedItem);\r\n            holder.binding.cbChecked.setText(model.get(position).getName());\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return model.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            SelectPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolder(SelectPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n\r\n                binding.cbChecked.setOnClickListener(view -> {\r\n                    mSelectedItem = getAdapterPosition();\r\n                    notifyDataSetChanged();\r\n                    PlaylistID = model.get(mSelectedItem).getID();\r\n                    PlaylistName = model.get(mSelectedItem).getName();\r\n                    ShowPlaylistName();\r\n                    dialog.dismiss();\r\n                    RefreshButton();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (ComeScreenReminder == 1) {\r\n            Intent i = new Intent(context, ReminderDetailsActivity.class);\r\n            startActivity(i);\r\n            finish();\r\n        } else {\r\n            finish();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/ReminderModule/Activities/ReminderActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/ReminderModule/Activities/ReminderActivity.java	(date 1602681193773)
@@ -377,7 +377,7 @@
     }
 
     public void RefreshButton() {
-        if (!PlaylistName.equalsIgnoreCase("") || remiderDays.size() != 0) {
+        if (!PlaylistName.equalsIgnoreCase("") && remiderDays.size() != 0) {
             binding.btnSave.setEnabled(true);
             binding.btnSave.setTextColor(getResources().getColor(R.color.white));
             binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewQueueActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.media.AudioAttributes;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.SystemClock;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.ItemTouchHelper;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.ItemMoveCallback;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.StartDragListener;\r\nimport com.brainwellnessspa.databinding.ActivityViewQueueBinding;\r\nimport com.brainwellnessspa.databinding.QueueListLayoutBinding;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPlaying;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class ViewQueueActivity extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener,/* AudioManager.OnAudioFocusChangeListener,*/ StartDragListener {\r\n    ActivityViewQueueBinding binding;\r\n    int position, listSize, startTime = 0;\r\n    String IsRepeat, IsShuffle, id, AudioId = \"\", ComeFromQueue = \"\", play = \"\", url, name;\r\n    Context ctx;\r\n    Activity activity;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<AddToQueueModel> addToQueueModelList, addToQueueModelList2;\r\n    ArrayList<AddToQueueModel> addToQueueModeNowPlaying;\r\n    SharedPreferences shared;\r\n    Boolean queuePlay, audioPlay;\r\n    QueueAdapter adapter;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    ItemTouchHelper touchHelper;\r\n    int mypos = 0,myCount;\r\n    long totalDuration,currentDuration,myProgress;\r\n    private long mLastClickTime = 0;\r\n    private Handler handler;\r\n    boolean addSong = false;\r\n    //    private AudioManager mAudioManager;\r\n    private Runnable UpdateSongTime = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            startTime = getStartTime();\r\n            Time t = Time.valueOf(\"00:00:00\");\r\n            if (queuePlay) {\r\n                if (listSize != 0) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                        }\r\n                    } else {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                } else {\r\n                    stopMedia();\r\n                }\r\n            } else if (audioPlay) {\r\n                if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else {\r\n                        t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                    }\r\n                } else {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else {\r\n                        t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                    }\r\n                }\r\n            }\r\n            if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                totalDuration = mediaPlayer.getDuration();\r\n            } else {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else {\r\n                    totalDuration = t.getTime();\r\n                }\r\n            }\r\n            myProgress = currentDuration;\r\n            currentDuration = getStartTime();\r\n\r\n            Log.e(\"myProgress old!!!\",String.valueOf(myProgress));\r\n            if(myProgress == currentDuration && myProgress!=0 && !isPause){\r\n                Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                myCount++;\r\n                Log.e(\"myCount\",String.valueOf(myCount));\r\n\r\n                if(myCount == 150){\r\n                    Log.e(\"myCount complete\",String.valueOf(myCount));\r\n                    callComplete();\r\n                    myCount = 0;\r\n                }\r\n            }\r\n            int progress = getProgressPercentage(currentDuration, totalDuration);\r\n            long diff = totalDuration - currentDuration;\r\n\r\n            if (currentDuration == totalDuration && currentDuration != 0&& !isStop) {\r\n                callComplete();\r\n            } else if (isPause) {\r\n                binding.simpleSeekbar.setProgress(oTime);\r\n            } else {\r\n                binding.simpleSeekbar.setProgress(progress);\r\n            }\r\n            binding.simpleSeekbar.setMax(100);\r\n            handler.postDelayed(this, 500);\r\n        }\r\n    };\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_view_queue);\r\n        ctx = ViewQueueActivity.this;\r\n        activity = ViewQueueActivity.this;\r\n\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        if (getIntent().getExtras() != null) {\r\n            AudioId = getIntent().getStringExtra(CONSTANTS.ID);\r\n        }\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            ComeFromQueue = getIntent().getStringExtra(\"ComeFromQueue\");\r\n        }\r\n        if (getIntent().getExtras() != null) {\r\n            play = getIntent().getStringExtra(\"play\");\r\n        }\r\n        handler = new Handler();\r\n        addToQueueModelList = new ArrayList<>();\r\n        addToQueueModelList2 = new ArrayList<>();\r\n\r\n        mainPlayModelList = new ArrayList<>();\r\n        shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json, type);\r\n            addToQueueModelList2 = gson.fromJson(json, type);\r\n        }\r\n        String json2 = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        Type type2 = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = gson.fromJson(json2, type2);\r\n        SharedPreferences Status = getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n/*        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        binding.rvQueueList.setFocusable(false);\r\n//        binding.nestedScroll.requestFocus();\r\n\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            callBack();\r\n        });\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                1, 1, 0.14f, 0);\r\n        binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        getPrepareShowData(position);\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        callAdapterMethod();\r\n        binding.llNowPlaying.setOnClickListener(view -> {\r\n            handler.removeCallbacks(UpdateSongTime);\r\n            if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n                isPause = false;\r\n            }\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson2 = new Gson();\r\n            String json22 = gson2.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json22);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.llPause.setOnClickListener(view -> {\r\n            handler.removeCallbacks(UpdateSongTime);\r\n            binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n            pauseMedia();\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        });\r\n\r\n        binding.llPlay.setOnClickListener(view -> {\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.VISIBLE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            resumeMedia();\r\n            isPause = false;\r\n            handler.postDelayed(UpdateSongTime, 500);\r\n        });\r\n\r\n        binding.llnext.setOnClickListener(view -> {\r\n\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                stopMedia();\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n                isPause = false;\r\n                if (IsRepeat.equalsIgnoreCase(\"1\")||IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    // repeat is on play same song again\r\n                    if (position < listSize - 1) {\r\n                        position = position + 1;\r\n                    } else {\r\n                        position = 0;\r\n                    }\r\n                    getPrepareShowData(position);\r\n                } /*else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    getPrepareShowData(position);\r\n                } */else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                    // shuffle is on - play a random song\r\n                    if (queuePlay) {\r\n                        adapter.callRemoveList(position,\"1\");\r\n                        listSize = addToQueueModelList.size();\r\n                        if (listSize == 0) {\r\n                            stopMedia();\r\n                        } else if (listSize == 1) {\r\n                            stopMedia();\r\n                        } else {\r\n                            Random random = new Random();\r\n                            position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    } else {\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    if (queuePlay) {\r\n                        adapter.callRemoveList(position,\"1\");\r\n                        listSize = addToQueueModelList.size();\r\n                        if (position < listSize - 1) {\r\n                            getPrepareShowData(position);\r\n                        } else {\r\n                            if (listSize == 0) {\r\n                                savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                                stopMedia();\r\n                            } else {\r\n                                position = 0;\r\n                                getPrepareShowData(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (position < listSize - 1) {\r\n                            position = position + 1;\r\n                            getPrepareShowData(position);\r\n                        } else if (listSize != 1) {\r\n                            position = 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        });\r\n\r\n        binding.llprev.setOnClickListener(view -> {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                stopMedia();\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n                isPause = false;\r\n                if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    // repeat is on play same song again\r\n                    if (position > 0) {\r\n                        position = position - 1;\r\n                        getPrepareShowData(position);\r\n                    } else if (listSize != 1) {\r\n                        position = listSize - 1;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    getPrepareShowData(position);\r\n                } */else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                    // shuffle is on - play a random song\r\n                    if (queuePlay) {\r\n                        adapter.callRemoveList(position,\"1\");\r\n                        listSize = addToQueueModelList.size();\r\n                        if (listSize == 0) {\r\n                            stopMedia();\r\n                        } else if (listSize == 1) {\r\n                            stopMedia();\r\n                        } else {\r\n                            Random random = new Random();\r\n                            position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    } else {\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    if (queuePlay) {\r\n                        adapter.callRemoveList(position,\"1\");\r\n                        listSize = addToQueueModelList.size();\r\n                        if (position > 0) {\r\n                            getPrepareShowData(position - 1);\r\n                        } else {\r\n                            if (listSize == 0) {\r\n                                savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                                stopMedia();\r\n                            } else {\r\n                                position = 0;\r\n                                getPrepareShowData(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (position > 0) {\r\n                            position = position - 1;\r\n\r\n                            getPrepareShowData(position);\r\n                        } else if (listSize != 1) {\r\n                            position = listSize - 1;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callAdapterMethod() {\r\n        if (addToQueueModelList.size() != 0) {\r\n            if (queuePlay) {\r\n                if (addToQueueModelList.get(position).getName().equalsIgnoreCase(binding.tvName.getText().toString())) {\r\n                    mypos = position;\r\n                    addToQueueModelList2.remove(position);\r\n                }\r\n            }\r\n            adapter = new QueueAdapter(addToQueueModelList2, ctx, this);\r\n            RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(ctx);\r\n            binding.rvQueueList.setLayoutManager(mLayoutManager);\r\n            binding.rvQueueList.setItemAnimator(new DefaultItemAnimator());\r\n            ItemTouchHelper.Callback callback =\r\n                    new ItemMoveCallback(adapter);\r\n            touchHelper = new ItemTouchHelper(callback);\r\n            touchHelper.attachToRecyclerView(binding.rvQueueList);\r\n            binding.rvQueueList.setAdapter(adapter);\r\n        }\r\n    }\r\n\r\n    public void GetMedia(String url, Context ctx, String PlaylistId) {\r\n\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getaudioByPlaylist(url, PlaylistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (isPause) {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n//                    resumeMedia();\r\n                } else if ((isMediaStart || isPlaying()) && !isPause) {\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                } else {\r\n                    callMedia();\r\n                }\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void getPrepareShowData(int position) {\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n        } else if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n        }\r\n\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        }/* else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } */ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n        if (audioPlay) {\r\n            id = mainPlayModelList.get(position).getID();\r\n            url = mainPlayModelList.get(position).getAudioFile();\r\n            name = mainPlayModelList.get(position).getName();\r\n            setInIt(mainPlayModelList.get(position).getName(), mainPlayModelList.get(position).getAudiomastercat(),\r\n                    mainPlayModelList.get(position).getImageFile(), mainPlayModelList.get(position).getAudioDuration());\r\n            GetMedia(url, ctx, mainPlayModelList.get(position).getPlaylistID());\r\n        } else if (queuePlay) {\r\n            if (listSize == 1) {\r\n                position = 0;\r\n            }\r\n            id = addToQueueModelList.get(position).getID();\r\n            url = addToQueueModelList.get(position).getAudioFile();\r\n            name = addToQueueModelList.get(position).getName();\r\n            setInIt(addToQueueModelList.get(position).getName(), addToQueueModelList.get(position).getAudiomastercat(),\r\n                    addToQueueModelList.get(position).getImageFile(), addToQueueModelList.get(position).getAudioDuration());\r\n            GetMedia(url, ctx, addToQueueModelList.get(position).getPlaylistID());\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson2 = new Gson();\r\n            String json3 = gson2.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json3);\r\n            editor.commit();\r\n            startTime = getStartTime();\r\n        }\r\n        addToRecentPlay();\r\n        binding.simpleSeekbar.setClickable(true);\r\n        handler.postDelayed(UpdateSongTime, 500);\r\n        if (isMediaStart) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n            });\r\n        }\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n    }\r\n\r\n    private void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if (null == mediaPlayer) {\r\n            mediaPlayer = new MediaPlayer();\r\n            Log.e(\"Playinggggg\", \"Playinggggg\");\r\n        }\r\n        try {\r\n            if (mediaPlayer == null)\r\n                mediaPlayer = new MediaPlayer();\r\n            if (mediaPlayer.isPlaying()) {\r\n                Log.e(\"Playinggggg\", \"stoppppp\");\r\n                mediaPlayer.stop();\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n            }\r\n            mediaPlayer = new MediaPlayer();\r\n            if (download.equalsIgnoreCase(\"1\")) {\r\n                mediaPlayer.setDataSource(fileDescriptor);\r\n            } else {\r\n                mediaPlayer.setDataSource(url);\r\n            }\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                mediaPlayer.setAudioAttributes(\r\n                        new AudioAttributes\r\n                                .Builder()\r\n                                .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                .build());\r\n            }\r\n            mediaPlayer.prepareAsync();\r\n            isPrepare = true;\r\n        } catch (IllegalStateException | IOException e) {\r\n            FileDescriptor fileDescriptor1 = null;\r\n            setMediaPlayer(\"0\", fileDescriptor1);\r\n            e.printStackTrace();\r\n        }\r\n        if (!mediaPlayer.isPlaying()) {\r\n            mediaPlayer.setOnPreparedListener(mp -> {\r\n                Log.e(\"Playinggggg\", \"Startinggg\");\r\n                mediaPlayer.start();\r\n                isMediaStart = true;\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n            });\r\n        }\r\n    }\r\n\r\n    private void callMedia() {\r\n        FileDescriptor fileDescriptor = null;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            binding.llProgressBar.setVisibility(View.VISIBLE);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n\r\n            try {\r\n                byte[] decrypt = null;\r\n                decrypt = downloadMedia.decrypt(name);\r\n                if (decrypt != null) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    fileDescriptor = FileUtils.getTempFileDescriptor(getApplicationContext(), decrypt);\r\n                    setMediaPlayer(\"1\", fileDescriptor);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        setMediaPlayer(\"0\", fileDescriptor);\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                setMediaPlayer(\"0\", fileDescriptor);\r\n            } else {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callComplete() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        isPause = false;\r\n        if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            if (position < (listSize - 1)) {\r\n                position = position + 1;\r\n            } else {\r\n                position = 0;\r\n            }\r\n            getPrepareShowData(position);\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            getPrepareShowData(position);\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            // shuffle is on - play a random song\r\n            if (queuePlay) {\r\n                adapter.callRemoveList(position,\"1\");\r\n                listSize = addToQueueModelList.size();\r\n                if (listSize == 0) {\r\n                    stopMedia();\r\n                } else if (listSize == 1) {\r\n                    position = 0;\r\n                    getPrepareShowData(position);\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            } else {\r\n                if (listSize == 1) {\r\n\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            }\r\n        } else {\r\n            if (queuePlay) {\r\n                adapter.callRemoveList(position,\"1\");\r\n                listSize = addToQueueModelList.size();\r\n                if (position < listSize - 1) {\r\n                    getPrepareShowData(position);\r\n                } else {\r\n                    if (listSize == 0) {\r\n                        stopMedia();\r\n                    } else {\r\n                        position = 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            } else {\r\n                if (position < (listSize - 1)) {\r\n                    position = position + 1;\r\n                    getPrepareShowData(position);\r\n                } else {\r\n                    if (listSize == 1) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        stopMedia();\r\n                    } else {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llnext.setEnabled(false);\r\n                binding.llnext.setClickable(false);\r\n                binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llprev.setEnabled(false);\r\n                binding.llprev.setClickable(false);\r\n                binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }*/ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n    }\r\n\r\n    private void setInIt(String name, String audiomastercat, String imageFile, String audioDuration) {\r\n        binding.tvTitle.setText(name);\r\n        binding.tvName.setText(name);\r\n        binding.tvCategory.setText(audiomastercat);\r\n        Glide.with(ctx).load(imageFile).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n        binding.tvTime.setText(audioDuration);\r\n    }\r\n\r\n    private void addToRecentPlay() {\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        String UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void callBack() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        if (ComeFromQueue.equalsIgnoreCase(\"1\")) {\r\n            Intent i = new Intent(ctx, AddQueueActivity.class);\r\n            i.putExtra(\"ID\", AudioId);\r\n            i.putExtra(\"play\", play);\r\n            startActivity(i);\r\n            finish();\r\n        } else if (ComeFromQueue.equalsIgnoreCase(\"0\") ||\r\n                ComeFromQueue.equalsIgnoreCase(\"\")) {\r\n            if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n                isPause = false;\r\n            }\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            startActivity(i);\r\n            finish();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n   /*     if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if ((isMediaStart || isPlaying()) && !isPause) {\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.VISIBLE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        } else {\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        }*/\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callBack();\r\n        super.onBackPressed();\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler.postDelayed(UpdateSongTime, 500);\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n     /*   handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        int totalDuration = getEndTime();\r\n\r\n        int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n        oTime = binding.simpleSeekbar.getProgress();\r\n        // forward or backward to certain seconds\r\n        SeekTo(currentPosition);\r\n\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void requestDrag(RecyclerView.ViewHolder viewHolder) {\r\n        touchHelper.startDrag(viewHolder);\r\n    }\r\n\r\n /*   @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n                resumeMedia();\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if (isMediaStart) {\r\n                    pauseMedia();\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }*/\r\n\r\n    public class QueueAdapter extends RecyclerView.Adapter<QueueAdapter.MyViewHolder> implements ItemMoveCallback.ItemTouchHelperContract {\r\n        ArrayList<AddToQueueModel> listModelList;\r\n        Context ctx;\r\n        StartDragListener startDragListener;\r\n\r\n        public QueueAdapter(ArrayList<AddToQueueModel> listModelList, Context ctx, StartDragListener startDragListener) {\r\n            this.listModelList = listModelList;\r\n            this.ctx = ctx;\r\n            this.startDragListener = startDragListener;\r\n\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            QueueListLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.queue_list_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position1) {\r\n            AddToQueueModel listModel = listModelList.get(position1);\r\n\r\n            holder.binding.tvTitle.setText(listModel.getName());\r\n            holder.binding.tvTime.setText(listModel.getAudioDuration());\r\n            binding.tvCategory.setText(listModel.getAudiomastercat());\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(listModel.getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            holder.binding.llRemove.setOnClickListener(view -> callRemoveList(position1,\"0\"));\r\n            holder.binding.llSort.setOnTouchListener((v, event) -> {\r\n                if (event.getAction() ==\r\n                        MotionEvent.ACTION_DOWN) {\r\n                    startDragListener.requestDrag(holder);\r\n                }\r\n                if (event.getAction() ==\r\n                        MotionEvent.ACTION_UP) {\r\n                    startDragListener.requestDrag(holder);\r\n                }\r\n                return false;\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    if (isPrepare || isMediaStart || isPause) {\r\n                        stopMedia();\r\n                    }\r\n                    isPause = false;\r\n                    isPrepare = false;\r\n                    isMediaStart = false;\r\n\r\n                    setInIt(listModel.getName(), listModel.getAudiomastercat(),\r\n                            listModel.getImageFile(), listModel.getAudioDuration());\r\n                    if (queuePlay)\r\n                        addToQueueModelList.remove(mypos);\r\n                    savePrefQueue(position1, true, false, addToQueueModelList, ctx);\r\n                    position = position1;\r\n                    getPrepareShowData(position);\r\n                    callRemoveList1(position1);\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            });\r\n        }\r\n\r\n        public void callRemoveList1(int position) {\r\n            listModelList.remove(position);\r\n            notifyDataSetChanged();\r\n        }\r\n\r\n        public void callRemoveList(int position1,String s) {\r\n            for (int i = 0; i < addToQueueModelList.size(); i++) {\r\n                if (addToQueueModelList.get(i).getName().equalsIgnoreCase(binding.tvName.getText().toString()))\r\n                    addToQueueModelList.remove(i);\r\n            }\r\n            setInIt(listModelList.get(position).getName(), listModelList.get(position).getAudiomastercat(),\r\n                    listModelList.get(position).getImageFile(), listModelList.get(position).getAudioDuration());\r\n            String Name = listModelList.get(position1).getName();\r\n            listModelList.remove(position1);\r\n       /*     for (int i = 0; i < addToQueueModelList.size(); i++) {\r\n                if (addToQueueModelList.get(i).getName().equalsIgnoreCase(Name))\r\n                    addToQueueModelList.remove(i);\r\n            }*/\r\n            notifyDataSetChanged();\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();\r\n            if(s.equalsIgnoreCase(\"0\")){\r\n            BWSApplication.showToast(\"The audio has been removed from the queue\", ctx);\r\n            }\r\n            addToQueueModelList2 = listModelList;\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        @Override\r\n        public void onRowMoved(int fromPosition, int toPosition) {\r\n            if (fromPosition < toPosition) {\r\n                for (int i = fromPosition; i < toPosition; i++) {\r\n                    Collections.swap(listModelList, i, i + 1);\r\n                }\r\n            } else {\r\n                for (int i = fromPosition; i > toPosition; i--) {\r\n                    Collections.swap(listModelList, i, i - 1);\r\n                }\r\n            }\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = \"\";\r\n            if (queuePlay && !addSong) {\r\n                ArrayList<AddToQueueModel> listModelList1 = new ArrayList<>();\r\n                listModelList1.clear();\r\n                listModelList1 = listModelList;\r\n                listModelList1.add(addToQueueModelList.get(mypos));\r\n                addSong = true;\r\n                json = gson.toJson(listModelList1);\r\n            } else {\r\n                json = gson.toJson(listModelList);\r\n            }\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();\r\n            addToQueueModelList2 = listModelList;\r\n            notifyItemMoved(fromPosition, toPosition);\r\n\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onRowClear(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            QueueListLayoutBinding binding;\r\n\r\n            public MyViewHolder(QueueListLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewQueueActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewQueueActivity.java	(date 1602679387403)
@@ -999,7 +999,7 @@
             editor.putString(CONSTANTS.PREF_KEY_queueList, json);
             editor.commit();
             if(s.equalsIgnoreCase("0")){
-            BWSApplication.showToast("The audio has been removed from the queue", ctx);
+            BWSApplication.showToast("Removed from the queue", ctx);
             }
             addToQueueModelList2 = listModelList;
         }
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.media.AudioAttributes;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.SystemClock;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityPlayWellnessBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity.comeFromAddToQueue;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.disclaimer;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isRemoved;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadProgress;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.ToBackward;\r\nimport static com.brainwellnessspa.Utility.MusicService.ToForward;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isprogressbar;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class PlayWellnessActivity extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener/*, AudioManager.OnAudioFocusChangeListener, OnProgressListener*/ {\r\n    ActivityPlayWellnessBinding binding;\r\n    String IsRepeat = \"\", IsShuffle = \"\", UserID, PlaylistId = \"\", AudioFlag, id, name, url;\r\n    int startTime = 0, endTime = 0, position, listSize, myCount, progress;\r\n    Context ctx;\r\n    Activity activity;\r\n    Boolean queuePlay, audioPlay;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<AddToQueueModel> addToQueueModelList;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    long myProgress = 0;\r\n    private long mLastClickTime = 0, totalDuration, currentDuration = 0;\r\n    private Handler handler;\r\n    private Handler handler1;\r\n    //        private AudioManager mAudioManager;\r\n    private Runnable UpdateSongTime = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            Time t = Time.valueOf(\"00:00:00\");\r\n            String endtimetext = \"\";\r\n            if (queuePlay) {\r\n                if (listSize != 0) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (downloadAudioDetailsList.size() != 0) {\r\n                            endtimetext = downloadAudioDetailsList.get(0).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                } else {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    stopMedia();\r\n                }\r\n            } else if (audioPlay) {\r\n                if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                    if (downloadAudioDetailsList.size() != 0) {\r\n                        endtimetext = downloadAudioDetailsList.get(0).getAudioDuration();\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                        }\r\n                    } else {\r\n                        endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                } else {\r\n                    endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else {\r\n                        t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                    }\r\n                }\r\n            }\r\n            if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else\r\n                    totalDuration = t.getTime();\r\n            } else {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else\r\n                    totalDuration = t.getTime();\r\n            }\r\n            myProgress = currentDuration;\r\n            currentDuration = getStartTime();\r\n\r\n            Log.e(\"myProgress old!!!\", String.valueOf(myProgress));\r\n            if (myProgress == currentDuration && myProgress != 0 && !isPause) {\r\n                Log.e(\"myProgress\", String.valueOf(myProgress));\r\n                myCount++;\r\n                Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                if (myCount == 150) {\r\n                    Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                    callComplete();\r\n                    myCount = 0;\r\n                }\r\n            }\r\n            progress = getProgressPercentage(currentDuration, totalDuration);\r\n            if (currentDuration == 0 && isprogressbar) {\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n            } else if (currentDuration > 1 && !isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                isprogressbar = false;\r\n            } else if (currentDuration >= 1 && isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                isprogressbar = false;\r\n            }\r\n            //Log.d(\"Progress\", \"\"+progress);\r\n            startTime = getStartTime();\r\n            if (currentDuration == totalDuration && currentDuration != 0 && !isStop) {\r\n                binding.tvStartTime.setText(endtimetext);\r\n                callComplete();\r\n            } else if (isPause) {\r\n                binding.simpleSeekbar.setProgress(oTime);\r\n                int timeeee = progressToTimer(oTime, (int) (totalDuration));\r\n                binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                        TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n            } else {\r\n                binding.simpleSeekbar.setProgress(progress);\r\n                binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(startTime),\r\n                        TimeUnit.MILLISECONDS.toSeconds(startTime) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(startTime))));\r\n            }\r\n            binding.simpleSeekbar.setMax(100);\r\n\r\n            // Running this thread after 100 milliseconds\r\n            handler.postDelayed(this, 100);\r\n        }\r\n    };\r\n    private Runnable UpdateSongTime1 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n                if (downloadProgress <= 100) {\r\n                    binding.pbProgress.setProgress(downloadProgress);\r\n                    binding.pbProgress.setVisibility(View.VISIBLE);\r\n                    binding.ivDownloads.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.pbProgress.setVisibility(View.GONE);\r\n                    binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                    handler1.removeCallbacks(UpdateSongTime1);\r\n                }\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }\r\n            handler1.postDelayed(this, 500);\r\n        }\r\n    };\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n//        overridePendingTransition(R.anim.enter, R.anim.exit);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_play_wellness);\r\n        handler = new Handler();\r\n        handler1 = new Handler();\r\n        ctx = PlayWellnessActivity.this;\r\n        activity = PlayWellnessActivity.this;\r\n        addToQueueModelList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        mainPlayModelList = new ArrayList<>();\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences Status = getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = gson.fromJson(json, type);\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                1, 1, 0.92f, 0);\r\n        binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n/*        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llMore.setClickable(true);\r\n                binding.llMore.setEnabled(true);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llViewQueue.setClickable(true);\r\n                binding.llViewQueue.setEnabled(true);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        getPrepareShowData(position);\r\n\r\n        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }\r\n        callRepeatShuffle();\r\n        if (isMediaStart) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n            });\r\n        }\r\n        binding.llBack.setOnClickListener(view -> {\r\n            callBack();\r\n        });\r\n\r\n        binding.llLike.setOnClickListener(view -> {\r\n            callLike();\r\n        });\r\n\r\n        binding.llRepeat.setOnClickListener(view -> callRepeat());\r\n\r\n        binding.llShuffle.setOnClickListener(view -> callShuffle());\r\n\r\n        binding.llDownload.setOnClickListener(view -> callDownload());\r\n\r\n        binding.llMore.setOnClickListener(view -> {\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            Intent i = new Intent(ctx, AddQueueActivity.class);\r\n            if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                i.putExtra(\"play\", \"TopCategories\");\r\n            } else\r\n                i.putExtra(\"play\", \"play\");\r\n            i.putExtra(\"ID\", id);\r\n            i.putExtra(\"position\", position);\r\n            i.putExtra(\"PlaylistAudioId\", \"\");\r\n            startActivity(i);\r\n//            finish();\r\n        });\r\n\r\n        binding.llViewQueue.setOnClickListener(view -> {\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n//            pauseMedia();\r\n            if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n                isPause = false;\r\n            }\r\n            SharedPreferences ViewQueue = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = ViewQueue.edit();\r\n            Gson gsonx = new Gson();\r\n            String jsonx = gsonx.toJson(addToQueueModelList);\r\n            if (queuePlay) {\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, jsonx);\r\n            }\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, ViewQueueActivity.class);\r\n            i.putExtra(\"ComeFromQueue\", \"0\");\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.llPlay.setOnClickListener(v -> {\r\n            if (!isMediaStart) {\r\n                callMedia();\r\n            } else {\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                resumeMedia();\r\n                isPause = false;\r\n            }\r\n            handler.postDelayed(UpdateSongTime, 100);\r\n        });\r\n\r\n        binding.llPause.setOnClickListener(view -> {\r\n            handler.removeCallbacks(UpdateSongTime);\r\n            binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n            pauseMedia();\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        });\r\n\r\n        binding.llForwardSec.setOnClickListener(v -> {\r\n            ToForward(ctx);\r\n            setProgressBar();\r\n            if (!binding.llPlay.isEnabled()) {\r\n                binding.llPlay.setEnabled(true);\r\n            }\r\n        });\r\n\r\n        binding.llBackWordSec.setOnClickListener(v -> {\r\n            ToBackward(ctx);\r\n            setProgressBar();\r\n            if (!binding.llPlay.isEnabled()) {\r\n                binding.llPlay.setEnabled(true);\r\n            }\r\n        });\r\n\r\n        binding.llnext.setOnClickListener(view -> {\r\n            stopMedia();\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isPause = false;\r\n            if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                // repeat is on play same song again\r\n                if (position < listSize - 1) {\r\n                    position = position + 1;\r\n                } else {\r\n                    position = 0;\r\n                }\r\n                getPrepareShowData(position);\r\n            }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (listSize == 0) {\r\n                            stopMedia();\r\n                        } else if (listSize == 1) {\r\n                            stopMedia();\r\n                        } else {\r\n                            Random random = new Random();\r\n                            position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (position < listSize - 1) {\r\n                            getPrepareShowData(position);\r\n                        } else {\r\n                            if (listSize == 0) {\r\n                                savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                                stopMedia();\r\n                            } else {\r\n                                position = 0;\r\n                                getPrepareShowData(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    if (position < listSize - 1) {\r\n                        position = position + 1;\r\n                        getPrepareShowData(position);\r\n                    } else if (listSize != 1) {\r\n                        position = 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        binding.llprev.setOnClickListener(view -> {\r\n            stopMedia();\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isPause = false;\r\n            if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                // repeat is on play same song again\r\n                if (position > 0) {\r\n                    position = position - 1;\r\n                    getPrepareShowData(position);\r\n                } else if (listSize != 1) {\r\n                    position = listSize - 1;\r\n                    getPrepareShowData(position);\r\n                }\r\n            }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (listSize == 0) {\r\n                            stopMedia();\r\n                        } else if (listSize == 1) {\r\n                            stopMedia();\r\n                        } else {\r\n                            Random random = new Random();\r\n                            position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (position > 0) {\r\n                            getPrepareShowData(position - 1);\r\n                        } else {\r\n                            if (listSize == 0) {\r\n                                savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                                binding.llPlay.setVisibility(View.VISIBLE);\r\n                                binding.llPause.setVisibility(View.GONE);\r\n                                stopMedia();\r\n                            } else {\r\n                                position = 0;\r\n                                getPrepareShowData(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    if (position > 0) {\r\n                        position = position - 1;\r\n\r\n                        getPrepareShowData(position);\r\n                    } else if (listSize != 1) {\r\n                        position = listSize - 1;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callRepeatShuffle() {\r\n        if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llShuffle.setClickable(true);\r\n                binding.llShuffle.setEnabled(true);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llShuffle.setClickable(true);\r\n                binding.llShuffle.setEnabled(true);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n        if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.llRepeat.setClickable(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.llRepeat.setClickable(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                IsRepeat = \"0\";\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.llRepeat.setClickable(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void setProgressBar() {\r\n        Time t = Time.valueOf(\"00:00:00\");\r\n        String endtimetext = \"\";\r\n        if (queuePlay) {\r\n            if (listSize != 0) {\r\n                endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n            } else {\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                stopMedia();\r\n            }\r\n        } else if (audioPlay) {\r\n            endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n        }\r\n        totalDuration = t.getTime();\r\n        currentDuration = getStartTime();\r\n\r\n        int progress = getProgressPercentage(currentDuration, totalDuration);\r\n        //Log.d(\"Progress\", \"\"+progress);\r\n        startTime = getStartTime();\r\n        if (currentDuration == totalDuration) {\r\n            binding.tvStartTime.setText(endtimetext);\r\n        } else if (isPause) {\r\n            binding.simpleSeekbar.setProgress(progress);\r\n            int timeeee = progressToTimer(progress, (int) (totalDuration));\r\n            binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                    TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        } else {\r\n            binding.simpleSeekbar.setProgress(progress);\r\n            binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(startTime),\r\n                    TimeUnit.MILLISECONDS.toSeconds(startTime) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(startTime))));\r\n        }\r\n    }\r\n\r\n    private void callDownload() {\r\n        if(!url.equalsIgnoreCase(\"\")) {\r\n            disableDownload();\r\n            byte[] EncodeBytes = new byte[1024];\r\n            List<String> url1 = new ArrayList<>();\r\n            List<String> name1 = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url1.addAll(audioFile1);\r\n                    name1.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            url1.add(url);\r\n            name1.add(name);\r\n            downloadPlaylistId.add(\"\");\r\n            if (url1.size() != 0) {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url1);\r\n                String nameJson = gson.toJson(name1);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n            }\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n            downloadMedia.encrypt1(url1, name1, downloadPlaylistId);\r\n            if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n                handler1.postDelayed(UpdateSongTime1, 500);\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }\r\n            SaveMedia(EncodeBytes, FileUtils.getFilePath(getApplicationContext(), name));\r\n   /*     if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<DownloadPlaylistModel> listCall = APIClient.getClient().getDownloadlistPlaylist(UserID, id, PlaylistId);\r\n            listCall.enqueue(new Callback<DownloadPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<DownloadPlaylistModel> call, Response<DownloadPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        DownloadPlaylistModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")\r\n                                || model.getResponseData().getFlag().equalsIgnoreCase(\"\")) {\r\n                            binding.llDownloads.setClickable(true);\r\n                            binding.llDownloads.setEnabled(true);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                            binding.llDownloads.setClickable(false);\r\n                            binding.llDownloads.setEnabled(false);\r\n                        }\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<DownloadPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }*/\r\n        }\r\n    }\r\n\r\n    private void SaveMedia(byte[] EncodeBytes, String dirPath) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                if (queuePlay) {\r\n                    downloadAudioDetails.setID(addToQueueModelList.get(position).getID());\r\n                    downloadAudioDetails.setName(addToQueueModelList.get(position).getName());\r\n                    downloadAudioDetails.setAudioFile(addToQueueModelList.get(position).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(addToQueueModelList.get(position).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(addToQueueModelList.get(position).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(addToQueueModelList.get(position).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(addToQueueModelList.get(position).getImageFile());\r\n                    downloadAudioDetails.setLike(addToQueueModelList.get(position).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(addToQueueModelList.get(position).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                } else if (audioPlay) {\r\n                    downloadAudioDetails.setID(mainPlayModelList.get(position).getID());\r\n                    downloadAudioDetails.setName(mainPlayModelList.get(position).getName());\r\n                    downloadAudioDetails.setAudioFile(mainPlayModelList.get(position).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(mainPlayModelList.get(position).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(mainPlayModelList.get(position).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(mainPlayModelList.get(position).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(mainPlayModelList.get(position).getImageFile());\r\n                    downloadAudioDetails.setLike(mainPlayModelList.get(position).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(mainPlayModelList.get(position).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                }\r\n\r\n                DatabaseClient.getInstance(getApplicationContext())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                disableDownload();\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void disableDownload() {\r\n        binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        binding.llDownload.setClickable(false);\r\n        binding.llDownload.setEnabled(false);\r\n    }\r\n\r\n    private void callShuffle() {\r\n        if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                IsShuffle = \"1\";\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"1\");\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                editor.commit();\r\n                IsRepeat = \"\";\r\n                if (queuePlay) {\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                BWSApplication.showToast(\"Shuffle mode has been turned on\", ctx);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n            BWSApplication.showToast(\"Shuffle mode has been turned off\", ctx);\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n    }\r\n\r\n    private void callRepeat() {\r\n\r\n        if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"0\");\r\n            if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            }\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            IsRepeat = \"0\";\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n            BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"1\");\r\n            IsRepeat = \"1\";\r\n            if (listSize == 1) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                IsRepeat = \"\";\r\n                BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            editor.commit();\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n        } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n            IsRepeat = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            editor.commit();\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n            BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n        }\r\n    }\r\n\r\n    private void callLike() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(id, UserID);\r\n            listCall.enqueue(new Callback<AudioLikeModel>() {\r\n                @Override\r\n                public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        AudioLikeModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                        }\r\n                        if (queuePlay) {\r\n                            addToQueueModelList.get(position).setLike(model.getResponseData().getFlag());\r\n                        } else\r\n                            mainPlayModelList.get(position).setLike(model.getResponseData().getFlag());\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(mainPlayModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                        String json1 = gson.toJson(addToQueueModelList);\r\n                        if (queuePlay) {\r\n                            editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n                        }\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                        editor.commit();\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AudioLikeModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void addToRecentPlay() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public void GetMedia(String AudioFile, Context ctx, String download, String PlayListId) {\r\n\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getaudioByPlaylist(AudioFile, \"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if(!AudioFile.equalsIgnoreCase(\"\")) {\r\n                    if (downloadAudioDetailsList.size() != 0) {\r\n                        if (downloadAudioDetailsList.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                            binding.llDownload.setClickable(false);\r\n                            binding.llDownload.setEnabled(false);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                        } else/* if (!mainPlayModelList.get(position).getDownload().equalsIgnoreCase(\"\")) */ {\r\n                            binding.llDownload.setClickable(true);\r\n                            binding.llDownload.setEnabled(true);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                        }\r\n                    } else if (download.equalsIgnoreCase(\"1\")) {\r\n                        binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                        binding.llDownload.setClickable(false);\r\n                        binding.llDownload.setEnabled(false);\r\n                        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                    } else/* if (!mainPlayModelList.get(position).getDownload().equalsIgnoreCase(\"\")) */ {\r\n                        binding.llDownload.setClickable(true);\r\n                        binding.llDownload.setEnabled(true);\r\n                        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n                        binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                    }\r\n                }\r\n           /* if (!isMediaStart) {\r\n             callMedia();\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n            } else {*/\r\n                if (isPause) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n                    int timeeee = progressToTimer(oTime, (int) (totalDuration));\r\n                    binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                            TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n//                    resumeMedia();\r\n                } else if (isMediaStart && !isPause) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                    binding.progressBar.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    callMedia();\r\n                }\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void getPrepareShowData(int position) {\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        if (queuePlay) {\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setClickable(false);\r\n        }\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n        } else if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n        }\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.llShuffle.setClickable(false);\r\n            IsShuffle = \"\";\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }*/ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llShuffle.setEnabled(true);\r\n            binding.llnext.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.llShuffle.setClickable(true);\r\n            if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n            if (listSize == 1) {\r\n                position = 0;\r\n            }\r\n            id = addToQueueModelList.get(position).getID();\r\n            name = addToQueueModelList.get(position).getName();\r\n            url = addToQueueModelList.get(position).getAudioFile();\r\n            GetMedia(url, ctx, addToQueueModelList.get(position).getDownload(), addToQueueModelList.get(position).getPlaylistID());\r\n            binding.tvName.setText(addToQueueModelList.get(position).getName());\r\n            binding.tvDireName.setText(R.string.Directions);\r\n            binding.tvDireName.setText(R.string.Directions);\r\n            if (addToQueueModelList.get(position).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                binding.llDirection.setVisibility(View.GONE);\r\n            } else {\r\n                binding.llDirection.setVisibility(View.VISIBLE);\r\n                binding.tvDireDesc.setText(addToQueueModelList.get(position).getAudioDirection());\r\n            }\r\n            binding.tvTitle.setText(addToQueueModelList.get(position).getAudiomastercat());\r\n            binding.tvDesc.setText(addToQueueModelList.get(position).getAudioSubCategory());\r\n            if (addToQueueModelList.get(position).getPlaylistID() == null) {\r\n                addToQueueModelList.get(position).setPlaylistID(\"\");\r\n            }\r\n            Glide.with(getApplicationContext()).load(addToQueueModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n            if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n            } else if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n            }\r\n            binding.tvSongTime.setText(addToQueueModelList.get(position).getAudioDuration());\r\n\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            startTime = getStartTime();\r\n\r\n        } else if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n            if (listSize == 2) {\r\n                if (mainPlayModelList.get(0).getAudioFile().equalsIgnoreCase(\"\") && !disclaimer) {\r\n                    disclaimer = true;\r\n                    position = 0;\r\n                }\r\n            }\r\n            id = mainPlayModelList.get(position).getID();\r\n            name = mainPlayModelList.get(position).getName();\r\n            url = mainPlayModelList.get(position).getAudioFile();\r\n            if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n                isDisclaimer = 1;\r\n                callAllDisable(false);\r\n\r\n            } else {\r\n                isDisclaimer = 2;\r\n                callAllDisable(true);\r\n            }\r\n            if (mainPlayModelList.get(position).getPlaylistID() == null) {\r\n                mainPlayModelList.get(position).setPlaylistID(\"\");\r\n            }\r\n            GetMedia(url, ctx, mainPlayModelList.get(position).getDownload(), mainPlayModelList.get(position).getPlaylistID());\r\n            binding.tvName.setText(mainPlayModelList.get(position).getName());\r\n            if (mainPlayModelList.get(position).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                binding.llDirection.setVisibility(View.GONE);\r\n            } else {\r\n                binding.llDirection.setVisibility(View.VISIBLE);\r\n                binding.tvDireDesc.setText(mainPlayModelList.get(position).getAudioDirection());\r\n            }\r\n            binding.tvTitle.setText(mainPlayModelList.get(position).getAudiomastercat());\r\n            binding.tvDesc.setText(mainPlayModelList.get(position).getAudioSubCategory());\r\n            Glide.with(getApplicationContext()).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n\r\n            if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n            } else if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n            }\r\n            binding.tvSongTime.setText(mainPlayModelList.get(position).getAudioDuration());\r\n            startTime = getStartTime();\r\n        }\r\n        addToRecentPlay();\r\n\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        binding.simpleSeekbar.setClickable(true);\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n    }\r\n\r\n    private void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if (null == mediaPlayer) {\r\n            mediaPlayer = new MediaPlayer();\r\n            Log.e(\"Playinggggg\", \"Playinggggg\");\r\n        }\r\n        try {\r\n            if (mediaPlayer == null)\r\n                mediaPlayer = new MediaPlayer();\r\n            if (mediaPlayer.isPlaying()) {\r\n                Log.e(\"Playinggggg\", \"stoppppp\");\r\n                mediaPlayer.stop();\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n                isPause = false;\r\n            }\r\n            mediaPlayer = new MediaPlayer();\r\n            if (download.equalsIgnoreCase(\"1\")) {\r\n                mediaPlayer.setDataSource(fileDescriptor);\r\n            } else {\r\n                mediaPlayer.setDataSource(url);\r\n            }\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                mediaPlayer.setAudioAttributes(\r\n                        new AudioAttributes\r\n                                .Builder()\r\n                                .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                .build());\r\n            }\r\n            mediaPlayer.prepareAsync();\r\n            isPause = false;\r\n            isPrepare = true;\r\n        } catch (IllegalStateException | IOException e) {\r\n            FileDescriptor fileDescriptor1 = null;\r\n            setMediaPlayer(\"0\", fileDescriptor1);\r\n            e.printStackTrace();\r\n        }\r\n        if (!mediaPlayer.isPlaying()) {\r\n            mediaPlayer.setOnPreparedListener(mp -> {\r\n                Log.e(\"Playinggggg\", \"Startinggg\");\r\n                mediaPlayer.start();\r\n                isMediaStart = true;\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n            });\r\n        }\r\n    }\r\n\r\n    private void callMedia() {\r\n        FileDescriptor fileDescriptor = null;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            binding.llProgressBar.setVisibility(View.VISIBLE);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            isPause = false;\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n            getDownloadMedia(downloadMedia);\r\n\r\n        } else {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                setMediaPlayer(\"0\", fileDescriptor);\r\n            } else {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getDownloadMedia(DownloadMedia downloadMedia) {\r\n        class getDownloadMedia extends AsyncTask<Void, Void, Void> {\r\n            FileDescriptor fileDescriptor = null;\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                try {\r\n                    byte[] decrypt = null;\r\n                    decrypt = downloadMedia.decrypt(name);\r\n                    if (decrypt != null) {\r\n                        fileDescriptor = FileUtils.getTempFileDescriptor(getApplicationContext(), decrypt);\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (fileDescriptor != null) {\r\n                    setMediaPlayer(\"1\", fileDescriptor);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        setMediaPlayer(\"0\", fileDescriptor);\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getDownloadMedia st = new getDownloadMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callComplete() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        if (audioPlay) {\r\n            if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n                isDisclaimer = 2;\r\n                disclaimerPlayed = 1;\r\n                isRemoved = true;\r\n            }\r\n            mainPlayModelList.remove(0);\r\n        }\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        isPause = false;\r\n        if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            if (position < (listSize - 1)) {\r\n                position = position + 1;\r\n            } else {\r\n                position = 0;\r\n            }\r\n            getPrepareShowData(position);\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            getPrepareShowData(position);\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            // shuffle is on - play a random song\r\n            if (queuePlay) {\r\n                addToQueueModelList.remove(position);\r\n                listSize = addToQueueModelList.size();\r\n                if (listSize == 0) {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    stopMedia();\r\n                } else if (listSize == 1) {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    stopMedia();\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            } else {\r\n                if (listSize == 1) {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    stopMedia();\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            }\r\n        } else {\r\n            if (queuePlay) {\r\n                addToQueueModelList.remove(position);\r\n                listSize = addToQueueModelList.size();\r\n                if (position < listSize - 1) {\r\n                    getPrepareShowData(position);\r\n                } else {\r\n                    if (listSize == 0) {\r\n                        savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        stopMedia();\r\n                    } else {\r\n                        position = 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            } else {\r\n                if (position < (listSize - 1)) {\r\n                    position = position + 1;\r\n                    getPrepareShowData(position);\r\n                } else {\r\n                    if (listSize == 1) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        stopMedia();\r\n                    } else {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llnext.setEnabled(false);\r\n                binding.llnext.setClickable(false);\r\n                binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llprev.setEnabled(false);\r\n                binding.llprev.setClickable(false);\r\n                binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }*/ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llnext.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        callRepeatShuffle();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callBack();\r\n    }\r\n\r\n    private void callBack() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        handler1.removeCallbacks(UpdateSongTime1);\r\n        player = 1;\r\n        if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n            isPause = false;\r\n        }\r\n//        pauseMedia();\r\n        SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared2.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(addToQueueModelList);\r\n        if (queuePlay) {\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n        }\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        finish();\r\n//        overridePendingTransition(R.anim.enter, R.anim.exit);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n//        releasePlayer();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = gson.fromJson(json, type);\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llMore.setClickable(true);\r\n                binding.llMore.setEnabled(true);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llViewQueue.setClickable(true);\r\n                binding.llViewQueue.setEnabled(true);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (queuePlay) {\r\n            position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            listSize = addToQueueModelList.size();\r\n            if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n            } else if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n            }\r\n        } else if (audioPlay) {\r\n            position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            listSize = mainPlayModelList.size();\r\n            if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n            } else if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n            }\r\n            if (listSize == 2) {\r\n                if (mainPlayModelList.get(0).getAudioFile().equalsIgnoreCase(\"\") && !disclaimer) {\r\n                    disclaimer = true;\r\n                    position = 0;\r\n                }\r\n            }\r\n            url = mainPlayModelList.get(position).getAudioFile();\r\n            if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n                isDisclaimer = 1;\r\n                callAllDisable(false);\r\n\r\n            } else {\r\n                isDisclaimer = 2;\r\n                callAllDisable(true);\r\n            }\r\n        }\r\n        if (comeFromAddToQueue) {\r\n            getPrepareShowData(position);\r\n            comeFromAddToQueue = false;\r\n        }\r\n        if (listSize == 1) {\r\n            position = 0;\r\n        }\r\n       /* if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if ((isMediaStart && isPlaying()) && !isPause) {\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.VISIBLE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        } else {\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        }*/\r\n        super.onResume();\r\n    }\r\n\r\n    private void callAllDisable(boolean b) {\r\n        if (b) {\r\n            binding.llPlay.setClickable(true);\r\n            binding.llPlay.setEnabled(true);\r\n            binding.llPlay.setAlpha(1f);\r\n            binding.llPause.setClickable(true);\r\n            binding.llPause.setEnabled(true);\r\n            binding.llPause.setAlpha(1f);\r\n            binding.llnext.setClickable(true);\r\n            binding.llnext.setEnabled(true);\r\n            binding.llnext.setAlpha(1f);\r\n            binding.llprev.setClickable(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llprev.setAlpha(1f);\r\n            binding.llForwardSec.setClickable(true);\r\n            binding.llForwardSec.setEnabled(true);\r\n            binding.llForwardSec.setAlpha(1f);\r\n            binding.llBackWordSec.setClickable(true);\r\n            binding.llBackWordSec.setEnabled(true);\r\n            binding.llBackWordSec.setAlpha(1f);\r\n            binding.llMore.setClickable(true);\r\n            binding.llMore.setEnabled(true);\r\n            binding.llMore.setAlpha(1f);\r\n            binding.llViewQueue.setClickable(true);\r\n            binding.llViewQueue.setEnabled(true);\r\n            binding.llViewQueue.setAlpha(1f);\r\n            binding.llDownload.setClickable(true);\r\n            binding.llDownload.setEnabled(true);\r\n            binding.llDownload.setAlpha(1f);\r\n            binding.llRepeat.setClickable(true);\r\n            binding.llRepeat.setEnabled(true);\r\n            binding.llRepeat.setAlpha(1f);\r\n            binding.llShuffle.setClickable(true);\r\n            binding.llShuffle.setEnabled(true);\r\n            binding.llShuffle.setAlpha(1f);\r\n            binding.llLike.setClickable(true);\r\n            binding.llLike.setEnabled(true);\r\n            binding.llLike.setAlpha(1f);\r\n        } else {\r\n            binding.llPlay.setClickable(false);\r\n            binding.llPlay.setEnabled(false);\r\n            binding.llPlay.setAlpha(0.7f);\r\n            binding.llPause.setClickable(false);\r\n            binding.llPause.setEnabled(false);\r\n            binding.llPause.setAlpha(0.7f);\r\n            binding.llnext.setClickable(false);\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setAlpha(0.7f);\r\n            binding.llprev.setClickable(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setAlpha(0.7f);\r\n            binding.llForwardSec.setClickable(false);\r\n            binding.llForwardSec.setEnabled(false);\r\n            binding.llForwardSec.setAlpha(0.7f);\r\n            binding.llBackWordSec.setClickable(false);\r\n            binding.llBackWordSec.setEnabled(false);\r\n            binding.llBackWordSec.setAlpha(0.7f);\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.llMore.setAlpha(0.7f);\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.llViewQueue.setAlpha(0.7f);\r\n            binding.llDownload.setClickable(false);\r\n            binding.llDownload.setEnabled(false);\r\n            binding.llDownload.setAlpha(0.7f);\r\n            binding.llRepeat.setClickable(false);\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setAlpha(0.7f);\r\n            binding.llShuffle.setClickable(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.llShuffle.setAlpha(0.7f);\r\n            binding.llLike.setClickable(false);\r\n            binding.llLike.setEnabled(false);\r\n            binding.llLike.setAlpha(0.7f);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n     /*   handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void onPointerCaptureChanged(boolean hasCapture) {\r\n\r\n    }\r\n /*   @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n                resumeMedia();\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if (isMediaStart) {\r\n                    pauseMedia();\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }*/\r\n\r\n/*    @Override\r\n    public void onProgress(Progress progress) {\r\n        if(!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)){\r\n            handler.postDelayed(UpdateSongTime1, 10);\r\n        }else{\r\n            handler.removeCallbacks(UpdateSongTime1);\r\n        }\r\n    }*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java	(date 1602679129433)
@@ -849,7 +849,7 @@
                 } else
                     binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);
                 binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));
-                BWSApplication.showToast("Shuffle mode has been turned on", ctx);
+//                BWSApplication.showToast("Shuffle mode has been turned on", ctx);
                 binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);
             }
         } else if (IsShuffle.equalsIgnoreCase("1")) {
@@ -858,7 +858,7 @@
             editor.putString(CONSTANTS.PREF_KEY_IsShuffle, "");
             editor.commit();
             IsShuffle = "";
-            BWSApplication.showToast("Shuffle mode has been turned off", ctx);
+//            BWSApplication.showToast("Shuffle mode has been turned off", ctx);
             binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);
         }
     }
@@ -880,7 +880,7 @@
                 binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);
             IsRepeat = "0";
             binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));
-            BWSApplication.showToast("Repeat mode has been turned on", ctx);
+//            BWSApplication.showToast("Repeat mode has been turned on", ctx);
             binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);
         } else if (IsRepeat.equalsIgnoreCase("0")) {
             SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);
@@ -890,11 +890,11 @@
             if (listSize == 1) {
                 editor.putString(CONSTANTS.PREF_KEY_IsRepeat, "");
                 IsRepeat = "";
-                BWSApplication.showToast("Repeat mode has been turned off", ctx);
+//                BWSApplication.showToast("Repeat mode has been turned off", ctx);
                 binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);
                 binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);
             } else {
-                BWSApplication.showToast("Repeat mode has been turned on", ctx);
+//                BWSApplication.showToast("Repeat mode has been turned on", ctx);
                 binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);
                 binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);
             }
@@ -913,7 +913,7 @@
             editor.commit();
             binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);
             binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));
-            BWSApplication.showToast("Repeat mode has been turned off", ctx);
+//            BWSApplication.showToast("Repeat mode has been turned off", ctx);
         }
     }
 
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddPlaylistActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.brainwellnessspa.DashboardModule.Models.CreatePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.PlaylistingModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityAddPlaylistBinding;\r\nimport com.brainwellnessspa.databinding.AddPlayListLayoutBinding;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.comeAddPlaylist;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\n\r\npublic class AddPlaylistActivity extends AppCompatActivity {\r\n    ActivityAddPlaylistBinding binding;\r\n    String UserID, AudioId, FromPlaylistID;\r\n    Context ctx;\r\n    Activity activity;\r\n    public static boolean addToPlayList = false;\r\n    public static String MyPlaylistId = \"\";\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_add_playlist);\r\n        ctx = AddPlaylistActivity.this;\r\n        activity = AddPlaylistActivity.this;\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            AudioId = getIntent().getStringExtra(\"AudioId\");\r\n            FromPlaylistID = getIntent().getStringExtra(\"PlaylistID\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            comefrom_search = 0;\r\n            finish();\r\n        });\r\n\r\n        RecyclerView.LayoutManager played = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists.setLayoutManager(played);\r\n        binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());\r\n        prepareData(ctx);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        comefrom_search = 0;\r\n        finish();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        prepareData(AddPlaylistActivity.this);\r\n    }\r\n\r\n    private void prepareData(Context ctx) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<PlaylistingModel> listCall = APIClient.getClient().getPlaylisting(UserID);\r\n            listCall.enqueue(new Callback<PlaylistingModel>() {\r\n                @Override\r\n                public void onResponse(Call<PlaylistingModel> call, Response<PlaylistingModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        PlaylistingModel model = response.body();\r\n                        AddPlaylistAdapter addPlaylistAdapter = new AddPlaylistAdapter(model.getResponseData(), ctx);\r\n                        binding.rvPlayLists.setAdapter(addPlaylistAdapter);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<PlaylistingModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private class AddPlaylistAdapter extends RecyclerView.Adapter<AddPlaylistAdapter.MyViewHolder> {\r\n        private List<PlaylistingModel.ResponseData> listModel;\r\n        Context ctx;\r\n\r\n        public AddPlaylistAdapter(List<PlaylistingModel.ResponseData> listModel, Context ctx) {\r\n            this.listModel = listModel;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            AddPlayListLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.add_play_list_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(listModel.get(position).getName());\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.16f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(listModel.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            binding.btnAddPlatLists.setOnClickListener(view -> {\r\n                final Dialog dialog = new Dialog(ctx);\r\n                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                dialog.setContentView(R.layout.create_palylist);\r\n                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                final EditText edtCreate = dialog.findViewById(R.id.edtCreate);\r\n                final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                final Button btnSendCode = dialog.findViewById(R.id.btnSendCode);\r\n\r\n                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                        dialog.dismiss();\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n\r\n                TextWatcher popupTextWatcher = new TextWatcher() {\r\n                    @Override\r\n                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                    }\r\n\r\n                    @Override\r\n                    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                        String number = edtCreate.getText().toString().trim();\r\n                        if (!number.isEmpty()) {\r\n                            btnSendCode.setEnabled(true);\r\n                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                            btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                        } else {\r\n                            btnSendCode.setEnabled(false);\r\n                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                            btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void afterTextChanged(Editable s) {\r\n                    }\r\n                };\r\n\r\n\r\n                edtCreate.addTextChangedListener(popupTextWatcher);\r\n                btnSendCode.setOnClickListener(view1 -> {\r\n                    if (edtCreate.getText().toString().equalsIgnoreCase(\"\")) {\r\n                        BWSApplication.showToast(\"Please provide the playlist's name\", ctx);\r\n                    } else {\r\n                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                            Call<CreatePlaylistModel> listCall = APIClient.getClient().getCreatePlaylist(UserID, edtCreate.getText().toString());\r\n                            listCall.enqueue(new Callback<CreatePlaylistModel>() {\r\n                                @Override\r\n                                public void onResponse(Call<CreatePlaylistModel> call, Response<CreatePlaylistModel> response) {\r\n                                    if (response.isSuccessful()) {\r\n                                        CreatePlaylistModel listsModel = response.body();\r\n                                        dialog.dismiss();\r\n                                        prepareData(ctx);\r\n                                        String PlaylistID = listsModel.getResponseData().getId();\r\n                                        callAddPlaylistFromPlaylist(PlaylistID,dialog,\"0\");\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onFailure(Call<CreatePlaylistModel> call, Throwable t) {\r\n                                }\r\n                            });\r\n                        } else {\r\n                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                        }\r\n                    }\r\n                });\r\n                tvCancel.setOnClickListener(v -> dialog.dismiss());\r\n                dialog.show();\r\n                dialog.setCancelable(false);\r\n            });\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    String PlaylistID = listModel.get(position).getID();\r\n                    final Dialog dialogx = new Dialog(ctx);\r\n                    callAddPlaylistFromPlaylist(PlaylistID, dialogx, \"1\");\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModel.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            AddPlayListLayoutBinding binding;\r\n\r\n            public MyViewHolder(AddPlayListLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callAddPlaylistFromPlaylist(String PlaylistID, Dialog dialog,String d) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<AddToPlaylist> listCall = APIClient.getClient().getAddSearchAudioFromPlaylist(UserID, AudioId, PlaylistID, FromPlaylistID);\r\n            listCall.enqueue(new Callback<AddToPlaylist>() {\r\n                @Override\r\n                public void onResponse(Call<AddToPlaylist> call, Response<AddToPlaylist> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        AddToPlaylist listModels = response.body();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        Gson gsonx = new Gson();\r\n                        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                        }.getType();\r\n                        ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();\r\n                        mainPlayModelListold = gsonx.fromJson(json, type);\r\n                        String id = mainPlayModelListold.get(pos).getID();\r\n                        ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();\r\n                        if (audioPlay) {\r\n                            if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                                for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                    MainPlayModel mainPlayModel = new MainPlayModel();\r\n                                    mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                    mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                    mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                    mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                    mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                    mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                    mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                    mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                    mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                    mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                    mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                    mainPlayModelList.add(mainPlayModel);\r\n                                }\r\n                                for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                    SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                    mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                    mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                    mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                    mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                    mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                    mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                    mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                    mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                    mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                    mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                    mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                    playlistSongs.add(mainPlayModel);\r\n                                }\r\n\r\n                                for(int i = 0;i<mainPlayModelList.size();i++){\r\n                                    if(mainPlayModelList.get(i).getID().equalsIgnoreCase(id)){\r\n                                        pos = i;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                SharedPreferences.Editor editor = sharedd.edit();\r\n                                Gson gson = new Gson();\r\n                                String jsonx = gson.toJson(mainPlayModelList);\r\n                                String json1 = gson.toJson(playlistSongs);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                editor.commit();\r\n                            }\r\n                        }\r\n                        if (comeAddPlaylist == 1) {\r\n                            final Dialog dialog = new Dialog(ctx);\r\n                            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                            dialog.setContentView(R.layout.go_to_playlist);\r\n                            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                            dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                            final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                            final RelativeLayout rlCreate = dialog.findViewById(R.id.rlCreate);\r\n\r\n                            dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                    dialog.dismiss();\r\n                                    return true;\r\n                                }\r\n                                return false;\r\n                            });\r\n\r\n                            rlCreate.setOnClickListener(view2 -> {\r\n                                addToPlayList = true;\r\n                                MyPlaylistId = PlaylistID;\r\n                                dialog.dismiss();\r\n                                finish();\r\n                                                                /*Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                                                                Bundle bundle = new Bundle();\r\n                                                                bundle.putString(\"New\", \"0\");\r\n                                                                bundle.putString(\"PlaylistID\", listsModel.getResponseData().getId());\r\n                                                                bundle.putString(\"PlaylistName\", listsModel.getResponseData().getName());\r\n                                                                bundle.putString(\"MyDownloads\", \"0\");\r\n                                                                myPlaylistsFragment.setArguments(bundle);\r\n                                                                FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                                                                fragmentManager1.beginTransaction()\r\n                                                                        .replace(R.id.flContainer, myPlaylistsFragment)\r\n                                                                        .commit();*/\r\n                            });\r\n\r\n                            tvCancel.setOnClickListener(v -> {\r\n                                dialog.dismiss();\r\n                                finish();\r\n                            });\r\n                            dialog.show();\r\n                            dialog.setCancelable(false);\r\n                        } else {\r\n                            BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                            if(d.equalsIgnoreCase(\"0\")){\r\n                            dialog.dismiss();\r\n                            }\r\n                            finish();\r\n                                                            /*final Dialog dialog = new Dialog(ctx);\r\n                                                            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                                            dialog.setContentView(R.layout.go_to_playlist);\r\n                                                            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                                                            dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                                            final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                                                            final RelativeLayout rlCreate = dialog.findViewById(R.id.rlCreate);\r\n\r\n                                                            dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                                                if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                                                    dialog.dismiss();\r\n                                                                    return true;\r\n                                                                }\r\n                                                                return false;\r\n                                                            });\r\n\r\n                                                            rlCreate.setOnClickListener(view2 -> {\r\n                                                                addToPlayList = true;\r\n                                                                MyPlaylistId = listsModel.getResponseData().getId();\r\n                                                                dialog.dismiss();\r\n                                                                Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                                                                Bundle bundle = new Bundle();\r\n                                                                bundle.putString(\"New\", \"0\");\r\n                                                                bundle.putString(\"PlaylistID\", listsModel.getResponseData().getId());\r\n                                                                bundle.putString(\"PlaylistName\", listsModel.getResponseData().getName());\r\n                                                                bundle.putString(\"MyDownloads\", \"0\");\r\n                                                                myPlaylistsFragment.setArguments(bundle);\r\n                                                                FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                                                                fragmentManager1.beginTransaction()\r\n                                                                        .replace(R.id.flContainer, myPlaylistsFragment)\r\n                                                                        .commit();\r\n                                                            });\r\n\r\n                                                            tvCancel.setOnClickListener(v -> {\r\n                                                                dialog.dismiss();\r\n                                                                finish();\r\n                                                            });\r\n                                                            dialog.show();\r\n                                                            dialog.setCancelable(false);*/\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AddToPlaylist> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddPlaylistActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddPlaylistActivity.java	(date 1602679608693)
@@ -196,30 +196,26 @@
 
                 edtCreate.addTextChangedListener(popupTextWatcher);
                 btnSendCode.setOnClickListener(view1 -> {
-                    if (edtCreate.getText().toString().equalsIgnoreCase("")) {
-                        BWSApplication.showToast("Please provide the playlist's name", ctx);
-                    } else {
-                        if (BWSApplication.isNetworkConnected(ctx)) {
-                            Call<CreatePlaylistModel> listCall = APIClient.getClient().getCreatePlaylist(UserID, edtCreate.getText().toString());
-                            listCall.enqueue(new Callback<CreatePlaylistModel>() {
-                                @Override
-                                public void onResponse(Call<CreatePlaylistModel> call, Response<CreatePlaylistModel> response) {
-                                    if (response.isSuccessful()) {
-                                        CreatePlaylistModel listsModel = response.body();
-                                        dialog.dismiss();
-                                        prepareData(ctx);
-                                        String PlaylistID = listsModel.getResponseData().getId();
-                                        callAddPlaylistFromPlaylist(PlaylistID,dialog,"0");
-                                    }
-                                }
+                    if (BWSApplication.isNetworkConnected(ctx)) {
+                        Call<CreatePlaylistModel> listCall = APIClient.getClient().getCreatePlaylist(UserID, edtCreate.getText().toString());
+                        listCall.enqueue(new Callback<CreatePlaylistModel>() {
+                            @Override
+                            public void onResponse(Call<CreatePlaylistModel> call, Response<CreatePlaylistModel> response) {
+                                if (response.isSuccessful()) {
+                                    CreatePlaylistModel listsModel = response.body();
+                                    dialog.dismiss();
+                                    prepareData(ctx);
+                                    String PlaylistID = listsModel.getResponseData().getId();
+                                    callAddPlaylistFromPlaylist(PlaylistID, dialog, "0");
+                                }
+                            }
 
-                                @Override
-                                public void onFailure(Call<CreatePlaylistModel> call, Throwable t) {
-                                }
-                            });
-                        } else {
-                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);
-                        }
+                            @Override
+                            public void onFailure(Call<CreatePlaylistModel> call, Throwable t) {
+                            }
+                        });
+                    } else {
+                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);
                     }
                 });
                 tvCancel.setOnClickListener(v -> dialog.dismiss());
@@ -252,7 +248,7 @@
         }
     }
 
-    private void callAddPlaylistFromPlaylist(String PlaylistID, Dialog dialog,String d) {
+    private void callAddPlaylistFromPlaylist(String PlaylistID, Dialog dialog, String d) {
         if (BWSApplication.isNetworkConnected(ctx)) {
             BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
             Call<AddToPlaylist> listCall = APIClient.getClient().getAddSearchAudioFromPlaylist(UserID, AudioId, PlaylistID, FromPlaylistID);
@@ -308,8 +304,8 @@
                                     playlistSongs.add(mainPlayModel);
                                 }
 
-                                for(int i = 0;i<mainPlayModelList.size();i++){
-                                    if(mainPlayModelList.get(i).getID().equalsIgnoreCase(id)){
+                                for (int i = 0; i < mainPlayModelList.size(); i++) {
+                                    if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {
                                         pos = i;
                                         break;
                                     }
@@ -373,8 +369,8 @@
                             dialog.setCancelable(false);
                         } else {
                             BWSApplication.showToast(listModels.getResponseMessage(), ctx);
-                            if(d.equalsIgnoreCase("0")){
-                            dialog.dismiss();
+                            if (d.equalsIgnoreCase("0")) {
+                                dialog.dismiss();
                             }
                             finish();
                                                             /*final Dialog dialog = new Dialog(ctx);
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddQueueActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.SystemClock;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Adapters.DirectionAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.DirectionModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityQueueBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.ComeFindAudio;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class AddQueueActivity extends AppCompatActivity {\r\n    public static boolean comeFromAddToQueue = false;\r\n    ActivityQueueBinding binding;\r\n    String play, UserID, PlaylistId, AudioId, Like, Download, IsRepeat, IsShuffle, myPlaylist = \"\", comeFrom = \"\", audioFileName,\r\n            AudioFile = \"\", PlaylistAudioId = \"\", AudioFlag;\r\n    Context ctx;\r\n    Activity activity;\r\n    ArrayList<String> queue;\r\n    ArrayList<AddToQueueModel> addToQueueModelList;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData;\r\n    MainPlayModel mainPlayMode;\r\n    AddToQueueModel addToQueueModel;\r\n    int position, listSize;\r\n    Boolean queuePlay, audioPlay;\r\n    List<DownloadAudioDetails> oneAudioDetailsList;\r\n    SharedPreferences shared;\r\n//    Handler handler1;\r\n//    List<String> fileNameList;\r\n    private long mLastClickTime = 0;\r\n/*\r\n    private Runnable UpdateSongTime1 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(audioFileName)) {\r\n                if (downloadProgress <= 100) {\r\n                    binding.pbProgress.setProgress(downloadProgress);\r\n                    binding.pbProgress.setVisibility(View.VISIBLE);\r\n                    binding.ivDownloads.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.pbProgress.setVisibility(View.GONE);\r\n                    binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                    handler1.removeCallbacks(UpdateSongTime1);\r\n                }\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }\r\n            handler1.postDelayed(this, 500);\r\n        }\r\n    };\r\n*/\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_queue);\r\n        ctx = AddQueueActivity.this;\r\n        activity = AddQueueActivity.this;\r\n        oneAudioDetailsList = new ArrayList<>();\r\n//        handler1 = new Handler();\r\n//        fileNameList = new ArrayList<>();\r\n        addToQueueModelList = new ArrayList<>();\r\n        mainPlayModelList = new ArrayList<>();\r\n        mData = new ArrayList<>();\r\n        /*SharedPreferences sharedx = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n        Gson gson1 = new Gson();\r\n        String json11 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n        if (!json11.equalsIgnoreCase(String.valueOf(gson1))) {\r\n            Type type = new TypeToken<List<String>>() {\r\n            }.getType();\r\n//            fileNameList = gson1.fromJson(json11, type);\r\n        }*/\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        myPlaylist = shared.getString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        PlaylistId = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n            }.getType();\r\n            mainPlayModelList = gson.fromJson(json, type);\r\n        }\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        SharedPreferences Status = getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            AudioId = getIntent().getStringExtra(CONSTANTS.ID);\r\n            position = getIntent().getIntExtra(CONSTANTS.position, 0);\r\n        }\r\n        if (getIntent().hasExtra(\"PlaylistAudioId\")) {\r\n            PlaylistAudioId = getIntent().getStringExtra(\"PlaylistAudioId\");\r\n        }\r\n      /*  if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(audioFileName)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }*/\r\n        if (getIntent().hasExtra(\"play\")) {\r\n            play = getIntent().getStringExtra(\"play\");\r\n        } else {\r\n            play = \"\";\r\n        }\r\n\r\n        if (getIntent().hasExtra(\"comeFrom\")) {\r\n            comeFrom = getIntent().getStringExtra(\"comeFrom\");\r\n            position = getIntent().getIntExtra(\"position\", 0);\r\n            mData = getIntent().getParcelableArrayListExtra(\"data\");\r\n        } else {\r\n            comeFrom = \"\";\r\n        }\r\n\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n        } else if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n        }\r\n        if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llShuffle.setClickable(true);\r\n                binding.llShuffle.setEnabled(true);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llShuffle.setClickable(true);\r\n                binding.llShuffle.setEnabled(true);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n\r\n        if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setClickable(false);\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.llRepeat.setClickable(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                IsRepeat = \"0\";\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.llRepeat.setClickable(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n        binding.llLike.setOnClickListener(view ->\r\n                callLike());\r\n\r\n\r\n        binding.llDownload.setOnClickListener(view ->\r\n                callDownload());\r\n\r\n\r\n        binding.llAddQueue.setOnClickListener(view ->\r\n                callAddToQueue());\r\n\r\n        binding.llRepeat.setOnClickListener(view -> callRepeat());\r\n\r\n        binding.llShuffle.setOnClickListener(view -> callShuffle());\r\n\r\n        binding.llRemovePlaylist.setOnClickListener(view -> {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistId)&& mainPlayModelList.size() == 1) {\r\n                BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n            } else {\r\n                callRemoveFromPlayList();\r\n            }\r\n        });\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            /*  Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.putExtra(\"Like\", Like);\r\n            i.putExtra(\"Download\", Download);\r\n            startActivity(i);*/\r\n            callBack();\r\n        });\r\n        prepareData();\r\n    }\r\n\r\n    private void callBack() {\r\n        ComeFindAudio = 1;\r\n        if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n            finish();\r\n        } else {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n//            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n//            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n//            startActivity(i);\r\n      /*      SharedPreferences shared11 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared11.edit();\r\n            Gson gson11 = new Gson();\r\n            String json11 = gson11.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, json11);\r\n            editor.commit();*/\r\n            finish();\r\n        }\r\n    }\r\n\r\n    private void callShuffle() {\r\n        if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                IsShuffle = \"1\";\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"1\");\r\n                if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                }\r\n                editor.commit();\r\n                IsRepeat = \"\";\r\n                if (queuePlay) {\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                BWSApplication.showToast(\"Shuffle mode has been turned on\", ctx);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n            BWSApplication.showToast(\"Shuffle mode has been turned off\", ctx);\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n    }\r\n\r\n    private void callRepeat() {\r\n\r\n        if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"0\");\r\n            if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            }\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            IsRepeat = \"0\";\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n            BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"1\");\r\n            IsRepeat = \"1\";\r\n            if (listSize == 1) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                IsRepeat = \"\";\r\n                BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            editor.commit();\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n        } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n            editor.commit();\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            IsRepeat = \"\";\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n            BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n        }\r\n    }\r\n\r\n    private void callAddToQueue() {\r\n        addToQueueModel = new AddToQueueModel();\r\n        int i = position;\r\n        if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n            addToQueueModel.setID(mData.get(i).getID());\r\n            addToQueueModel.setName(mData.get(i).getName());\r\n            addToQueueModel.setAudioFile(mData.get(i).getAudioFile());\r\n            AudioFile = mData.get(i).getAudioFile();\r\n            PlaylistId = mData.get(i).getPlaylistID();\r\n            addToQueueModel.setPlaylistID(mData.get(i).getPlaylistID());\r\n            addToQueueModel.setAudioDirection(mData.get(i).getAudioDirection());\r\n            addToQueueModel.setAudiomastercat(mData.get(i).getAudiomastercat());\r\n            addToQueueModel.setAudioSubCategory(mData.get(i).getAudioSubCategory());\r\n            addToQueueModel.setImageFile(mData.get(i).getImageFile());\r\n            addToQueueModel.setLike(mData.get(i).getLike());\r\n            addToQueueModel.setDownload(mData.get(i).getDownload());\r\n            addToQueueModel.setAudioDuration(mData.get(i).getAudioDuration());\r\n        } else {\r\n            addToQueueModel.setID(mainPlayModelList.get(i).getID());\r\n            addToQueueModel.setName(mainPlayModelList.get(i).getName());\r\n            addToQueueModel.setAudioFile(mainPlayModelList.get(i).getAudioFile());\r\n            AudioFile = mainPlayModelList.get(i).getAudioFile();\r\n            PlaylistId = mainPlayModelList.get(i).getPlaylistID();\r\n            addToQueueModel.setPlaylistID(mainPlayModelList.get(i).getPlaylistID());\r\n            addToQueueModel.setAudioDirection(mainPlayModelList.get(i).getAudioDirection());\r\n            addToQueueModel.setAudiomastercat(mainPlayModelList.get(i).getAudiomastercat());\r\n            addToQueueModel.setAudioSubCategory(mainPlayModelList.get(i).getAudioSubCategory());\r\n            addToQueueModel.setImageFile(mainPlayModelList.get(i).getImageFile());\r\n            addToQueueModel.setLike(mainPlayModelList.get(i).getLike());\r\n            addToQueueModel.setDownload(mainPlayModelList.get(i).getDownload());\r\n            addToQueueModel.setAudioDuration(mainPlayModelList.get(i).getAudioDuration());\r\n        }\r\n        if (addToQueueModelList.size() == 0) {\r\n            BWSApplication.showToast(\"Audio has been added to queue\", ctx);\r\n            addToQueueModelList.add(addToQueueModel);\r\n        } else {\r\n            for (int x = 0; x < addToQueueModelList.size(); x++) {\r\n                if (addToQueueModelList.get(x).getAudioFile().equals(addToQueueModel.getAudioFile())) {\r\n                    if (queuePlay && addToQueueModelList.get(position).getAudioFile().equals(addToQueueModel.getAudioFile())) {\r\n                        BWSApplication.showToast(\"Audio has been added to queue\", ctx);\r\n                        addToQueueModelList.add(addToQueueModel);\r\n                        break;\r\n                    } else {\r\n                        addToQueueModel = new AddToQueueModel();\r\n                        BWSApplication.showToast(\"Already in Queue\", ctx);\r\n                        break;\r\n                    }\r\n                } else if (x == (addToQueueModelList.size() - 1)) {\r\n                    BWSApplication.showToast(\"Audio has been added to queue\", ctx);\r\n                    addToQueueModelList.add(addToQueueModel);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(addToQueueModelList);\r\n        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n        editor.commit();\r\n    }\r\n\r\n    private void callRemoveFromPlayList() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRemoveAudioFromPlaylist(UserID, AudioId, PlaylistId);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SucessModel listModel = response.body();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n\r\n                        if (audioPlay) {\r\n                            if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                                Gson gson12 = new Gson();\r\n                                String json12 = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson12));\r\n                                Type type1 = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n                                }.getType();\r\n                                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList1 = gson12.fromJson(json12, type1);\r\n\r\n                                if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n                                    mData.remove(position);\r\n                                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                                    if (pID.equalsIgnoreCase(PlaylistId)) {\r\n                                        if (mData.size() != 0) {\r\n                                            if (pos == position && position < mData.size() - 1) {\r\n                                                pos = pos;\r\n                                                if (isPrepare || isMediaStart || isPause) {\r\n                                                    stopMedia();\r\n                                                }\r\n                                                isPause = false;\r\n                                                isMediaStart = false;\r\n                                                isPrepare = false;\r\n                                            } else if (pos == position && position == mData.size() - 1) {\r\n                                                pos = 0;\r\n                                                if (isPrepare || isMediaStart || isPause) {\r\n                                                    stopMedia();\r\n                                                }\r\n                                                isPause = false;\r\n                                                isMediaStart = false;\r\n                                                isPrepare = false;\r\n                                            } else if (pos < position && pos < mData.size() - 1) {\r\n                                                pos = pos;\r\n                                            } else if (pos > position && pos == mData.size()) {\r\n                                                pos = pos - 1;\r\n                                            }\r\n\r\n                                            SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                            SharedPreferences.Editor editor = sharedd.edit();\r\n                                            Gson gson = new Gson();\r\n                                            String json = gson.toJson(mData);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                                            editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistId);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, myPlaylist);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                            editor.commit();\r\n                                            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n                                            }.getType();\r\n                                            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n                                            listSize = arrayList.size();\r\n                                            for (int i = 0; i < listSize; i++) {\r\n                                                MainPlayModel mainPlayModel = new MainPlayModel();\r\n                                                mainPlayModel.setID(arrayList.get(i).getID());\r\n                                                mainPlayModel.setName(arrayList.get(i).getName());\r\n                                                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                                                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                                                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                                                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                                                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                                                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                                                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                                                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                                                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                                                mainPlayModelList.add(mainPlayModel);\r\n                                            }\r\n                                            SharedPreferences sharedz = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                            SharedPreferences.Editor editor1 = sharedz.edit();\r\n                                            Gson gsonz = new Gson();\r\n                                            String jsonz = gsonz.toJson(mainPlayModelList);\r\n                                            editor1.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n                                            editor1.commit();\r\n                                        }\r\n                                        comeFromAddToQueue = true;\r\n                                    }\r\n                                } else {\r\n                                    mainPlayModelList.remove(pos);\r\n                                    arrayList1.remove(pos);\r\n                                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                                    if (pID.equalsIgnoreCase(PlaylistId)) {\r\n                                        if (mainPlayModelList.size() != 0) {\r\n                                            if (pos < mainPlayModelList.size() - 1) {\r\n                                                pos = pos;\r\n                                            } else if (pos == mainPlayModelList.size() - 1) {\r\n                                                pos = 0;\r\n                                            } else if (pos > mainPlayModelList.size()) {\r\n                                                pos = pos - 1;\r\n                                            }\r\n                                            if (isPrepare || isMediaStart || isPause) {\r\n                                                stopMedia();\r\n                                            }\r\n                                            isPause = false;\r\n                                            isMediaStart = false;\r\n                                            isPrepare = false;\r\n                                            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = new ArrayList<>();\r\n                                            for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                                SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                                mainPlayModel.setID(mainPlayModelList.get(i).getID());\r\n                                                mainPlayModel.setName(mainPlayModelList.get(i).getName());\r\n                                                mainPlayModel.setAudioFile(mainPlayModelList.get(i).getAudioFile());\r\n                                                mainPlayModel.setPlaylistID(mainPlayModelList.get(i).getPlaylistID());\r\n                                                mainPlayModel.setAudioDirection(mainPlayModelList.get(i).getAudioDirection());\r\n                                                mainPlayModel.setAudiomastercat(mainPlayModelList.get(i).getAudiomastercat());\r\n                                                mainPlayModel.setAudioSubCategory(mainPlayModelList.get(i).getAudioSubCategory());\r\n                                                mainPlayModel.setImageFile(mainPlayModelList.get(i).getImageFile());\r\n                                                mainPlayModel.setLike(mainPlayModelList.get(i).getLike());\r\n                                                mainPlayModel.setDownload(mainPlayModelList.get(i).getDownload());\r\n                                                mainPlayModel.setAudioDuration(mainPlayModelList.get(i).getAudioDuration());\r\n                                                arrayList.add(mainPlayModel);\r\n                                            }\r\n                                            SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                            SharedPreferences.Editor editor = sharedd.edit();\r\n                                            Gson gson = new Gson();\r\n                                            String json = gson.toJson(mainPlayModelList);\r\n                                            String json1 = gson.toJson(arrayList);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                                            editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistId);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, myPlaylist);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                            editor.commit();\r\n                                            comeFromAddToQueue = true;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        finish();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void callDownload() {\r\n      /*  if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<DownloadPlaylistModel> listCall = APIClient.getClient().getDownloadlistPlaylist(UserID, AudioId, PlaylistId);\r\n            listCall.enqueue(new Callback<DownloadPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<DownloadPlaylistModel> call, Response<DownloadPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        DownloadPlaylistModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")\r\n                                || model.getResponseData().getFlag().equalsIgnoreCase(\"\")) {\r\n                            binding.llDownload.setClickable(true);\r\n                            binding.llDownload.setEnabled(true);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            Download = \"0\";\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                            binding.llDownload.setClickable(false);\r\n                            binding.llDownload.setEnabled(false);\r\n                            Download = \"1\";\r\n                        }\r\n                        mainPlayModelList.get(position).setDownload(Download);\r\n\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<DownloadPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }*/\r\n        int i = position;\r\n        String audioFile = \"\", Name = \"\";\r\n        if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n            Name = mData.get(i).getName();\r\n            audioFile = mData.get(i).getAudioFile();\r\n        } else {\r\n            Name = mainPlayModelList.get(i).getName();\r\n            audioFile = mainPlayModelList.get(i).getAudioFile();\r\n        }\r\n        List<String> url1 = new ArrayList<>();\r\n        List<String> name1 = new ArrayList<>();\r\n        List<String> downloadPlaylistId = new ArrayList<>();\r\n        SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n        Gson gson1 = new Gson();\r\n        String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n        String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n        String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n            Type type = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> fileNameList = gson1.fromJson(json, type);\r\n            List<String> audioFile1 = gson1.fromJson(json1, type);\r\n            List<String> playlistId1 = gson1.fromJson(json2, type);\r\n            if (fileNameList.size() != 0) {\r\n                url1.addAll(audioFile1);\r\n                name1.addAll(fileNameList);\r\n                downloadPlaylistId.addAll(playlistId1);\r\n            }\r\n        }\r\n        url1.add(audioFile);\r\n        name1.add(Name);\r\n        downloadPlaylistId.add(\"\");\r\n        if (url1.size() != 0) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String urlJson = gson.toJson(url1);\r\n            String nameJson = gson.toJson(name1);\r\n            String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n            editor.commit();\r\n        }\r\n//        fileNameList = url1;\r\n        callDisableDownload();\r\n        DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n        downloadMedia.encrypt1(url1, name1,downloadPlaylistId);\r\n        /*if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(audioFileName)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }*/\r\n        String dirPath = FileUtils.getFilePath(getApplicationContext(), Name);\r\n        SaveMedia(new byte[1024], dirPath, i);\r\n\r\n    }\r\n\r\n    private void SaveMedia(byte[] encodeBytes, String dirPath, int i) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n                    downloadAudioDetails.setID(mData.get(i).getID());\r\n                    downloadAudioDetails.setName(mData.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(mData.get(i).getAudioFile());\r\n                    downloadAudioDetails.setPlaylistId(mData.get(i).getPlaylistID());\r\n                    downloadAudioDetails.setAudioDirection(mData.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(mData.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(mData.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(mData.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(mData.get(i).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(mData.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                } else {\r\n                    downloadAudioDetails.setID(mainPlayModelList.get(i).getID());\r\n                    downloadAudioDetails.setName(mainPlayModelList.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(mainPlayModelList.get(i).getAudioFile());\r\n                    downloadAudioDetails.setPlaylistId(mainPlayModelList.get(i).getPlaylistID());\r\n                    downloadAudioDetails.setAudioDirection(mainPlayModelList.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(mainPlayModelList.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(mainPlayModelList.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(mainPlayModelList.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(mainPlayModelList.get(i).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(mainPlayModelList.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                }\r\n                DatabaseClient.getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                callDisableDownload();\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callLike() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(AudioId, UserID);\r\n            listCall.enqueue(new Callback<AudioLikeModel>() {\r\n                @Override\r\n                public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        AudioLikeModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);\r\n                            Like = \"0\";\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                            Like = \"1\";\r\n                        }\r\n                        if (queuePlay) {\r\n                            addToQueueModelList.get(position).setLike(Like);\r\n                        } else\r\n                            mainPlayModelList.get(position).setLike(Like);\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(mainPlayModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                        String json1 = gson.toJson(addToQueueModelList);\r\n                        if (queuePlay) {\r\n                            editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n                        }\r\n                        editor.commit();\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AudioLikeModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callBack();\r\n    }\r\n\r\n    private void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<DirectionModel> listCall = APIClient.getClient().getAudioDetailLists(UserID, AudioId);\r\n            listCall.enqueue(new Callback<DirectionModel>() {\r\n                @Override\r\n                public void onResponse(Call<DirectionModel> call, Response<DirectionModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n\r\n\r\n                        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                        }  else if (play.equalsIgnoreCase(\"TopCategories\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                        } else if (play.equalsIgnoreCase(\"play\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.VISIBLE);\r\n                        } else if (play.equalsIgnoreCase(\"playlist\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                        } else if (play.equalsIgnoreCase(\"myPlayList\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.VISIBLE);\r\n                        } else {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                        }\r\n\r\n                        DirectionModel directionModel = response.body();\r\n                        int ix = position;\r\n                        if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n                            AudioFile = mData.get(ix).getAudioFile();\r\n                            PlaylistId = mData.get(ix).getPlaylistID();\r\n                            audioFileName = mData.get(ix).getName();\r\n                        } else {\r\n                            AudioFile = mainPlayModelList.get(ix).getAudioFile();\r\n                            PlaylistId = mainPlayModelList.get(ix).getPlaylistID();\r\n                            audioFileName = mainPlayModelList.get(ix).getName();\r\n                        }\r\n                        /*if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(audioFileName)) {\r\n                            handler1.postDelayed(UpdateSongTime1, 500);\r\n                        } else {\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        }*/\r\n                        if (PlaylistId == null) {\r\n                            PlaylistId = \"\";\r\n                        } else {\r\n                            PlaylistId = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        }\r\n                        GetMedia(AudioFile, activity, directionModel.getResponseData().get(0).getDownload(), PlaylistId);\r\n                        binding.cvImage.setVisibility(View.VISIBLE);\r\n                        binding.llLike.setVisibility(View.VISIBLE);\r\n                        binding.llAddPlaylist.setVisibility(View.VISIBLE);\r\n                        binding.llAddQueue.setVisibility(View.VISIBLE);\r\n                        binding.llDownload.setVisibility(View.VISIBLE);\r\n                        binding.llShuffle.setVisibility(View.VISIBLE);\r\n                        binding.llRepeat.setVisibility(View.VISIBLE);\r\n                        binding.llViewQueue.setVisibility(View.VISIBLE);\r\n                        Glide.with(ctx).load(directionModel.getResponseData().get(0).getImageFile()).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n\r\n                        if (directionModel.getResponseData().get(0).getAudioDescription().equalsIgnoreCase(\"\")) {\r\n                            binding.tvTitleDec.setVisibility(View.GONE);\r\n                            binding.tvSubDec.setVisibility(View.GONE);\r\n                        } else {\r\n                            binding.tvTitleDec.setVisibility(View.VISIBLE);\r\n                            binding.tvSubDec.setVisibility(View.VISIBLE);\r\n                        }\r\n\r\n                        binding.tvSubDec.setText(directionModel.getResponseData().get(0).getAudioDescription());\r\n                        int linecount = binding.tvSubDec.getLineCount();\r\n                        if (linecount >= 4) {\r\n                            binding.tvReadMore.setVisibility(View.VISIBLE);\r\n                        } else {\r\n                            binding.tvReadMore.setVisibility(View.GONE);\r\n                        }\r\n\r\n                        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                            binding.llViewQueue.setClickable(true);\r\n                            binding.llViewQueue.setEnabled(true);\r\n                            binding.ivViewQueue.setColorFilter(getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n                        } else {\r\n                            binding.llViewQueue.setClickable(false);\r\n                            binding.llViewQueue.setEnabled(false);\r\n                            binding.ivViewQueue.setColorFilter(getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n                        }\r\n                        binding.tvReadMore.setOnClickListener(view -> {\r\n                            final Dialog dialog = new Dialog(ctx);\r\n                            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                            dialog.setContentView(R.layout.full_desc_layout);\r\n                            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                            dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                            final TextView tvDesc = dialog.findViewById(R.id.tvDesc);\r\n                            final RelativeLayout tvClose = dialog.findViewById(R.id.tvClose);\r\n                            tvDesc.setText(directionModel.getResponseData().get(0).getAudioDescription());\r\n\r\n                            dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                    dialog.dismiss();\r\n                                    return true;\r\n                                }\r\n                                return false;\r\n                            });\r\n\r\n                            tvClose.setOnClickListener(v -> dialog.dismiss());\r\n                            dialog.show();\r\n                            dialog.setCancelable(false);\r\n                        });\r\n\r\n                        Like = directionModel.getResponseData().get(0).getLike();\r\n                        Download = directionModel.getResponseData().get(0).getDownload();\r\n                        binding.tvName.setText(directionModel.getResponseData().get(0).getName());\r\n                        if (directionModel.getResponseData().get(0).getAudiomastercat().equalsIgnoreCase(\"\")) {\r\n                            binding.tvDesc.setVisibility(View.GONE);\r\n                        } else {\r\n                            binding.tvDesc.setVisibility(View.VISIBLE);\r\n                            binding.tvDesc.setText(directionModel.getResponseData().get(0).getAudiomastercat());\r\n                        }\r\n                        binding.tvDuration.setText(directionModel.getResponseData().get(0).getAudioDuration());\r\n\r\n                        if (directionModel.getResponseData().get(0).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                            binding.tvSubDire.setText(\"\");\r\n                            binding.tvSubDire.setVisibility(View.GONE);\r\n                            binding.tvDire.setVisibility(View.GONE);\r\n                        } else {\r\n                            binding.tvSubDire.setText(directionModel.getResponseData().get(0).getAudioDirection());\r\n                            binding.tvSubDire.setVisibility(View.VISIBLE);\r\n                            binding.tvDire.setVisibility(View.VISIBLE);\r\n                        }\r\n\r\n                        if (directionModel.getResponseData().get(0).getLike().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                        } else if (!directionModel.getResponseData().get(0).getLike().equalsIgnoreCase(\"0\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);\r\n                        }\r\n\r\n                        binding.llAddPlaylist.setOnClickListener(view -> {\r\n                            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                                return;\r\n                            }\r\n                            mLastClickTime = SystemClock.elapsedRealtime();\r\n                            Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                            i.putExtra(\"AudioId\", AudioId);\r\n                            i.putExtra(\"PlaylistID\", \"\");\r\n                            startActivity(i);\r\n                        });\r\n\r\n                        binding.llViewQueue.setOnClickListener(view -> {\r\n                            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                                return;\r\n                            }\r\n                            mLastClickTime = SystemClock.elapsedRealtime();\r\n                            Intent i = new Intent(ctx, ViewQueueActivity.class);\r\n                            i.putExtra(\"ComeFromQueue\", \"1\");\r\n                            i.putExtra(\"ID\", AudioId);\r\n                            i.putExtra(\"play\", play);\r\n                            startActivity(i);\r\n                            finish();\r\n                        });\r\n\r\n                        if (directionModel.getResponseData().get(0).getAudioSubCategory().equalsIgnoreCase(\"\")) {\r\n                            binding.rvDirlist.setVisibility(View.GONE);\r\n                        } else {\r\n                            binding.rvDirlist.setVisibility(View.VISIBLE);\r\n                            String[] elements = directionModel.getResponseData().get(0).getAudioSubCategory().split(\",\");\r\n                            List<String> direction = Arrays.asList(elements);\r\n\r\n                            DirectionAdapter directionAdapter = new DirectionAdapter(direction, ctx);\r\n                            RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(ctx, LinearLayoutManager.HORIZONTAL, false);\r\n                            binding.rvDirlist.setLayoutManager(recentlyPlayed);\r\n                            binding.rvDirlist.setItemAnimator(new DefaultItemAnimator());\r\n                            binding.rvDirlist.setAdapter(directionAdapter);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<DirectionModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    BWSApplication.showToast(t.getMessage(), ctx);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n\r\n    }\r\n\r\n    public void GetMedia(String AudioFile, Context ctx, String download, String PlayListId) {\r\n\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getaudioByPlaylist(AudioFile, PlayListId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                        callDisableDownload();\r\n                    }\r\n                } else if (download.equalsIgnoreCase(\"1\")) {\r\n                    callDisableDownload();\r\n                } else {\r\n                    binding.llDownload.setClickable(true);\r\n                    binding.llDownload.setEnabled(true);\r\n                    binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callDisableDownload() {\r\n        binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        binding.tvDownloads.setTextColor(activity.getResources().getColor(R.color.white));\r\n        binding.llDownload.setClickable(false);\r\n        binding.llDownload.setEnabled(false);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddQueueActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddQueueActivity.java	(date 1602681666609)
@@ -325,7 +325,7 @@
                 } else
                     binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);
                 binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));
-                BWSApplication.showToast("Shuffle mode has been turned on", ctx);
+//                BWSApplication.showToast("Shuffle mode has been turned on", ctx);
                 binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);
             }
         } else if (IsShuffle.equalsIgnoreCase("1")) {
@@ -334,7 +334,7 @@
             editor.putString(CONSTANTS.PREF_KEY_IsShuffle, "");
             editor.commit();
             IsShuffle = "";
-            BWSApplication.showToast("Shuffle mode has been turned off", ctx);
+//            BWSApplication.showToast("Shuffle mode has been turned off", ctx);
             binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);
         }
     }
@@ -356,7 +356,7 @@
                 binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);
             IsRepeat = "0";
             binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));
-            BWSApplication.showToast("Repeat mode has been turned on", ctx);
+//            BWSApplication.showToast("Repeat mode has been turned on", ctx);
             binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);
         } else if (IsRepeat.equalsIgnoreCase("0")) {
             SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);
@@ -366,11 +366,11 @@
             if (listSize == 1) {
                 editor.putString(CONSTANTS.PREF_KEY_IsRepeat, "");
                 IsRepeat = "";
-                BWSApplication.showToast("Repeat mode has been turned off", ctx);
+//                BWSApplication.showToast("Repeat mode has been turned off", ctx);
                 binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);
                 binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);
             } else {
-                BWSApplication.showToast("Repeat mode has been turned on", ctx);
+//                BWSApplication.showToast("Repeat mode has been turned on", ctx);
                 binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);
                 binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);
             }
@@ -388,7 +388,7 @@
             IsRepeat = "";
             binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);
             binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));
-            BWSApplication.showToast("Repeat mode has been turned off", ctx);
+//            BWSApplication.showToast("Repeat mode has been turned off", ctx);
         }
     }
 
@@ -425,22 +425,22 @@
             addToQueueModel.setAudioDuration(mainPlayModelList.get(i).getAudioDuration());
         }
         if (addToQueueModelList.size() == 0) {
-            BWSApplication.showToast("Audio has been added to queue", ctx);
+            BWSApplication.showToast("Added to the queue", ctx);
             addToQueueModelList.add(addToQueueModel);
         } else {
             for (int x = 0; x < addToQueueModelList.size(); x++) {
                 if (addToQueueModelList.get(x).getAudioFile().equals(addToQueueModel.getAudioFile())) {
                     if (queuePlay && addToQueueModelList.get(position).getAudioFile().equals(addToQueueModel.getAudioFile())) {
-                        BWSApplication.showToast("Audio has been added to queue", ctx);
+                        BWSApplication.showToast("Added to the queue", ctx);
                         addToQueueModelList.add(addToQueueModel);
                         break;
                     } else {
                         addToQueueModel = new AddToQueueModel();
-                        BWSApplication.showToast("Already in Queue", ctx);
+                        BWSApplication.showToast("Audio already in queue", ctx);
                         break;
                     }
                 } else if (x == (addToQueueModelList.size() - 1)) {
-                    BWSApplication.showToast("Audio has been added to queue", ctx);
+                    BWSApplication.showToast("Added to the queue", ctx);
                     addToQueueModelList.add(addToQueueModel);
                     break;
                 }
Index: app/src/main/java/com/brainwellnessspa/FaqModule/Activities/AudioFaqActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.FaqModule.Activities;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.content.Context;\r\nimport android.os.Bundle;\r\n\r\nimport com.brainwellnessspa.FaqModule.Adapters.AudioFaqAdapter;\r\nimport com.brainwellnessspa.FaqModule.Models.FaqListModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.databinding.ActivityAudioFaqBinding;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class AudioFaqActivity extends AppCompatActivity {\r\n    ActivityAudioFaqBinding binding;\r\n    Context ctx;\r\n    AudioFaqAdapter adapter;\r\n    ArrayList<FaqListModel.ResponseData> faqListModel;\r\n    String Flag;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_audio_faq);\r\n        ctx = AudioFaqActivity.this;\r\n\r\n        faqListModel = new ArrayList<>();\r\n        if (getIntent() != null) {\r\n            faqListModel = getIntent().getParcelableArrayListExtra(\"faqListModel\");\r\n            Flag = getIntent().getStringExtra(\"Flag\");\r\n        }\r\n        binding.llBack.setOnClickListener(view -> finish());\r\n\r\n        if (Flag.equalsIgnoreCase(\"Audio\")) {\r\n            binding.tvTitle.setText(R.string.Audio);\r\n        } else if (Flag.equalsIgnoreCase(\"Help\")) {\r\n            binding.tvTitle.setText(R.string.Help);\r\n        } else if (Flag.equalsIgnoreCase(\"Playlist\")) {\r\n            binding.tvTitle.setText(R.string.Playlist);\r\n        }\r\n\r\n        RecyclerView.LayoutManager serachList = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvFaqList.setLayoutManager(serachList);\r\n        binding.rvFaqList.setItemAnimator(new DefaultItemAnimator());\r\n        adapter = new AudioFaqAdapter(faqListModel, ctx, binding.rvFaqList, binding.tvFound);\r\n        binding.rvFaqList.setAdapter(adapter);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        finish();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/FaqModule/Activities/AudioFaqActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/FaqModule/Activities/AudioFaqActivity.java	(date 1602682969585)
@@ -39,7 +39,7 @@
         if (Flag.equalsIgnoreCase("Audio")) {
             binding.tvTitle.setText(R.string.Audio);
         } else if (Flag.equalsIgnoreCase("Help")) {
-            binding.tvTitle.setText(R.string.Help);
+            binding.tvTitle.setText("General");
         } else if (Flag.equalsIgnoreCase("Playlist")) {
             binding.tvTitle.setText(R.string.Playlist);
         }
Index: app/src/main/java/com/brainwellnessspa/AddPayment/AddPaymentActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.AddPayment;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Paint;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.Spannable;\r\nimport android.text.TextWatcher;\r\nimport android.text.style.ReplacementSpan;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.NumberPicker;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport com.brainwellnessspa.AddPayment.Model.AddCardModel;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.BillingOrderActivity;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.PaymentActivity;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityAddPaymentBinding;\r\nimport com.brainwellnessspa.databinding.YeardialogBinding;\r\nimport com.stripe.android.Stripe;\r\nimport com.stripe.android.TokenCallback;\r\nimport com.stripe.android.model.Card;\r\nimport com.stripe.android.model.Token;\r\n\r\nimport java.util.Calendar;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class AddPaymentActivity extends AppCompatActivity {\r\n    ActivityAddPaymentBinding binding;\r\n    String userId;\r\n    Context context;\r\n    Activity activity;\r\n    Dialog d;\r\n    int a = 0;\r\n    int year, month;\r\n    YeardialogBinding binding1;\r\n    String strToken, ComePayment = \"\";\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_add_payment);\r\n\r\n        if (getIntent() != null) {\r\n            ComePayment = getIntent().getStringExtra(\"ComePayment\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            if (ComePayment.equalsIgnoreCase(\"1\")) {\r\n                finish();\r\n            } else if (ComePayment.equalsIgnoreCase(\"2\")) {\r\n                Intent i = new Intent(context, PaymentActivity.class);\r\n                startActivity(i);\r\n                finish();\r\n            } else {\r\n                finish();\r\n            }\r\n        });\r\n\r\n        context = AddPaymentActivity.this;\r\n        activity = AddPaymentActivity.this;\r\n        year = Calendar.getInstance().get(Calendar.YEAR);\r\n        month = Calendar.getInstance().get(Calendar.MONTH);\r\n        month = month + 1;\r\n        d = new Dialog(context);\r\n        d.setTitle(\"Year Picker\");\r\n        binding1 = DataBindingUtil.inflate(LayoutInflater.from(context),\r\n                R.layout.yeardialog, null, false);\r\n        d.setContentView(binding1.getRoot());\r\n        binding.etNumber.addTextChangedListener(addCardTextWatcher);\r\n        binding.etName.addTextChangedListener(addCardTextWatcher);\r\n        binding.textMonth.addTextChangedListener(addCardTextWatcher);\r\n        binding.etCvv.addTextChangedListener(addCardTextWatcher);\r\n\r\n        binding.etNumber.addTextChangedListener(new TextWatcher() {\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                if (binding.etNumber.getText().toString().length() == 16) {\r\n                    binding.etName.requestFocus();\r\n                }\r\n            }\r\n\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            }\r\n\r\n            public void afterTextChanged(Editable s) {\r\n            }\r\n        });\r\n\r\n        binding.opendilog.setOnClickListener(v -> {\r\n            a = 1;\r\n            showYearDialog();\r\n        });\r\n\r\n        SharedPreferences shared = context.getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);\r\n        userId = (shared.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        CreditCardFormatTextWatcher tv = new CreditCardFormatTextWatcher(binding.etNumber);\r\n        binding.etNumber.addTextChangedListener(tv);\r\n        binding.etName.addTextChangedListener(addCardTextWatcher);\r\n        binding.etNumber.addTextChangedListener(addCardTextWatcher);\r\n        binding.etCvv.addTextChangedListener(addCardTextWatcher);\r\n        binding.textMonth.addTextChangedListener(addCardTextWatcher);\r\n        binding.btnSave.setOnClickListener(view -> {\r\n            if (binding.textMonth.getText().toString().equalsIgnoreCase(\"Expiry Date\")\r\n                    && a == 0 && binding.etNumber.getText().toString().equalsIgnoreCase(\"\")\r\n                    && binding.etCvv.getText().toString().equalsIgnoreCase(\"\")\r\n                    && binding.etName.getText().toString().equalsIgnoreCase(\"\")) {\r\n                binding.txtError.setText(\"I'll need your inputs\");\r\n            } else if (binding.etNumber.getText().toString().equalsIgnoreCase(\"\")) {\r\n                binding.tlNumber.setError(\"Please provide your card number\");\r\n                binding.txtError.setText(\"\");\r\n                binding.tlName.setError(\"\");\r\n            } else if (binding.etNumber.getText().toString().length() <= 15 || binding.etNumber.getText().toString().length() > 16) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"Please use the correct card number\");\r\n                binding.txtError.setText(\"\");\r\n            } else if (binding.etName.getText().toString().equalsIgnoreCase(\"\")) {\r\n                binding.tlName.setError(\"Please provide the card holder's name\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"\");\r\n            } else if (binding1.MonthPicker.getValue() < month && binding1.YearPicker.getValue() == year) {\r\n                binding.txtError.setText(\"The expiry date that you have used is incorrect\");\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n            } else if (binding.textMonth.getText().toString().equalsIgnoreCase(\"Expiry Date\") || a == 0) {\r\n                binding.txtError.setText(\"Please provide the expiry date\");\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n            } else if (binding.etCvv.getText().toString().matches(\"\")) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"Please provide the CVV\");\r\n            } else if (binding.etCvv.getText().toString().length() < 3) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"The CVV you have used is incorrect\");\r\n            } else {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"\");\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                final String strCardNo = binding.etNumber.getText().toString().trim().replaceAll(\"\\\\s+\", \"\");\r\n                int months = binding1.MonthPicker.getValue();\r\n                int Years = binding1.YearPicker.getValue();\r\n\r\n                Card card = new Card(strCardNo, months, Years, binding.etCvv.getText().toString());\r\n                new Stripe().createToken(card, getString(R.string.stipe_test_key), new TokenCallback() {\r\n                    @Override\r\n                    public void onError(Exception error) {\r\n                        Log.e(\"error.........\", \"\" + error.toString());\r\n                        BWSApplication.showToast(\"Invalid Card Details\", context);\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onSuccess(Token token) {\r\n                        strToken = token.getId();\r\n                        Log.e(\"strToken.............\", \"\" + strToken);\r\n                        if (!strToken.equalsIgnoreCase(\"\")) {\r\n                            if (BWSApplication.isNetworkConnected(context)) {\r\n                                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                Call<AddCardModel> listCall = APIClient.getClient().getAddCard(userId, strToken);\r\n                                listCall.enqueue(new Callback<AddCardModel>() {\r\n                                    @Override\r\n                                    public void onResponse(Call<AddCardModel> call, Response<AddCardModel> response) {\r\n                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        if (response.isSuccessful()) {\r\n                                            AddCardModel cardModel = response.body();\r\n                                            if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n                                                keyboard.hideSoftInputFromWindow(view.getWindowToken(), 0);\r\n                                                if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                                    finish();\r\n                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                                } else if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                                } else {\r\n                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                                }\r\n                                            } else {\r\n                                                BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onFailure(Call<AddCardModel> call, Throwable t) {\r\n                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    }\r\n\r\n                                });\r\n                            } else {\r\n                                BWSApplication.showToast(getString(R.string.no_server_found), context);\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private TextWatcher addCardTextWatcher = new TextWatcher() {\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            String CardNo = binding.etNumber.getText().toString().trim();\r\n            String CardName = binding.etName.getText().toString().trim();\r\n            String Month = binding.textMonth.getText().toString().trim();\r\n            String CVV = binding.etCvv.getText().toString().trim();\r\n            if (!CardNo.isEmpty() || !CardName.isEmpty() || !Month.isEmpty() || !CVV.isEmpty()) {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnSave.setEnabled(false);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.gray_extra_round_corners);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n        }\r\n    };\r\n\r\n    public void showYearDialog() {\r\n        binding1.MonthPicker.setMaxValue(12);\r\n        binding1.MonthPicker.setMinValue(1);\r\n        binding1.MonthPicker.setWrapSelectorWheel(false);\r\n        binding1.MonthPicker.setValue(month);\r\n        binding1.MonthPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);\r\n        binding1.YearPicker.setMaxValue(year + 80);\r\n        binding1.YearPicker.setMinValue(year);\r\n        binding1.YearPicker.setWrapSelectorWheel(false);\r\n        binding1.YearPicker.setValue(year);\r\n        binding1.YearPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);\r\n\r\n        binding1.set.setOnClickListener(v -> {\r\n            if (binding1.MonthPicker.getValue() < month && binding1.YearPicker.getValue() == year) {\r\n                binding.txtError.setText(\"Please Select Valid Month And Year\");\r\n                d.dismiss();\r\n            } else {\r\n                binding.textMonth.setText(\" \" + binding1.MonthPicker.getValue() + \" / \" + binding1.YearPicker.getValue());\r\n                binding.txtError.setText(\"\");\r\n                d.dismiss();\r\n            }\r\n        });\r\n        binding1.cancle.setOnClickListener(v -> {\r\n            d.dismiss();\r\n        });\r\n        d.show();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (ComePayment.equalsIgnoreCase(\"1\")) {\r\n            finish();\r\n        } else if (ComePayment.equalsIgnoreCase(\"2\")) {\r\n            Intent i = new Intent(context, PaymentActivity.class);\r\n            startActivity(i);\r\n            finish();\r\n        } else {\r\n            finish();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n\r\n    public static class CreditCardFormatTextWatcher implements TextWatcher {\r\n        public static final int NO_MAX_LENGTH = -1;\r\n        private int maxLength = NO_MAX_LENGTH;\r\n        private int paddingPx;\r\n        private boolean internalStopFormatFlag;\r\n\r\n        public CreditCardFormatTextWatcher(@NonNull TextView textView) {\r\n            setPaddingEm(textView, 1f);\r\n        }\r\n\r\n        public static void formatCardNumber(@NonNull Editable ccNumber, int paddingPx, int maxLength) {\r\n            int textLength = ccNumber.length();\r\n            // first remove any previous span\r\n            PaddingRightSpan[] spans = ccNumber.getSpans(0, ccNumber.length(), PaddingRightSpan.class);\r\n            for (int i = 0; i < spans.length; i++) {\r\n                ccNumber.removeSpan(spans[i]);\r\n            }\r\n            // then truncate to max length\r\n            if (maxLength > 0 && textLength > maxLength - 1) {\r\n                ccNumber.replace(maxLength, textLength, \"\");\r\n            }\r\n            // finally add margin spans\r\n            for (int i = 1; i <= ((textLength - 1) / 4); i++) {\r\n                int end = i * 4;\r\n                int start = end - 1;\r\n                PaddingRightSpan marginSPan = new PaddingRightSpan(paddingPx);\r\n                ccNumber.setSpan(marginSPan, start, end, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n            }\r\n        }\r\n\r\n\r\n        public void setPaddingPx(int paddingPx) {\r\n            this.paddingPx = paddingPx;\r\n        }\r\n\r\n\r\n        public void setPaddingEm(@NonNull TextView textView, float em) {\r\n            float emSize = textView.getPaint().measureText(\"x\");\r\n            setPaddingPx((int) (em * emSize));\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            if (internalStopFormatFlag) {\r\n                return;\r\n            }\r\n            internalStopFormatFlag = true;\r\n            formatCardNumber(s, paddingPx, maxLength);\r\n            internalStopFormatFlag = false;\r\n        }\r\n\r\n        public static class PaddingRightSpan extends ReplacementSpan {\r\n\r\n            private int mPadding;\r\n\r\n            public PaddingRightSpan(int padding) {\r\n                mPadding = padding;\r\n            }\r\n\r\n            @Override\r\n            public int getSize(@NonNull Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {\r\n                float[] widths = new float[end - start];\r\n                paint.getTextWidths(text, start, end, widths);\r\n                int sum = mPadding;\r\n                for (int i = 0; i < widths.length; i++) {\r\n                    sum += widths[i];\r\n                }\r\n                return sum;\r\n            }\r\n\r\n            @Override\r\n            public void draw(@NonNull Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, @NonNull Paint paint) {\r\n                canvas.drawText(text, start, end, x, y, paint);\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/AddPayment/AddPaymentActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/AddPayment/AddPaymentActivity.java	(date 1602682751851)
@@ -119,39 +119,34 @@
         binding.etCvv.addTextChangedListener(addCardTextWatcher);
         binding.textMonth.addTextChangedListener(addCardTextWatcher);
         binding.btnSave.setOnClickListener(view -> {
-            if (binding.textMonth.getText().toString().equalsIgnoreCase("Expiry Date")
-                    && a == 0 && binding.etNumber.getText().toString().equalsIgnoreCase("")
-                    && binding.etCvv.getText().toString().equalsIgnoreCase("")
-                    && binding.etName.getText().toString().equalsIgnoreCase("")) {
-                binding.txtError.setText("I'll need your inputs");
-            } else if (binding.etNumber.getText().toString().equalsIgnoreCase("")) {
-                binding.tlNumber.setError("Please provide your card number");
+            if (binding.etNumber.getText().toString().equalsIgnoreCase("")) {
+                binding.tlNumber.setError("Card number is required.");
                 binding.txtError.setText("");
                 binding.tlName.setError("");
             } else if (binding.etNumber.getText().toString().length() <= 15 || binding.etNumber.getText().toString().length() > 16) {
                 binding.tlName.setError("");
-                binding.tlNumber.setError("Please use the correct card number");
+                binding.tlNumber.setError("Card number is required.");
                 binding.txtError.setText("");
             } else if (binding.etName.getText().toString().equalsIgnoreCase("")) {
-                binding.tlName.setError("Please provide the card holder's name");
+                binding.tlName.setError("Card name is required");
                 binding.tlNumber.setError("");
                 binding.txtError.setText("");
             } else if (binding1.MonthPicker.getValue() < month && binding1.YearPicker.getValue() == year) {
-                binding.txtError.setText("The expiry date that you have used is incorrect");
+                binding.txtError.setText("Please enter a valid expiry mm/yyyy");
                 binding.tlName.setError("");
                 binding.tlNumber.setError("");
             } else if (binding.textMonth.getText().toString().equalsIgnoreCase("Expiry Date") || a == 0) {
-                binding.txtError.setText("Please provide the expiry date");
+                binding.txtError.setText("Expiry month is required");
                 binding.tlName.setError("");
                 binding.tlNumber.setError("");
             } else if (binding.etCvv.getText().toString().matches("")) {
                 binding.tlName.setError("");
                 binding.tlNumber.setError("");
-                binding.txtError.setText("Please provide the CVV");
+                binding.txtError.setText("CVV is required");
             } else if (binding.etCvv.getText().toString().length() < 3) {
                 binding.tlName.setError("");
                 binding.tlNumber.setError("");
-                binding.txtError.setText("The CVV you have used is incorrect");
+                binding.txtError.setText("Please enter a valid CVV number");
             } else {
                 binding.tlName.setError("");
                 binding.tlNumber.setError("");
@@ -166,7 +161,7 @@
                     @Override
                     public void onError(Exception error) {
                         Log.e("error.........", "" + error.toString());
-                        BWSApplication.showToast("Invalid Card Details", context);
+                        BWSApplication.showToast("Please enter valid card details", context);
                         BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
                     }
 
Index: app/src/main/java/com/brainwellnessspa/UserModule/Activities/UserProfileActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.UserModule.Activities;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.content.FileProvider;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.Manifest;\r\nimport android.app.Activity;\r\nimport android.app.DatePickerDialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.View;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.brainwellnessspa.BuildConfig;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.UserModule.Models.AddProfileModel;\r\nimport com.brainwellnessspa.UserModule.Models.ProfileUpdateModel;\r\nimport com.brainwellnessspa.UserModule.Models.ProfileViewModel;\r\nimport com.brainwellnessspa.UserModule.Models.RemoveProfileModel;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.APIClientProfile;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityUserProfileBinding;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\n\r\nimport retrofit.RetrofitError;\r\nimport retrofit.mime.TypedFile;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class UserProfileActivity extends AppCompatActivity {\r\n    ActivityUserProfileBinding binding;\r\n    Context ctx;\r\n    String UserID, profilePicPath = \"\", tryafter = \"Try after 5 minutes\", UserName, UserCalendar, UserMobileNumber, UserEmail;\r\n    File image;\r\n    Activity activity;\r\n    CharSequence[] options;\r\n    public int BirthYear;\r\n    private static final int CONTENT_REQUEST = 100;\r\n    RequestPermissionHandler mRequestPermissionHandler;\r\n    private int mYear, mMonth, mDay;\r\n    int ageYear, ageMonth, ageDate;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_user_profile);\r\n        ctx = UserProfileActivity.this;\r\n        activity = UserProfileActivity.this;\r\n        mRequestPermissionHandler = new RequestPermissionHandler();\r\n\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        profileViewData(ctx);\r\n        binding.llBack.setOnClickListener(view -> finish());\r\n\r\n        binding.rlImageUpload.setOnClickListener(view -> selectImage());\r\n        binding.btnSave.setOnClickListener(view -> profileUpdate());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                1, 1, 0.32f, 0);\r\n        binding.civProfile.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.civProfile.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        MeasureRatio measureRatios = BWSApplication.measureRatio(ctx, 0,\r\n                1, 1, 0.32f, 0);\r\n        binding.civLetter.getLayoutParams().height = (int) (measureRatios.getHeight() * measureRatios.getRatio());\r\n        binding.civLetter.getLayoutParams().width = (int) (measureRatios.getWidthImg() * measureRatios.getRatio());\r\n    }\r\n\r\n    void profileUpdate() {\r\n        binding.flUser.setError(\"\");\r\n        binding.tlMobileNumber.setError(\"\");\r\n        binding.tlCalendar.setError(\"\");\r\n        binding.tlEmail.setError(\"\");\r\n        if (binding.etUser.getText().toString().equalsIgnoreCase(\"\") &&\r\n                binding.etCalendar.getText().toString().equalsIgnoreCase(\"\") &&\r\n                binding.etMobileNumber.getText().toString().equalsIgnoreCase(\"\") &&\r\n                binding.etEmail.getText().toString().equalsIgnoreCase(\"\")) {\r\n            binding.flUser.setError(\"Please enter your full name\");\r\n            binding.tlCalendar.setError(\"please enter date of birth\");\r\n            binding.tlMobileNumber.setError(\"please enter mobile number\");\r\n            binding.tlEmail.setError(\"Please provide a valid email address\");\r\n        } else if (binding.etUser.getText().toString().equalsIgnoreCase(\"\") &&\r\n                binding.etCalendar.getText().toString().equalsIgnoreCase(\"\") &&\r\n                binding.etEmail.getText().toString().equalsIgnoreCase(\"\")) {\r\n            binding.flUser.setError(\"Please enter your full name\");\r\n            binding.tlCalendar.setError(\"please enter date of birth\");\r\n            binding.tlEmail.setError(\"Please provide a valid email address\");\r\n        } else if (!binding.etUser.getText().toString().equalsIgnoreCase(\"\") &&\r\n                binding.etCalendar.getText().toString().equalsIgnoreCase(\"\") &&\r\n                binding.etEmail.getText().toString().equalsIgnoreCase(\"\")) {\r\n            binding.tlCalendar.setError(\"please enter date of birth\");\r\n            binding.tlEmail.setError(\"Please provide a valid email address\");\r\n        } else if (binding.etUser.getText().toString().equalsIgnoreCase(\"\") &&\r\n                binding.etCalendar.getText().toString().equalsIgnoreCase(\"\") &&\r\n                !binding.etEmail.getText().toString().equalsIgnoreCase(\"\")) {\r\n            binding.flUser.setError(\"Please enter your full name\");\r\n            binding.tlCalendar.setError(\"please enter date of birth\");\r\n        } else if (binding.etUser.getText().toString().equalsIgnoreCase(\"\") &&\r\n                !binding.etCalendar.getText().toString().equalsIgnoreCase(\"\") &&\r\n                binding.etEmail.getText().toString().equalsIgnoreCase(\"\")) {\r\n            binding.flUser.setError(\"Please enter your full name\");\r\n            binding.tlEmail.setError(\"Please provide a valid email address\");\r\n        } else if (binding.etUser.getText().toString().equalsIgnoreCase(\"\")) {\r\n            binding.flUser.setError(\"Please enter your full name\");\r\n        } else if (binding.etCalendar.getText().toString().equalsIgnoreCase(\"\")) {\r\n            binding.tlCalendar.setError(\"please enter date of birth\");\r\n        } else if (binding.etMobileNumber.getText().toString().equalsIgnoreCase(\"\")) {\r\n            binding.tlMobileNumber.setError(\"please enter mobile number\");\r\n        } else if (binding.etEmail.getText().toString().equalsIgnoreCase(\"\")) {\r\n            binding.tlEmail.setError(\"Please enter your email address\");\r\n        } else if (!binding.etEmail.getText().toString().equalsIgnoreCase(\"\")\r\n                && !BWSApplication.isEmailValid(binding.etEmail.getText().toString())) {\r\n            binding.tlEmail.setError(\"Please provide a valid email address\");\r\n        } else {\r\n            binding.flUser.setError(\"\");\r\n            binding.tlCalendar.setError(\"\");\r\n            binding.flUser.clearFocus();\r\n            binding.tlEmail.clearFocus();\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                String dob = \"\";\r\n                if (!binding.etCalendar.getText().toString().isEmpty()) {\r\n                    dob = binding.etCalendar.getText().toString();\r\n                    SimpleDateFormat spf = new SimpleDateFormat(CONSTANTS.MONTH_DATE_YEAR_FORMAT);\r\n                    Date newDate = new Date();\r\n                    try {\r\n                        newDate = spf.parse(dob);\r\n                    } catch (ParseException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    spf = new SimpleDateFormat(CONSTANTS.YEAR_TO_DATE_FORMAT);\r\n                    dob = spf.format(newDate);\r\n                }\r\n                Call<ProfileUpdateModel> listCall = APIClient.getClient().getProfileUpdate(UserID, binding.etUser.getText().toString(), dob,\r\n                        binding.etMobileNumber.getText().toString(), binding.etEmail.getText().toString(), \"\");\r\n                listCall.enqueue(new Callback<ProfileUpdateModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<ProfileUpdateModel> call, Response<ProfileUpdateModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            ProfileUpdateModel viewModel = response.body();\r\n                            finish();\r\n                            BWSApplication.showToast(viewModel.getResponseMessage(), ctx);\r\n                        } else {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ProfileUpdateModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        finish();\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.N)\r\n    public void setDate() {\r\n        final Calendar c = Calendar.getInstance();\r\n        mYear = c.get(Calendar.YEAR);\r\n        mMonth = c.get(Calendar.MONTH);\r\n        mDay = c.get(Calendar.DAY_OF_MONTH);\r\n\r\n        DatePickerDialog datePickerDialog = new DatePickerDialog(this, R.style.DialogTheme,\r\n                (view, year, monthOfYear, dayOfMonth) -> {\r\n                    view.setMinDate(System.currentTimeMillis() - 1000);\r\n                    Calendar cal = Calendar.getInstance();\r\n                    cal.getTimeInMillis();\r\n                    cal.set(year, monthOfYear, dayOfMonth);\r\n                    Date date = cal.getTime();\r\n                    SimpleDateFormat sdf = new SimpleDateFormat(CONSTANTS.MONTH_DATE_YEAR_FORMAT);\r\n                    String strDate = sdf.format(date);\r\n\r\n                    ageYear = year;\r\n                    ageMonth = monthOfYear;\r\n                    ageDate = dayOfMonth;\r\n\r\n                    BirthYear = getAge(ageYear, ageMonth, ageDate);\r\n                    if (BirthYear < 18) {\r\n                        binding.tlCalendar.setError(\"You must be 18 years of age to register\");\r\n                        binding.btnSave.setEnabled(false);\r\n                        binding.btnSave.setClickable(false);\r\n                    } else {\r\n                        binding.tlCalendar.setError(\"\");\r\n                        binding.btnSave.setEnabled(true);\r\n                        binding.btnSave.setClickable(true);\r\n                    }\r\n                    binding.etCalendar.setText(strDate);\r\n                }, mYear, mMonth, mDay);\r\n        datePickerDialog.show();\r\n    }\r\n\r\n    public int getAge(int year, int month, int day) {\r\n        Calendar dob = Calendar.getInstance();\r\n        Calendar today = Calendar.getInstance();\r\n\r\n        dob.set(year, month, day);\r\n        int age = today.get(Calendar.YEAR) - dob.get(Calendar.YEAR);\r\n\r\n        if (today.get(Calendar.DAY_OF_YEAR) < dob.get(Calendar.DAY_OF_YEAR)) {\r\n            age--;\r\n        }\r\n\r\n        Integer ageInt = new Integer(age);\r\n        int ageS = ageInt;\r\n        return ageS;\r\n    }\r\n\r\n    void profileViewData(Context ctx) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<ProfileViewModel> listCall = APIClient.getClient().getProfileView(UserID);\r\n            listCall.enqueue(new Callback<ProfileViewModel>() {\r\n                @Override\r\n                public void onResponse(Call<ProfileViewModel> call, Response<ProfileViewModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        ProfileViewModel viewModel = response.body();\r\n                        binding.etUser.addTextChangedListener(userTextWatcher);\r\n                        binding.etCalendar.addTextChangedListener(userTextWatcher);\r\n                        binding.etMobileNumber.addTextChangedListener(userTextWatcher);\r\n                        binding.etEmail.addTextChangedListener(userTextWatcher);\r\n                        if (viewModel.getResponseData().getName().equalsIgnoreCase(\"\") ||\r\n                                viewModel.getResponseData().getName().equalsIgnoreCase(\" \") ||\r\n                                viewModel.getResponseData().getName() == null) {\r\n                            binding.etUser.setText(R.string.Guest);\r\n                        } else {\r\n                            binding.etUser.setText(viewModel.getResponseData().getName());\r\n                        }\r\n                        UserName = viewModel.getResponseData().getName();\r\n                        UserCalendar = viewModel.getResponseData().getDOB();\r\n                        UserMobileNumber = viewModel.getResponseData().getPhoneNumber();\r\n                        UserEmail = viewModel.getResponseData().getEmail();\r\n\r\n                        String Name = viewModel.getResponseData().getName();\r\n                        String Letter = Name.substring(0, 1);\r\n                        profilePicPath = viewModel.getResponseData().getImage();\r\n                        if (profilePicPath.equalsIgnoreCase(\"\")) {\r\n                            binding.civProfile.setVisibility(View.GONE);\r\n                            binding.rlLetter.setVisibility(View.VISIBLE);\r\n                            binding.tvLetter.setText(Letter);\r\n                        } else {\r\n                            binding.civProfile.setVisibility(View.VISIBLE);\r\n                            binding.rlLetter.setVisibility(View.GONE);\r\n                            Glide.with(getApplicationContext()).load(profilePicPath)\r\n                                    .thumbnail(0.1f)\r\n                                    .skipMemoryCache(false).into(binding.civProfile);\r\n                        }\r\n\r\n                        if (viewModel.getResponseData().getDOB().equalsIgnoreCase(\"0000-00-00\")) {\r\n                            binding.etCalendar.setText(\"\");\r\n                        } else {\r\n                            /*String date = viewModel.getResponseData().getDOB();\r\n                            SimpleDateFormat spf = new SimpleDateFormat(CONSTANTS.YEAR_TO_DATE_FORMAT);\r\n                            if (!date.isEmpty()) {\r\n                                Date newDate = null;\r\n                                try {\r\n                                    newDate = spf.parse(date);\r\n                                } catch (ParseException e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n                                spf = new SimpleDateFormat(CONSTANTS.MONTH_DATE_YEAR_FORMAT);\r\n                                date = spf.format(newDate);*/\r\n                            binding.etCalendar.setText(viewModel.getResponseData().getDOB());\r\n//                            }\r\n                        }\r\n\r\n                        if (!viewModel.getResponseData().getEmail().equalsIgnoreCase(\"\")\r\n                                && BWSApplication.isEmailValid(viewModel.getResponseData().getEmail())) {\r\n                            binding.ivCheckEmail.setColorFilter(ContextCompat.getColor(ctx, R.color.green_dark), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                        } else {\r\n                            binding.ivCheckEmail.setColorFilter(ContextCompat.getColor(ctx, R.color.gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n                        }\r\n                        binding.etEmail.setText(viewModel.getResponseData().getEmail());\r\n                        binding.etMobileNumber.setText(viewModel.getResponseData().getPhoneNumber());\r\n\r\n                        if (!viewModel.getResponseData().getEmail().equalsIgnoreCase(\"\")) {\r\n                            binding.etEmail.setEnabled(true);\r\n                            binding.etEmail.setClickable(true);\r\n                        } else {\r\n                            binding.etEmail.setEnabled(true);\r\n                            binding.etEmail.setClickable(true);\r\n                        }\r\n\r\n                        if (!viewModel.getResponseData().getPhoneNumber().equalsIgnoreCase(\"\")) {\r\n                            binding.etMobileNumber.setEnabled(false);\r\n                            binding.etMobileNumber.setClickable(false);\r\n                        } else {\r\n                            binding.etMobileNumber.setEnabled(true);\r\n                            binding.etMobileNumber.setClickable(true);\r\n                        }\r\n\r\n                        binding.etCalendar.setOnClickListener(new View.OnClickListener() {\r\n                            @Override\r\n                            public void onClick(View view) {\r\n                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n                                    setDate();\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        if ((viewModel.getResponseData().getIsVerify().equalsIgnoreCase(\"0\"))) {\r\n                            binding.ivCheckEmail.setVisibility(View.GONE);\r\n                            binding.llEmailApply.setClickable(true);\r\n                            binding.llEmailApply.setEnabled(true);\r\n                            binding.tlEmail.setErrorEnabled(false);\r\n                            binding.tlEmail.clearFocus();\r\n//                            tvApply.setEnabled(true);\r\n//                            tvApply.setClickable(true);\r\n//                            tvApply.setText(\"Verify\");\r\n//                            tvApply.setTextColor(getResources().getColor(R.color.gray));\r\n//                            tvApplytimer.setVisibility(View.GONE);\r\n                        } else if (viewModel.getResponseData().getIsVerify().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivCheckEmail.setVisibility(View.VISIBLE);\r\n                            binding.llEmailApply.setClickable(false);\r\n                            binding.llEmailApply.setEnabled(false);\r\n                            binding.tlEmail.setErrorEnabled(false);\r\n                            binding.tlEmail.clearFocus();\r\n//                            tvApply.setText(\"Verified\");\r\n//                            tvApply.setTextColor(getResources().getColor(R.color.green));\r\n//                            tvApply.setEnabled(false);\r\n//                            tvApply.setClickable(false);\r\n//                            tvApplytimer.setVisibility(View.GONE);\r\n                        } else if (viewModel.getResponseData().getIsVerify().equalsIgnoreCase(\"2\")) {\r\n                            binding.llEmailApply.setEnabled(false);\r\n                            binding.llEmailApply.setClickable(false);\r\n                            binding.tlEmail.setError(tryafter);\r\n                            binding.tlEmail.setErrorEnabled(true);\r\n//                            tvApply.setText(\"Verify\");\r\n//                            tvApplytimer.setVisibility(View.GONE);\r\n//                            tvApply.setClickable(false);\r\n//                            tvApply.setEnabled(false);\r\n//                            tvApply.setTextColor(getResources().getColor(R.color.gray));\r\n                        }\r\n                    } else {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<ProfileViewModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private void selectImage() {\r\n        mRequestPermissionHandler.requestPermission(activity, new String[]{\r\n                Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE,\r\n                Manifest.permission.CAMERA\r\n        }, 123, new RequestPermissionHandler.RequestPermissionListener() {\r\n            @Override\r\n            public void onSuccess() {\r\n                if (profilePicPath.equals(\"\")) {\r\n                    options = new String[]{getString(R.string.takePhoto), getString(R.string.chooseFromGallary), getString(R.string.cancel)};\r\n                } else {\r\n                    options = new String[]{getString(R.string.takePhoto), getString(R.string.chooseFromGallary), getString(R.string.removeProfilePicture), getString(R.string.cancel)};\r\n                }\r\n                AlertDialog.Builder builder = new AlertDialog.Builder(ctx);\r\n                builder.setTitle(R.string.addPhoto);\r\n                builder.setItems(options, (dialog, item) -> {\r\n                    if (options[item].equals(getString(R.string.takePhoto))) {\r\n                        Intent pictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n                        if (pictureIntent.resolveActivity(getPackageManager()) != null) {\r\n                            File photoFile = null;\r\n                            try {\r\n                                photoFile = createImageFile();\r\n                            } catch (IOException ex) {\r\n                            }\r\n\r\n                            if (photoFile != null) {\r\n                                Uri photoURI = FileProvider.getUriForFile(ctx,\r\n                                        BuildConfig.APPLICATION_ID + \".provider\", photoFile);\r\n                                pictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);\r\n                                startActivityForResult(pictureIntent,\r\n                                        CONTENT_REQUEST);\r\n                            }\r\n                        }\r\n                    } else if (options[item].equals(getString(R.string.chooseFromGallary))) {\r\n                        Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\r\n                        startActivityForResult(intent, 2);\r\n                    } else if (options[item].equals(getString(R.string.removeProfilePicture))) {\r\n                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            Call<RemoveProfileModel> listCall = APIClient.getClient().getRemoveProfile(UserID);\r\n                            listCall.enqueue(new Callback<RemoveProfileModel>() {\r\n                                @Override\r\n                                public void onResponse(Call<RemoveProfileModel> call, Response<RemoveProfileModel> response) {\r\n                                    if (response.isSuccessful()) {\r\n                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        RemoveProfileModel viewModel = response.body();\r\n                                        BWSApplication.showToast(viewModel.getResponseMessage(), ctx);\r\n                                        profileViewData(ctx);\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onFailure(Call<RemoveProfileModel> call, Throwable t) {\r\n                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                }\r\n                            });\r\n                        }\r\n                    } else if (options[item].equals(getString(R.string.cancel))) {\r\n                        dialog.dismiss();\r\n                    }\r\n                });\r\n                AlertDialog alert11 = builder.create();\r\n                alert11.getWindow().setBackgroundDrawableResource(R.drawable.dialog_bg);\r\n                alert11.show();\r\n            }\r\n\r\n            @Override\r\n            public void onFailed() {\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        profileViewData(ctx);\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == CONTENT_REQUEST && resultCode == Activity.RESULT_OK) {\r\n            try {\r\n                Glide.with(this).load(imageFilePath)\r\n                        .thumbnail(0.1f)\r\n                        .skipMemoryCache(false).into(binding.civProfile);\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    HashMap<String, String> map = new HashMap<>();\r\n                    map.put(CONSTANTS.PREF_KEY_UserID, UserID);\r\n                    TypedFile typedFile = new TypedFile(CONSTANTS.MULTIPART_FORMAT, image);\r\n                    APIClientProfile.getApiService().getAddProfiles(UserID, typedFile,\r\n                            new retrofit.Callback<AddProfileModel>() {\r\n                                @Override\r\n                                public void success(AddProfileModel addProfileModel, retrofit.client.Response response) {\r\n                                    if (addProfileModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        profilePicPath = addProfileModel.getResponseData().getProfileImage();\r\n                                        Glide.with(getApplicationContext()).load(profilePicPath)\r\n                                                .thumbnail(0.1f)\r\n                                                .skipMemoryCache(false).into(binding.civProfile);\r\n                                        BWSApplication.showToast(addProfileModel.getResponseMessage(), ctx);\r\n                                        profileViewData(ctx);\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void failure(RetrofitError e) {\r\n                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    BWSApplication.showToast(e.getMessage(), ctx);\r\n                                }\r\n                            });\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else if (requestCode == 2 && resultCode == Activity.RESULT_OK) {\r\n            if (data != null) {\r\n                Uri selectedImageUri = data.getData();\r\n                Glide.with(this).load(selectedImageUri)\r\n                        .thumbnail(0.1f)\r\n                        .skipMemoryCache(false).into(binding.civProfile);\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    HashMap<String, String> map = new HashMap<>();\r\n                    map.put(CONSTANTS.PREF_KEY_UserID, UserID);\r\n                    File file = new File(FileUtil.getPath(selectedImageUri, this));\r\n\r\n                    TypedFile typedFile = new TypedFile(CONSTANTS.MULTIPART_FORMAT, file);\r\n                    APIClientProfile.getApiService().getAddProfiles(UserID, typedFile,\r\n                            new retrofit.Callback<AddProfileModel>() {\r\n                                @Override\r\n                                public void success(AddProfileModel addProfileModel, retrofit.client.Response response) {\r\n                                    if (addProfileModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        profilePicPath = addProfileModel.getResponseData().getProfileImage();\r\n                                        Glide.with(getApplicationContext()).load(profilePicPath)\r\n                                                .thumbnail(0.1f)\r\n                                                .skipMemoryCache(false).into(binding.civProfile);\r\n                                        BWSApplication.showToast(addProfileModel.getResponseMessage(), ctx);\r\n                                        profileViewData(ctx);\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void failure(RetrofitError e) {\r\n                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    BWSApplication.showToast(e.getMessage(), ctx);\r\n                                }\r\n                            });\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            }\r\n        } else if (requestCode == RESULT_CANCELED) {\r\n            finish();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (requestCode == 5) {\r\n            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n            } else {\r\n            }\r\n        }\r\n    }\r\n\r\n    String imageFilePath;\r\n\r\n    private File createImageFile() throws IOException {\r\n        String timeStamp =\r\n                new SimpleDateFormat(\"yyyyMMdd_HHmmss\",\r\n                        Locale.getDefault()).format(new Date());\r\n        String imageFileName = \"IMG_\" + timeStamp + \"_\";\r\n        File storageDir =\r\n                getExternalFilesDir(Environment.DIRECTORY_PICTURES);\r\n        image = File.createTempFile(\r\n                imageFileName,\r\n                \".jpg\",\r\n                storageDir\r\n        );\r\n        imageFilePath = image.getAbsolutePath();\r\n        return image;\r\n    }\r\n\r\n    TextWatcher userTextWatcher = new TextWatcher() {\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            String User = binding.etUser.getText().toString().trim();\r\n            String Calendar = binding.etCalendar.getText().toString().trim();\r\n            String MobileNumber = binding.etMobileNumber.getText().toString().trim();\r\n            String Email = binding.etEmail.getText().toString().trim();\r\n\r\n            if (User.equalsIgnoreCase(UserName) && Calendar.equalsIgnoreCase(UserCalendar)\r\n                    && MobileNumber.equalsIgnoreCase(UserMobileNumber) && Email.equalsIgnoreCase(UserEmail)) {\r\n                binding.btnSave.setEnabled(false);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            } else if (!User.equalsIgnoreCase(UserName)) {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else if (!Calendar.equalsIgnoreCase(UserCalendar)) {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else if (!MobileNumber.equalsIgnoreCase(UserMobileNumber)) {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else if (!Email.equalsIgnoreCase(UserEmail)) {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n        }\r\n    };\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/UserModule/Activities/UserProfileActivity.java	(revision c53b969433d60429193c95728c8e5fc7b867a3c1)
+++ app/src/main/java/com/brainwellnessspa/UserModule/Activities/UserProfileActivity.java	(date 1602684145513)
@@ -99,45 +99,22 @@
         binding.tlCalendar.setError("");
         binding.tlEmail.setError("");
         if (binding.etUser.getText().toString().equalsIgnoreCase("") &&
-                binding.etCalendar.getText().toString().equalsIgnoreCase("") &&
-                binding.etMobileNumber.getText().toString().equalsIgnoreCase("") &&
-                binding.etEmail.getText().toString().equalsIgnoreCase("")) {
-            binding.flUser.setError("Please enter your full name");
-            binding.tlCalendar.setError("please enter date of birth");
-            binding.tlMobileNumber.setError("please enter mobile number");
-            binding.tlEmail.setError("Please provide a valid email address");
-        } else if (binding.etUser.getText().toString().equalsIgnoreCase("") &&
-                binding.etCalendar.getText().toString().equalsIgnoreCase("") &&
                 binding.etEmail.getText().toString().equalsIgnoreCase("")) {
-            binding.flUser.setError("Please enter your full name");
-            binding.tlCalendar.setError("please enter date of birth");
-            binding.tlEmail.setError("Please provide a valid email address");
+            binding.flUser.setError("Name is required");
+            binding.tlEmail.setError("Email address is required");
         } else if (!binding.etUser.getText().toString().equalsIgnoreCase("") &&
-                binding.etCalendar.getText().toString().equalsIgnoreCase("") &&
                 binding.etEmail.getText().toString().equalsIgnoreCase("")) {
-            binding.tlCalendar.setError("please enter date of birth");
-            binding.tlEmail.setError("Please provide a valid email address");
+            binding.tlEmail.setError("Email address is required");
         } else if (binding.etUser.getText().toString().equalsIgnoreCase("") &&
-                binding.etCalendar.getText().toString().equalsIgnoreCase("") &&
                 !binding.etEmail.getText().toString().equalsIgnoreCase("")) {
-            binding.flUser.setError("Please enter your full name");
-            binding.tlCalendar.setError("please enter date of birth");
-        } else if (binding.etUser.getText().toString().equalsIgnoreCase("") &&
-                !binding.etCalendar.getText().toString().equalsIgnoreCase("") &&
-                binding.etEmail.getText().toString().equalsIgnoreCase("")) {
-            binding.flUser.setError("Please enter your full name");
-            binding.tlEmail.setError("Please provide a valid email address");
+            binding.flUser.setError("Name is required");
         } else if (binding.etUser.getText().toString().equalsIgnoreCase("")) {
-            binding.flUser.setError("Please enter your full name");
-        } else if (binding.etCalendar.getText().toString().equalsIgnoreCase("")) {
-            binding.tlCalendar.setError("please enter date of birth");
-        } else if (binding.etMobileNumber.getText().toString().equalsIgnoreCase("")) {
-            binding.tlMobileNumber.setError("please enter mobile number");
+            binding.flUser.setError("Name is required");
         } else if (binding.etEmail.getText().toString().equalsIgnoreCase("")) {
-            binding.tlEmail.setError("Please enter your email address");
+            binding.tlEmail.setError("Email address is required");
         } else if (!binding.etEmail.getText().toString().equalsIgnoreCase("")
                 && !BWSApplication.isEmailValid(binding.etEmail.getText().toString())) {
-            binding.tlEmail.setError("Please provide a valid email address");
+            binding.tlEmail.setError("Please enter a valid email address");
         } else {
             binding.flUser.setError("");
             binding.tlCalendar.setError("");
