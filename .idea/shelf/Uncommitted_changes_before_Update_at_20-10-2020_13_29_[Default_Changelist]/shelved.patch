Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityAddAudioBinding;\r\nimport com.brainwellnessspa.databinding.DownloadsLayoutBinding;\r\nimport com.brainwellnessspa.databinding.GlobalSearchLayoutBinding;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\n\r\npublic class AddAudioActivity extends AppCompatActivity {\r\n    ActivityAddAudioBinding binding;\r\n    Context ctx;\r\n    String UserID, PlaylistID;\r\n    SerachListAdpater adpater;\r\n    EditText searchEditText;\r\n    Activity activity;\r\n    public static boolean addToSearch = false;\r\n    public static String MyPlaylistIds = \"\";\r\n    public static String PlaylistIDMS = \"\";\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_add_audio);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_add_audio);\r\n        ctx = AddAudioActivity.this;\r\n        activity = AddAudioActivity.this;\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            PlaylistID = getIntent().getStringExtra(CONSTANTS.PlaylistID);\r\n        }\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        closeButton.setOnClickListener(view -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.rvSerachList.setAdapter(null);\r\n            binding.rvSerachList.setVisibility(View.GONE);\r\n            binding.llError.setVisibility(View.GONE);\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                binding.searchView.clearFocus();\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n\r\n                } else {\r\n                    prepareSearchData(search, searchEditText);\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            callback();\r\n        });\r\n\r\n        RecyclerView.LayoutManager suggested = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvSuggestedList.setLayoutManager(suggested);\r\n        binding.rvSuggestedList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager serachList = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvSerachList.setLayoutManager(serachList);\r\n        binding.rvSerachList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager manager = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayList.setItemAnimator(new DefaultItemAnimator());\r\n        binding.rvPlayList.setLayoutManager(manager);\r\n        prepareSuggestedData();\r\n    }\r\n\r\n    private void callback() {\r\n//        if (binding.searchView )\r\n        finish();\r\n    }\r\n\r\n    private void prepareSearchData(String search, EditText searchEditText) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SearchBothModel> listCall = APIClient.getClient().getSearchBoth(UserID, search);\r\n            listCall.enqueue(new Callback<SearchBothModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchBothModel> call, Response<SearchBothModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SearchBothModel listModel = response.body();\r\n                        if (!searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            if (listModel.getResponseData().size() == 0) {\r\n                                binding.rvSerachList.setVisibility(View.GONE);\r\n                                binding.llError.setVisibility(View.VISIBLE);\r\n                                binding.tvFound.setText(\"Couldn't find '\" + search + \"'. Try searching again\");\r\n                            } else {\r\n                                binding.llError.setVisibility(View.GONE);\r\n                                binding.rvSerachList.setVisibility(View.VISIBLE);\r\n                                adpater = new SerachListAdpater(listModel.getResponseData(), activity, binding.rvSerachList, UserID);\r\n                                binding.rvSerachList.setAdapter(adpater);\r\n                            }\r\n                        } else if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            binding.rvSerachList.setAdapter(null);\r\n                            binding.rvSerachList.setVisibility(View.GONE);\r\n                            binding.llError.setVisibility(View.GONE);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchBothModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void prepareSuggestedData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SuggestedModel> listCall = APIClient.getClient().getSuggestedLists(UserID);\r\n            listCall.enqueue(new Callback<SuggestedModel>() {\r\n                @Override\r\n                public void onResponse(Call<SuggestedModel> call, Response<SuggestedModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SuggestedModel listModel = response.body();\r\n                        binding.tvSuggestedAudios.setText(R.string.Recommended_Audios);\r\n                        binding.tvSAViewAll.setVisibility(View.VISIBLE);\r\n                        SuggestedAdpater suggestedAdpater = new SuggestedAdpater(listModel.getResponseData(), ctx);\r\n                        binding.rvSuggestedList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSAViewAll.setOnClickListener(view -> {\r\n                            Intent i = new Intent(ctx, ViewSuggestedActivity.class);\r\n                            i.putExtra(\"Name\", \"Recommended  Audios\");\r\n                            i.putExtra(\"PlaylistID\", PlaylistID);\r\n                            i.putParcelableArrayListExtra(\"AudiolistModel\", listModel.getResponseData());\r\n                            startActivity(i);\r\n                            finish();\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SuggestedModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SearchPlaylistModel> listCall = APIClient.getClient().getSuggestedPlayLists(UserID);\r\n            listCall.enqueue(new Callback<SearchPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchPlaylistModel> call, Response<SearchPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SearchPlaylistModel listModel = response.body();\r\n                        binding.tvSuggestedPlaylist.setText(R.string.Recommendeds_Playlist);\r\n                        binding.tvSPViewAll.setVisibility(View.VISIBLE);\r\n\r\n                        SuggestedPlayListsAdpater suggestedAdpater = new SuggestedPlayListsAdpater(listModel.getResponseData());\r\n                        binding.rvPlayList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSPViewAll.setOnClickListener(view -> {\r\n                            Intent i = new Intent(ctx, ViewSuggestedActivity.class);\r\n                            i.putExtra(\"Name\", \"Recommended Playlist\");\r\n                            i.putExtra(\"PlaylistID\", PlaylistID);\r\n                            i.putParcelableArrayListExtra(\"PlaylistModel\", listModel.getResponseData());\r\n                            startActivity(i);\r\n                            finish();\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callback();\r\n    }\r\n\r\n\r\n    public class SerachListAdpater extends RecyclerView.Adapter<SerachListAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        String UserID;\r\n        RecyclerView rvSerachList;\r\n        private List<SearchBothModel.ResponseData> modelList;\r\n\r\n        public SerachListAdpater(List<SearchBothModel.ResponseData> modelList, Context ctx,\r\n                                 RecyclerView rvSerachList, String UserID) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n            this.rvSerachList = rvSerachList;\r\n            this.UserID = UserID;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            GlobalSearchLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.global_search_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(modelList.get(position).getName());\r\n\r\n            if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            if (modelList.get(position).getIscategory().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.tvPart.setText(R.string.Audio);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                            holder.binding.ivLock.setVisibility(View.GONE);\r\n                            String AudioID = modelList.get(position).getID();\r\n                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                                } else {\r\n                                    callAddSearchAudio(AudioID, \"0\", \"\");\r\n                                }\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                                || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                            Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                            i.putExtra(\"ComeFrom\", \"Plan\");\r\n                            startActivity(i);\r\n                        }\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                            holder.binding.ivLock.setVisibility(View.GONE);\r\n                            String AudioID = modelList.get(position).getID();\r\n                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                                } else {\r\n                                    callAddSearchAudio(AudioID, \"0\", \"\");\r\n                                }\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                                || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                            BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                        }\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = modelList.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    }\r\n                });\r\n                holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n                    try {\r\n                        player = 1;\r\n                        if (isPrepare || isMediaStart || isPause) {\r\n                            MusicService.stopMedia();\r\n                        }\r\n                        isPause = false;\r\n                        isMediaStart = false;\r\n                        isPrepare = false;\r\n                        isCompleteStop = false;\r\n                        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        ArrayList<SearchBothModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                        SearchBothModel.ResponseData  mainPlayModel = new SearchBothModel.ResponseData();\r\n                        mainPlayModel.setID(\"0\");\r\n                        mainPlayModel.setName(\"Disclaimer\");\r\n                        mainPlayModel.setAudioFile(\"\");\r\n                        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                        mainPlayModel.setAudiomastercat(\"\");\r\n                        mainPlayModel.setAudioSubCategory(\"\");\r\n                        mainPlayModel.setImageFile(\"\");\r\n                        mainPlayModel.setLike(\"\");\r\n                        mainPlayModel.setDownload(\"\");\r\n                        mainPlayModel.setAudioDuration(\"0:48\");\r\n                        listModelList2.add(mainPlayModel);\r\n\r\n                        listModelList2.add(modelList.get(position));\r\n                        String json = gson.toJson(listModelList2);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchModelAudio\");\r\n                        editor.commit();\r\n                        Fragment fragment = new TransparentPlayerFragment();\r\n                        FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                        fragmentManager1.beginTransaction()\r\n                                .add(R.id.flContainer, fragment)\r\n                                .commit();\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                });\r\n            } else if (modelList.get(position).getIscategory().equalsIgnoreCase(\"0\")) {\r\n                holder.binding.tvPart.setText(R.string.Playlist);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddSearchAudio(\"\", \"1\", modelList.get(position).getID());\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(\"\", \"1\", modelList.get(position).getID());\r\n                        }\r\n                    }\r\n                });\r\n                holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        addToSearch = true;\r\n                        MyPlaylistIds = modelList.get(position).getID();\r\n                        PlaylistIDMS = PlaylistID;\r\n                        finish();\r\n                    /*Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    Bundle bundle = new Bundle();\r\n                    bundle.putString(\"New\", \"0\");\r\n                    bundle.putString(\"PlaylistID\", PlaylistModel.get(position).getID());\r\n                    bundle.putString(\"PlaylistName\", PlaylistModel.get(position).getName());\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();*/\r\n                    }\r\n                });\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(modelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return modelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            GlobalSearchLayoutBinding binding;\r\n\r\n            public MyViewHolder(GlobalSearchLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callAddSearchAudio(String AudioID, String s, String FromPlaylistId) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<AddToPlaylist> listCall = APIClient.getClient().getAddSearchAudioFromPlaylist(UserID, AudioID, PlaylistID, FromPlaylistId);\r\n            listCall.enqueue(new Callback<AddToPlaylist>() {\r\n                @Override\r\n                public void onResponse(Call<AddToPlaylist> call, Response<AddToPlaylist> response) {\r\n                    try {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            AddToPlaylist listModels = response.body();\r\n                            if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                                Gson gsonx = new Gson();\r\n                                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                                }.getType();\r\n                                ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();\r\n                                mainPlayModelListold = gsonx.fromJson(json, type);\r\n                                String id = mainPlayModelListold.get(pos).getID();\r\n                                ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();\r\n                                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();\r\n                                if (audioPlay) {\r\n                                    if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                            MainPlayModel mainPlayModel = new MainPlayModel();\r\n                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                            mainPlayModelList.add(mainPlayModel);\r\n                                        }\r\n                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                            SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                            playlistSongs.add(mainPlayModel);\r\n                                        }\r\n\r\n                                        for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                            if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {\r\n                                                pos = i;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                        SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                        SharedPreferences.Editor editor = sharedd.edit();\r\n                                        Gson gson = new Gson();\r\n                                        String jsonx = gson.toJson(mainPlayModelList);\r\n                                        String json1 = gson.toJson(playlistSongs);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                        editor.commit();\r\n                                    }\r\n                                }\r\n                                if (s.equalsIgnoreCase(\"1\")) {\r\n                                    finish();\r\n                                }\r\n                            } else if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                            }\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AddToPlaylist> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(ctx.getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public class SuggestedAdpater extends RecyclerView.Adapter<SuggestedAdpater.MyViewHolder> {\r\n        private List<SuggestedModel.ResponseData> listModel;\r\n        Context ctx;\r\n\r\n        public SuggestedAdpater(List<SuggestedModel.ResponseData> listModel, Context ctx) {\r\n            this.listModel = listModel;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(listModel.get(position).getName());\r\n            holder.binding.tvTime.setText(listModel.get(position).getAudioDuration());\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(listModel.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n\r\n            if (listModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                    || listModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (listModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = listModel.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    }\r\n                } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = listModel.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    }\r\n                } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || listModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    String AudioID = listModel.get(position).getID();\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else {\r\n                        callAddSearchAudio(AudioID, \"0\", \"\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (10 > listModel.size()) {\r\n                return listModel.size();\r\n            } else {\r\n                return 10;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SuggestedPlayListsAdpater extends RecyclerView.Adapter<SuggestedPlayListsAdpater.MyViewHolder> {\r\n        private List<SearchPlaylistModel.ResponseData> PlaylistModel;\r\n\r\n        public SuggestedPlayListsAdpater(List<SearchPlaylistModel.ResponseData> PlaylistModel) {\r\n            this.PlaylistModel = PlaylistModel;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(PlaylistModel.get(position).getName());\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n\r\n            if (PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                    PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                            PlaylistModel.get(position).getTotalhour().equalsIgnoreCase(\"\")\r\n                            && PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                holder.binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n            } else {\r\n                if (PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() + \" Audio | \"\r\n                            + PlaylistModel.get(position).getTotalhour() + \"h 0m\");\r\n                } else {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() +\r\n                            \" Audios | \" + PlaylistModel.get(position).getTotalhour() + \"h \" + PlaylistModel.get(position).getTotalminute() + \"m\");\r\n                }\r\n            }\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(PlaylistModel.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    addToSearch = true;\r\n                    MyPlaylistIds = PlaylistModel.get(position).getID();\r\n                    PlaylistIDMS = PlaylistID;\r\n                    finish();\r\n                    /*Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    Bundle bundle = new Bundle();\r\n                    bundle.putString(\"New\", \"0\");\r\n                    bundle.putString(\"PlaylistID\", PlaylistModel.get(position).getID());\r\n                    bundle.putString(\"PlaylistName\", PlaylistModel.get(position).getName());\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();*/\r\n                }\r\n            });\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        } else {\r\n                            callAddSearchAudio(\"\", \"1\", PlaylistModel.get(position).getID());\r\n                        }\r\n                    } else {\r\n                        callAddSearchAudio(\"\", \"1\", PlaylistModel.get(position).getID());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (10 > PlaylistModel.size()) {\r\n                return PlaylistModel.size();\r\n            } else {\r\n                return 10;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java	(revision f1d48fb55df8a74f41c6df313ef833f828a38caf)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java	(date 1603180409503)
@@ -372,49 +372,61 @@
                     }
                 });
                 holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {
-                    try {
-                        player = 1;
-                        if (isPrepare || isMediaStart || isPause) {
-                            MusicService.stopMedia();
-                        }
-                        isPause = false;
-                        isMediaStart = false;
-                        isPrepare = false;
-                        isCompleteStop = false;
-                        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
-                        SharedPreferences.Editor editor = shared.edit();
-                        Gson gson = new Gson();
-                        ArrayList<SearchBothModel.ResponseData> listModelList2 = new ArrayList<>();
-                        SearchBothModel.ResponseData  mainPlayModel = new SearchBothModel.ResponseData();
-                        mainPlayModel.setID("0");
-                        mainPlayModel.setName("Disclaimer");
-                        mainPlayModel.setAudioFile("");
-                        mainPlayModel.setAudioDirection("The audio shall start playing after the disclaimer");
-                        mainPlayModel.setAudiomastercat("");
-                        mainPlayModel.setAudioSubCategory("");
-                        mainPlayModel.setImageFile("");
-                        mainPlayModel.setLike("");
-                        mainPlayModel.setDownload("");
-                        mainPlayModel.setAudioDuration("0:48");
-                        listModelList2.add(mainPlayModel);
+                    if (modelList.get(position).getIsLock().equalsIgnoreCase("1")) {
+                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
+                        holder.binding.ivLock.setVisibility(View.VISIBLE);
+                        Intent i = new Intent(ctx, MembershipChangeActivity.class);
+                        i.putExtra("ComeFrom", "Plan");
+                        startActivity(i);
+                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase("1")) {
+                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
+                        holder.binding.ivLock.setVisibility(View.VISIBLE);
+                        BWSApplication.showToast("Please re-activate your membership plan", ctx);
+                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase("0") || modelList.get(position).getIsLock().equalsIgnoreCase("")) {
+                        try {
+                            player = 1;
+                            if (isPrepare || isMediaStart || isPause) {
+                                MusicService.stopMedia();
+                            }
+                            isPause = false;
+                            isMediaStart = false;
+                            isPrepare = false;
+                            isCompleteStop = false;
+                            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
+                            SharedPreferences.Editor editor = shared.edit();
+                            Gson gson = new Gson();
+                            ArrayList<SearchBothModel.ResponseData> listModelList2 = new ArrayList<>();
+                            SearchBothModel.ResponseData mainPlayModel = new SearchBothModel.ResponseData();
+                            mainPlayModel.setID("0");
+                            mainPlayModel.setName("Disclaimer");
+                            mainPlayModel.setAudioFile("");
+                            mainPlayModel.setAudioDirection("The audio shall start playing after the disclaimer");
+                            mainPlayModel.setAudiomastercat("");
+                            mainPlayModel.setAudioSubCategory("");
+                            mainPlayModel.setImageFile("");
+                            mainPlayModel.setLike("");
+                            mainPlayModel.setDownload("");
+                            mainPlayModel.setAudioDuration("0:48");
+                            listModelList2.add(mainPlayModel);
 
-                        listModelList2.add(modelList.get(position));
-                        String json = gson.toJson(listModelList2);
-                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);
-                        editor.putInt(CONSTANTS.PREF_KEY_position, 0);
-                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
-                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
-                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, "");
-                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, "");
-                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, "SearchModelAudio");
-                        editor.commit();
-                        Fragment fragment = new TransparentPlayerFragment();
-                        FragmentManager fragmentManager1 = getSupportFragmentManager();
-                        fragmentManager1.beginTransaction()
-                                .add(R.id.flContainer, fragment)
-                                .commit();
-                    } catch (Exception e) {
-                        e.printStackTrace();
+                            listModelList2.add(modelList.get(position));
+                            String json = gson.toJson(listModelList2);
+                            editor.putString(CONSTANTS.PREF_KEY_modelList, json);
+                            editor.putInt(CONSTANTS.PREF_KEY_position, 0);
+                            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
+                            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
+                            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, "");
+                            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, "");
+                            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, "SearchModelAudio");
+                            editor.commit();
+                            Fragment fragment = new TransparentPlayerFragment();
+                            FragmentManager fragmentManager1 = getSupportFragmentManager();
+                            fragmentManager1.beginTransaction()
+                                    .add(R.id.flContainer, fragment)
+                                    .commit();
+                        } catch (Exception e) {
+                            e.printStackTrace();
+                        }
                     }
                 });
             } else if (modelList.get(position).getIscategory().equalsIgnoreCase("0")) {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Search/ViewAllSearchFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Search;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\n\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.DownloadsLayoutBinding;\r\nimport com.brainwellnessspa.databinding.FragmentViewAllSearchBinding;\r\nimport com.google.gson.Gson;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\n\r\npublic class ViewAllSearchFragment extends Fragment {\r\n    FragmentViewAllSearchBinding binding;\r\n    View view;\r\n    String UserID, AudioFlag, Name;\r\n    ArrayList<SearchPlaylistModel.ResponseData> PlaylistModel;\r\n    ArrayList<SuggestedModel.ResponseData> AudiolistModel;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_view_all_search, container, false);\r\n        view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n        if (getArguments() != null) {\r\n            Name = getArguments().getString(\"Name\");\r\n        }\r\n\r\n        if (getArguments() != null) {\r\n            AudiolistModel = getArguments().getParcelableArrayList(\"AudiolistModel\");\r\n        }\r\n\r\n        if (getArguments() != null) {\r\n            PlaylistModel = getArguments().getParcelableArrayList(\"PlaylistModel\");\r\n        }\r\n\r\n        view.setFocusableInTouchMode(true);\r\n        view.requestFocus();\r\n        view.setOnKeyListener((v, keyCode, event) -> {\r\n            if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                callBack();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        binding.llBack.setOnClickListener(view1 -> {\r\n            callBack();\r\n        });\r\n\r\n        PrepareData();\r\n        return view;\r\n    }\r\n\r\n    private void callBack() {\r\n        Fragment fragment = new SearchFragment();\r\n        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n        fragmentManager1.beginTransaction()\r\n                .replace(R.id.flContainer, fragment)\r\n                .commit();\r\n        Bundle bundle = new Bundle();\r\n        fragment.setArguments(bundle);\r\n    }\r\n\r\n    public void PrepareData() {\r\n        binding.tvTitle.setText(Name);\r\n        try {\r\n            if (IsLock.equalsIgnoreCase(\"1\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n            }\r\n            SharedPreferences shareda = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shareda.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(4, 6, 4, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(4, 6, 4, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvMainAudio.setLayoutManager(layoutManager);\r\n        binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n        if (Name.equalsIgnoreCase(\"Recommended  Audios\")) {\r\n            SuggestionAudioListsAdpater suggestedAdpater = new SuggestionAudioListsAdpater(AudiolistModel, getActivity());\r\n            binding.rvMainAudio.setAdapter(suggestedAdpater);\r\n        } else if (Name.equalsIgnoreCase(\"Recommended Playlist\")) {\r\n            SuggestionPlayListsAdpater suggestedAdpater = new SuggestionPlayListsAdpater(PlaylistModel, getActivity());\r\n            binding.rvMainAudio.setAdapter(suggestedAdpater);\r\n        }\r\n\r\n    }\r\n\r\n    public class SuggestionAudioListsAdpater extends RecyclerView.Adapter<SuggestionAudioListsAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        private ArrayList<SuggestedModel.ResponseData> AudiolistModel;\r\n\r\n        public SuggestionAudioListsAdpater(ArrayList<SuggestedModel.ResponseData> AudiolistModel, Context ctx) {\r\n            this.AudiolistModel = AudiolistModel;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(AudiolistModel.get(position).getName());\r\n            holder.binding.tvTime.setText(AudiolistModel.get(position).getAudioDuration());\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(getActivity()).load(AudiolistModel.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }else  if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n            holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n                try {\r\n                    player = 1;\r\n                    if (isPrepare || isMediaStart || isPause) {\r\n                        MusicService.stopMedia();\r\n                    }\r\n                    isPause = false;\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                    isCompleteStop = false;\r\n                    SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared.edit();\r\n                    Gson gson = new Gson();\r\n                    ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                    SuggestedModel.ResponseData  mainPlayModel = new SuggestedModel.ResponseData();\r\n                    mainPlayModel.setID(\"0\");\r\n                    mainPlayModel.setName(\"Disclaimer\");\r\n                    mainPlayModel.setAudioFile(\"\");\r\n                    mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                    mainPlayModel.setAudiomastercat(\"\");\r\n                    mainPlayModel.setAudioSubCategory(\"\");\r\n                    mainPlayModel.setImageFile(\"\");\r\n                    mainPlayModel.setLike(\"\");\r\n                    mainPlayModel.setDownload(\"\");\r\n                    mainPlayModel.setAudioDuration(\"0:48\");\r\n                    listModelList2.add(mainPlayModel);\r\n                    listModelList2.add(AudiolistModel.get(position));\r\n                    String json = gson.toJson(listModelList2);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchAudio\");\r\n                    editor.commit();\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            });\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                    i.putExtra(\"AudioId\", AudiolistModel.get(position).getID());\r\n                    i.putExtra(\"PlaylistID\", \"\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return AudiolistModel.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SuggestionPlayListsAdpater extends RecyclerView.Adapter<SuggestionPlayListsAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        private ArrayList<SearchPlaylistModel.ResponseData> PlaylistModel;\r\n\r\n        public SuggestionPlayListsAdpater(ArrayList<SearchPlaylistModel.ResponseData> PlaylistModel, Context ctx) {\r\n            this.PlaylistModel = PlaylistModel;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(PlaylistModel.get(position).getName());\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n\r\n            if (PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                    PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                            PlaylistModel.get(position).getTotalhour().equalsIgnoreCase(\"\")\r\n                            && PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                holder.binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n            } else {\r\n                if (PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() + \" Audio | \"\r\n                            + PlaylistModel.get(position).getTotalhour() + \"h 0m\");\r\n                } else {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() +\r\n                            \" Audios | \" + PlaylistModel.get(position).getTotalhour() + \"h \" + PlaylistModel.get(position).getTotalminute() + \"m\");\r\n                }\r\n            }\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(getActivity()).load(PlaylistModel.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                }else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    comefrom_search = 1;\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    Bundle bundle = new Bundle();\r\n                    bundle.putString(\"New\", \"0\");\r\n                    bundle.putString(\"PlaylistID\", PlaylistModel.get(position).getID());\r\n                    bundle.putString(\"PlaylistName\", PlaylistModel.get(position).getName());\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();\r\n                }\r\n            });\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                    i.putExtra(\"AudioId\", \"\");\r\n                    i.putExtra(\"PlaylistID\", PlaylistModel.get(position).getID());\r\n                    startActivity(i);\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return PlaylistModel.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Search/ViewAllSearchFragment.java	(revision f1d48fb55df8a74f41c6df313ef833f828a38caf)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Search/ViewAllSearchFragment.java	(date 1603180409482)
@@ -193,6 +193,18 @@
                 holder.binding.ivLock.setVisibility(View.GONE);
             }
             holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {
+                if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase("1")) {
+                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
+                    holder.binding.ivLock.setVisibility(View.VISIBLE);
+                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);
+                    i.putExtra("ComeFrom", "Plan");
+                    startActivity(i);
+                }else if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase("2")) {
+                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
+                    holder.binding.ivLock.setVisibility(View.VISIBLE);
+                    BWSApplication.showToast("Please re-activate your membership plan", getActivity());
+                } else if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase("0")
+                        || AudiolistModel.get(position).getIsLock().equalsIgnoreCase("")) {
                 try {
                     player = 1;
                     if (isPrepare || isMediaStart || isPause) {
@@ -206,7 +218,7 @@
                     SharedPreferences.Editor editor = shared.edit();
                     Gson gson = new Gson();
                     ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();
-                    SuggestedModel.ResponseData  mainPlayModel = new SuggestedModel.ResponseData();
+                    SuggestedModel.ResponseData mainPlayModel = new SuggestedModel.ResponseData();
                     mainPlayModel.setID("0");
                     mainPlayModel.setName("Disclaimer");
                     mainPlayModel.setAudioFile("");
@@ -236,6 +248,7 @@
                 } catch (Exception e) {
                     e.printStackTrace();
                 }
+            }
             });
             holder.binding.llRemoveAudio.setOnClickListener(view -> {
                 if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase("1")) {
Index: app/src/main/res/layout/global_search_layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:id=\"@+id/llMainLayout\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        android:gravity=\"center_vertical\"\r\n        android:orientation=\"horizontal\"\r\n        android:weightSum=\"1\">\r\n    <LinearLayout\r\n        android:id=\"@+id/llMainLayoutForPlayer\"\r\n        android:layout_width=\"@dimen/_0sdp\"\r\n        android:layout_height=\"match_parent\"\r\n        android:orientation=\"horizontal\"\r\n        android:layout_weight=\"0.8\"\r\n        android:weightSum=\"0.8\">\r\n        <LinearLayout\r\n            android:layout_width=\"@dimen/_0sdp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_gravity=\"center\"\r\n            android:layout_weight=\"0.2\"\r\n            android:gravity=\"center\"\r\n            android:padding=\"@dimen/_6sdp\">\r\n\r\n            <androidx.cardview.widget.CardView\r\n                android:id=\"@+id/cvImage\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:layout_marginHorizontal=\"@dimen/_8sdp\"\r\n                android:layout_marginVertical=\"@dimen/_4sdp\"\r\n                app:cardCornerRadius=\"@dimen/_10sdp\">\r\n\r\n                <RelativeLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\">\r\n\r\n\r\n                    <androidx.constraintlayout.widget.ConstraintLayout\r\n                        android:id=\"@+id/title_layout\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"match_parent\">\r\n\r\n                        <ImageView\r\n                            android:id=\"@+id/ivRestaurantImage\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:scaleType=\"fitXY\"\r\n                            app:layout_constraintDimensionRatio=\"1:1\"\r\n                            app:layout_constraintLeft_toLeftOf=\"parent\"\r\n                            app:layout_constraintRight_toRightOf=\"parent\"\r\n                            app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                    </androidx.constraintlayout.widget.ConstraintLayout>\r\n                </RelativeLayout>\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/ivBackgroundImage\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_centerInParent=\"true\"\r\n                    android:scaleType=\"fitXY\"\r\n                    android:visibility=\"gone\" />\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/ivLock\"\r\n                    android:layout_width=\"@dimen/_26sdp\"\r\n                    android:layout_height=\"@dimen/_26sdp\"\r\n                    android:layout_centerInParent=\"true\"\r\n                    android:layout_gravity=\"center\"\r\n                    android:scaleType=\"fitXY\"\r\n                    android:src=\"@drawable/ic_lock_icon\"\r\n                    android:visibility=\"gone\" />\r\n\r\n            </androidx.cardview.widget.CardView>\r\n\r\n        </LinearLayout>\r\n\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"@dimen/_0sdp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_weight=\"0.6\"\r\n            android:gravity=\"center_vertical\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvTitle\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"@dimen/_2sdp\"\r\n                android:ellipsize=\"end\"\r\n                android:fontFamily=\"@font/montserrat_medium\"\r\n                android:gravity=\"start\"\r\n                android:maxLines=\"1\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"@dimen/_14sdp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvPart\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"@dimen/_6sdp\"\r\n                android:fontFamily=\"@font/montserrat_medium\"\r\n                android:gravity=\"start\"\r\n                android:textColor=\"@color/extra_light_gray\"\r\n                android:textSize=\"@dimen/_14sdp\" />\r\n\r\n\r\n        </LinearLayout>\r\n    </LinearLayout>\r\n        <LinearLayout\r\n            android:id=\"@+id/llRemoveAudio\"\r\n            android:layout_width=\"@dimen/_0sdp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_gravity=\"center\"\r\n            android:layout_weight=\"0.2\"\r\n            android:gravity=\"center\"\r\n            android:padding=\"@dimen/_8sdp\">\r\n\r\n            <ImageView\r\n                android:id=\"@+id/ivIcon\"\r\n                android:layout_width=\"@dimen/_40sdp\"\r\n                android:layout_height=\"@dimen/_40sdp\"\r\n                android:padding=\"@dimen/_8sdp\"\r\n                android:src=\"@drawable/remove_icon\" />\r\n\r\n        </LinearLayout>\r\n    </LinearLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/global_search_layout.xml	(revision f1d48fb55df8a74f41c6df313ef833f828a38caf)
+++ app/src/main/res/layout/global_search_layout.xml	(date 1603180409491)
@@ -2,114 +2,117 @@
 <layout>
 
     <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        android:id="@+id/llMainLayout"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:id="@+id/llMainLayout"
-        xmlns:app="http://schemas.android.com/apk/res-auto"
         android:gravity="center_vertical"
         android:orientation="horizontal"
         android:weightSum="1">
-    <LinearLayout
-        android:id="@+id/llMainLayoutForPlayer"
-        android:layout_width="@dimen/_0sdp"
-        android:layout_height="match_parent"
-        android:orientation="horizontal"
-        android:layout_weight="0.8"
-        android:weightSum="0.8">
-        <LinearLayout
-            android:layout_width="@dimen/_0sdp"
-            android:layout_height="match_parent"
-            android:layout_gravity="center"
-            android:layout_weight="0.2"
-            android:gravity="center"
-            android:padding="@dimen/_6sdp">
+
+        <LinearLayout
+            android:id="@+id/llMainLayoutForPlayer"
+            android:layout_width="@dimen/_0sdp"
+            android:layout_height="match_parent"
+            android:layout_weight="0.8"
+            android:orientation="horizontal"
+            android:weightSum="0.8">
+
+            <LinearLayout
+                android:layout_width="@dimen/_0sdp"
+                android:layout_height="match_parent"
+                android:layout_gravity="center"
+                android:layout_weight="0.2"
+                android:gravity="center"
+                android:padding="@dimen/_6sdp">
 
-            <androidx.cardview.widget.CardView
-                android:id="@+id/cvImage"
-                android:layout_width="match_parent"
-                android:layout_height="match_parent"
-                android:layout_marginHorizontal="@dimen/_8sdp"
-                android:layout_marginVertical="@dimen/_4sdp"
-                app:cardCornerRadius="@dimen/_10sdp">
+                <androidx.cardview.widget.CardView
+                    android:id="@+id/cvImage"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_marginHorizontal="@dimen/_8sdp"
+                    android:layout_marginVertical="@dimen/_4sdp"
+                    app:cardCornerRadius="@dimen/_10sdp">
 
-                <RelativeLayout
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent">
+                    <RelativeLayout
+                        android:layout_width="match_parent"
+                        android:layout_height="match_parent">
 
 
-                    <androidx.constraintlayout.widget.ConstraintLayout
-                        android:id="@+id/title_layout"
-                        android:layout_width="match_parent"
-                        android:layout_height="match_parent">
+                        <androidx.constraintlayout.widget.ConstraintLayout
+                            android:id="@+id/title_layout"
+                            android:layout_width="match_parent"
+                            android:layout_height="match_parent">
 
-                        <ImageView
-                            android:id="@+id/ivRestaurantImage"
-                            android:layout_width="match_parent"
-                            android:layout_height="match_parent"
-                            android:scaleType="fitXY"
-                            app:layout_constraintDimensionRatio="1:1"
-                            app:layout_constraintLeft_toLeftOf="parent"
-                            app:layout_constraintRight_toRightOf="parent"
-                            app:layout_constraintTop_toTopOf="parent" />
+                            <ImageView
+                                android:id="@+id/ivRestaurantImage"
+                                android:layout_width="match_parent"
+                                android:layout_height="match_parent"
+                                android:scaleType="fitXY"
+                                app:layout_constraintDimensionRatio="1:1"
+                                app:layout_constraintLeft_toLeftOf="parent"
+                                app:layout_constraintRight_toRightOf="parent"
+                                app:layout_constraintTop_toTopOf="parent" />
 
-                    </androidx.constraintlayout.widget.ConstraintLayout>
-                </RelativeLayout>
+                        </androidx.constraintlayout.widget.ConstraintLayout>
+                    </RelativeLayout>
 
-                <ImageView
-                    android:id="@+id/ivBackgroundImage"
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent"
-                    android:layout_centerInParent="true"
-                    android:scaleType="fitXY"
-                    android:visibility="gone" />
+                    <ImageView
+                        android:id="@+id/ivBackgroundImage"
+                        android:layout_width="match_parent"
+                        android:layout_height="match_parent"
+                        android:layout_centerInParent="true"
+                        android:scaleType="fitXY"
+                        android:visibility="gone" />
 
-                <ImageView
-                    android:id="@+id/ivLock"
-                    android:layout_width="@dimen/_26sdp"
-                    android:layout_height="@dimen/_26sdp"
-                    android:layout_centerInParent="true"
-                    android:layout_gravity="center"
-                    android:scaleType="fitXY"
-                    android:src="@drawable/ic_lock_icon"
-                    android:visibility="gone" />
+                    <ImageView
+                        android:id="@+id/ivLock"
+                        android:layout_width="@dimen/_26sdp"
+                        android:layout_height="@dimen/_26sdp"
+                        android:layout_centerInParent="true"
+                        android:layout_gravity="center"
+                        android:scaleType="fitXY"
+                        android:src="@drawable/ic_lock_icon"
+                        android:visibility="gone" />
 
-            </androidx.cardview.widget.CardView>
+                </androidx.cardview.widget.CardView>
 
-        </LinearLayout>
+            </LinearLayout>
 
 
-        <LinearLayout
-            android:layout_width="@dimen/_0sdp"
-            android:layout_height="match_parent"
-            android:layout_weight="0.6"
-            android:gravity="center_vertical"
-            android:orientation="vertical">
+            <LinearLayout
+                android:layout_width="@dimen/_0sdp"
+                android:layout_height="match_parent"
+                android:layout_weight="0.6"
+                android:gravity="center_vertical"
+                android:orientation="vertical">
 
-            <TextView
-                android:id="@+id/tvTitle"
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="@dimen/_2sdp"
-                android:ellipsize="end"
-                android:fontFamily="@font/montserrat_medium"
-                android:gravity="start"
-                android:maxLines="1"
-                android:textColor="@color/black"
-                android:textSize="@dimen/_14sdp" />
+                <TextView
+                    android:id="@+id/tvTitle"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/_2sdp"
+                    android:ellipsize="end"
+                    android:fontFamily="@font/montserrat_medium"
+                    android:gravity="start"
+                    android:maxLines="1"
+                    android:textColor="@color/black"
+                    android:textSize="@dimen/_14sdp" />
 
-            <TextView
-                android:id="@+id/tvPart"
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="@dimen/_6sdp"
-                android:fontFamily="@font/montserrat_medium"
-                android:gravity="start"
-                android:textColor="@color/extra_light_gray"
-                android:textSize="@dimen/_14sdp" />
+                <TextView
+                    android:id="@+id/tvPart"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/_6sdp"
+                    android:fontFamily="@font/montserrat_medium"
+                    android:gravity="start"
+                    android:textColor="@color/extra_light_gray"
+                    android:textSize="@dimen/_14sdp" />
 
 
-        </LinearLayout>
-    </LinearLayout>
+            </LinearLayout>
+        </LinearLayout>
+
         <LinearLayout
             android:id="@+id/llRemoveAudio"
             android:layout_width="@dimen/_0sdp"
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision f1d48fb55df8a74f41c6df313ef833f828a38caf)
+++ .idea/gradle.xml	(date 1603180410092)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Search/SearchFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Search;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.DownloadsLayoutBinding;\r\nimport com.brainwellnessspa.databinding.FragmentSearchBinding;\r\nimport com.brainwellnessspa.databinding.GlobalSearchLayoutBinding;\r\nimport com.brainwellnessspa.databinding.PlaylistCustomLayoutBinding;\r\nimport com.google.gson.Gson;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\n\r\npublic class SearchFragment extends Fragment {\r\n    FragmentSearchBinding binding;\r\n    String UserID;\r\n    EditText searchEditText;\r\n    SerachListAdpater adpater;\r\n    public static int comefrom_search = 0;\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_search, container, false);\r\n        View view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        closeButton.setOnClickListener(v -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.rvSerachList.setAdapter(null);\r\n            binding.rvSerachList.setVisibility(View.GONE);\r\n            binding.llError.setVisibility(View.GONE);\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n\r\n                } else {\r\n                    prepareSearchData(search, searchEditText);\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvSerachList.setLayoutManager(recentlyPlayed);\r\n        binding.rvSerachList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvDownloadsList.setLayoutManager(layoutManager);\r\n        binding.rvDownloadsList.setItemAnimator(new DefaultItemAnimator());\r\n        RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n        binding.rvPlayList.setItemAnimator(new DefaultItemAnimator());\r\n        binding.rvPlayList.setLayoutManager(manager);\r\n        prepareSuggestedData();\r\n\r\n        return view;\r\n    }\r\n\r\n    private void prepareSearchData(String search, EditText searchEditText) {\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SearchBothModel> listCall = APIClient.getClient().getSearchBoth(UserID, search);\r\n            listCall.enqueue(new Callback<SearchBothModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchBothModel> call, Response<SearchBothModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SearchBothModel listModel = response.body();\r\n                        if (!searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            if (listModel.getResponseData().size() == 0) {\r\n                                binding.rvSerachList.setVisibility(View.GONE);\r\n                                binding.llError.setVisibility(View.VISIBLE);\r\n                                binding.tvFound.setText(\"Couldn't find '\" + search + \"'. Try searching again\");\r\n                            } else {\r\n                                binding.llError.setVisibility(View.GONE);\r\n                                binding.rvSerachList.setVisibility(View.VISIBLE);\r\n                                adpater = new SerachListAdpater(listModel.getResponseData(), getActivity(), binding.rvSerachList, UserID);\r\n                                binding.rvSerachList.setAdapter(adpater);\r\n                            }\r\n                        } else if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            binding.rvSerachList.setAdapter(null);\r\n                            binding.rvSerachList.setVisibility(View.GONE);\r\n                            binding.llError.setVisibility(View.GONE);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchBothModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        prepareSuggestedData();\r\n    }\r\n\r\n    private void prepareSuggestedData() {\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n        try {\r\n            if (IsLock.equalsIgnoreCase(\"1\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n            }\r\n            SharedPreferences shareda = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shareda.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(0, 6, 0, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(0, 6, 0, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SuggestedModel> listCall = APIClient.getClient().getSuggestedLists(UserID);\r\n            listCall.enqueue(new Callback<SuggestedModel>() {\r\n                @Override\r\n                public void onResponse(Call<SuggestedModel> call, Response<SuggestedModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SuggestedModel listModel = response.body();\r\n                        binding.tvSuggestedAudios.setText(R.string.Recommended_Audios);\r\n                        binding.tvSAViewAll.setVisibility(View.VISIBLE);\r\n                        SuggestionAudiosAdpater suggestedAdpater = new SuggestionAudiosAdpater(listModel.getResponseData(), getActivity());\r\n                        binding.rvDownloadsList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSAViewAll.setOnClickListener(view -> {\r\n                            Fragment fragment = new ViewAllSearchFragment();\r\n                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .replace(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                            Bundle bundle = new Bundle();\r\n                            bundle.putString(\"Name\", \"Recommended  Audios\");\r\n                            bundle.putParcelableArrayList(\"AudiolistModel\", listModel.getResponseData());\r\n                            fragment.setArguments(bundle);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SuggestedModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SearchPlaylistModel> listCall = APIClient.getClient().getSuggestedPlayLists(UserID);\r\n            listCall.enqueue(new Callback<SearchPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchPlaylistModel> call, Response<SearchPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SearchPlaylistModel listModel = response.body();\r\n                        binding.tvSuggestedPlaylist.setText(R.string.Recommendeds_Playlist);\r\n                        binding.tvSPViewAll.setVisibility(View.VISIBLE);\r\n\r\n                        SearchPlaylistAdapter suggestedAdpater = new SearchPlaylistAdapter(listModel.getResponseData());\r\n                        binding.rvPlayList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSPViewAll.setOnClickListener(view -> {\r\n                            Fragment fragment = new ViewAllSearchFragment();\r\n                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .replace(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                            Bundle bundle = new Bundle();\r\n                            bundle.putString(\"Name\", \"Recommended Playlist\");\r\n                            bundle.putParcelableArrayList(\"PlaylistModel\", listModel.getResponseData());\r\n                            fragment.setArguments(bundle);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    public class SerachListAdpater extends RecyclerView.Adapter<SerachListAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        String UserID;\r\n        RecyclerView rvSerachList;\r\n        private List<SearchBothModel.ResponseData> modelList;\r\n\r\n        public SerachListAdpater(List<SearchBothModel.ResponseData> modelList, Context ctx,\r\n                                 RecyclerView rvSerachList, String UserID) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n            this.rvSerachList = rvSerachList;\r\n            this.UserID = UserID;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            GlobalSearchLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.global_search_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(modelList.get(position).getName());\r\n\r\n            if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            if (modelList.get(position).getIscategory().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.tvPart.setText(R.string.Audio);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                        i.putExtra(\"AudioId\", modelList.get(position).getID());\r\n                        i.putExtra(\"PlaylistID\", \"\");\r\n                        startActivity(i);\r\n                    }\r\n                });\r\n                holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n                    try {\r\n                        player = 1;\r\n                        if (isPrepare || isMediaStart || isPause) {\r\n                            MusicService.stopMedia();\r\n                        }\r\n                        isPause = false;\r\n                        isMediaStart = false;\r\n                        isPrepare = false;\r\n                        isCompleteStop = false;\r\n                        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        ArrayList<SearchBothModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                        SearchBothModel.ResponseData  mainPlayModel = new SearchBothModel.ResponseData();\r\n                        mainPlayModel.setID(\"0\");\r\n                        mainPlayModel.setName(\"Disclaimer\");\r\n                        mainPlayModel.setAudioFile(\"\");\r\n                        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                        mainPlayModel.setAudiomastercat(\"\");\r\n                        mainPlayModel.setAudioSubCategory(\"\");\r\n                        mainPlayModel.setImageFile(\"\");\r\n                        mainPlayModel.setLike(\"\");\r\n                        mainPlayModel.setDownload(\"\");\r\n                        mainPlayModel.setAudioDuration(\"0:48\");\r\n                        listModelList2.add(mainPlayModel);\r\n\r\n                        listModelList2.add(modelList.get(position));\r\n                        String json = gson.toJson(listModelList2);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchModelAudio\");\r\n                        editor.commit();\r\n                        Fragment fragment = new TransparentPlayerFragment();\r\n                        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                        fragmentManager1.beginTransaction()\r\n                                .add(R.id.flContainer, fragment)\r\n                                .commit();\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                });\r\n            } else if (modelList.get(position).getIscategory().equalsIgnoreCase(\"0\")) {\r\n                holder.binding.tvPart.setText(R.string.Playlist);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                        i.putExtra(\"AudioId\", \"\");\r\n                        i.putExtra(\"PlaylistID\", modelList.get(position).getID());\r\n                        startActivity(i);\r\n                    }\r\n                });\r\n\r\n                holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        comefrom_search = 1;\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putString(\"New\", \"0\");\r\n                        bundle.putString(\"PlaylistID\", modelList.get(position).getID());\r\n                        bundle.putString(\"PlaylistName\", modelList.get(position).getName());\r\n                        bundle.putString(\"MyDownloads\", \"0\");\r\n                        myPlaylistsFragment.setArguments(bundle);\r\n                        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                        fragmentManager1.beginTransaction()\r\n                                .replace(R.id.flContainer, myPlaylistsFragment)\r\n                                .commit();\r\n                    }\r\n                });\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(getActivity()).load(modelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return modelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            GlobalSearchLayoutBinding binding;\r\n\r\n            public MyViewHolder(GlobalSearchLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SuggestionAudiosAdpater extends RecyclerView.Adapter<SuggestionAudiosAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        private List<SuggestedModel.ResponseData> modelList;\r\n\r\n        public SuggestionAudiosAdpater(List<SuggestedModel.ResponseData> modelList, Context ctx) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(modelList.get(position).getName());\r\n            holder.binding.tvTime.setText(modelList.get(position).getAudioDuration());\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(getActivity()).load(modelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n                try {\r\n                    player = 1;\r\n                    if (isPrepare || isMediaStart || isPause) {\r\n                        MusicService.stopMedia();\r\n                    }\r\n                    isPause = false;\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                    isCompleteStop = false;\r\n                    SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared.edit();\r\n                    Gson gson = new Gson();\r\n                    ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                    SuggestedModel.ResponseData  mainPlayModel = new SuggestedModel.ResponseData();\r\n                    mainPlayModel.setID(\"0\");\r\n                    mainPlayModel.setName(\"Disclaimer\");\r\n                    mainPlayModel.setAudioFile(\"\");\r\n                    mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                    mainPlayModel.setAudiomastercat(\"\");\r\n                    mainPlayModel.setAudioSubCategory(\"\");\r\n                    mainPlayModel.setImageFile(\"\");\r\n                    mainPlayModel.setLike(\"\");\r\n                    mainPlayModel.setDownload(\"\");\r\n                    mainPlayModel.setAudioDuration(\"0:48\");\r\n                    listModelList2.add(mainPlayModel);\r\n\r\n                    listModelList2.add(modelList.get(position));\r\n                    String json = gson.toJson(listModelList2);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchAudio\");\r\n                    editor.commit();\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n             });\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                    i.putExtra(\"AudioId\", modelList.get(position).getID());\r\n                    i.putExtra(\"PlaylistID\", \"\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (10 > modelList.size()) {\r\n                return modelList.size();\r\n            } else {\r\n                return 10;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SearchPlaylistAdapter extends RecyclerView.Adapter<SearchPlaylistAdapter.MyViewHolder> {\r\n        private List<SearchPlaylistModel.ResponseData> modelList;\r\n\r\n        public SearchPlaylistAdapter(List<SearchPlaylistModel.ResponseData> listModelList) {\r\n            this.modelList = listModelList;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            PlaylistCustomLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.playlist_custom_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                    1, 1, 0.38f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n\r\n            MeasureRatio measureRatio1 = BWSApplication.measureRatio(getActivity(), 0,\r\n                    1, 1, 0.38f, 0);\r\n            holder.binding.rlMainLayout.getLayoutParams().height = (int) (measureRatio1.getHeight() * measureRatio1.getRatio());\r\n            holder.binding.rlMainLayout.getLayoutParams().width = (int) (measureRatio1.getWidthImg() * measureRatio1.getRatio());\r\n\r\n            holder.binding.tvPlaylistName.setText(modelList.get(position).getName());\r\n            Glide.with(getActivity()).load(modelList.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                    || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.rlMainLayout.setOnClickListener(view -> {\r\n                if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    comefrom_search = 1;\r\n                    Bundle bundle = new Bundle();\r\n                    Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    bundle.putString(\"New\", \"0\");\r\n                    bundle.putString(\"ComeFrom\", \"Search\");\r\n                    bundle.putString(\"PlaylistID\", modelList.get(position).getID());\r\n                    bundle.putString(\"PlaylistName\", modelList.get(position).getName());\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (5 > modelList.size()) {\r\n                return modelList.size();\r\n            } else {\r\n                return 5;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            PlaylistCustomLayoutBinding binding;\r\n\r\n            public MyViewHolder(PlaylistCustomLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Search/SearchFragment.java	(revision f1d48fb55df8a74f41c6df313ef833f828a38caf)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Search/SearchFragment.java	(date 1603180409464)
@@ -341,50 +341,63 @@
                         startActivity(i);
                     }
                 });
+
                 holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {
-                    try {
-                        player = 1;
-                        if (isPrepare || isMediaStart || isPause) {
-                            MusicService.stopMedia();
-                        }
-                        isPause = false;
-                        isMediaStart = false;
-                        isPrepare = false;
-                        isCompleteStop = false;
-                        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
-                        SharedPreferences.Editor editor = shared.edit();
-                        Gson gson = new Gson();
-                        ArrayList<SearchBothModel.ResponseData> listModelList2 = new ArrayList<>();
-                        SearchBothModel.ResponseData  mainPlayModel = new SearchBothModel.ResponseData();
-                        mainPlayModel.setID("0");
-                        mainPlayModel.setName("Disclaimer");
-                        mainPlayModel.setAudioFile("");
-                        mainPlayModel.setAudioDirection("The audio shall start playing after the disclaimer");
-                        mainPlayModel.setAudiomastercat("");
-                        mainPlayModel.setAudioSubCategory("");
-                        mainPlayModel.setImageFile("");
-                        mainPlayModel.setLike("");
-                        mainPlayModel.setDownload("");
-                        mainPlayModel.setAudioDuration("0:48");
-                        listModelList2.add(mainPlayModel);
+                    if (modelList.get(position).getIsLock().equalsIgnoreCase("1")) {
+                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
+                        holder.binding.ivLock.setVisibility(View.VISIBLE);
+                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);
+                        i.putExtra("ComeFrom", "Plan");
+                        startActivity(i);
+                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase("2")) {
+                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
+                        holder.binding.ivLock.setVisibility(View.VISIBLE);
+                        BWSApplication.showToast("Please re-activate your membership plan", getActivity());
+                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase("0") || modelList.get(position).getIsLock().equalsIgnoreCase("")) {
+                        try {
+                            player = 1;
+                            if (isPrepare || isMediaStart || isPause) {
+                                MusicService.stopMedia();
+                            }
+                            isPause = false;
+                            isMediaStart = false;
+                            isPrepare = false;
+                            isCompleteStop = false;
+                            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
+                            SharedPreferences.Editor editor = shared.edit();
+                            Gson gson = new Gson();
+                            ArrayList<SearchBothModel.ResponseData> listModelList2 = new ArrayList<>();
+                            SearchBothModel.ResponseData mainPlayModel = new SearchBothModel.ResponseData();
+                            mainPlayModel.setID("0");
+                            mainPlayModel.setName("Disclaimer");
+                            mainPlayModel.setAudioFile("");
+                            mainPlayModel.setAudioDirection("The audio shall start playing after the disclaimer");
+                            mainPlayModel.setAudiomastercat("");
+                            mainPlayModel.setAudioSubCategory("");
+                            mainPlayModel.setImageFile("");
+                            mainPlayModel.setLike("");
+                            mainPlayModel.setDownload("");
+                            mainPlayModel.setAudioDuration("0:48");
+                            listModelList2.add(mainPlayModel);
 
-                        listModelList2.add(modelList.get(position));
-                        String json = gson.toJson(listModelList2);
-                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);
-                        editor.putInt(CONSTANTS.PREF_KEY_position, 0);
-                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
-                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
-                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, "");
-                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, "");
-                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, "SearchModelAudio");
-                        editor.commit();
-                        Fragment fragment = new TransparentPlayerFragment();
-                        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();
-                        fragmentManager1.beginTransaction()
-                                .add(R.id.flContainer, fragment)
-                                .commit();
-                    } catch (Exception e) {
-                        e.printStackTrace();
+                            listModelList2.add(modelList.get(position));
+                            String json = gson.toJson(listModelList2);
+                            editor.putString(CONSTANTS.PREF_KEY_modelList, json);
+                            editor.putInt(CONSTANTS.PREF_KEY_position, 0);
+                            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
+                            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
+                            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, "");
+                            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, "");
+                            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, "SearchModelAudio");
+                            editor.commit();
+                            Fragment fragment = new TransparentPlayerFragment();
+                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();
+                            fragmentManager1.beginTransaction()
+                                    .add(R.id.flContainer, fragment)
+                                    .commit();
+                        } catch (Exception e) {
+                            e.printStackTrace();
+                        }
                     }
                 });
             } else if (modelList.get(position).getIscategory().equalsIgnoreCase("0")) {
@@ -520,7 +533,7 @@
                     SharedPreferences.Editor editor = shared.edit();
                     Gson gson = new Gson();
                     ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();
-                    SuggestedModel.ResponseData  mainPlayModel = new SuggestedModel.ResponseData();
+                    SuggestedModel.ResponseData mainPlayModel = new SuggestedModel.ResponseData();
                     mainPlayModel.setID("0");
                     mainPlayModel.setName("Disclaimer");
                     mainPlayModel.setAudioFile("");
@@ -551,7 +564,7 @@
                 } catch (Exception e) {
                     e.printStackTrace();
                 }
-             });
+            });
 
             holder.binding.llRemoveAudio.setOnClickListener(view -> {
                 if (modelList.get(position).getIsLock().equalsIgnoreCase("1")) {
