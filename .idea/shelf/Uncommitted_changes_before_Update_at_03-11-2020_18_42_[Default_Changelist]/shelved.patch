Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.brainwellnessspa\">\r\n\r\n    <application\r\n        android:name=\".BWSApplication\"\r\n        android:allowBackup=\"true\"\r\n        android:fullBackupContent=\"false\"\r\n        android:hardwareAccelerated=\"true\"\r\n        android:icon=\"@drawable/square_app_icon\"\r\n        android:label=\"@string/app_name\"\r\n        android:largeHeap=\"true\"\r\n        android:requestLegacyExternalStorage=\"true\"\r\n        android:roundIcon=\"@drawable/round_app_logo\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\">\r\n        <activity\r\n            android:name=\".DownloadModule.Activities.DownloadPlaylistActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".DashboardModule.Activities.ViewSuggestedActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".WebView.TncActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".DownloadModule.Activities.DownloadedPlaylist\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".BillingOrderModule.Activities.PaymentActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".ReminderModule.Activities.ReminderDetailsActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".ResourceModule.Activities.ResourceDetailsActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".BillingOrderModule.Activities.MembershipChangeActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".ResourceModule.Activities.ResourceActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".DashboardModule.Activities.MyPlaylistActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".DashboardModule.Activities.AddPlaylistActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <!--\r\n<receiver android:name=\".Utility.MyReceiver\" >\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.BOOT_COMPLETED\" />\r\n            </intent-filter>\r\n        </receiver>\r\n        -->\r\n        <activity\r\n            android:name=\".DashboardModule.Activities.AddAudioActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".DashboardModule.Activities.ViewQueueActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".DashboardModule.Activities.AddQueueActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".DashboardModule.Activities.PlayWellnessActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".MembershipModule.Activities.CheckoutPaymentActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".MembershipModule.Activities.CheckoutOtpActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".MembershipModule.Activities.CheckoutGetCodeActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".MembershipModule.Activities.OrderSummaryActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".MembershipModule.Activities.MembershipActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".ReminderModule.Activities.ReminderActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".FaqModule.Activities.AudioFaqActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".FaqModule.Activities.FaqActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".AddPayment.AddPaymentActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".BillingOrderModule.Activities.CancelMembershipActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".BillingOrderModule.Activities.BillingOrderActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".InvoiceModule.Activities.InvoiceActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".DownloadModule.Activities.DownloadsActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".SplashModule.SplashScreenActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme.NoTitle\"\r\n            android:windowSoftInputMode=\"adjustPan\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\".UserModule.Activities.UserProfileActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".MembershipModule.Activities.ThankYouMpActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".DashboardModule.Activities.DashboardActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:label=\"@string/title_activity_dashboard\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:theme=\"@style/AppTheme.NoTitle\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".LoginModule.Activities.OtpActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".LoginModule.Activities.CountrySelectActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n        <activity\r\n            android:name=\".LoginModule.Activities.LoginActivity\"\r\n            android:configChanges=\"orientation|screenSize\"\r\n            android:screenOrientation=\"portrait\"\r\n            android:windowSoftInputMode=\"adjustPan\" />\r\n\r\n        <meta-data\r\n            android:name=\"com.google.firebase.messaging.default_notification_channel_id\"\r\n            android:value=\"@string/default_notification_channel_id\" />\r\n        <meta-data\r\n            android:name=\"com.google.firebase.messaging.default_notification_icon\"\r\n            android:resource=\"@drawable/square_app_icon\" />\r\n\r\n        <provider\r\n            android:name=\"androidx.core.content.FileProvider\"\r\n            android:authorities=\"${applicationId}.provider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/file_paths\" />\r\n        </provider>\r\n        <receiver\r\n            android:name=\".Utility.SmsReceiver\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"com.google.android.gms.auth.api.phone.SMS_RETRIEVED\" />\r\n            </intent-filter>\r\n        </receiver>\r\n\r\n        <service\r\n            android:name=\".Utility.MusicService\"\r\n            tools:ignore=\"Instantiatable\" />\r\n        <service\r\n            android:name=\".Utility.MyFirebaseMessagingService\"\r\n            android:exported=\"false\"\r\n            tools:ignore=\"ExportedService\">\r\n            <intent-filter>\r\n                <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\r\n            </intent-filter>\r\n        </service>\r\n    </application>\r\n\r\n    <supports-screens\r\n        android:anyDensity=\"true\"\r\n        android:largeScreens=\"true\"\r\n        android:normalScreens=\"true\"\r\n        android:resizeable=\"true\"\r\n        android:smallScreens=\"true\"\r\n        android:xlargeScreens=\"true\" />\r\n\r\n    <uses-feature\r\n        android:name=\"android.hardware.camera\"\r\n        android:required=\"false\" />\r\n\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\r\n    <uses-permission android:name=\"android.permission.WAKE_LOCK\" />\r\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <permission android:name=\"android.permission.MEDIA_CONTENT_CONTROL\" />\r\n    <uses-permission\r\n        android:name=\"android.permission.CAMERA\"\r\n        android:required=\"true\" />\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/AndroidManifest.xml	(date 1604397265575)
@@ -3,6 +3,31 @@
     xmlns:tools="http://schemas.android.com/tools"
     package="com.brainwellnessspa">
 
+    <supports-screens
+        android:anyDensity="true"
+        android:largeScreens="true"
+        android:normalScreens="true"
+        android:resizeable="true"
+        android:smallScreens="true"
+        android:xlargeScreens="true" />
+
+    <uses-feature
+        android:name="android.hardware.camera"
+        android:required="false" />
+
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+    <uses-permission android:name="android.permission.WAKE_LOCK" />
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+
+    <permission android:name="android.permission.MEDIA_CONTENT_CONTROL" />
+
+    <uses-permission
+        android:name="android.permission.CAMERA"
+        android:required="true" />
+
     <application
         android:name=".BWSApplication"
         android:allowBackup="true"
@@ -16,6 +41,7 @@
         android:supportsRtl="true"
         android:theme="@style/AppTheme"
         android:usesCleartextTraffic="true">
+        <activity android:name=".LikeModule.Activities.LikeActivity"></activity>
         <activity
             android:name=".DownloadModule.Activities.DownloadPlaylistActivity"
             android:configChanges="orientation|screenSize"
@@ -224,6 +250,7 @@
                 android:name="android.support.FILE_PROVIDER_PATHS"
                 android:resource="@xml/file_paths" />
         </provider>
+
         <receiver
             android:name=".Utility.SmsReceiver"
             android:exported="true">
@@ -245,27 +272,4 @@
         </service>
     </application>
 
-    <supports-screens
-        android:anyDensity="true"
-        android:largeScreens="true"
-        android:normalScreens="true"
-        android:resizeable="true"
-        android:smallScreens="true"
-        android:xlargeScreens="true" />
-
-    <uses-feature
-        android:name="android.hardware.camera"
-        android:required="false" />
-
-    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
-    <uses-permission android:name="android.permission.WAKE_LOCK" />
-    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
-    <permission android:name="android.permission.MEDIA_CONTENT_CONTROL" />
-    <uses-permission
-        android:name="android.permission.CAMERA"
-        android:required="true" />
-
 </manifest>
\ No newline at end of file
Index: app/src/main/java/com/brainwellnessspa/PdfActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.Resources;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Path;\r\nimport android.graphics.Rect;\r\nimport android.graphics.pdf.PdfDocument;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.StrictMode;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\n\r\npublic class PdfActivity extends AppCompatActivity {\r\n    Button btnCreatePdf;\r\n    TextView tv_title;\r\n    TextView tv_sub_title;\r\n    TextView tv_location;\r\n    TextView tv_city;\r\n\r\n    String file_name_path= \"\";\r\n    int PERMISSION_ALL = 1;\r\n    String[] PERMISSIONS = {\r\n            android.Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n            android.Manifest.permission.READ_EXTERNAL_STORAGE,\r\n    };\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_pdf);\r\n        StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder();\r\n        StrictMode.setVmPolicy(builder.build());\r\n\r\n        if (!hasPermissions(PdfActivity.this, PERMISSIONS)) {\r\n            ActivityCompat.requestPermissions(PdfActivity.this, PERMISSIONS, PERMISSION_ALL);\r\n        }\r\n\r\n        File file = new File(this.getExternalFilesDir(null).getAbsolutePath(), \"pdfsdcard_location\");\r\n        if (!file.exists()) {\r\n            file.mkdir();\r\n        }\r\n\r\n        //this.getExternalFilesDir(null)?.getAbsolutePath()\r\n\r\n        btnCreatePdf = findViewById(R.id.btnCreatePdf);\r\n        tv_title = findViewById(R.id.tv_title);\r\n        tv_sub_title = findViewById(R.id.tv_sub_title);\r\n        tv_location = findViewById(R.id.tv_location);\r\n        tv_city = findViewById(R.id.tv_city);\r\n\r\n\r\n        btnCreatePdf.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                createpdf();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n\r\n    public void createpdf() {\r\n        Rect bounds = new Rect();\r\n        int pageWidth = 300;\r\n        int pageheight = 470;\r\n        int pathHeight = 2;\r\n\r\n        final String fileName = \"mypdf\";\r\n        file_name_path = \"/pdfsdcard_location/\"+fileName+\".pdf\";\r\n        PdfDocument myPdfDocument = new PdfDocument();\r\n        Paint paint = new Paint();\r\n        Paint paint2 = new Paint();\r\n        Path path = new Path();\r\n        PdfDocument.PageInfo myPageInfo = new PdfDocument.PageInfo.Builder(pageWidth, pageheight, 1).create();\r\n        PdfDocument.Page documentPage = myPdfDocument.startPage(myPageInfo);\r\n        Canvas canvas = documentPage.getCanvas();\r\n        int y = 25; // x = 10,\r\n        //int x = (canvas.getWidth() / 2);\r\n        int x = 10;\r\n\r\n        paint.getTextBounds(tv_title.getText().toString(), 0, tv_title.getText().toString().length(), bounds);\r\n        x = (canvas.getWidth() / 2) - (bounds.width() / 2);\r\n        canvas.drawText(tv_title.getText().toString(), x, y, paint);\r\n\r\n        paint.getTextBounds(tv_sub_title.getText().toString(), 0, tv_sub_title.getText().toString().length(), bounds);\r\n        x = (canvas.getWidth() / 2) - (bounds.width() / 2);\r\n        y += paint.descent() - paint.ascent();\r\n        canvas.drawText(tv_sub_title.getText().toString(), x, y, paint);\r\n\r\n        y += paint.descent() - paint.ascent();\r\n        canvas.drawText(\"\", x, y, paint);\r\n\r\n        //horizontal line\r\n        path.lineTo(pageWidth, pathHeight);\r\n        paint2.setColor(Color.GRAY);\r\n        paint2.setStyle(Paint.Style.STROKE);\r\n        path.moveTo(x, y);\r\n\r\n        canvas.drawLine(0, y, pageWidth, y, paint2);\r\n\r\n        //blank space\r\n        y += paint.descent() - paint.ascent();\r\n        canvas.drawText(\"\", x, y, paint);\r\n\r\n        y += paint.descent() - paint.ascent();\r\n        x = 10;\r\n        canvas.drawText(tv_location.getText().toString(), x, y, paint);\r\n\r\n        y += paint.descent() - paint.ascent();\r\n        x = 10;\r\n        canvas.drawText(tv_city.getText().toString(), x, y, paint);\r\n\r\n        //blank space\r\n        y += paint.descent() - paint.ascent();\r\n        canvas.drawText(\"\", x, y, paint);\r\n\r\n        //horizontal line\r\n        path.lineTo(pageWidth, pathHeight);\r\n        paint2.setColor(Color.GRAY);\r\n        paint2.setStyle(Paint.Style.STROKE);\r\n        path.moveTo(x, y);\r\n        canvas.drawLine(0, y, pageWidth, y, paint2);\r\n\r\n        //blank space\r\n        y += paint.descent() - paint.ascent();\r\n        canvas.drawText(\"\", x, y, paint);\r\n\r\n        Resources res = getResources();\r\n        Bitmap bitmap = BitmapFactory.decodeResource(res, R.drawable.square_app_icon);\r\n        Bitmap b =  (Bitmap.createScaledBitmap(bitmap, 100, 50, false));\r\n        canvas.drawBitmap(b, x, y, paint);\r\n        y+= 25;\r\n        canvas.drawText(getString(R.string.app_name), 120,y, paint);\r\n\r\n\r\n\r\n        myPdfDocument.finishPage(documentPage);\r\n        File file = new File(this.getExternalFilesDir(null).getAbsolutePath()+file_name_path);\r\n        try {\r\n            myPdfDocument.writeTo(new FileOutputStream(file));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        myPdfDocument.close();\r\n        viewPdfFile();\r\n    }\r\n\r\n    public void viewPdfFile() {\r\n        File file = new File(this.getExternalFilesDir(null).getAbsolutePath()+file_name_path);\r\n        Intent intent = new Intent(Intent.ACTION_VIEW);\r\n        intent.setDataAndType(Uri.fromFile(file), \"application/pdf\");\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);\r\n        startActivity(intent);\r\n    }\r\n\r\n\r\n    public static boolean hasPermissions(Context context, String... permissions) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && context != null && permissions != null) {\r\n            for (String permission : permissions) {\r\n                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/PdfActivity.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/PdfActivity.java	(date 1604397265581)
@@ -1,3 +1,4 @@
+/*
 package com.brainwellnessspa;
 
 import android.content.Context;
@@ -182,4 +183,4 @@
         }
         return true;
     }
-}
\ No newline at end of file
+}*/
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddQueueActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.SystemClock;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Adapters.DirectionAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.DirectionModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityQueueBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.ComeFindAudio;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class AddQueueActivity extends AppCompatActivity {\r\n    public static boolean comeFromAddToQueue = false;\r\n    ActivityQueueBinding binding;\r\n    String play, UserID, PlaylistId, AudioId, Like, Download, IsRepeat, IsShuffle, myPlaylist = \"\", comeFrom = \"\", audioFileName,\r\n            AudioFile = \"\", PlaylistAudioId = \"\", AudioFlag;\r\n    Context ctx;\r\n    Activity activity;\r\n    ArrayList<String> queue;\r\n    ArrayList<AddToQueueModel> addToQueueModelList;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData;\r\n    MainPlayModel mainPlayMode;\r\n    AddToQueueModel addToQueueModel;\r\n    int position, listSize;\r\n    Boolean queuePlay, audioPlay;\r\n    List<DownloadAudioDetails> oneAudioDetailsList;\r\n    SharedPreferences shared;\r\n    //    Handler handler1;\r\n//    List<String> fileNameList;\r\n    private long mLastClickTime = 0;\r\n/*\r\n    private Runnable UpdateSongTime1 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(audioFileName)) {\r\n                if (downloadProgress <= 100) {\r\n                    binding.pbProgress.setProgress(downloadProgress);\r\n                    binding.pbProgress.setVisibility(View.VISIBLE);\r\n                    binding.ivDownloads.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.pbProgress.setVisibility(View.GONE);\r\n                    binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                    handler1.removeCallbacks(UpdateSongTime1);\r\n                }\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }\r\n            handler1.postDelayed(this, 500);\r\n        }\r\n    };\r\n*/\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_queue);\r\n        ctx = AddQueueActivity.this;\r\n        activity = AddQueueActivity.this;\r\n        oneAudioDetailsList = new ArrayList<>();\r\n//        handler1 = new Handler();\r\n//        fileNameList = new ArrayList<>();\r\n        addToQueueModelList = new ArrayList<>();\r\n        mainPlayModelList = new ArrayList<>();\r\n        mData = new ArrayList<>();\r\n        /*SharedPreferences sharedx = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n        Gson gson1 = new Gson();\r\n        String json11 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n        if (!json11.equalsIgnoreCase(String.valueOf(gson1))) {\r\n            Type type = new TypeToken<List<String>>() {\r\n            }.getType();\r\n//            fileNameList = gson1.fromJson(json11, type);\r\n        }*/\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        myPlaylist = shared.getString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        PlaylistId = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n            }.getType();\r\n            mainPlayModelList = gson.fromJson(json, type);\r\n        }\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        SharedPreferences Status = getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            AudioId = getIntent().getStringExtra(CONSTANTS.ID);\r\n            position = getIntent().getIntExtra(CONSTANTS.position, 0);\r\n        }\r\n        if (getIntent().hasExtra(\"PlaylistAudioId\")) {\r\n            PlaylistAudioId = getIntent().getStringExtra(\"PlaylistAudioId\");\r\n        }\r\n      /*  if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(audioFileName)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }*/\r\n        if (getIntent().hasExtra(\"play\")) {\r\n            play = getIntent().getStringExtra(\"play\");\r\n        } else {\r\n            play = \"\";\r\n        }\r\n\r\n        if (getIntent().hasExtra(\"comeFrom\")) {\r\n            comeFrom = getIntent().getStringExtra(\"comeFrom\");\r\n            position = getIntent().getIntExtra(\"position\", 0);\r\n            mData = getIntent().getParcelableArrayListExtra(\"data\");\r\n        } else {\r\n            comeFrom = \"\";\r\n        }\r\n\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n        } else if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n        }\r\n        if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llShuffle.setClickable(true);\r\n                binding.llShuffle.setEnabled(true);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llShuffle.setClickable(true);\r\n                binding.llShuffle.setEnabled(true);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n\r\n        if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setClickable(false);\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.llRepeat.setClickable(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                IsRepeat = \"0\";\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.llRepeat.setClickable(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n        binding.llLike.setOnClickListener(view ->\r\n                callLike());\r\n\r\n\r\n        binding.llDownload.setOnClickListener(view ->\r\n                callDownload());\r\n\r\n\r\n        binding.llAddQueue.setOnClickListener(view ->\r\n                callAddToQueue());\r\n\r\n        binding.llRepeat.setOnClickListener(view -> callRepeat());\r\n\r\n        binding.llShuffle.setOnClickListener(view -> callShuffle());\r\n\r\n        binding.llRemovePlaylist.setOnClickListener(view -> {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistId) && mainPlayModelList.size() == 1) {\r\n                BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n            } else {\r\n                callRemoveFromPlayList();\r\n            }\r\n        });\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            /*  Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.putExtra(\"Like\", Like);\r\n            i.putExtra(\"Download\", Download);\r\n            startActivity(i);*/\r\n            callBack();\r\n        });\r\n        prepareData();\r\n    }\r\n\r\n    private void callBack() {\r\n        ComeFindAudio = 1;\r\n        if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n            finish();\r\n        } else {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n//            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n//            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n//            startActivity(i);\r\n      /*      SharedPreferences shared11 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared11.edit();\r\n            Gson gson11 = new Gson();\r\n            String json11 = gson11.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, json11);\r\n            editor.commit();*/\r\n            finish();\r\n        }\r\n    }\r\n\r\n    private void callShuffle() {\r\n        if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                IsShuffle = \"1\";\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"1\");\r\n                if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                }\r\n                editor.commit();\r\n                IsRepeat = \"\";\r\n                if (queuePlay) {\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n//                BWSApplication.showToast(\"Shuffle mode has been turned on\", ctx);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n//            BWSApplication.showToast(\"Shuffle mode has been turned off\", ctx);\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n    }\r\n\r\n    private void callRepeat() {\r\n\r\n        if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"0\");\r\n            if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            }\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            IsRepeat = \"0\";\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n//            BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"1\");\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            IsRepeat = \"1\";\r\n            if (listSize == 1) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                IsRepeat = \"\";\r\n                IsShuffle = \"\";\r\n//                BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n//                BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            editor.commit();\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n        } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n            editor.commit();\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            IsRepeat = \"\";\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n//            BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n        }\r\n    }\r\n\r\n    private void callAddToQueue() {\r\n        addToQueueModel = new AddToQueueModel();\r\n        int i = position;\r\n        if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n            addToQueueModel.setID(mData.get(i).getID());\r\n            addToQueueModel.setName(mData.get(i).getName());\r\n            addToQueueModel.setAudioFile(mData.get(i).getAudioFile());\r\n            AudioFile = mData.get(i).getAudioFile();\r\n            PlaylistId = mData.get(i).getPlaylistID();\r\n            addToQueueModel.setPlaylistID(mData.get(i).getPlaylistID());\r\n            addToQueueModel.setAudioDirection(mData.get(i).getAudioDirection());\r\n            addToQueueModel.setAudiomastercat(mData.get(i).getAudiomastercat());\r\n            addToQueueModel.setAudioSubCategory(mData.get(i).getAudioSubCategory());\r\n            addToQueueModel.setImageFile(mData.get(i).getImageFile());\r\n            addToQueueModel.setLike(mData.get(i).getLike());\r\n            addToQueueModel.setDownload(mData.get(i).getDownload());\r\n            addToQueueModel.setAudioDuration(mData.get(i).getAudioDuration());\r\n        } else {\r\n            addToQueueModel.setID(mainPlayModelList.get(i).getID());\r\n            addToQueueModel.setName(mainPlayModelList.get(i).getName());\r\n            addToQueueModel.setAudioFile(mainPlayModelList.get(i).getAudioFile());\r\n            AudioFile = mainPlayModelList.get(i).getAudioFile();\r\n            PlaylistId = mainPlayModelList.get(i).getPlaylistID();\r\n            addToQueueModel.setPlaylistID(mainPlayModelList.get(i).getPlaylistID());\r\n            addToQueueModel.setAudioDirection(mainPlayModelList.get(i).getAudioDirection());\r\n            addToQueueModel.setAudiomastercat(mainPlayModelList.get(i).getAudiomastercat());\r\n            addToQueueModel.setAudioSubCategory(mainPlayModelList.get(i).getAudioSubCategory());\r\n            addToQueueModel.setImageFile(mainPlayModelList.get(i).getImageFile());\r\n            addToQueueModel.setLike(mainPlayModelList.get(i).getLike());\r\n            addToQueueModel.setDownload(mainPlayModelList.get(i).getDownload());\r\n            addToQueueModel.setAudioDuration(mainPlayModelList.get(i).getAudioDuration());\r\n        }\r\n        if (addToQueueModelList.size() == 0) {\r\n            BWSApplication.showToast(\"Added to the queue\", ctx);\r\n            addToQueueModelList.add(addToQueueModel);\r\n        } else {\r\n            for (int x = 0; x < addToQueueModelList.size(); x++) {\r\n                if (addToQueueModelList.get(x).getAudioFile().equals(addToQueueModel.getAudioFile())) {\r\n                    if (queuePlay && addToQueueModelList.get(position).getAudioFile().equals(addToQueueModel.getAudioFile())) {\r\n                        BWSApplication.showToast(\"Added to the queue\", ctx);\r\n                        addToQueueModelList.add(addToQueueModel);\r\n                        break;\r\n                    } else {\r\n                        addToQueueModel = new AddToQueueModel();\r\n                        BWSApplication.showToast(\"Audio already in queue\", ctx);\r\n                        break;\r\n                    }\r\n                } else if (x == (addToQueueModelList.size() - 1)) {\r\n                    BWSApplication.showToast(\"Added to the queue\", ctx);\r\n                    addToQueueModelList.add(addToQueueModel);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(addToQueueModelList);\r\n        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n        editor.commit();\r\n    }\r\n\r\n    private void callRemoveFromPlayList() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRemoveAudioFromPlaylist(UserID, AudioId, PlaylistId);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SucessModel listModel = response.body();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n\r\n                        if (audioPlay) {\r\n                            if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                                Gson gson12 = new Gson();\r\n                                String json12 = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson12));\r\n                                Type type1 = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n                                }.getType();\r\n                                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList1 = gson12.fromJson(json12, type1);\r\n\r\n                                if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n                                    mData.remove(position);\r\n                                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                                    if (pID.equalsIgnoreCase(PlaylistId)) {\r\n                                        if (mData.size() != 0) {\r\n                                            if (pos == position && position < mData.size() - 1) {\r\n                                                pos = pos;\r\n                                                if (isPrepare || isMediaStart || isPause) {\r\n                                                    stopMedia();\r\n                                                }\r\n                                                isPause = false;\r\n                                                isMediaStart = false;\r\n                                                isPrepare = false;\r\n                                            } else if (pos == position && position == mData.size() - 1) {\r\n                                                pos = 0;\r\n                                                if (isPrepare || isMediaStart || isPause) {\r\n                                                    stopMedia();\r\n                                                }\r\n                                                isPause = false;\r\n                                                isMediaStart = false;\r\n                                                isPrepare = false;\r\n                                            } else if (pos < position && pos < mData.size() - 1) {\r\n                                                pos = pos;\r\n                                            } else if (pos > position && pos == mData.size()) {\r\n                                                pos = pos - 1;\r\n                                            }\r\n\r\n                                            SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                            SharedPreferences.Editor editor = sharedd.edit();\r\n                                            Gson gson = new Gson();\r\n                                            String json = gson.toJson(mData);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                                            editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistId);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, myPlaylist);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                            editor.commit();\r\n                                            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n                                            }.getType();\r\n                                            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n                                            listSize = arrayList.size();\r\n                                            for (int i = 0; i < listSize; i++) {\r\n                                                MainPlayModel mainPlayModel = new MainPlayModel();\r\n                                                mainPlayModel.setID(arrayList.get(i).getID());\r\n                                                mainPlayModel.setName(arrayList.get(i).getName());\r\n                                                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                                                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                                                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                                                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                                                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                                                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                                                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                                                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                                                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                                                mainPlayModelList.add(mainPlayModel);\r\n                                            }\r\n                                            SharedPreferences sharedz = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                            SharedPreferences.Editor editor1 = sharedz.edit();\r\n                                            Gson gsonz = new Gson();\r\n                                            String jsonz = gsonz.toJson(mainPlayModelList);\r\n                                            editor1.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n                                            editor1.commit();\r\n                                        }\r\n                                        comeFromAddToQueue = true;\r\n                                    }\r\n                                } else {\r\n                                    mainPlayModelList.remove(pos);\r\n                                    arrayList1.remove(pos);\r\n                                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                                    if (pID.equalsIgnoreCase(PlaylistId)) {\r\n                                        if (mainPlayModelList.size() != 0) {\r\n                                            if (pos < mainPlayModelList.size() - 1) {\r\n                                                pos = pos;\r\n                                            } else if (pos == mainPlayModelList.size() - 1) {\r\n                                                pos = 0;\r\n                                            } else if (pos > mainPlayModelList.size()) {\r\n                                                pos = pos - 1;\r\n                                            }\r\n                                            if (isPrepare || isMediaStart || isPause) {\r\n                                                stopMedia();\r\n                                            }\r\n                                            isPause = false;\r\n                                            isMediaStart = false;\r\n                                            isPrepare = false;\r\n                                            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = new ArrayList<>();\r\n                                            for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                                SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                                mainPlayModel.setID(mainPlayModelList.get(i).getID());\r\n                                                mainPlayModel.setName(mainPlayModelList.get(i).getName());\r\n                                                mainPlayModel.setAudioFile(mainPlayModelList.get(i).getAudioFile());\r\n                                                mainPlayModel.setPlaylistID(mainPlayModelList.get(i).getPlaylistID());\r\n                                                mainPlayModel.setAudioDirection(mainPlayModelList.get(i).getAudioDirection());\r\n                                                mainPlayModel.setAudiomastercat(mainPlayModelList.get(i).getAudiomastercat());\r\n                                                mainPlayModel.setAudioSubCategory(mainPlayModelList.get(i).getAudioSubCategory());\r\n                                                mainPlayModel.setImageFile(mainPlayModelList.get(i).getImageFile());\r\n                                                mainPlayModel.setLike(mainPlayModelList.get(i).getLike());\r\n                                                mainPlayModel.setDownload(mainPlayModelList.get(i).getDownload());\r\n                                                mainPlayModel.setAudioDuration(mainPlayModelList.get(i).getAudioDuration());\r\n                                                arrayList.add(mainPlayModel);\r\n                                            }\r\n                                            SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                            SharedPreferences.Editor editor = sharedd.edit();\r\n                                            Gson gson = new Gson();\r\n                                            String json = gson.toJson(mainPlayModelList);\r\n                                            String json1 = gson.toJson(arrayList);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                                            editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistId);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, myPlaylist);\r\n                                            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                            editor.commit();\r\n                                            comeFromAddToQueue = true;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        finish();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void callDownload() {\r\n      /*  if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<DownloadPlaylistModel> listCall = APIClient.getClient().getDownloadlistPlaylist(UserID, AudioId, PlaylistId);\r\n            listCall.enqueue(new Callback<DownloadPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<DownloadPlaylistModel> call, Response<DownloadPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        DownloadPlaylistModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")\r\n                                || model.getResponseData().getFlag().equalsIgnoreCase(\"\")) {\r\n                            binding.llDownload.setClickable(true);\r\n                            binding.llDownload.setEnabled(true);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            Download = \"0\";\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                            binding.llDownload.setClickable(false);\r\n                            binding.llDownload.setEnabled(false);\r\n                            Download = \"1\";\r\n                        }\r\n                        mainPlayModelList.get(position).setDownload(Download);\r\n\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<DownloadPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }*/\r\n        int i = position;\r\n        String audioFile = \"\", Name = \"\";\r\n        if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n            Name = mData.get(i).getName();\r\n            audioFile = mData.get(i).getAudioFile();\r\n        } else {\r\n            Name = mainPlayModelList.get(i).getName();\r\n            audioFile = mainPlayModelList.get(i).getAudioFile();\r\n        }\r\n        List<String> url1 = new ArrayList<>();\r\n        List<String> name1 = new ArrayList<>();\r\n        List<String> downloadPlaylistId = new ArrayList<>();\r\n        SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n        Gson gson1 = new Gson();\r\n        String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n        String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n        String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n            Type type = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> fileNameList = gson1.fromJson(json, type);\r\n            List<String> audioFile1 = gson1.fromJson(json1, type);\r\n            List<String> playlistId1 = gson1.fromJson(json2, type);\r\n            if (fileNameList.size() != 0) {\r\n                url1.addAll(audioFile1);\r\n                name1.addAll(fileNameList);\r\n                downloadPlaylistId.addAll(playlistId1);\r\n            }\r\n        }\r\n        url1.add(audioFile);\r\n        name1.add(Name);\r\n        downloadPlaylistId.add(\"\");\r\n        if (url1.size() != 0) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String urlJson = gson.toJson(url1);\r\n            String nameJson = gson.toJson(name1);\r\n            String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n            editor.commit();\r\n        }\r\n//        fileNameList = url1;\r\n        callDisableDownload();\r\n        DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n        downloadMedia.encrypt1(url1, name1, downloadPlaylistId);\r\n        /*if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(audioFileName)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }*/\r\n        String dirPath = FileUtils.getFilePath(getApplicationContext(), Name);\r\n        SaveMedia(new byte[1024], dirPath, i);\r\n\r\n    }\r\n\r\n    private void SaveMedia(byte[] encodeBytes, String dirPath, int i) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n                    downloadAudioDetails.setID(mData.get(i).getID());\r\n                    downloadAudioDetails.setName(mData.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(mData.get(i).getAudioFile());\r\n                    downloadAudioDetails.setPlaylistId(mData.get(i).getPlaylistID());\r\n                    downloadAudioDetails.setAudioDirection(mData.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(mData.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(mData.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(mData.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(mData.get(i).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(mData.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                } else {\r\n                    downloadAudioDetails.setID(mainPlayModelList.get(i).getID());\r\n                    downloadAudioDetails.setName(mainPlayModelList.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(mainPlayModelList.get(i).getAudioFile());\r\n                    downloadAudioDetails.setPlaylistId(mainPlayModelList.get(i).getPlaylistID());\r\n                    downloadAudioDetails.setAudioDirection(mainPlayModelList.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(mainPlayModelList.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(mainPlayModelList.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(mainPlayModelList.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(mainPlayModelList.get(i).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(mainPlayModelList.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                }\r\n                DatabaseClient.getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                callDisableDownload();\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callLike() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(AudioId, UserID);\r\n            listCall.enqueue(new Callback<AudioLikeModel>() {\r\n                @Override\r\n                public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        AudioLikeModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);\r\n                            Like = \"0\";\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                            Like = \"1\";\r\n                        }\r\n                        if (queuePlay) {\r\n                            addToQueueModelList.get(position).setLike(Like);\r\n                        } else\r\n                            mainPlayModelList.get(position).setLike(Like);\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(mainPlayModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                        String json1 = gson.toJson(addToQueueModelList);\r\n                        if (queuePlay) {\r\n                            editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n                        }\r\n                        editor.commit();\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AudioLikeModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callBack();\r\n    }\r\n\r\n    private void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<DirectionModel> listCall = APIClient.getClient().getAudioDetailLists(UserID, AudioId);\r\n            listCall.enqueue(new Callback<DirectionModel>() {\r\n                @Override\r\n                public void onResponse(Call<DirectionModel> call, Response<DirectionModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n\r\n\r\n                        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                        } else if (play.equalsIgnoreCase(\"TopCategories\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                        } else if (play.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                        } else if (play.equalsIgnoreCase(\"play\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.VISIBLE);\r\n                        } else if (play.equalsIgnoreCase(\"playlist\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                        } else if (play.equalsIgnoreCase(\"myPlayList\")) {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.VISIBLE);\r\n                        } else {\r\n                            binding.llOptions.setVisibility(View.VISIBLE);\r\n                            binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                        }\r\n\r\n                        DirectionModel directionModel = response.body();\r\n                        int ix = position;\r\n                        if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n                            AudioFile = mData.get(ix).getAudioFile();\r\n                            PlaylistId = mData.get(ix).getPlaylistID();\r\n                            audioFileName = mData.get(ix).getName();\r\n                        } else {\r\n                            AudioFile = mainPlayModelList.get(ix).getAudioFile();\r\n                            PlaylistId = mainPlayModelList.get(ix).getPlaylistID();\r\n                            audioFileName = mainPlayModelList.get(ix).getName();\r\n                        }\r\n                        /*if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(audioFileName)) {\r\n                            handler1.postDelayed(UpdateSongTime1, 500);\r\n                        } else {\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        }*/\r\n                        if (PlaylistId == null) {\r\n                            PlaylistId = \"\";\r\n                        } else {\r\n                            PlaylistId = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        }\r\n                        GetMedia(AudioFile, activity, directionModel.getResponseData().get(0).getDownload(), PlaylistId);\r\n                        binding.cvImage.setVisibility(View.VISIBLE);\r\n                        binding.llLike.setVisibility(View.VISIBLE);\r\n                        binding.llAddPlaylist.setVisibility(View.VISIBLE);\r\n                        binding.llAddQueue.setVisibility(View.VISIBLE);\r\n                        binding.llDownload.setVisibility(View.VISIBLE);\r\n                        binding.llShuffle.setVisibility(View.VISIBLE);\r\n                        binding.llRepeat.setVisibility(View.VISIBLE);\r\n                        binding.llViewQueue.setVisibility(View.VISIBLE);\r\n                        Glide.with(ctx).load(directionModel.getResponseData().get(0).getImageFile()).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n\r\n                        if (directionModel.getResponseData().get(0).getAudioDescription().equalsIgnoreCase(\"\")) {\r\n                            binding.tvTitleDec.setVisibility(View.GONE);\r\n                            binding.tvSubDec.setVisibility(View.GONE);\r\n                        } else {\r\n                            binding.tvTitleDec.setVisibility(View.VISIBLE);\r\n                            binding.tvSubDec.setVisibility(View.VISIBLE);\r\n                        }\r\n\r\n                        binding.tvSubDec.setText(directionModel.getResponseData().get(0).getAudioDescription());\r\n                        int linecount = binding.tvSubDec.getLineCount();\r\n                        if (linecount >= 4) {\r\n                            binding.tvReadMore.setVisibility(View.VISIBLE);\r\n                        } else {\r\n                            binding.tvReadMore.setVisibility(View.GONE);\r\n                        }\r\n\r\n                        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                            binding.llViewQueue.setClickable(true);\r\n                            binding.llViewQueue.setEnabled(true);\r\n                            binding.ivViewQueue.setColorFilter(getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n                        } else {\r\n                            binding.llViewQueue.setClickable(false);\r\n                            binding.llViewQueue.setEnabled(false);\r\n                            binding.ivViewQueue.setColorFilter(getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n                        }\r\n                        binding.tvReadMore.setOnClickListener(view -> {\r\n                            final Dialog dialog = new Dialog(ctx);\r\n                            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                            dialog.setContentView(R.layout.full_desc_layout);\r\n                            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                            dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                            final TextView tvDesc = dialog.findViewById(R.id.tvDesc);\r\n                            final RelativeLayout tvClose = dialog.findViewById(R.id.tvClose);\r\n                            tvDesc.setText(directionModel.getResponseData().get(0).getAudioDescription());\r\n\r\n                            dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                    dialog.dismiss();\r\n                                    return true;\r\n                                }\r\n                                return false;\r\n                            });\r\n\r\n                            tvClose.setOnClickListener(v -> dialog.dismiss());\r\n                            dialog.show();\r\n                            dialog.setCancelable(false);\r\n                        });\r\n\r\n                        Like = directionModel.getResponseData().get(0).getLike();\r\n                        Download = directionModel.getResponseData().get(0).getDownload();\r\n                        binding.tvName.setText(directionModel.getResponseData().get(0).getName());\r\n                        if (directionModel.getResponseData().get(0).getAudiomastercat().equalsIgnoreCase(\"\")) {\r\n                            binding.tvDesc.setVisibility(View.GONE);\r\n                        } else {\r\n                            binding.tvDesc.setVisibility(View.VISIBLE);\r\n                            binding.tvDesc.setText(directionModel.getResponseData().get(0).getAudiomastercat());\r\n                        }\r\n                        binding.tvDuration.setText(directionModel.getResponseData().get(0).getAudioDuration());\r\n\r\n                        if (directionModel.getResponseData().get(0).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                            binding.tvSubDire.setText(\"\");\r\n                            binding.tvSubDire.setVisibility(View.GONE);\r\n                            binding.tvDire.setVisibility(View.GONE);\r\n                        } else {\r\n                            binding.tvSubDire.setText(directionModel.getResponseData().get(0).getAudioDirection());\r\n                            binding.tvSubDire.setVisibility(View.VISIBLE);\r\n                            binding.tvDire.setVisibility(View.VISIBLE);\r\n                        }\r\n\r\n                        if (directionModel.getResponseData().get(0).getLike().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                        } else if (!directionModel.getResponseData().get(0).getLike().equalsIgnoreCase(\"0\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);\r\n                        }\r\n\r\n                        binding.llAddPlaylist.setOnClickListener(view -> {\r\n                            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                                return;\r\n                            }\r\n                            mLastClickTime = SystemClock.elapsedRealtime();\r\n                            Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                            i.putExtra(\"AudioId\", AudioId);\r\n                            i.putExtra(\"PlaylistID\", \"\");\r\n                            startActivity(i);\r\n                        });\r\n\r\n                        binding.llViewQueue.setOnClickListener(view -> {\r\n                            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                                return;\r\n                            }\r\n                            mLastClickTime = SystemClock.elapsedRealtime();\r\n                            Intent i = new Intent(ctx, ViewQueueActivity.class);\r\n                            i.putExtra(\"ComeFromQueue\", \"1\");\r\n                            i.putExtra(\"ID\", AudioId);\r\n                            i.putExtra(\"play\", play);\r\n                            startActivity(i);\r\n                            finish();\r\n                        });\r\n\r\n                        if (directionModel.getResponseData().get(0).getAudioSubCategory().equalsIgnoreCase(\"\")) {\r\n                            binding.rvDirlist.setVisibility(View.GONE);\r\n                        } else {\r\n                            binding.rvDirlist.setVisibility(View.VISIBLE);\r\n                            String[] elements = directionModel.getResponseData().get(0).getAudioSubCategory().split(\",\");\r\n                            List<String> direction = Arrays.asList(elements);\r\n\r\n                            DirectionAdapter directionAdapter = new DirectionAdapter(direction, ctx);\r\n                            RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(ctx, LinearLayoutManager.HORIZONTAL, false);\r\n                            binding.rvDirlist.setLayoutManager(recentlyPlayed);\r\n                            binding.rvDirlist.setItemAnimator(new DefaultItemAnimator());\r\n                            binding.rvDirlist.setAdapter(directionAdapter);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<DirectionModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    BWSApplication.showToast(t.getMessage(), ctx);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n\r\n    }\r\n\r\n    public void GetMedia(String AudioFile, Context ctx, String download, String PlayListId) {\r\n\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getaudioByPlaylist(AudioFile, PlayListId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                        callDisableDownload();\r\n                    }\r\n                } else if (download.equalsIgnoreCase(\"1\")) {\r\n                    callDisableDownload();\r\n                } else {\r\n                    binding.llDownload.setClickable(true);\r\n                    binding.llDownload.setEnabled(true);\r\n                    binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callDisableDownload() {\r\n        binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        binding.tvDownloads.setTextColor(activity.getResources().getColor(R.color.white));\r\n        binding.llDownload.setClickable(false);\r\n        binding.llDownload.setEnabled(false);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddQueueActivity.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddQueueActivity.java	(date 1604407831345)
@@ -105,7 +105,6 @@
     };
 */
 
-
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -777,31 +776,35 @@
                 @Override
                 public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {
                     if (response.isSuccessful()) {
-                        binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);
-                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                        AudioLikeModel model = response.body();
-                        if (model.getResponseData().getFlag().equalsIgnoreCase("0")) {
-                            binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);
-                            Like = "0";
-                        } else if (model.getResponseData().getFlag().equalsIgnoreCase("1")) {
-                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);
-                            Like = "1";
-                        }
-                        if (queuePlay) {
-                            addToQueueModelList.get(position).setLike(Like);
-                        } else
-                            mainPlayModelList.get(position).setLike(Like);
-                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
-                        SharedPreferences.Editor editor = shared.edit();
-                        Gson gson = new Gson();
-                        String json = gson.toJson(mainPlayModelList);
-                        editor.putString(CONSTANTS.PREF_KEY_audioList, json);
-                        String json1 = gson.toJson(addToQueueModelList);
-                        if (queuePlay) {
-                            editor.putString(CONSTANTS.PREF_KEY_queueList, json1);
-                        }
-                        editor.commit();
-                        BWSApplication.showToast(model.getResponseMessage(), ctx);
+                        try {
+                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);
+                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                            AudioLikeModel model = response.body();
+                            if (model.getResponseData().getFlag().equalsIgnoreCase("0")) {
+                                binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);
+                                Like = "0";
+                            } else if (model.getResponseData().getFlag().equalsIgnoreCase("1")) {
+                                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);
+                                Like = "1";
+                            }
+                            if (queuePlay) {
+                                addToQueueModelList.get(position).setLike(Like);
+                            } else
+                                mainPlayModelList.get(position).setLike(Like);
+                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
+                            SharedPreferences.Editor editor = shared.edit();
+                            Gson gson = new Gson();
+                            String json = gson.toJson(mainPlayModelList);
+                            editor.putString(CONSTANTS.PREF_KEY_audioList, json);
+                            String json1 = gson.toJson(addToQueueModelList);
+                            if (queuePlay) {
+                                editor.putString(CONSTANTS.PREF_KEY_queueList, json1);
+                            }
+                            editor.commit();
+                            BWSApplication.showToast(model.getResponseMessage(), ctx);
+                        } catch (Exception e) {
+                            e.printStackTrace();
+                        }
                     }
                 }
 
@@ -852,9 +855,6 @@
                         } else if (play.equalsIgnoreCase("ViewAllAudioList")) {
                             binding.llOptions.setVisibility(View.VISIBLE);
                             binding.llRemovePlaylist.setVisibility(View.GONE);
-                        } else if (play.equalsIgnoreCase("play")) {
-                            binding.llOptions.setVisibility(View.VISIBLE);
-                            binding.llRemovePlaylist.setVisibility(View.VISIBLE);
                         } else if (play.equalsIgnoreCase("playlist")) {
                             binding.llOptions.setVisibility(View.VISIBLE);
                             binding.llRemovePlaylist.setVisibility(View.GONE);
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.databinding.ActivityAddAudioBinding;\r\nimport com.brainwellnessspa.databinding.DownloadsLayoutBinding;\r\nimport com.brainwellnessspa.databinding.GlobalSearchLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\n\r\npublic class AddAudioActivity extends AppCompatActivity {\r\n    ActivityAddAudioBinding binding;\r\n    Context ctx;\r\n    String UserID, PlaylistID, AudioFlag;\r\n    SerachListAdpater adpater;\r\n    EditText searchEditText;\r\n    Activity activity;\r\n    public static boolean addToSearch = false;\r\n    public static String MyPlaylistIds = \"\";\r\n    public static String PlaylistIDMS = \"\";\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_add_audio);\r\n        ctx = AddAudioActivity.this;\r\n        activity = AddAudioActivity.this;\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            PlaylistID = getIntent().getStringExtra(CONSTANTS.PlaylistID);\r\n        }\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        closeButton.setOnClickListener(view -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.rvSerachList.setAdapter(null);\r\n            binding.rvSerachList.setVisibility(View.GONE);\r\n            binding.llError.setVisibility(View.GONE);\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                binding.searchView.clearFocus();\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                } else {\r\n                    prepareSearchData(search, searchEditText);\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            callback();\r\n        });\r\n\r\n        RecyclerView.LayoutManager suggested = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvSuggestedList.setLayoutManager(suggested);\r\n        binding.rvSuggestedList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager serachList = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvSerachList.setLayoutManager(serachList);\r\n        binding.rvSerachList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager manager = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayList.setItemAnimator(new DefaultItemAnimator());\r\n        binding.rvPlayList.setLayoutManager(manager);\r\n        prepareSuggestedData();\r\n    }\r\n\r\n    private void callback() {\r\n        comefromDownload = \"0\";\r\n        finish();\r\n    }\r\n\r\n    private void prepareSearchData(String search, EditText searchEditText) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SearchBothModel> listCall = APIClient.getClient().getSearchBoth(UserID, search);\r\n            listCall.enqueue(new Callback<SearchBothModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchBothModel> call, Response<SearchBothModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SearchBothModel listModel = response.body();\r\n                        if (!searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            if (listModel.getResponseData().size() == 0) {\r\n                                binding.rvSerachList.setVisibility(View.GONE);\r\n                                binding.llError.setVisibility(View.VISIBLE);\r\n                                binding.tvFound.setText(\"Couldn't find '\" + search + \"'. Try searching again\");\r\n                            } else {\r\n                                binding.llError.setVisibility(View.GONE);\r\n                                binding.rvSerachList.setVisibility(View.VISIBLE);\r\n                                adpater = new SerachListAdpater(listModel.getResponseData(), activity, binding.rvSerachList, UserID);\r\n                                binding.rvSerachList.setAdapter(adpater);\r\n                            }\r\n                        } else if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            binding.rvSerachList.setAdapter(null);\r\n                            binding.rvSerachList.setVisibility(View.GONE);\r\n                            binding.llError.setVisibility(View.GONE);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchBothModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void prepareSuggestedData() {\r\n        SharedPreferences shareddes = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shareddes.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n            comefromDownload = \"1\";\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 210);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }else {\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 20);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SuggestedModel> listCall = APIClient.getClient().getSuggestedLists(UserID);\r\n            listCall.enqueue(new Callback<SuggestedModel>() {\r\n                @Override\r\n                public void onResponse(Call<SuggestedModel> call, Response<SuggestedModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SuggestedModel listModel = response.body();\r\n                        binding.tvSuggestedAudios.setText(R.string.Recommended_Audios);\r\n                        binding.tvSAViewAll.setVisibility(View.VISIBLE);\r\n                        SuggestedAdpater suggestedAdpater = new SuggestedAdpater(listModel.getResponseData(), ctx);\r\n                        binding.rvSuggestedList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSAViewAll.setOnClickListener(view -> {\r\n                            Intent i = new Intent(ctx, ViewSuggestedActivity.class);\r\n                            i.putExtra(\"Name\", \"Recommended  Audios\");\r\n                            i.putExtra(\"PlaylistID\", PlaylistID);\r\n                            i.putParcelableArrayListExtra(\"AudiolistModel\", listModel.getResponseData());\r\n                            startActivity(i);\r\n                            finish();\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SuggestedModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SearchPlaylistModel> listCall = APIClient.getClient().getSuggestedPlayLists(UserID);\r\n            listCall.enqueue(new Callback<SearchPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchPlaylistModel> call, Response<SearchPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SearchPlaylistModel listModel = response.body();\r\n                        binding.tvSuggestedPlaylist.setText(R.string.Recommendeds_Playlist);\r\n                        binding.tvSPViewAll.setVisibility(View.VISIBLE);\r\n\r\n                        SuggestedPlayListsAdpater suggestedAdpater = new SuggestedPlayListsAdpater(listModel.getResponseData());\r\n                        binding.rvPlayList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSPViewAll.setOnClickListener(view -> {\r\n                            Intent i = new Intent(ctx, ViewSuggestedActivity.class);\r\n                            i.putExtra(\"Name\", \"Recommended Playlist\");\r\n                            i.putExtra(\"PlaylistID\", PlaylistID);\r\n                            i.putParcelableArrayListExtra(\"PlaylistModel\", listModel.getResponseData());\r\n                            startActivity(i);\r\n                            finish();\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callback();\r\n    }\r\n\r\n\r\n    public class SerachListAdpater extends RecyclerView.Adapter<SerachListAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        String UserID;\r\n        RecyclerView rvSerachList;\r\n        private List<SearchBothModel.ResponseData> modelList;\r\n\r\n        public SerachListAdpater(List<SearchBothModel.ResponseData> modelList, Context ctx,\r\n                                 RecyclerView rvSerachList, String UserID) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n            this.rvSerachList = rvSerachList;\r\n            this.UserID = UserID;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            GlobalSearchLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.global_search_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(modelList.get(position).getName());\r\n\r\n            if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            if (modelList.get(position).getIscategory().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.tvPart.setText(R.string.Audio);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                            holder.binding.ivLock.setVisibility(View.GONE);\r\n                            String AudioID = modelList.get(position).getID();\r\n                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                                } else {\r\n                                    callAddSearchAudio(AudioID, \"0\", \"\");\r\n                                }\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                                || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                            Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                            i.putExtra(\"ComeFrom\", \"Plan\");\r\n                            startActivity(i);\r\n                        }\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                            holder.binding.ivLock.setVisibility(View.GONE);\r\n                            String AudioID = modelList.get(position).getID();\r\n                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                                } else {\r\n                                    callAddSearchAudio(AudioID, \"0\", \"\");\r\n                                }\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                                || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                            BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                        }\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = modelList.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    }\r\n                });\r\n\r\n                holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        try {\r\n                            player = 1;\r\n                            if (isPrepare || isMediaStart || isPause) {\r\n                                MusicService.stopMedia();\r\n                            }\r\n                            isPause = false;\r\n                            isMediaStart = false;\r\n                            isPrepare = false;\r\n                            isCompleteStop = false;\r\n                            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                            SharedPreferences.Editor editor = shared.edit();\r\n                            Gson gson = new Gson();\r\n                            ArrayList<SearchBothModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                            SearchBothModel.ResponseData mainPlayModel = new SearchBothModel.ResponseData();\r\n                            mainPlayModel.setID(\"0\");\r\n                            mainPlayModel.setName(\"Disclaimer\");\r\n                            mainPlayModel.setAudioFile(\"\");\r\n                            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                            mainPlayModel.setAudiomastercat(\"\");\r\n                            mainPlayModel.setAudioSubCategory(\"\");\r\n                            mainPlayModel.setImageFile(\"\");\r\n                            mainPlayModel.setLike(\"\");\r\n                            mainPlayModel.setDownload(\"\");\r\n                            mainPlayModel.setAudioDuration(\"0:48\");\r\n                            listModelList2.add(mainPlayModel);\r\n\r\n                            listModelList2.add(modelList.get(position));\r\n                            String json = gson.toJson(listModelList2);\r\n                            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                            editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchModelAudio\");\r\n                            editor.commit();\r\n                            Fragment fragment = new TransparentPlayerFragment();\r\n                            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .add(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                });\r\n\r\n            } else if (modelList.get(position).getIscategory().equalsIgnoreCase(\"0\")) {\r\n                holder.binding.tvPart.setText(R.string.Playlist);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddSearchAudio(\"\", \"1\", modelList.get(position).getID());\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(\"\", \"1\", modelList.get(position).getID());\r\n                        }\r\n                    }\r\n                });\r\n                holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        comefromDownload = \"0\";\r\n                        addToSearch = true;\r\n                        MyPlaylistIds = modelList.get(position).getID();\r\n                        PlaylistIDMS = PlaylistID;\r\n                        finish();\r\n                    /*Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    Bundle bundle = new Bundle();\r\n                    bundle.putString(\"New\", \"0\");\r\n                    bundle.putString(\"PlaylistID\", PlaylistModel.get(position).getID());\r\n                    bundle.putString(\"PlaylistName\", PlaylistModel.get(position).getName());\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();*/\r\n                    }\r\n                });\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(modelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return modelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            GlobalSearchLayoutBinding binding;\r\n\r\n            public MyViewHolder(GlobalSearchLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callAddSearchAudio(String AudioID, String s, String FromPlaylistId) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<AddToPlaylist> listCall = APIClient.getClient().getAddSearchAudioFromPlaylist(UserID, AudioID, PlaylistID, FromPlaylistId);\r\n            listCall.enqueue(new Callback<AddToPlaylist>() {\r\n                @Override\r\n                public void onResponse(Call<AddToPlaylist> call, Response<AddToPlaylist> response) {\r\n                    try {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            AddToPlaylist listModels = response.body();\r\n                            if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                                if (audioPlay) {\r\n                                    if (AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                        Gson gsonx = new Gson();\r\n                                        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                                        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                                        }.getType();\r\n                                        ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();\r\n                                        mainPlayModelListold = gsonx.fromJson(json, type);\r\n                                        String id = mainPlayModelListold.get(pos).getID();\r\n                                        ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();\r\n                                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();\r\n\r\n                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                            MainPlayModel mainPlayModel = new MainPlayModel();\r\n                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                            mainPlayModelList.add(mainPlayModel);\r\n                                        }\r\n                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                            SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                            playlistSongs.add(mainPlayModel);\r\n                                        }\r\n\r\n                                        for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                            if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {\r\n                                                pos = i;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                        SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                        SharedPreferences.Editor editor = sharedd.edit();\r\n                                        Gson gson = new Gson();\r\n                                        String jsonx = gson.toJson(mainPlayModelList);\r\n                                        String json1 = gson.toJson(playlistSongs);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                        editor.commit();\r\n                                    }\r\n                                }\r\n                                if (s.equalsIgnoreCase(\"1\")) {\r\n                                    finish();\r\n                                }\r\n                            } else if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                            }\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AddToPlaylist> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(ctx.getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public class SuggestedAdpater extends RecyclerView.Adapter<SuggestedAdpater.MyViewHolder> {\r\n        private List<SuggestedModel.ResponseData> listModel;\r\n        Context ctx;\r\n\r\n        public SuggestedAdpater(List<SuggestedModel.ResponseData> listModel, Context ctx) {\r\n            this.listModel = listModel;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(listModel.get(position).getName());\r\n            holder.binding.tvTime.setText(listModel.get(position).getAudioDuration());\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(listModel.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n\r\n            if (listModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                    || listModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n            holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n                if (listModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        try {\r\n                            player = 1;\r\n                            if (isPrepare || isMediaStart || isPause) {\r\n                                MusicService.stopMedia();\r\n                            }\r\n                            isPause = false;\r\n                            isMediaStart = false;\r\n                            isPrepare = false;\r\n                            isCompleteStop = false;\r\n                            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                            SharedPreferences.Editor editor = shared.edit();\r\n                            Gson gson = new Gson();\r\n                            ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                            SuggestedModel.ResponseData mainPlayModel = new SuggestedModel.ResponseData();\r\n                            mainPlayModel.setID(\"0\");\r\n                            mainPlayModel.setName(\"Disclaimer\");\r\n                            mainPlayModel.setAudioFile(\"\");\r\n                            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                            mainPlayModel.setAudiomastercat(\"\");\r\n                            mainPlayModel.setAudioSubCategory(\"\");\r\n                            mainPlayModel.setImageFile(\"\");\r\n                            mainPlayModel.setLike(\"\");\r\n                            mainPlayModel.setDownload(\"\");\r\n                            mainPlayModel.setAudioDuration(\"0:48\");\r\n                            listModelList2.add(mainPlayModel);\r\n\r\n                            listModelList2.add(listModel.get(position));\r\n                            String json = gson.toJson(listModelList2);\r\n                            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                            editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchAudio\");\r\n                            editor.commit();\r\n                            Fragment fragment = new TransparentPlayerFragment();\r\n                            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .add(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    }\r\n                } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || listModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    try {\r\n                        player = 1;\r\n                        if (isPrepare || isMediaStart || isPause) {\r\n                            MusicService.stopMedia();\r\n                        }\r\n                        isPause = false;\r\n                        isMediaStart = false;\r\n                        isPrepare = false;\r\n                        isCompleteStop = false;\r\n                        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                        SuggestedModel.ResponseData mainPlayModel = new SuggestedModel.ResponseData();\r\n                        mainPlayModel.setID(\"0\");\r\n                        mainPlayModel.setName(\"Disclaimer\");\r\n                        mainPlayModel.setAudioFile(\"\");\r\n                        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                        mainPlayModel.setAudiomastercat(\"\");\r\n                        mainPlayModel.setAudioSubCategory(\"\");\r\n                        mainPlayModel.setImageFile(\"\");\r\n                        mainPlayModel.setLike(\"\");\r\n                        mainPlayModel.setDownload(\"\");\r\n                        mainPlayModel.setAudioDuration(\"0:48\");\r\n                        listModelList2.add(mainPlayModel);\r\n\r\n                        listModelList2.add(listModel.get(position));\r\n                        String json = gson.toJson(listModelList2);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchAudio\");\r\n                        editor.commit();\r\n                        Fragment fragment = new TransparentPlayerFragment();\r\n                        FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                        fragmentManager1.beginTransaction()\r\n                                .add(R.id.flContainer, fragment)\r\n                                .commit();\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            });\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (listModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = listModel.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    }\r\n                } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = listModel.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    }\r\n                } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || listModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    String AudioID = listModel.get(position).getID();\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else {\r\n                        callAddSearchAudio(AudioID, \"0\", \"\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (10 > listModel.size()) {\r\n                return listModel.size();\r\n            } else {\r\n                return 10;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SuggestedPlayListsAdpater extends RecyclerView.Adapter<SuggestedPlayListsAdpater.MyViewHolder> {\r\n        private List<SearchPlaylistModel.ResponseData> PlaylistModel;\r\n\r\n        public SuggestedPlayListsAdpater(List<SearchPlaylistModel.ResponseData> PlaylistModel) {\r\n            this.PlaylistModel = PlaylistModel;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(PlaylistModel.get(position).getName());\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n\r\n            if (PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                    PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                            PlaylistModel.get(position).getTotalhour().equalsIgnoreCase(\"\")\r\n                            && PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                holder.binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n            } else {\r\n                if (PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() + \" Audio | \"\r\n                            + PlaylistModel.get(position).getTotalhour() + \"h 0m\");\r\n                } else {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() +\r\n                            \" Audios | \" + PlaylistModel.get(position).getTotalhour() + \"h \" + PlaylistModel.get(position).getTotalminute() + \"m\");\r\n                }\r\n            }\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(PlaylistModel.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    comefromDownload = \"0\";\r\n                    addToSearch = true;\r\n                    MyPlaylistIds = PlaylistModel.get(position).getID();\r\n                    PlaylistIDMS = PlaylistID;\r\n                    finish();\r\n                    /*Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    Bundle bundle = new Bundle();\r\n                    bundle.putString(\"New\", \"0\");\r\n                    bundle.putString(\"PlaylistID\", PlaylistModel.get(position).getID());\r\n                    bundle.putString(\"PlaylistName\", PlaylistModel.get(position).getName());\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();*/\r\n                }\r\n            });\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    comefromDownload = \"0\";\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        } else {\r\n                            callAddSearchAudio(\"\", \"1\", PlaylistModel.get(position).getID());\r\n                        }\r\n                    } else {\r\n                        callAddSearchAudio(\"\", \"1\", PlaylistModel.get(position).getID());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (10 > PlaylistModel.size()) {\r\n                return PlaylistModel.size();\r\n            } else {\r\n                return 10;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java	(date 1604409033677)
@@ -190,7 +190,7 @@
             LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
             params.setMargins(10, 8, 10, 210);
             binding.llSpace.setLayoutParams(params);
-        }else {
+        } else {
             LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
             params.setMargins(10, 8, 10, 20);
             binding.llSpace.setLayoutParams(params);
Index: app/src/main/res/layout/fragment_account.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:tools=\"http://schemas.android.com/tools\"\r\n        android:id=\"@+id/flContainer\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/white\"\r\n        android:clickable=\"true\"\r\n        tools:context=\"com.brainwellnessspa.DashboardModule.Account.AccountFragment\">\r\n\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\">\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:orientation=\"vertical\"\r\n                android:paddingHorizontal=\"@dimen/_14sdp\"\r\n                android:weightSum=\"2\">\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llUserProfile\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"0dp\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:layout_weight=\"0.3\"\r\n                    android:weightSum=\"1\">\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_weight=\"0.20\"\r\n                        android:gravity=\"center\"\r\n                        android:orientation=\"vertical\">\r\n\r\n                        <de.hdodenhof.circleimageview.CircleImageView\r\n                            android:id=\"@+id/civProfile\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:padding=\"@dimen/_4sdp\"\r\n                            android:src=\"@drawable/default_profile\"\r\n                            android:visibility=\"gone\" />\r\n\r\n                        <RelativeLayout\r\n                            android:id=\"@+id/rlLetter\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:padding=\"@dimen/_4sdp\"\r\n                            android:visibility=\"gone\">\r\n\r\n                            <de.hdodenhof.circleimageview.CircleImageView\r\n                                android:id=\"@+id/civLetter\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"match_parent\"\r\n                                android:layout_centerInParent=\"true\"\r\n                                android:padding=\"@dimen/_4sdp\"\r\n                                android:src=\"@color/blue\" />\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvLetter\"\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_centerInParent=\"true\"\r\n                                android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                                android:textColor=\"@color/white\"\r\n                                android:textSize=\"@dimen/_26sdp\" />\r\n                        </RelativeLayout>\r\n\r\n\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"0dp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_marginLeft=\"@dimen/_12sdp\"\r\n                        android:layout_weight=\"0.65\"\r\n                        android:gravity=\"center_vertical\"\r\n                        android:orientation=\"vertical\">\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvName\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                            android:gravity=\"start\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_20sdp\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvViewProfile\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:fontFamily=\"@font/montserrat_medium\"\r\n                            android:gravity=\"start\"\r\n                            android:text=\"@string/view_profile\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_13sdp\"\r\n                            android:visibility=\"gone\" />\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"@dimen/_0sdp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_weight=\"0.15\"\r\n                        android:gravity=\"center_vertical|right\">\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:src=\"@drawable/ic_back_black_icon\" />\r\n                    </LinearLayout>\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"0dp\"\r\n                    android:layout_weight=\"1.77\"\r\n                    android:orientation=\"vertical\">\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llDownloads\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center_vertical\">\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_66sdp\"\r\n                            android:layout_height=\"@dimen/_62sdp\"\r\n                            android:padding=\"@dimen/_20sdp\"\r\n                            android:src=\"@drawable/ic_download_icon\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvDownloads\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                            android:gravity=\"start\"\r\n                            android:text=\"My Downloads\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_16sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llInvoices\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center_vertical\">\r\n\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_66sdp\"\r\n                            android:layout_height=\"@dimen/_62sdp\"\r\n                            android:padding=\"@dimen/_20sdp\"\r\n                            android:src=\"@drawable/ic_invoice_icon\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvInvoices\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                            android:gravity=\"left\"\r\n                            android:text=\"@string/invoices\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_16sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llBillingOrder\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center_vertical\">\r\n\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_66sdp\"\r\n                            android:layout_height=\"@dimen/_62sdp\"\r\n                            android:padding=\"@dimen/_21sdp\"\r\n                            android:src=\"@drawable/ic_payment_icon\" />\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:gravity=\"center_vertical\"\r\n                            android:orientation=\"vertical\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvBillingAndOrder\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                                android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                                android:gravity=\"left\"\r\n                                android:text=\"@string/billing_and_order\"\r\n                                android:textColor=\"@color/black\"\r\n                                android:textSize=\"@dimen/_16sdp\" />\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvCrtPlan\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                                android:fontFamily=\"@font/montserrat_medium\"\r\n                                android:gravity=\"start\"\r\n                                android:textColor=\"@color/light_gray\"\r\n                                android:textSize=\"@dimen/_13sdp\" />\r\n                        </LinearLayout>\r\n\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llReminder\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center_vertical\">\r\n\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_66sdp\"\r\n                            android:layout_height=\"@dimen/_62sdp\"\r\n                            android:padding=\"@dimen/_4sdp\"\r\n                            android:src=\"@drawable/ic_clock_icon\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvReminder\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                            android:gravity=\"left\"\r\n                            android:text=\"@string/reminder\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_16sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llResource\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center_vertical\">\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_66sdp\"\r\n                            android:layout_height=\"@dimen/_62sdp\"\r\n                            android:padding=\"@dimen/_4sdp\"\r\n                            android:src=\"@drawable/ic_resource_icon\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvResource\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                            android:gravity=\"left\"\r\n                            android:text=\"@string/Resources\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_16sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llFaq\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center_vertical\">\r\n\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_66sdp\"\r\n                            android:layout_height=\"@dimen/_62sdp\"\r\n                            android:padding=\"@dimen/_20sdp\"\r\n                            android:src=\"@drawable/ic_faq_icon\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvFaq\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                            android:gravity=\"left\"\r\n                            android:text=\"@string/faq\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_16sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llLogout\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:gravity=\"center_vertical\">\r\n\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"@dimen/_66sdp\"\r\n                            android:layout_height=\"@dimen/_62sdp\"\r\n                            android:padding=\"@dimen/_22sdp\"\r\n                            android:src=\"@drawable/ic_logout_icon\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvLogout\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                            android:gravity=\"left\"\r\n                            android:text=\"@string/logout\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_16sdp\" />\r\n                    </LinearLayout>\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvVersion\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_gravity=\"bottom\"\r\n                        android:layout_marginBottom=\"@dimen/_18sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"center_horizontal|top\"\r\n                        android:textColor=\"@color/black\"\r\n                        android:textSize=\"@dimen/_14sdp\" />\r\n\r\n                </LinearLayout>\r\n\r\n\r\n            </LinearLayout>\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:gravity=\"center\"\r\n                android:padding=\"@dimen/_60sdp\">\r\n\r\n                <ProgressBar\r\n                    android:id=\"@+id/progressBar\"\r\n                    android:layout_width=\"@dimen/_50sdp\"\r\n                    android:layout_height=\"@dimen/_50sdp\"\r\n                    android:indeterminateTint=\"@color/blue\"\r\n                    android:scaleType=\"centerInside\"\r\n                    android:visibility=\"gone\" />\r\n\r\n            </LinearLayout>\r\n\r\n            <FrameLayout\r\n                android:id=\"@+id/progressBarHolder\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:alpha=\"0.4\"\r\n                android:animateLayoutChanges=\"true\"\r\n                android:background=\"#C0000000\"\r\n                android:visibility=\"gone\" />\r\n        </RelativeLayout>\r\n\r\n    </FrameLayout>\r\n</layout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_account.xml	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/res/layout/fragment_account.xml	(date 1604397265817)
@@ -2,6 +2,7 @@
 <layout>
 
     <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
         xmlns:tools="http://schemas.android.com/tools"
         android:id="@+id/flContainer"
         android:layout_width="match_parent"
@@ -143,6 +144,32 @@
                             android:textColor="@color/black"
                             android:textSize="@dimen/_16sdp" />
                     </LinearLayout>
+
+                    <LinearLayout
+                        android:id="@+id/llFavorites"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:gravity="center_vertical">
+
+
+                        <ImageView
+                            android:layout_width="@dimen/_66sdp"
+                            android:layout_height="@dimen/_62sdp"
+                            android:padding="@dimen/_20sdp"
+                            android:src="@drawable/ic_like_white_icon"
+                            app:tint="@color/black" />
+
+                        <TextView
+                            android:id="@+id/tvFavorites"
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:layout_marginLeft="@dimen/_20sdp"
+                            android:fontFamily="@font/montserrat_semi_bold"
+                            android:gravity="left"
+                            android:text="@string/Favorites"
+                            android:textColor="@color/black"
+                            android:textSize="@dimen/_16sdp" />
+                    </LinearLayout>
 
                     <LinearLayout
                         android:id="@+id/llInvoices"
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewQueueActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.media.AudioAttributes;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.SystemClock;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.ItemTouchHelper;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.ItemMoveCallback;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.StartDragListener;\r\nimport com.brainwellnessspa.databinding.ActivityViewQueueBinding;\r\nimport com.brainwellnessspa.databinding.QueueListLayoutBinding;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Random;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.addToRecentPlayId;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPlaying;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isprogressbar;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class ViewQueueActivity extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener,/* AudioManager.OnAudioFocusChangeListener,*/ StartDragListener {\r\n    ActivityViewQueueBinding binding;\r\n    int position, listSize, startTime = 0;\r\n    String IsRepeat, IsShuffle, id, AudioId = \"\", ComeFromQueue = \"\", play = \"\", url, name,StrigRemoveName;\r\n    Context ctx;\r\n    Activity activity;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<AddToQueueModel> addToQueueModelList, addToQueueModelList2;\r\n    ArrayList<AddToQueueModel> addToQueueModeNowPlaying;\r\n    SharedPreferences shared;\r\n    Boolean queuePlay, audioPlay;\r\n    QueueAdapter adapter;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    ItemTouchHelper touchHelper;\r\n    int mypos = 0,myCount;\r\n    long totalDuration,currentDuration,myProgress=0,diff = 0;\r\n    private long mLastClickTime = 0;\r\n    private Handler handler;\r\n    boolean addSong = false;\r\n    //    private AudioManager mAudioManager;\r\n    private Runnable UpdateSongTime = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            startTime = getStartTime();\r\n            Time t = Time.valueOf(\"00:00:00\");\r\n            if (queuePlay) {\r\n                if (listSize != 0) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                        }\r\n                    } else {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                } else {\r\n                    stopMedia();\r\n                }\r\n            } else if (audioPlay) {\r\n                if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else {\r\n                        t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                    }\r\n                } else {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else {\r\n                        t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                    }\r\n                }\r\n            }\r\n            if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                totalDuration = mediaPlayer.getDuration();\r\n            } else {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else {\r\n                    totalDuration = t.getTime();\r\n                }\r\n            }\r\n            myProgress = currentDuration;\r\n            currentDuration = getStartTime();\r\n            diff = totalDuration - myProgress;\r\n            Log.e(\"myProgress old!!!\",String.valueOf(myProgress));\r\n            if (myProgress == currentDuration && myProgress != 0 && !isPause  && diff < 500) {\r\n                Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                myCount++;\r\n                Log.e(\"myCount\",String.valueOf(myCount));\r\n\r\n                if(myCount == 10){\r\n                    Log.e(\"myCount complete\",String.valueOf(myCount));\r\n                    callComplete();\r\n                    myCount = 0;\r\n                }\r\n            }\r\n            int progress = getProgressPercentage(currentDuration, totalDuration);\r\n            if (currentDuration == 0 && isCompleteStop) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n            }else if (currentDuration == 0 && isprogressbar) {\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n            } else if (currentDuration > 1 && !isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                isprogressbar = false;\r\n            } else if (currentDuration >= 1 && isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                isprogressbar = false;\r\n            }\r\n\r\n            if (isPause) {\r\n                binding.simpleSeekbar.setProgress(oTime);\r\n            } else {\r\n                binding.simpleSeekbar.setProgress(progress);\r\n            }\r\n            binding.simpleSeekbar.setMax(100);\r\n            handler.postDelayed(this, 500);\r\n        }\r\n    };\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_view_queue);\r\n        ctx = ViewQueueActivity.this;\r\n        activity = ViewQueueActivity.this;\r\n\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        if (getIntent().getExtras() != null) {\r\n            AudioId = getIntent().getStringExtra(CONSTANTS.ID);\r\n        }\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            ComeFromQueue = getIntent().getStringExtra(\"ComeFromQueue\");\r\n        }\r\n        if (getIntent().getExtras() != null) {\r\n            play = getIntent().getStringExtra(\"play\");\r\n        }\r\n        handler = new Handler();\r\n        addToQueueModelList = new ArrayList<>();\r\n        addToQueueModelList2 = new ArrayList<>();\r\n\r\n        mainPlayModelList = new ArrayList<>();\r\n        shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json, type);\r\n            addToQueueModelList2 = gson.fromJson(json, type);\r\n        }\r\n        String json2 = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        Type type2 = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = gson.fromJson(json2, type2);\r\n        SharedPreferences Status = getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n/*        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        binding.rvQueueList.setFocusable(false);\r\n//        binding.nestedScroll.requestFocus();\r\n\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            callBack();\r\n        });\r\n\r\n        getPrepareShowData(position);\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        callAdapterMethod();\r\n        binding.llNowPlaying.setOnClickListener(view -> {\r\n            handler.removeCallbacks(UpdateSongTime);\r\n            if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n                isPause = false;\r\n            }\r\n            if (ComeFromQueue.equalsIgnoreCase(\"1\")) {\r\n                SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson2 = new Gson();\r\n                String json22 = gson2.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json22);\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                editor.commit();\r\n                finish();\r\n            }else{\r\n                SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson2 = new Gson();\r\n                String json22 = gson2.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json22);\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                editor.commit();\r\n                Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                startActivity(i);\r\n                finish();\r\n            }\r\n\r\n        });\r\n\r\n        binding.llPause.setOnClickListener(view -> {\r\n            handler.removeCallbacks(UpdateSongTime);\r\n            binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n            pauseMedia();\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        });\r\n\r\n        binding.llPlay.setOnClickListener(view -> {\r\n            if (!isMediaStart) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler.postDelayed(UpdateSongTime,500);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                callMedia();\r\n            }else if(isCompleteStop){\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler.postDelayed(UpdateSongTime,500);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                callMedia();\r\n            }else {\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                resumeMedia();\r\n                isPause = false;\r\n                handler.postDelayed(UpdateSongTime, 500);\r\n            }\r\n        });\r\n\r\n        binding.llnext.setOnClickListener(view -> {\r\n\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                stopMedia();\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n                isPause = false;\r\n                if (IsRepeat.equalsIgnoreCase(\"1\")||IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    // repeat is on play same song again\r\n                    if (position < listSize - 1) {\r\n                        position = position + 1;\r\n                    } else {\r\n                        position = 0;\r\n                    }\r\n                    getPrepareShowData(position);\r\n                } /*else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    getPrepareShowData(position);\r\n                } */else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                    // shuffle is on - play a random song\r\n                    if (queuePlay) {\r\n                        adapter.callRemoveList(position,\"1\");\r\n                        listSize = addToQueueModelList.size();\r\n                        if (listSize == 0) {\r\n                            stopMedia();\r\n                        } else if (listSize == 1) {\r\n                            stopMedia();\r\n                        } else {\r\n                            Random random = new Random();\r\n                            position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    } else {\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    if (queuePlay) {\r\n                        adapter.callRemoveList(position,\"1\");\r\n                        listSize = addToQueueModelList.size();\r\n                        if (position < listSize - 1) {\r\n                            getPrepareShowData(position);\r\n                        } else {\r\n                            if (listSize == 0) {\r\n                                savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                                stopMedia();\r\n                            } else {\r\n                                position = 0;\r\n                                getPrepareShowData(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (position < listSize - 1) {\r\n                            position = position + 1;\r\n                            getPrepareShowData(position);\r\n                        } else if (listSize != 1) {\r\n                            position = 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        });\r\n\r\n        binding.llprev.setOnClickListener(view -> {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                stopMedia();\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n                isPause = false;\r\n                if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    // repeat is on play same song again\r\n                    if (position > 0) {\r\n                        position = position - 1;\r\n                        getPrepareShowData(position);\r\n                    } else if (listSize != 1) {\r\n                        position = listSize - 1;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    getPrepareShowData(position);\r\n                } */else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                    // shuffle is on - play a random song\r\n                    if (queuePlay) {\r\n                        adapter.callRemoveList(position,\"1\");\r\n                        listSize = addToQueueModelList.size();\r\n                        if (listSize == 0) {\r\n                            stopMedia();\r\n                        } else if (listSize == 1) {\r\n                            stopMedia();\r\n                        } else {\r\n                            Random random = new Random();\r\n                            position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    } else {\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    if (queuePlay) {\r\n                        adapter.callRemoveList(position,\"1\");\r\n                        listSize = addToQueueModelList.size();\r\n                        if (position > 0) {\r\n                            getPrepareShowData(position - 1);\r\n                        } else {\r\n                            if (listSize == 0) {\r\n                                savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                                stopMedia();\r\n                            } else {\r\n                                position = 0;\r\n                                getPrepareShowData(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (position > 0) {\r\n                            position = position - 1;\r\n\r\n                            getPrepareShowData(position);\r\n                        } else if (listSize != 1) {\r\n                            position = listSize - 1;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callAdapterMethod() {\r\n        if (addToQueueModelList.size() != 0) {\r\n            if (queuePlay) {\r\n                if (addToQueueModelList.get(position).getName().equalsIgnoreCase(binding.tvName.getText().toString())) {\r\n                    mypos = position;\r\n                    StrigRemoveName = addToQueueModelList.get(position).getName();\r\n                    addToQueueModelList2.remove(position);\r\n                }\r\n            }\r\n            adapter = new QueueAdapter(addToQueueModelList2, ctx, this);\r\n            RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(ctx);\r\n            binding.rvQueueList.setLayoutManager(mLayoutManager);\r\n            binding.rvQueueList.setItemAnimator(new DefaultItemAnimator());\r\n            ItemTouchHelper.Callback callback =\r\n                    new ItemMoveCallback(adapter);\r\n            touchHelper = new ItemTouchHelper(callback);\r\n            touchHelper.attachToRecyclerView(binding.rvQueueList);\r\n            binding.rvQueueList.setAdapter(adapter);\r\n        }\r\n    }\r\n\r\n    public void GetMedia(String url, Context ctx, String PlaylistId) {\r\n\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(url);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (isPause) {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n//                    resumeMedia();\r\n                } else if (isCompleteStop) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                } else if ((isMediaStart || isPlaying()) && !isPause) {\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                } else {\r\n                    callMedia();\r\n                }\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void getPrepareShowData(int position) {\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n        } else if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n        }\r\n\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        }/* else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } */ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n        if (audioPlay) {\r\n            id = mainPlayModelList.get(position).getID();\r\n            url = mainPlayModelList.get(position).getAudioFile();\r\n            name = mainPlayModelList.get(position).getName();\r\n            setInIt(mainPlayModelList.get(position).getName(), mainPlayModelList.get(position).getAudiomastercat(),\r\n                    mainPlayModelList.get(position).getImageFile(), mainPlayModelList.get(position).getAudioDuration());\r\n            GetMedia(url, ctx, mainPlayModelList.get(position).getPlaylistID());\r\n        } else if (queuePlay) {\r\n            if (listSize == 1) {\r\n                position = 0;\r\n            }\r\n            id = addToQueueModelList.get(position).getID();\r\n            url = addToQueueModelList.get(position).getAudioFile();\r\n            name = addToQueueModelList.get(position).getName();\r\n            setInIt(addToQueueModelList.get(position).getName(), addToQueueModelList.get(position).getAudiomastercat(),\r\n                    addToQueueModelList.get(position).getImageFile(), addToQueueModelList.get(position).getAudioDuration());\r\n            GetMedia(url, ctx, addToQueueModelList.get(position).getPlaylistID());\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson2 = new Gson();\r\n            String json3 = gson2.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json3);\r\n            editor.commit();\r\n            startTime = getStartTime();\r\n        }\r\n        if (!url.equalsIgnoreCase(\"\")) {\r\n            if(!id.equalsIgnoreCase(addToRecentPlayId)) {\r\n                addToRecentPlay();\r\n                Log.e(\"Api call recent\",id);\r\n            }\r\n        }\r\n        addToRecentPlayId = id;\r\n        binding.simpleSeekbar.setClickable(true);\r\n        handler.postDelayed(UpdateSongTime, 500);\r\n\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n\r\n        if(/*currentDuration == totalDuration && currentDuration != 0 && !isStop */isMediaStart && !url.equalsIgnoreCase(\"\")){\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete trans\",\"trans\");\r\n            });\r\n        }\r\n    }\r\n\r\n    private void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if (null == mediaPlayer) {\r\n            mediaPlayer = new MediaPlayer();\r\n            Log.e(\"Playinggggg\", \"Playinggggg\");\r\n        }\r\n        try {\r\n            if (mediaPlayer == null)\r\n                mediaPlayer = new MediaPlayer();\r\n            if (mediaPlayer.isPlaying()) {\r\n                Log.e(\"Playinggggg\", \"stoppppp\");\r\n                mediaPlayer.stop();\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n            }\r\n            mediaPlayer = new MediaPlayer();\r\n            if (download.equalsIgnoreCase(\"1\")) {\r\n                mediaPlayer.setDataSource(fileDescriptor);\r\n            } else {\r\n                mediaPlayer.setDataSource(url);\r\n            }\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                mediaPlayer.setAudioAttributes(\r\n                        new AudioAttributes\r\n                                .Builder()\r\n                                .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                .build());\r\n            }\r\n            mediaPlayer.prepareAsync();\r\n            isPrepare = true;\r\n        } catch (IllegalStateException | IOException e) {\r\n            FileDescriptor fileDescriptor1 = null;\r\n            setMediaPlayer(\"0\", fileDescriptor1);\r\n            e.printStackTrace();\r\n        }\r\n        if (!mediaPlayer.isPlaying()) {\r\n            mediaPlayer.setOnPreparedListener(mp -> {\r\n                Log.e(\"Playinggggg\", \"Startinggg\");\r\n                mediaPlayer.start();\r\n                isMediaStart = true;\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n            });\r\n        }\r\n    }\r\n\r\n    private void callMedia() {\r\n        FileDescriptor fileDescriptor = null;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            binding.llProgressBar.setVisibility(View.VISIBLE);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n\r\n            try {\r\n                byte[] decrypt = null;\r\n                decrypt = downloadMedia.decrypt(name);\r\n                if (decrypt != null) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    fileDescriptor = FileUtils.getTempFileDescriptor(getApplicationContext(), decrypt);\r\n                    setMediaPlayer(\"1\", fileDescriptor);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        setMediaPlayer(\"0\", fileDescriptor);\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                setMediaPlayer(\"0\", fileDescriptor);\r\n            } else {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callComplete() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        isPause = false;\r\n        if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            if (position < (listSize - 1)) {\r\n                position = position + 1;\r\n            } else {\r\n                position = 0;\r\n            }\r\n            getPrepareShowData(position);\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            getPrepareShowData(position);\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            // shuffle is on - play a random song\r\n            if (queuePlay) {\r\n                adapter.callRemoveList(position,\"1\");\r\n                listSize = addToQueueModelList.size();\r\n                if (listSize == 0) {\r\n                    stopMedia();\r\n                } else if (listSize == 1) {\r\n                    position = 0;\r\n                    getPrepareShowData(position);\r\n                } else {\r\n                    int oldPosition = position;\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    if (oldPosition == position) {\r\n                        Random random1 = new Random();\r\n                        position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    }\r\n                    getPrepareShowData(position);\r\n                }\r\n            } else {\r\n                if (listSize == 1) {\r\n\r\n                } else {\r\n                    int oldPosition = position;\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    if (oldPosition == position) {\r\n                        Random random1 = new Random();\r\n                        position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    }\r\n                    getPrepareShowData(position);\r\n                }\r\n            }\r\n        } else {\r\n            if (queuePlay) {\r\n                adapter.callRemoveList(position,\"1\");\r\n                listSize = addToQueueModelList.size();\r\n                if (position < listSize - 1) {\r\n                    getPrepareShowData(position);\r\n                } else {\r\n                    if (listSize == 0) {\r\n                        stopMedia();\r\n                    } else {\r\n                        position = 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            } else {\r\n                if (position < (listSize - 1)) {\r\n                    int oldPosition = position;\r\n                    position = position + 1;\r\n                    if (oldPosition == position) {\r\n                        position++;\r\n                    }\r\n                    getPrepareShowData(position);\r\n                } else {\r\n                    if (listSize == 1) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        stopMedia();\r\n                    } else {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llnext.setEnabled(false);\r\n                binding.llnext.setClickable(false);\r\n                binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llprev.setEnabled(false);\r\n                binding.llprev.setClickable(false);\r\n                binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }*/ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n    }\r\n\r\n    private void setInIt(String name, String audiomastercat, String imageFile, String audioDuration) {\r\n        binding.tvTitle.setText(name);\r\n        binding.tvName.setText(name);\r\n        binding.tvCategory.setText(audiomastercat);\r\n        if (url.equalsIgnoreCase(\"\")) {\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.135f, 0);\r\n            binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n        } else {\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.14f, 0);\r\n            binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(imageFile).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n        }\r\n        if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n            isDisclaimer = 1;\r\n            callAllDisable(false);\r\n\r\n        } else {\r\n            isDisclaimer = 0;\r\n            callAllDisable(true);\r\n        }\r\n        binding.tvTime.setText(audioDuration);\r\n    }\r\n\r\n    private void addToRecentPlay() {\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        String UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void callBack() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        if (ComeFromQueue.equalsIgnoreCase(\"1\")) {\r\n            Intent i = new Intent(ctx, AddQueueActivity.class);\r\n            i.putExtra(\"ID\", AudioId);\r\n            i.putExtra(\"play\", play);\r\n            startActivity(i);\r\n            finish();\r\n        } else if (ComeFromQueue.equalsIgnoreCase(\"0\") ||\r\n                ComeFromQueue.equalsIgnoreCase(\"\")) {\r\n            if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n                isPause = false;\r\n            }\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            startActivity(i);\r\n            finish();\r\n        }\r\n    }\r\n    private void callAllDisable(boolean b) {\r\n        if (b) {\r\n            binding.llnext.setClickable(true);\r\n            binding.llnext.setEnabled(true);\r\n            binding.llnext.setAlpha(1f);\r\n            binding.llprev.setClickable(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llprev.setAlpha(1f);\r\n            binding.simpleSeekbar.setClickable(true);\r\n            binding.simpleSeekbar.setEnabled(true);\r\n//            binding.simpleSeekbar.set\r\n        } else {\r\n            binding.llnext.setClickable(false);\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setAlpha(0.6f);\r\n            binding.llprev.setClickable(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setAlpha(0.6f);\r\n            binding.simpleSeekbar.setClickable(false);\r\n            binding.simpleSeekbar.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n   /*     if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if ((isMediaStart || isPlaying()) && !isPause) {\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.VISIBLE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        } else {\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        }*/\r\n        if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n            isDisclaimer = 1;\r\n            callAllDisable(false);\r\n\r\n        } else {\r\n            isDisclaimer = 0;\r\n            callAllDisable(true);\r\n        }\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callBack();\r\n        super.onBackPressed();\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler.postDelayed(UpdateSongTime, 500);\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n     /*   handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        int totalDuration = getEndTime();\r\n\r\n        int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n        oTime = binding.simpleSeekbar.getProgress();\r\n        // forward or backward to certain seconds\r\n        SeekTo(currentPosition);\r\n\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void requestDrag(RecyclerView.ViewHolder viewHolder) {\r\n        touchHelper.startDrag(viewHolder);\r\n    }\r\n\r\n\r\n /*   @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n                resumeMedia();\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if (isMediaStart) {\r\n                    pauseMedia();\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }*/\r\n\r\n    public class QueueAdapter extends RecyclerView.Adapter<QueueAdapter.MyViewHolder> implements ItemMoveCallback.ItemTouchHelperContract {\r\n        ArrayList<AddToQueueModel> listModelList;\r\n        Context ctx;\r\n        StartDragListener startDragListener;\r\n\r\n        public QueueAdapter(ArrayList<AddToQueueModel> listModelList, Context ctx, StartDragListener startDragListener) {\r\n            this.listModelList = listModelList;\r\n            this.ctx = ctx;\r\n            this.startDragListener = startDragListener;\r\n\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            QueueListLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.queue_list_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position1) {\r\n            AddToQueueModel listModel = listModelList.get(position1);\r\n\r\n            holder.binding.tvTitle.setText(listModel.getName());\r\n            holder.binding.tvTime.setText(listModel.getAudioDuration());\r\n            binding.tvCategory.setText(listModel.getAudiomastercat());\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(listModel.getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            holder.binding.llRemove.setOnClickListener(view -> callRemoveList(position1,\"0\"));\r\n            holder.binding.llSort.setOnTouchListener((v, event) -> {\r\n                if (event.getAction() ==\r\n                        MotionEvent.ACTION_DOWN) {\r\n                    startDragListener.requestDrag(holder);\r\n                }\r\n                if (event.getAction() ==\r\n                        MotionEvent.ACTION_UP) {\r\n                    startDragListener.requestDrag(holder);\r\n                }\r\n                return false;\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    if (isPrepare || isMediaStart || isPause) {\r\n                        stopMedia();\r\n                    }\r\n                    isPause = false;\r\n                    isPrepare = false;\r\n                    isMediaStart = false;\r\n\r\n                    setInIt(listModel.getName(), listModel.getAudiomastercat(),\r\n                            listModel.getImageFile(), listModel.getAudioDuration());\r\n                    if (queuePlay) {\r\n                        for(int i = 0;i<addToQueueModelList.size();i++){\r\n                            if(addToQueueModelList.get(i).getName().equalsIgnoreCase(StrigRemoveName)){\r\n                                addToQueueModelList.remove(i);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    savePrefQueue(position1, true, false, addToQueueModelList, ctx);\r\n                    position = position1;\r\n                    getPrepareShowData(position);\r\n                    callRemoveList1(position1);\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            });\r\n        }\r\n\r\n        public void callRemoveList1(int position) {\r\n            listModelList.remove(position);\r\n            notifyItemRemoved(position);\r\n        }\r\n\r\n        public void callRemoveList(int position1,String s) {\r\n            for (int i = 0; i < addToQueueModelList.size(); i++) {\r\n                if (addToQueueModelList.get(i).getName().equalsIgnoreCase(binding.tvName.getText().toString())) {\r\n                    addToQueueModelList.remove(i);\r\n                    break;\r\n                }\r\n            }\r\n//            if(s.equalsIgnoreCase(\"1\")) {\r\n//                setInIt(listModelList.get(position).getName(), listModelList.get(position).getAudiomastercat(),\r\n//                        listModelList.get(position).getImageFile(), listModelList.get(position).getAudioDuration());\r\n//            }\r\n            if(position1 == listModelList.size()){\r\n                position1 = position1-1;\r\n            }\r\n            listModelList.remove(position1);\r\n       /*     for (int i = 0; i < addToQueueModelList.size(); i++) {\r\n                if (addToQueueModelList.get(i).getName().equalsIgnoreCase(Name))\r\n                    addToQueueModelList.remove(i);\r\n            }*/\r\n\r\n            notifyItemRemoved(position1);\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();\r\n            if(s.equalsIgnoreCase(\"0\")){\r\n            BWSApplication.showToast(\"Removed from the queue\", ctx);\r\n            }\r\n            addToQueueModelList2 = listModelList;\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        @Override\r\n        public void onRowMoved(int fromPosition, int toPosition) {\r\n            if (fromPosition < toPosition) {\r\n                for (int i = fromPosition; i < toPosition; i++) {\r\n                    Collections.swap(listModelList, i, i + 1);\r\n                }\r\n            } else {\r\n                for (int i = fromPosition; i > toPosition; i--) {\r\n                    Collections.swap(listModelList, i, i - 1);\r\n                }\r\n            }\r\n            notifyItemMoved(fromPosition, toPosition);\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = \"\";\r\n            if (queuePlay && !addSong) {\r\n                ArrayList<AddToQueueModel> listModelList1 = new ArrayList<>();\r\n                listModelList1.clear();\r\n                listModelList1 = new ArrayList<>();\r\n                listModelList1.addAll(listModelList);\r\n                listModelList1.add(addToQueueModelList.get(mypos));\r\n                addSong = true;\r\n                json = gson.toJson(listModelList1);\r\n            } else {\r\n                json = gson.toJson(listModelList);\r\n            }\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();\r\n            addToQueueModelList2 = listModelList;\r\n\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onRowClear(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            QueueListLayoutBinding binding;\r\n\r\n            public MyViewHolder(QueueListLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewQueueActivity.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewQueueActivity.java	(date 1604409033625)
@@ -87,7 +87,7 @@
 public class ViewQueueActivity extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener,/* AudioManager.OnAudioFocusChangeListener,*/ StartDragListener {
     ActivityViewQueueBinding binding;
     int position, listSize, startTime = 0;
-    String IsRepeat, IsShuffle, id, AudioId = "", ComeFromQueue = "", play = "", url, name,StrigRemoveName;
+    String IsRepeat, IsShuffle, id, AudioId = "", ComeFromQueue = "", play = "", url, name, StrigRemoveName;
     Context ctx;
     Activity activity;
     ArrayList<MainPlayModel> mainPlayModelList;
@@ -98,8 +98,8 @@
     QueueAdapter adapter;
     List<DownloadAudioDetails> downloadAudioDetailsList;
     ItemTouchHelper touchHelper;
-    int mypos = 0,myCount;
-    long totalDuration,currentDuration,myProgress=0,diff = 0;
+    int mypos = 0, myCount;
+    long totalDuration, currentDuration, myProgress = 0, diff = 0;
     private long mLastClickTime = 0;
     private Handler handler;
     boolean addSong = false;
@@ -154,14 +154,14 @@
             myProgress = currentDuration;
             currentDuration = getStartTime();
             diff = totalDuration - myProgress;
-            Log.e("myProgress old!!!",String.valueOf(myProgress));
-            if (myProgress == currentDuration && myProgress != 0 && !isPause  && diff < 500) {
-                Log.e("myProgress",String.valueOf(myProgress));
+            Log.e("myProgress old!!!", String.valueOf(myProgress));
+            if (myProgress == currentDuration && myProgress != 0 && !isPause && diff < 500) {
+                Log.e("myProgress", String.valueOf(myProgress));
                 myCount++;
-                Log.e("myCount",String.valueOf(myCount));
+                Log.e("myCount", String.valueOf(myCount));
 
-                if(myCount == 10){
-                    Log.e("myCount complete",String.valueOf(myCount));
+                if (myCount == 10) {
+                    Log.e("myCount complete", String.valueOf(myCount));
                     callComplete();
                     myCount = 0;
                 }
@@ -172,7 +172,7 @@
                 binding.llProgressBar.setVisibility(View.GONE);
                 binding.llPause.setVisibility(View.GONE);
                 binding.llPlay.setVisibility(View.VISIBLE);
-            }else if (currentDuration == 0 && isprogressbar) {
+            } else if (currentDuration == 0 && isprogressbar) {
                 binding.progressBar.setVisibility(View.VISIBLE);
                 binding.llProgressBar.setVisibility(View.VISIBLE);
                 binding.llPause.setVisibility(View.GONE);
@@ -278,7 +278,7 @@
                 editor.putInt(CONSTANTS.PREF_KEY_position, position);
                 editor.commit();
                 finish();
-            }else{
+            } else {
                 SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
                 SharedPreferences.Editor editor = shared.edit();
                 Gson gson2 = new Gson();
@@ -309,22 +309,22 @@
             if (!isMediaStart) {
                 isCompleteStop = false;
                 isprogressbar = true;
-                handler.postDelayed(UpdateSongTime,500);
+                handler.postDelayed(UpdateSongTime, 500);
                 binding.llPlay.setVisibility(View.GONE);
                 binding.llPause.setVisibility(View.GONE);
                 binding.llProgressBar.setVisibility(View.VISIBLE);
                 binding.progressBar.setVisibility(View.VISIBLE);
                 callMedia();
-            }else if(isCompleteStop){
+            } else if (isCompleteStop) {
                 isCompleteStop = false;
                 isprogressbar = true;
-                handler.postDelayed(UpdateSongTime,500);
+                handler.postDelayed(UpdateSongTime, 500);
                 binding.llPlay.setVisibility(View.GONE);
                 binding.llPause.setVisibility(View.GONE);
                 binding.llProgressBar.setVisibility(View.VISIBLE);
                 binding.progressBar.setVisibility(View.VISIBLE);
                 callMedia();
-            }else {
+            } else {
                 binding.llPlay.setVisibility(View.GONE);
                 binding.llPause.setVisibility(View.VISIBLE);
                 binding.llProgressBar.setVisibility(View.GONE);
@@ -342,7 +342,7 @@
                 isMediaStart = false;
                 isPrepare = false;
                 isPause = false;
-                if (IsRepeat.equalsIgnoreCase("1")||IsRepeat.equalsIgnoreCase("0")) {
+                if (IsRepeat.equalsIgnoreCase("1") || IsRepeat.equalsIgnoreCase("0")) {
                     // repeat is on play same song again
                     if (position < listSize - 1) {
                         position = position + 1;
@@ -352,10 +352,10 @@
                     getPrepareShowData(position);
                 } /*else if (IsRepeat.equalsIgnoreCase("0")) {
                     getPrepareShowData(position);
-                } */else if (IsShuffle.equalsIgnoreCase("1")) {
+                } */ else if (IsShuffle.equalsIgnoreCase("1")) {
                     // shuffle is on - play a random song
                     if (queuePlay) {
-                        adapter.callRemoveList(position,"1");
+                        adapter.callRemoveList(position, "1");
                         listSize = addToQueueModelList.size();
                         if (listSize == 0) {
                             stopMedia();
@@ -373,7 +373,7 @@
                     }
                 } else {
                     if (queuePlay) {
-                        adapter.callRemoveList(position,"1");
+                        adapter.callRemoveList(position, "1");
                         listSize = addToQueueModelList.size();
                         if (position < listSize - 1) {
                             getPrepareShowData(position);
@@ -418,10 +418,10 @@
                     }
                 }/* else if (IsRepeat.equalsIgnoreCase("0")) {
                     getPrepareShowData(position);
-                } */else if (IsShuffle.equalsIgnoreCase("1")) {
+                } */ else if (IsShuffle.equalsIgnoreCase("1")) {
                     // shuffle is on - play a random song
                     if (queuePlay) {
-                        adapter.callRemoveList(position,"1");
+                        adapter.callRemoveList(position, "1");
                         listSize = addToQueueModelList.size();
                         if (listSize == 0) {
                             stopMedia();
@@ -439,7 +439,7 @@
                     }
                 } else {
                     if (queuePlay) {
-                        adapter.callRemoveList(position,"1");
+                        adapter.callRemoveList(position, "1");
                         listSize = addToQueueModelList.size();
                         if (position > 0) {
                             getPrepareShowData(position - 1);
@@ -597,9 +597,9 @@
             startTime = getStartTime();
         }
         if (!url.equalsIgnoreCase("")) {
-            if(!id.equalsIgnoreCase(addToRecentPlayId)) {
+            if (!id.equalsIgnoreCase(addToRecentPlayId)) {
                 addToRecentPlay();
-                Log.e("Api call recent",id);
+                Log.e("Api call recent", id);
             }
         }
         addToRecentPlayId = id;
@@ -612,10 +612,10 @@
         editor.commit();
         BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);
 
-        if(/*currentDuration == totalDuration && currentDuration != 0 && !isStop */isMediaStart && !url.equalsIgnoreCase("")){
+        if (/*currentDuration == totalDuration && currentDuration != 0 && !isStop */isMediaStart && !url.equalsIgnoreCase("")) {
             mediaPlayer.setOnCompletionListener(mediaPlayer -> {
                 callComplete();
-                Log.e("calll complete trans","trans");
+                Log.e("calll complete trans", "trans");
             });
         }
     }
@@ -734,7 +734,7 @@
         } else if (IsShuffle.equalsIgnoreCase("1")) {
             // shuffle is on - play a random song
             if (queuePlay) {
-                adapter.callRemoveList(position,"1");
+                adapter.callRemoveList(position, "1");
                 listSize = addToQueueModelList.size();
                 if (listSize == 0) {
                     stopMedia();
@@ -767,7 +767,7 @@
             }
         } else {
             if (queuePlay) {
-                adapter.callRemoveList(position,"1");
+                adapter.callRemoveList(position, "1");
                 listSize = addToQueueModelList.size();
                 if (position < listSize - 1) {
                     getPrepareShowData(position);
@@ -916,6 +916,7 @@
             finish();
         }
     }
+
     private void callAllDisable(boolean b) {
         if (b) {
             binding.llnext.setClickable(true);
@@ -1074,7 +1075,7 @@
             Glide.with(ctx).load(listModel.getImageFile()).thumbnail(0.05f)
                     .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);
 
-            holder.binding.llRemove.setOnClickListener(view -> callRemoveList(position1,"0"));
+            holder.binding.llRemove.setOnClickListener(view -> callRemoveList(position1, "0"));
             holder.binding.llSort.setOnTouchListener((v, event) -> {
                 if (event.getAction() ==
                         MotionEvent.ACTION_DOWN) {
@@ -1098,8 +1099,8 @@
                     setInIt(listModel.getName(), listModel.getAudiomastercat(),
                             listModel.getImageFile(), listModel.getAudioDuration());
                     if (queuePlay) {
-                        for(int i = 0;i<addToQueueModelList.size();i++){
-                            if(addToQueueModelList.get(i).getName().equalsIgnoreCase(StrigRemoveName)){
+                        for (int i = 0; i < addToQueueModelList.size(); i++) {
+                            if (addToQueueModelList.get(i).getName().equalsIgnoreCase(StrigRemoveName)) {
                                 addToQueueModelList.remove(i);
                                 break;
                             }
@@ -1120,7 +1121,7 @@
             notifyItemRemoved(position);
         }
 
-        public void callRemoveList(int position1,String s) {
+        public void callRemoveList(int position1, String s) {
             for (int i = 0; i < addToQueueModelList.size(); i++) {
                 if (addToQueueModelList.get(i).getName().equalsIgnoreCase(binding.tvName.getText().toString())) {
                     addToQueueModelList.remove(i);
@@ -1131,8 +1132,8 @@
 //                setInIt(listModelList.get(position).getName(), listModelList.get(position).getAudiomastercat(),
 //                        listModelList.get(position).getImageFile(), listModelList.get(position).getAudioDuration());
 //            }
-            if(position1 == listModelList.size()){
-                position1 = position1-1;
+            if (position1 == listModelList.size()) {
+                position1 = position1 - 1;
             }
             listModelList.remove(position1);
        /*     for (int i = 0; i < addToQueueModelList.size(); i++) {
@@ -1147,8 +1148,8 @@
             String json = gson.toJson(addToQueueModelList);
             editor.putString(CONSTANTS.PREF_KEY_queueList, json);
             editor.commit();
-            if(s.equalsIgnoreCase("0")){
-            BWSApplication.showToast("Removed from the queue", ctx);
+            if (s.equalsIgnoreCase("0")) {
+                BWSApplication.showToast("Removed from the queue", ctx);
             }
             addToQueueModelList2 = listModelList;
         }
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.media.AudioAttributes;\r\nimport android.media.AudioManager;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.SystemClock;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityPlayWellnessBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.downloader.PRDownloader;\r\nimport com.downloader.Status;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity.comeFromAddToQueue;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.addToRecentPlayId;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.ToBackward;\r\nimport static com.brainwellnessspa.Utility.MusicService.ToForward;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isprogressbar;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class PlayWellnessActivity extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener/*, AudioManager.OnAudioFocusChangeListener, OnProgressListener*/ {\r\n    ActivityPlayWellnessBinding binding;\r\n    String IsRepeat = \"\", IsShuffle = \"\", UserID, PlaylistId = \"\", AudioFlag, id, name, url;\r\n    int startTime = 0, endTime = 0, position, listSize, myCount, progress, downloadPercentage;\r\n    Context ctx;\r\n    Activity activity;\r\n    Boolean queuePlay, audioPlay;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<AddToQueueModel> addToQueueModelList;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList1;\r\n    long myProgress = 0,diff = 0;\r\n    private long mLastClickTime = 0, totalDuration, currentDuration = 0;\r\n    private Handler handler;\r\n    //    private Handler handler1;\r\n    //        private AudioManager mAudioManager;\r\n    private Runnable UpdateSongTime = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            Time t = Time.valueOf(\"00:00:00\");\r\n            String endtimetext = \"\";\r\n            if (queuePlay) {\r\n                if (listSize != 0) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (downloadAudioDetailsList.size() != 0) {\r\n                            endtimetext = downloadAudioDetailsList.get(0).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                } else {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    stopMedia();\r\n                }\r\n            } else if (audioPlay) {\r\n                if (listSize != 0) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (downloadAudioDetailsList.size() != 0) {\r\n                            endtimetext = downloadAudioDetailsList.get(0).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else\r\n                    totalDuration = t.getTime();\r\n            } else {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else\r\n                    totalDuration = t.getTime();\r\n            }\r\n            myProgress = currentDuration;\r\n            currentDuration = getStartTime();\r\n            diff = totalDuration - myProgress;\r\n//            Log.e(\"myProgress old!!!\", String.valueOf(myProgress));\r\n            if (myProgress == currentDuration && myProgress != 0 && !isPause && url.equalsIgnoreCase(\"\")) {\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                myCount++;\r\n                Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                if (myCount == 5) {\r\n                    Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                    callComplete();\r\n                    myCount = 0;\r\n                }\r\n            } else if (myProgress == currentDuration && myProgress != 0 && !isPause && diff < 500) {\r\n//                Log.e(\"myProgress\", String.valueOf(myProgress));\r\n                myCount++;\r\n                Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                if (myCount == 10) {\r\n                    Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                    callComplete();\r\n                    myCount = 0;\r\n                }\r\n            }\r\n            if (currentDuration == totalDuration && currentDuration != 0 && !isStop && !url.equalsIgnoreCase(\"\")) {\r\n                callComplete();\r\n            }\r\n            if (currentDuration == totalDuration && currentDuration != 0 && !isStop &&isMediaStart && url.equalsIgnoreCase(\"\")) {\r\n                mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                    callComplete();\r\n                    Log.e(\"calll complete real\",\"real\");\r\n                });\r\n            }\r\n            progress = getProgressPercentage(currentDuration, totalDuration);\r\n            if (currentDuration == 0 && isCompleteStop) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n            }else if (currentDuration == 0 && isprogressbar) {\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n            }else if (currentDuration >= 1 && !isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                isprogressbar = false;\r\n            } else if (currentDuration >= 1 && isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                isprogressbar = false;\r\n            }\r\n            //Log.d(\"Progress\", \"\"+progress);\r\n            startTime = getStartTime();\r\n            if (currentDuration == totalDuration && currentDuration != 0 && !isStop) {\r\n                binding.tvStartTime.setText(endtimetext);\r\n            } else if (isPause) {\r\n                binding.simpleSeekbar.setProgress(oTime);\r\n                int timeeee = progressToTimer(oTime, (int) (totalDuration));\r\n                binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                        TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n            } else {\r\n                binding.simpleSeekbar.setProgress(progress);\r\n                binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(startTime),\r\n                        TimeUnit.MILLISECONDS.toSeconds(startTime) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(startTime))));\r\n            }\r\n            binding.simpleSeekbar.setMax(100);\r\n\r\n            // Running this thread after 100 milliseconds\r\n            handler.postDelayed(this, 100);\r\n        }\r\n    };\r\n/*    private Runnable UpdateSongTime1 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n                if (downloadProgress <= 100) {\r\n                    binding.pbProgress.setProgress(downloadProgress);\r\n                    binding.pbProgress.setVisibility(View.VISIBLE);\r\n                    binding.ivDownloads.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.pbProgress.setVisibility(View.GONE);\r\n                    binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                    handler1.removeCallbacks(UpdateSongTime1);\r\n                }\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }\r\n            handler1.postDelayed(this, 500);\r\n        }\r\n    };*/\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n//        overridePendingTransition(R.anim.enter, R.anim.exit);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_play_wellness);\r\n        handler = new Handler();\r\n//        handler1 = new Handler();\r\n        ctx = PlayWellnessActivity.this;\r\n        activity = PlayWellnessActivity.this;\r\n        addToQueueModelList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        downloadAudioDetailsList1 = new ArrayList<>();\r\n        mainPlayModelList = new ArrayList<>();\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences Status = getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = gson.fromJson(json, type);\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                1, 1, 0.92f, 0);\r\n        binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n/*        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.llMore.setAlpha(0.6f);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.llMore.setAlpha(0.6f);\r\n            } else {\r\n                binding.llMore.setClickable(true);\r\n                binding.llMore.setEnabled(true);\r\n                binding.llMore.setAlpha(1f);\r\n            }\r\n        } else {\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.llMore.setAlpha(0.6f);\r\n        }\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.llViewQueue.setAlpha(0.6f);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.llViewQueue.setAlpha(0.6f);\r\n            } else {\r\n                binding.llViewQueue.setClickable(true);\r\n                binding.llViewQueue.setEnabled(true);\r\n                binding.llViewQueue.setAlpha(1f);\r\n            }\r\n        } else {\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.llViewQueue.setAlpha(0.6f);\r\n        }\r\n\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        getPrepareShowData(position);\r\n        /*if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }*/\r\n        callRepeatShuffle();\r\n        if(isMediaStart /*&& !audioFile.equalsIgnoreCase(\"\")*/){\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete real\",\"real\");\r\n            });\r\n        }\r\n        binding.llBack.setOnClickListener(view -> {\r\n            callBack();\r\n        });\r\n\r\n        binding.llLike.setOnClickListener(view -> {\r\n            callLike();\r\n        });\r\n\r\n        binding.llRepeat.setOnClickListener(view -> callRepeat());\r\n\r\n        binding.llShuffle.setOnClickListener(view -> callShuffle());\r\n\r\n        binding.llDownload.setOnClickListener(view -> {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                callDownload();\r\n            }else{\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        });\r\n\r\n        binding.llMore.setOnClickListener(view -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            Intent i = new Intent(ctx, AddQueueActivity.class);\r\n            if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                i.putExtra(\"play\", \"TopCategories\");\r\n            } else\r\n                i.putExtra(\"play\", \"play\");\r\n            i.putExtra(\"ID\", id);\r\n            i.putExtra(\"position\", position);\r\n            i.putExtra(\"PlaylistAudioId\", \"\");\r\n            startActivity(i);\r\n//            finish();\r\n        });\r\n\r\n        binding.llViewQueue.setOnClickListener(view -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n//            pauseMedia();\r\n            if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n                isPause = false;\r\n            }\r\n            SharedPreferences ViewQueue = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = ViewQueue.edit();\r\n            Gson gsonx = new Gson();\r\n            String jsonx = gsonx.toJson(addToQueueModelList);\r\n            if (queuePlay) {\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, jsonx);\r\n            }\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, ViewQueueActivity.class);\r\n            i.putExtra(\"ComeFromQueue\", \"0\");\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.llPlay.setOnClickListener(v -> {\r\n            if (!isMediaStart) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler.postDelayed(UpdateSongTime,500);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                callMedia();\r\n            }else if(isCompleteStop){\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler.postDelayed(UpdateSongTime,500);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                callMedia();\r\n            } else {\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                resumeMedia();\r\n                isPause = false;\r\n            }\r\n            handler.postDelayed(UpdateSongTime, 100);\r\n        });\r\n\r\n        binding.llPause.setOnClickListener(view -> {\r\n            handler.removeCallbacks(UpdateSongTime);\r\n            binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n            pauseMedia();\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        });\r\n\r\n        binding.llForwardSec.setOnClickListener(v -> {\r\n            ToForward(ctx);\r\n            setProgressBar();\r\n            if (!binding.llPlay.isEnabled()) {\r\n                binding.llPlay.setEnabled(true);\r\n            }\r\n        });\r\n\r\n        binding.llBackWordSec.setOnClickListener(v -> {\r\n            ToBackward(ctx);\r\n            setProgressBar();\r\n            if (!binding.llPlay.isEnabled()) {\r\n                binding.llPlay.setEnabled(true);\r\n            }\r\n        });\r\n\r\n        binding.llnext.setOnClickListener(view -> {\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isPause = false;\r\n            isCompleteStop = false;\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n            if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                // repeat is on play same song again\r\n                if (position < listSize - 1) {\r\n                    position = position + 1;\r\n                } else {\r\n                    position = 0;\r\n                }\r\n                getPrepareShowData(position);\r\n            }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (listSize == 0) {\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else if (listSize == 1) {\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            Random random = new Random();\r\n                            position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (position < listSize - 1) {\r\n                            getPrepareShowData(position);\r\n                        } else {\r\n                            if (listSize == 0) {\r\n                                savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                                stopMedia();\r\n                            } else {\r\n                                position = 0;\r\n                                getPrepareShowData(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    if (position < listSize - 1) {\r\n                        position = position + 1;\r\n                        getPrepareShowData(position);\r\n                    } else if (listSize != 1) {\r\n                        position = 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        binding.llprev.setOnClickListener(view -> {\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isPause = false;\r\n            isCompleteStop = false;\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n            if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                // repeat is on play same song again\r\n                if (position > 0) {\r\n                    position = position - 1;\r\n                    getPrepareShowData(position);\r\n                } else if (listSize != 1) {\r\n                    position = listSize - 1;\r\n                    getPrepareShowData(position);\r\n                }\r\n            }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (listSize == 0) {\r\n                            stopMedia();\r\n                        } else if (listSize == 1) {\r\n                            stopMedia();\r\n                        } else {\r\n                            Random random = new Random();\r\n                            position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (position > 0) {\r\n                            getPrepareShowData(position - 1);\r\n                        } else {\r\n                            if (listSize == 0) {\r\n                                savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                                binding.llPlay.setVisibility(View.VISIBLE);\r\n                                binding.llPause.setVisibility(View.GONE);\r\n                                stopMedia();\r\n                            } else {\r\n                                position = 0;\r\n                                getPrepareShowData(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    if (position > 0) {\r\n                        position = position - 1;\r\n\r\n                        getPrepareShowData(position);\r\n                    } else if (listSize != 1) {\r\n                        position = listSize - 1;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callRepeatShuffle() {\r\n        if (url.equalsIgnoreCase(\"\")){\r\n            binding.llShuffle.setClickable(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setClickable(false);\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }else {\r\n            if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n                if (listSize == 1) {\r\n                    binding.llShuffle.setClickable(false);\r\n                    binding.llShuffle.setEnabled(false);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    binding.llShuffle.setClickable(true);\r\n                    binding.llShuffle.setEnabled(true);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                if (listSize == 1) {\r\n                    binding.llShuffle.setClickable(false);\r\n                    binding.llShuffle.setEnabled(false);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    binding.llShuffle.setClickable(true);\r\n                    binding.llShuffle.setEnabled(true);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            }\r\n            if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n                if (queuePlay) {\r\n                    binding.llRepeat.setEnabled(false);\r\n                    binding.llRepeat.setClickable(false);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    binding.llRepeat.setClickable(true);\r\n                    binding.llRepeat.setEnabled(true);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                if (queuePlay) {\r\n                    binding.llRepeat.setEnabled(false);\r\n                    binding.llRepeat.setClickable(false);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    IsRepeat = \"0\";\r\n                    binding.llRepeat.setClickable(true);\r\n                    binding.llRepeat.setEnabled(true);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                if (queuePlay) {\r\n                    binding.llRepeat.setEnabled(false);\r\n                    binding.llRepeat.setClickable(false);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    if (listSize == 1) {\r\n                        binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                    } else {\r\n                        binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                    }\r\n                    binding.llRepeat.setClickable(true);\r\n                    binding.llRepeat.setEnabled(true);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void setProgressBar() {\r\n        Time t = Time.valueOf(\"00:00:00\");\r\n        String endtimetext = \"\";\r\n        if (queuePlay) {\r\n            if (listSize != 0) {\r\n                endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n            } else {\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                stopMedia();\r\n            }\r\n        } else if (audioPlay) {\r\n            endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n        }\r\n        totalDuration = t.getTime();\r\n        currentDuration = getStartTime();\r\n\r\n        int progress = getProgressPercentage(currentDuration, totalDuration);\r\n        //Log.d(\"Progress\", \"\"+progress);\r\n        startTime = getStartTime();\r\n        if (currentDuration == totalDuration) {\r\n            binding.tvStartTime.setText(endtimetext);\r\n        } else if (isPause) {\r\n            binding.simpleSeekbar.setProgress(progress);\r\n            int timeeee = progressToTimer(progress, (int) (totalDuration));\r\n            binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                    TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        } else {\r\n            binding.simpleSeekbar.setProgress(progress);\r\n            binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(startTime),\r\n                    TimeUnit.MILLISECONDS.toSeconds(startTime) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(startTime))));\r\n        }\r\n    }\r\n\r\n    private void callDownload() {\r\n        if (!url.equalsIgnoreCase(\"\")) {\r\n            disableDownload();\r\n            byte[] EncodeBytes = new byte[1024];\r\n            List<String> url1 = new ArrayList<>();\r\n            List<String> name1 = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url1.addAll(audioFile1);\r\n                    name1.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            url1.add(url);\r\n            name1.add(name);\r\n            downloadPlaylistId.add(\"\");\r\n            if (url1.size() != 0) {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url1);\r\n                String nameJson = gson.toJson(name1);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n            }\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n            downloadMedia.encrypt1(url1, name1, downloadPlaylistId);\r\n\r\n          /*  if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n                handler1.postDelayed(UpdateSongTime1, 500);\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }*/\r\n            binding.pbProgress.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setVisibility(View.GONE);\r\n            SaveMedia(EncodeBytes, FileUtils.getFilePath(getApplicationContext(), name));\r\n   /*     if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<DownloadPlaylistModel> listCall = APIClient.getClient().getDownloadlistPlaylist(UserID, id, PlaylistId);\r\n            listCall.enqueue(new Callback<DownloadPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<DownloadPlaylistModel> call, Response<DownloadPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        DownloadPlaylistModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")\r\n                                || model.getResponseData().getFlag().equalsIgnoreCase(\"\")) {\r\n                            binding.llDownloads.setClickable(true);\r\n                            binding.llDownloads.setEnabled(true);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                            binding.llDownloads.setClickable(false);\r\n                            binding.llDownloads.setEnabled(false);\r\n                        }\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<DownloadPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }*/\r\n        }\r\n    }\r\n\r\n    private void getMediaByPer() {\r\n        class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPercentage = DatabaseClient.getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getDownloadProgress(url, \"\");\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n\r\n                if (downloadAudioDetailsList1.size() != 0) {\r\n                    if (downloadPercentage <= 100) {\r\n                        if (downloadPercentage == 100) {\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        } else {\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            binding.pbProgress.setIndeterminate(false);\r\n                            binding.pbProgress.setProgress(downloadPercentage);\r\n                            getMediaByPer();\r\n//                             handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        getMediaByPer st = new getMediaByPer();\r\n        st.execute();\r\n    }\r\n\r\n    private void SaveMedia(byte[] EncodeBytes, String dirPath) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                if (queuePlay) {\r\n                    downloadAudioDetails.setID(addToQueueModelList.get(position).getID());\r\n                    downloadAudioDetails.setName(addToQueueModelList.get(position).getName());\r\n                    downloadAudioDetails.setAudioFile(addToQueueModelList.get(position).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(addToQueueModelList.get(position).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(addToQueueModelList.get(position).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(addToQueueModelList.get(position).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(addToQueueModelList.get(position).getImageFile());\r\n                    downloadAudioDetails.setLike(addToQueueModelList.get(position).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(addToQueueModelList.get(position).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                } else if (audioPlay) {\r\n                    downloadAudioDetails.setID(mainPlayModelList.get(position).getID());\r\n                    downloadAudioDetails.setName(mainPlayModelList.get(position).getName());\r\n                    downloadAudioDetails.setAudioFile(mainPlayModelList.get(position).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(mainPlayModelList.get(position).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(mainPlayModelList.get(position).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(mainPlayModelList.get(position).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(mainPlayModelList.get(position).getImageFile());\r\n                    downloadAudioDetails.setLike(mainPlayModelList.get(position).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(mainPlayModelList.get(position).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                }\r\n\r\n                DatabaseClient.getInstance(getApplicationContext())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                disableDownload();\r\n                GetMedia2();\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void disableDownload() {\r\n        binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        binding.llDownload.setClickable(false);\r\n        binding.llDownload.setEnabled(false);\r\n    }\r\n\r\n    private void callShuffle() {\r\n        if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                IsShuffle = \"1\";\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"1\");\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                editor.commit();\r\n                IsRepeat = \"\";\r\n                if (queuePlay) {\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n//                BWSApplication.showToast(\"Shuffle mode has been turned on\", ctx);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n//            BWSApplication.showToast(\"Shuffle mode has been turned off\", ctx);\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n    }\r\n\r\n    private void callRepeat() {\r\n\r\n        if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"0\");\r\n            if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            }\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            IsRepeat = \"0\";\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n//            BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"1\");\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            IsRepeat = \"1\";\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                IsRepeat = \"\";\r\n//                BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n//                BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            editor.commit();\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n        } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n            IsRepeat = \"\";\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            editor.commit();\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n//            BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n        }\r\n    }\r\n\r\n    private void callLike() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(id, UserID);\r\n            listCall.enqueue(new Callback<AudioLikeModel>() {\r\n                @Override\r\n                public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        AudioLikeModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                        }\r\n                        if (queuePlay) {\r\n                            addToQueueModelList.get(position).setLike(model.getResponseData().getFlag());\r\n                        } else\r\n                            mainPlayModelList.get(position).setLike(model.getResponseData().getFlag());\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(mainPlayModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                        String json1 = gson.toJson(addToQueueModelList);\r\n                        if (queuePlay) {\r\n                            editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n                        }\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                        editor.commit();\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AudioLikeModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void addToRecentPlay() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public void GetMedia() {\r\n\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(url);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (isPause) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n                    int timeeee = progressToTimer(oTime, (int) (totalDuration));\r\n                    binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                            TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n//                    resumeMedia();\r\n                } else if (isCompleteStop) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                } else if (isMediaStart && !isPause) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                    binding.progressBar.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    callMedia();\r\n                }\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n    public void GetMedia2() {\r\n\r\n        downloadAudioDetailsList1 = new ArrayList<>();\r\n\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList1 = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getaudioByPlaylist(url, \"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (!url.equalsIgnoreCase(\"\")) {\r\n                    if (downloadAudioDetailsList1.size() != 0) {\r\n                        if (downloadAudioDetailsList1.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                            binding.llDownload.setClickable(false);\r\n                            binding.llDownload.setEnabled(false);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                        } else/* if (!mainPlayModelList.get(position).getDownload().equalsIgnoreCase(\"\")) */ {\r\n                            binding.llDownload.setClickable(true);\r\n                            binding.llDownload.setEnabled(true);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                        }\r\n                    } else/* if (!mainPlayModelList.get(position).getDownload().equalsIgnoreCase(\"\")) */ {\r\n                        binding.llDownload.setClickable(true);\r\n                        binding.llDownload.setEnabled(true);\r\n                        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n                        binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                    }\r\n                }\r\n\r\n                getMediaByPer();\r\n\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void getPrepareShowData(int position) {\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        if (queuePlay) {\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setClickable(false);\r\n        }\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n        } else if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n        }\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.llShuffle.setClickable(false);\r\n            IsShuffle = \"\";\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }*/ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llShuffle.setEnabled(true);\r\n            binding.llnext.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.llShuffle.setClickable(true);\r\n            if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n            if (listSize == 1) {\r\n                position = 0;\r\n            }\r\n            if(listSize!=0) {\r\n                id = addToQueueModelList.get(position).getID();\r\n                name = addToQueueModelList.get(position).getName();\r\n                url = addToQueueModelList.get(position).getAudioFile();\r\n                binding.tvName.setText(addToQueueModelList.get(position).getName());\r\n                binding.tvDireName.setText(R.string.Directions);\r\n                binding.tvDireName.setText(R.string.Directions);\r\n                if (addToQueueModelList.get(position).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                    binding.llDirection.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.llDirection.setVisibility(View.VISIBLE);\r\n                    binding.tvDireDesc.setText(addToQueueModelList.get(position).getAudioDirection());\r\n                }\r\n                binding.tvTitle.setText(addToQueueModelList.get(position).getAudiomastercat());\r\n                binding.tvDesc.setText(addToQueueModelList.get(position).getAudioSubCategory());\r\n                if (addToQueueModelList.get(position).getPlaylistID() == null) {\r\n                    addToQueueModelList.get(position).setPlaylistID(\"\");\r\n                }\r\n                Glide.with(getApplicationContext()).load(addToQueueModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                } else if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                }\r\n                binding.tvSongTime.setText(addToQueueModelList.get(position).getAudioDuration());\r\n                GetMedia();\r\n                GetMedia2();\r\n            }\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            startTime = getStartTime();\r\n\r\n        } else if (audioPlay) {\r\n            try {\r\n                listSize = mainPlayModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if(listSize!=0) {\r\n                    id = mainPlayModelList.get(position).getID();\r\n                    name = mainPlayModelList.get(position).getName();\r\n                    url = mainPlayModelList.get(position).getAudioFile();\r\n                    if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n                        isDisclaimer = 1;\r\n                        callAllDisable(false);\r\n\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        callAllDisable(true);\r\n                    }\r\n                    if (mainPlayModelList.get(position).getPlaylistID() == null) {\r\n                        mainPlayModelList.get(position).setPlaylistID(\"\");\r\n                    }\r\n                    binding.tvName.setText(mainPlayModelList.get(position).getName());\r\n                    if (mainPlayModelList.get(position).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                        binding.llDirection.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llDirection.setVisibility(View.VISIBLE);\r\n                        binding.tvDireDesc.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                    }\r\n                    binding.tvTitle.setText(mainPlayModelList.get(position).getAudiomastercat());\r\n                    binding.tvDesc.setText(mainPlayModelList.get(position).getAudioSubCategory());\r\n                    if (url.equalsIgnoreCase(\"\")) {\r\n                        Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    } else {\r\n                        /*TODO */\r\n                        Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    }\r\n                    if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                        binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                    } else if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                        binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                    }\r\n                    binding.tvSongTime.setText(mainPlayModelList.get(position).getAudioDuration());\r\n                    GetMedia();\r\n                    GetMedia2();\r\n                }\r\n                startTime = getStartTime();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n/*        if (isMediaStart && url.equalsIgnoreCase(\"\")) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete real\",\"real\");\r\n            });\r\n        }*/\r\n     /*   if (isMediaStart && !url.equalsIgnoreCase(\"\")) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete trans\",\"trans\");\r\n            });\r\n        }*/\r\n        getMediaByPer();\r\n        if (!url.equalsIgnoreCase(\"\")) {\r\n            if(!id.equalsIgnoreCase(addToRecentPlayId)) {\r\n                addToRecentPlay();\r\n                Log.e(\"Api call recent\",id);\r\n            }\r\n        }\r\n        addToRecentPlayId = id;\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n    }\r\n\r\n    private void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if (download.equalsIgnoreCase(\"2\")) {\r\n            mediaPlayer = MediaPlayer.create(ctx, R.raw.brain_wellness_spa_declaimer);\r\n            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\r\n//            Uri uri = Uri.parse(\"android.resource://com.brainwellnessspa/\" + R.raw.brain_wellness_spa_declaimer);\r\n//            mediaPlayer.setDataSource(String.valueOf(uri));\r\n            mediaPlayer.start();\r\n            isPrepare = true;\r\n            isMediaStart = true;\r\n        } else {\r\n            if (null == mediaPlayer) {\r\n                mediaPlayer = new MediaPlayer();\r\n                Log.e(\"Playinggggg\", \"Playinggggg\");\r\n            }\r\n            try {\r\n                if (mediaPlayer == null)\r\n                    mediaPlayer = new MediaPlayer();\r\n                if (mediaPlayer.isPlaying()) {\r\n                    Log.e(\"Playinggggg\", \"stoppppp\");\r\n                    mediaPlayer.stop();\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                    isPause = false;\r\n                }\r\n                mediaPlayer = new MediaPlayer();\r\n                if (download.equalsIgnoreCase(\"1\")) {\r\n                    mediaPlayer.setDataSource(fileDescriptor);\r\n                } else {\r\n                    mediaPlayer.setDataSource(url);\r\n                }\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                    mediaPlayer.setAudioAttributes(\r\n                            new AudioAttributes\r\n                                    .Builder()\r\n                                    .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                    .build());\r\n                }\r\n                mediaPlayer.prepareAsync();\r\n                isPause = false;\r\n                isPrepare = true;\r\n            } catch (IllegalStateException | IOException e) {\r\n                FileDescriptor fileDescriptor1 = null;\r\n                setMediaPlayer(\"0\", fileDescriptor1);\r\n                e.printStackTrace();\r\n            }\r\n            if (!mediaPlayer.isPlaying()) {\r\n                mediaPlayer.setOnPreparedListener(mp -> {\r\n                    Log.e(\"Playinggggg\", \"Startinggg\");\r\n                    mediaPlayer.start();\r\n                    isMediaStart = true;\r\n                    isprogressbar = false;\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callMedia() {\r\n        FileDescriptor fileDescriptor = null;\r\n        if(url.equalsIgnoreCase(\"\")){\r\n            setMediaPlayer(\"2\", fileDescriptor);\r\n\r\n        }else {\r\n            if (downloadAudioDetailsList.size() != 0) {\r\n                isprogressbar = true;\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                isPause = false;\r\n                DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n                getDownloadMedia(downloadMedia);\r\n\r\n            } else {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    isprogressbar = true;\r\n                    binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                    binding.progressBar.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    setMediaPlayer(\"0\", fileDescriptor);\r\n                } else {\r\n                    isprogressbar = false;\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getDownloadMedia(DownloadMedia downloadMedia) {\r\n        class getDownloadMedia extends AsyncTask<Void, Void, Void> {\r\n            FileDescriptor fileDescriptor = null;\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                try {\r\n                    byte[] decrypt = null;\r\n                    decrypt = downloadMedia.decrypt(name);\r\n                    if (decrypt != null) {\r\n                        fileDescriptor = FileUtils.getTempFileDescriptor(getApplicationContext(), decrypt);\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (fileDescriptor != null) {\r\n                    setMediaPlayer(\"1\", fileDescriptor);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        setMediaPlayer(\"0\", fileDescriptor);\r\n                    } else {\r\n                        isprogressbar = false;\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getDownloadMedia st = new getDownloadMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callComplete() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        isPause = false;\r\n        if (audioPlay && (url.equalsIgnoreCase(\"\") || url.isEmpty())) {\r\n            isDisclaimer = 0;\r\n            removeArray();\r\n        } else {\r\n            if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                if (position < (listSize - 1)) {\r\n                    position = position + 1;\r\n                } else {\r\n                    position = 0;\r\n                }\r\n                getPrepareShowData(position);\r\n            } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    }catch (Exception e){}\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        binding.pbProgressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        binding.pbProgressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    if (listSize == 1) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    }catch (Exception e){}\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position < listSize - 1) {\r\n                        getPrepareShowData(position);\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            binding.llProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (position < (listSize - 1)) {\r\n                        int oldPosition = position;\r\n                        position = position + 1;\r\n                        if (oldPosition == position) {\r\n                            position++;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    } else {\r\n                        if (listSize == 1) {\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            binding.llProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            binding.llProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llnext.setEnabled(false);\r\n                binding.llnext.setClickable(false);\r\n                binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llprev.setEnabled(false);\r\n                binding.llprev.setClickable(false);\r\n                binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }*/ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llnext.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        callRepeatShuffle();\r\n    }\r\n\r\n    private void removeArray() {\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        MainPlayModel mainPlayModel;\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json1, type);\r\n\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }\r\n        getPrepareShowData(position);\r\n    }\r\n\r\n  /*  private void MakeArray2() {\r\n        Gson gson = new Gson();\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        mainPlayModelList = new ArrayList<>();\r\n        MainPlayModel mainPlayModel;\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }\r\n    }*/\r\n\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callBack();\r\n    }\r\n\r\n    private void callBack() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n//        handler1.removeCallbacks(UpdateSongTime1);\r\n        player = 1;\r\n        if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n            isPause = false;\r\n        }\r\n//        pauseMedia();\r\n        SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared2.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(addToQueueModelList);\r\n        if (queuePlay) {\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n        }\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        finish();\r\n//        overridePendingTransition(R.anim.enter, R.anim.exit);\r\n    }\r\n\r\n    private void addDeclaimer() {\r\n        MainPlayModel mainPlayModel = new MainPlayModel();\r\n        mainPlayModel.setID(\"0\");\r\n        mainPlayModel.setName(\"Disclaimer\");\r\n        mainPlayModel.setAudioFile(\"\");\r\n        mainPlayModel.setPlaylistID(\"\");\r\n        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n        mainPlayModel.setAudiomastercat(\"\");\r\n        mainPlayModel.setAudioSubCategory(\"\");\r\n        mainPlayModel.setImageFile(\"\");\r\n        mainPlayModel.setLike(\"\");\r\n        mainPlayModel.setDownload(\"\");\r\n        mainPlayModel.setAudioDuration(\"0:48\");\r\n        mainPlayModelList.add(mainPlayModel);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n//        releasePlayer();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = gson.fromJson(json, type);\r\n        callLLMoreViewQClicks();\r\n\r\n        /*if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }*/\r\n        GetMedia2();\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (queuePlay) {\r\n            position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            listSize = addToQueueModelList.size();\r\n            if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n            } else if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n            }\r\n        } else if (audioPlay) {\r\n            position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            listSize = mainPlayModelList.size();\r\n            if(listSize!=0) {\r\n                if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                } else if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                }\r\n                url = mainPlayModelList.get(position).getAudioFile();\r\n            }\r\n            if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n                isDisclaimer = 1;\r\n                callAllDisable(false);\r\n\r\n            } else {\r\n                isDisclaimer = 0;\r\n                callAllDisable(true);\r\n            }\r\n        }\r\n        if (comeFromAddToQueue) {\r\n            getPrepareShowData(position);\r\n            comeFromAddToQueue = false;\r\n        }\r\n        if (listSize == 1) {\r\n            position = 0;\r\n        }\r\n       /* if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if ((isMediaStart && isPlaying()) && !isPause) {\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.VISIBLE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        } else {\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        }*/\r\n        super.onResume();\r\n    }\r\n\r\n    private void callLLMoreViewQClicks() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llMore.setClickable(true);\r\n                binding.llMore.setEnabled(true);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llViewQueue.setClickable(true);\r\n                binding.llViewQueue.setEnabled(true);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n    }\r\n\r\n\r\n    private void callAllDisable(boolean b) {\r\n        if (b) {\r\n            binding.llnext.setClickable(true);\r\n            binding.llnext.setEnabled(true);\r\n            binding.llnext.setAlpha(1f);\r\n            binding.llprev.setClickable(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llprev.setAlpha(1f);\r\n            binding.llForwardSec.setClickable(true);\r\n            binding.llForwardSec.setEnabled(true);\r\n            binding.llForwardSec.setAlpha(1f);\r\n            binding.llBackWordSec.setClickable(true);\r\n            binding.llBackWordSec.setEnabled(true);\r\n            binding.llBackWordSec.setAlpha(1f);\r\n            binding.llMore.setClickable(true);\r\n            binding.llMore.setEnabled(true);\r\n            binding.llMore.setAlpha(1f);\r\n            binding.llViewQueue.setClickable(true);\r\n            binding.llViewQueue.setEnabled(true);\r\n            binding.llViewQueue.setAlpha(1f);\r\n            binding.llDownload.setClickable(true);\r\n            binding.llDownload.setEnabled(true);\r\n            binding.llDownload.setAlpha(1f);\r\n            binding.llRepeat.setClickable(true);\r\n            binding.llRepeat.setEnabled(true);\r\n            binding.llRepeat.setAlpha(1f);\r\n            binding.llShuffle.setClickable(true);\r\n            binding.llShuffle.setEnabled(true);\r\n            binding.llShuffle.setAlpha(1f);\r\n            binding.llLike.setClickable(true);\r\n            binding.llLike.setEnabled(true);\r\n            binding.llLike.setAlpha(1f);\r\n            binding.rlSeekbar.setClickable(true);\r\n            binding.rlSeekbar.setEnabled(true);\r\n            binding.simpleSeekbar.setClickable(true);\r\n            binding.simpleSeekbar.setEnabled(true);\r\n//            binding.simpleSeekbar.set\r\n        } else {\r\n            binding.llnext.setClickable(false);\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setAlpha(0.6f);\r\n            binding.llprev.setClickable(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setAlpha(0.6f);\r\n            binding.llForwardSec.setClickable(false);\r\n            binding.llForwardSec.setEnabled(false);\r\n            binding.llForwardSec.setAlpha(0.6f);\r\n            binding.llBackWordSec.setClickable(false);\r\n            binding.llBackWordSec.setEnabled(false);\r\n            binding.llBackWordSec.setAlpha(0.6f);\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.llMore.setAlpha(0.6f);\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.llViewQueue.setAlpha(0.6f);\r\n            binding.llDownload.setClickable(false);\r\n            binding.llDownload.setEnabled(false);\r\n            binding.llDownload.setAlpha(0.6f);\r\n            binding.llRepeat.setClickable(false);\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setAlpha(0.6f);\r\n            binding.llShuffle.setClickable(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.llShuffle.setAlpha(0.6f);\r\n            binding.llLike.setClickable(false);\r\n            binding.llLike.setEnabled(false);\r\n            binding.llLike.setAlpha(0.6f);\r\n            binding.rlSeekbar.setClickable(false);\r\n            binding.rlSeekbar.setEnabled(false);\r\n            binding.simpleSeekbar.setClickable(false);\r\n            binding.simpleSeekbar.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n     /*   handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void onPointerCaptureChanged(boolean hasCapture) {\r\n\r\n    }\r\n /*   @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n                resumeMedia();\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if (isMediaStart) {\r\n                    pauseMedia();\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }*/\r\n\r\n/*    @Override\r\n    public void onProgress(Progress progress) {\r\n        if(!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)){\r\n            handler.postDelayed(UpdateSongTime1, 10);\r\n        }else{\r\n            handler.removeCallbacks(UpdateSongTime1);\r\n        }\r\n    }*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java	(date 1604397265843)
@@ -41,6 +41,7 @@
 import com.brainwellnessspa.Utility.APIClient;
 import com.brainwellnessspa.Utility.CONSTANTS;
 import com.brainwellnessspa.Utility.MeasureRatio;
+import com.brainwellnessspa.Utility.PlaybackStatus;
 import com.brainwellnessspa.databinding.ActivityPlayWellnessBinding;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
@@ -101,6 +102,7 @@
     long myProgress = 0,diff = 0;
     private long mLastClickTime = 0, totalDuration, currentDuration = 0;
     private Handler handler;
+    PlaybackStatus playbackStatus;
     //    private Handler handler1;
     //        private AudioManager mAudioManager;
     private Runnable UpdateSongTime = new Runnable() {
@@ -306,6 +308,7 @@
         Type type = new TypeToken<ArrayList<MainPlayModel>>() {
         }.getType();
         mainPlayModelList = gson.fromJson(json, type);
+        BWSApplication.simple_Notification(playbackStatus, mainPlayModelList, PlayWellnessActivity.this, position);
         String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));
         if (!json1.equalsIgnoreCase(String.valueOf(gson))) {
             Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddPlaylistActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.CreatePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.PlaylistingModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityAddPlaylistBinding;\r\nimport com.brainwellnessspa.databinding.AddPlayListLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.comeAddPlaylist;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\n\r\npublic class AddPlaylistActivity extends AppCompatActivity {\r\n    public static boolean addToPlayList = false;\r\n    public static String MyPlaylistId = \"\";\r\n    ActivityAddPlaylistBinding binding;\r\n    String UserID, AudioId, FromPlaylistID, PlaylistName;\r\n    Context ctx;\r\n    Activity activity;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_add_playlist);\r\n        ctx = AddPlaylistActivity.this;\r\n        activity = AddPlaylistActivity.this;\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            AudioId = getIntent().getStringExtra(\"AudioId\");\r\n            FromPlaylistID = getIntent().getStringExtra(\"PlaylistID\");\r\n        }\r\n        if (getIntent().getExtras() != null) {\r\n            PlaylistName = getIntent().getStringExtra(\"PlaylistName\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            comefrom_search = 0;\r\n            finish();\r\n        });\r\n\r\n        RecyclerView.LayoutManager played = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists.setLayoutManager(played);\r\n        binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());\r\n        prepareData(ctx);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        comefrom_search = 0;\r\n        finish();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        prepareData(AddPlaylistActivity.this);\r\n    }\r\n\r\n    private void prepareData(Context ctx) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<PlaylistingModel> listCall = APIClient.getClient().getPlaylisting(UserID);\r\n            listCall.enqueue(new Callback<PlaylistingModel>() {\r\n                @Override\r\n                public void onResponse(Call<PlaylistingModel> call, Response<PlaylistingModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        PlaylistingModel model = response.body();\r\n                        AddPlaylistAdapter addPlaylistAdapter = new AddPlaylistAdapter(model.getResponseData(), ctx);\r\n                        binding.rvPlayLists.setAdapter(addPlaylistAdapter);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<PlaylistingModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void callAddPlaylistFromPlaylist(String PlaylistID, String name, Dialog dialog, String d) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<AddToPlaylist> listCall = APIClient.getClient().getAddSearchAudioFromPlaylist(UserID, AudioId, PlaylistID, FromPlaylistID);\r\n            listCall.enqueue(new Callback<AddToPlaylist>() {\r\n                @Override\r\n                public void onResponse(Call<AddToPlaylist> call, Response<AddToPlaylist> response) {\r\n                    try {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            AddToPlaylist listModels = response.body();\r\n                            if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                                if (audioPlay) {\r\n                                    if (AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                        Gson gsonx = new Gson();\r\n                                        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                                        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                                        }.getType();\r\n                                        ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();\r\n                                        mainPlayModelListold = gsonx.fromJson(json, type);\r\n                                        String id = mainPlayModelListold.get(pos).getID();\r\n                                        ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();\r\n                                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();\r\n\r\n                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                            MainPlayModel mainPlayModel = new MainPlayModel();\r\n                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                            mainPlayModelList.add(mainPlayModel);\r\n                                        }\r\n                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                            SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                            playlistSongs.add(mainPlayModel);\r\n                                        }\r\n\r\n                                        for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                            if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {\r\n                                                pos = i;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                        SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                        SharedPreferences.Editor editor = sharedd.edit();\r\n                                        Gson gson = new Gson();\r\n                                        String jsonx = gson.toJson(mainPlayModelList);\r\n                                        String json1 = gson.toJson(playlistSongs);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                        editor.commit();\r\n                                    }\r\n                                }\r\n                                if (comeAddPlaylist == 1) {\r\n                                    final Dialog dialog = new Dialog(ctx);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.go_to_playlist);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                                    final RelativeLayout rlCreate = dialog.findViewById(R.id.rlCreate);\r\n\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n\r\n                                    rlCreate.setOnClickListener(view2 -> {\r\n                                        addToPlayList = true;\r\n                                        MyPlaylistId = PlaylistID;\r\n                                        dialog.dismiss();\r\n                                        finish();\r\n                                    });\r\n\r\n                                    tvCancel.setOnClickListener(v -> {\r\n                                        dialog.dismiss();\r\n                                        finish();\r\n                                    });\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n                                } else {\r\n                                    if (d.equalsIgnoreCase(\"0\")) {\r\n                                        dialog.dismiss();\r\n                                    }\r\n//                                    finish();\r\n                                    final Dialog dialog = new Dialog(ctx);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.go_to_playlist);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                                    final RelativeLayout rlCreate = dialog.findViewById(R.id.rlCreate);\r\n\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n\r\n                                    rlCreate.setOnClickListener(view2 -> {\r\n                                        comefrom_search = 0;\r\n                                        addToPlayList = true;\r\n                                        MyPlaylistId = PlaylistID;\r\n                                        dialog.dismiss();\r\n                                        Intent intent = new Intent(ctx, DashboardActivity.class);\r\n                                        intent.putExtra(\"Goplaylist\", \"1\");\r\n                                        intent.putExtra(\"PlaylistID\", PlaylistID);\r\n                                        intent.putExtra(\"PlaylistName\", name);\r\n                                        intent.putExtra(\"PlaylistImage\", \"\");\r\n                                        startActivity(intent);\r\n                                        finish();\r\n                                    });\r\n\r\n                                    tvCancel.setOnClickListener(v -> {\r\n                                        dialog.dismiss();\r\n                                        finish();\r\n                                    });\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n                                }\r\n                            } else if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                            }\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AddToPlaylist> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private class AddPlaylistAdapter extends RecyclerView.Adapter<AddPlaylistAdapter.MyViewHolder> {\r\n        Context ctx;\r\n        private List<PlaylistingModel.ResponseData> listModel;\r\n\r\n        public AddPlaylistAdapter(List<PlaylistingModel.ResponseData> listModel, Context ctx) {\r\n            this.listModel = listModel;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            AddPlayListLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.add_play_list_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(listModel.get(position).getName());\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.16f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(listModel.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            binding.btnAddPlatLists.setOnClickListener(view -> {\r\n                final Dialog dialog = new Dialog(ctx);\r\n                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                dialog.setContentView(R.layout.create_palylist);\r\n                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                final EditText edtCreate = dialog.findViewById(R.id.edtCreate);\r\n                final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                final Button btnSendCode = dialog.findViewById(R.id.btnSendCode);\r\n\r\n                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                        dialog.dismiss();\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n\r\n                TextWatcher popupTextWatcher = new TextWatcher() {\r\n                    @Override\r\n                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                    }\r\n\r\n                    @Override\r\n                    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                        String number = edtCreate.getText().toString().trim();\r\n                        if (!number.isEmpty()) {\r\n                            btnSendCode.setEnabled(true);\r\n                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                            btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                        } else {\r\n                            btnSendCode.setEnabled(false);\r\n                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                            btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void afterTextChanged(Editable s) {\r\n                    }\r\n                };\r\n\r\n\r\n                edtCreate.addTextChangedListener(popupTextWatcher);\r\n                btnSendCode.setOnClickListener(view1 -> {\r\n                    if (edtCreate.getText().toString().equalsIgnoreCase(\"\")) {\r\n                        BWSApplication.showToast(\"Please provide the playlist's name\", ctx);\r\n                    } else {\r\n                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                            Call<CreatePlaylistModel> listCall = APIClient.getClient().getCreatePlaylist(UserID, edtCreate.getText().toString());\r\n                            listCall.enqueue(new Callback<CreatePlaylistModel>() {\r\n                                @Override\r\n                                public void onResponse(Call<CreatePlaylistModel> call, Response<CreatePlaylistModel> response) {\r\n                                    if (response.isSuccessful()) {\r\n                                        CreatePlaylistModel listsModel = response.body();\r\n                                        if (listsModel.getResponseData().getIscreated().equalsIgnoreCase(\"1\")) {\r\n                                            dialog.dismiss();\r\n                                            prepareData(ctx);\r\n                                            String PlaylistID = listsModel.getResponseData().getId();\r\n                                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                                if (isDisclaimer == 1) {\r\n                                                    BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                                                } else {\r\n                                                    callAddPlaylistFromPlaylist(PlaylistID, listsModel.getResponseData().getName(), dialog, \"0\");\r\n                                                }\r\n                                            } else {\r\n                                                callAddPlaylistFromPlaylist(PlaylistID, listsModel.getResponseData().getName(), dialog, \"0\");\r\n\r\n                                            }\r\n                                        } else {\r\n                                            BWSApplication.showToast(listsModel.getResponseMessage(), ctx);\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onFailure(Call<CreatePlaylistModel> call, Throwable t) {\r\n                                }\r\n                            });\r\n                        } else {\r\n                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                        }\r\n\r\n\r\n                    }\r\n                });\r\n                tvCancel.setOnClickListener(v -> dialog.dismiss());\r\n                dialog.show();\r\n                dialog.setCancelable(false);\r\n\r\n            });\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    String PlaylistID = listModel.get(position).getID();\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        } else {\r\n                            final Dialog dialogx = new Dialog(ctx);\r\n                            callAddPlaylistFromPlaylist(PlaylistID, listModel.get(position).getName(), dialogx, \"1\");\r\n                        }\r\n                    } else {\r\n                        final Dialog dialogx = new Dialog(ctx);\r\n                        callAddPlaylistFromPlaylist(PlaylistID, listModel.get(position).getName(), dialogx, \"1\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModel.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            AddPlayListLayoutBinding binding;\r\n\r\n            public MyViewHolder(AddPlayListLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddPlaylistActivity.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddPlaylistActivity.java	(date 1604409033685)
@@ -246,7 +246,6 @@
                                     if (d.equalsIgnoreCase("0")) {
                                         dialog.dismiss();
                                     }
-//                                    finish();
                                     final Dialog dialog = new Dialog(ctx);
                                     dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
                                     dialog.setContentView(R.layout.go_to_playlist);
@@ -287,7 +286,6 @@
                             } else if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {
                                 BWSApplication.showToast(listModels.getResponseMessage(), ctx);
                             }
-
                         }
                     } catch (Exception e) {
                         e.printStackTrace();
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewSuggestedActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.databinding.ActivityViewSuggestedBinding;\r\nimport com.brainwellnessspa.databinding.DownloadsLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.addToSearch;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.MyPlaylistIds;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.PlaylistIDMS;\r\n\r\npublic class ViewSuggestedActivity extends AppCompatActivity {\r\n    ActivityViewSuggestedBinding binding;\r\n    Activity activity;\r\n    Context ctx;\r\n    String UserID, AudioFlag, Name, PlaylistID;\r\n    ArrayList<SuggestedModel.ResponseData> AudiolistsModel;\r\n    ArrayList<SearchPlaylistModel.ResponseData> PlaylistModel;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_view_suggested);\r\n        ctx = ViewSuggestedActivity.this;\r\n        activity = ViewSuggestedActivity.this;\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        binding.llBack.setOnClickListener(view -> {\r\n            Intent i = new Intent(ctx, AddAudioActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        if (getIntent() != null) {\r\n            Name = getIntent().getStringExtra(\"Name\");\r\n        }\r\n        if (getIntent() != null) {\r\n            PlaylistID = getIntent().getStringExtra(CONSTANTS.PlaylistID);\r\n        }\r\n        if (getIntent() != null) {\r\n            AudiolistsModel = getIntent().getParcelableArrayListExtra(\"AudiolistModel\");\r\n        }\r\n        if (getIntent() != null) {\r\n            PlaylistModel = getIntent().getParcelableArrayListExtra(\"PlaylistModel\");\r\n        }\r\n        PrepareData();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        Intent i = new Intent(ctx, AddAudioActivity.class);\r\n        i.putExtra(\"PlaylistID\", PlaylistID);\r\n        startActivity(i);\r\n        finish();\r\n    }\r\n\r\n    public void PrepareData() {\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n            comefromDownload = \"1\";\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 210);\r\n            binding.llSpace.setLayoutParams(params);\r\n        } else {\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 20);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n        binding.tvTitle.setText(Name);\r\n        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvMainAudio.setLayoutManager(layoutManager);\r\n        binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n        if (Name.equalsIgnoreCase(\"Recommended  Audios\")) {\r\n            AudiosListAdpater suggestedAdpater = new AudiosListAdpater(AudiolistsModel);\r\n            binding.rvMainAudio.setAdapter(suggestedAdpater);\r\n        } else if (Name.equalsIgnoreCase(\"Recommended Playlist\")) {\r\n            SuggestionPlayListsAdpater adpater = new SuggestionPlayListsAdpater(PlaylistModel);\r\n            binding.rvMainAudio.setAdapter(adpater);\r\n        }\r\n    }\r\n\r\n    private void callAddAudioToPlaylist(String AudioID, String FromPlaylistId, String s1) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<AddToPlaylist> listCall = APIClient.getClient().getAddSearchAudioFromPlaylist(UserID, AudioID, PlaylistID, FromPlaylistId);\r\n            listCall.enqueue(new Callback<AddToPlaylist>() {\r\n                @Override\r\n                public void onResponse(Call<AddToPlaylist> call, Response<AddToPlaylist> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        AddToPlaylist listModels = response.body();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        if (audioPlay) {\r\n                            if (AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                Gson gsonx = new Gson();\r\n                                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                                }.getType();\r\n                                ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();\r\n                                mainPlayModelListold = gsonx.fromJson(json, type);\r\n                                String id = mainPlayModelListold.get(pos).getID();\r\n                                ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();\r\n                                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();\r\n\r\n                                for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                    MainPlayModel mainPlayModel = new MainPlayModel();\r\n                                    mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                    mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                    mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                    mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                    mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                    mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                    mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                    mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                    mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                    mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                    mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                    mainPlayModelList.add(mainPlayModel);\r\n                                }\r\n                                for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                    SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                    mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                    mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                    mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                    mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                    mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                    mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                    mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                    mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                    mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                    mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                    mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                    playlistSongs.add(mainPlayModel);\r\n                                }\r\n\r\n                                for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                    if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {\r\n                                        pos = i;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                SharedPreferences.Editor editor = sharedd.edit();\r\n                                Gson gson = new Gson();\r\n                                String jsonx = gson.toJson(mainPlayModelList);\r\n                                String json1 = gson.toJson(playlistSongs);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                editor.commit();\r\n                            }\r\n                        }\r\n                        BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                        if (s1.equalsIgnoreCase(\"1\")) {\r\n                            finish();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AddToPlaylist> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public class AudiosListAdpater extends RecyclerView.Adapter<AudiosListAdpater.MyViewHolder> {\r\n        private ArrayList<SuggestedModel.ResponseData> AudiolistsModel;\r\n\r\n        public AudiosListAdpater(ArrayList<SuggestedModel.ResponseData> AudiolistsModel) {\r\n            this.AudiolistsModel = AudiolistsModel;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binds.tvTitle.setText(AudiolistsModel.get(position).getName());\r\n            holder.binds.tvTime.setText(AudiolistsModel.get(position).getAudioDuration());\r\n            holder.binds.pbProgress.setVisibility(View.GONE);\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binds.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binds.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(AudiolistsModel.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binds.ivRestaurantImage);\r\n            holder.binds.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binds.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binds.ivLock.setVisibility(View.GONE);\r\n                } else if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binds.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binds.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                    || AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binds.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binds.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n                if (AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binds.ivLock.setVisibility(View.GONE);\r\n                        try {\r\n                            player = 1;\r\n                            if (isPrepare || isMediaStart || isPause) {\r\n                                MusicService.stopMedia();\r\n                            }\r\n                            isPause = false;\r\n                            isMediaStart = false;\r\n                            isPrepare = false;\r\n                            isCompleteStop = false;\r\n                            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                            SharedPreferences.Editor editor = shared.edit();\r\n                            Gson gson = new Gson();\r\n                            ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                            SuggestedModel.ResponseData mainPlayModel = new SuggestedModel.ResponseData();\r\n                            mainPlayModel.setID(\"0\");\r\n                            mainPlayModel.setName(\"Disclaimer\");\r\n                            mainPlayModel.setAudioFile(\"\");\r\n                            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                            mainPlayModel.setAudiomastercat(\"\");\r\n                            mainPlayModel.setAudioSubCategory(\"\");\r\n                            mainPlayModel.setImageFile(\"\");\r\n                            mainPlayModel.setLike(\"\");\r\n                            mainPlayModel.setDownload(\"\");\r\n                            mainPlayModel.setAudioDuration(\"0:48\");\r\n                            listModelList2.add(mainPlayModel);\r\n\r\n                            listModelList2.add(AudiolistsModel.get(position));\r\n                            String json = gson.toJson(listModelList2);\r\n                            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                            editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchAudio\");\r\n                            editor.commit();\r\n                            Fragment fragment = new TransparentPlayerFragment();\r\n                            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .add(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    } else if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binds.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binds.ivLock.setVisibility(View.VISIBLE);\r\n                    }\r\n                } else if (AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binds.ivLock.setVisibility(View.GONE);\r\n                    try {\r\n                        player = 1;\r\n                        if (isPrepare || isMediaStart || isPause) {\r\n                            MusicService.stopMedia();\r\n                        }\r\n                        isPause = false;\r\n                        isMediaStart = false;\r\n                        isPrepare = false;\r\n                        isCompleteStop = false;\r\n                        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                        SuggestedModel.ResponseData mainPlayModel = new SuggestedModel.ResponseData();\r\n                        mainPlayModel.setID(\"0\");\r\n                        mainPlayModel.setName(\"Disclaimer\");\r\n                        mainPlayModel.setAudioFile(\"\");\r\n                        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                        mainPlayModel.setAudiomastercat(\"\");\r\n                        mainPlayModel.setAudioSubCategory(\"\");\r\n                        mainPlayModel.setImageFile(\"\");\r\n                        mainPlayModel.setLike(\"\");\r\n                        mainPlayModel.setDownload(\"\");\r\n                        mainPlayModel.setAudioDuration(\"0:48\");\r\n                        listModelList2.add(mainPlayModel);\r\n\r\n                        listModelList2.add(AudiolistsModel.get(position));\r\n                        String json = gson.toJson(listModelList2);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchAudio\");\r\n                        editor.commit();\r\n                        Fragment fragment = new TransparentPlayerFragment();\r\n                        FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                        fragmentManager1.beginTransaction()\r\n                                .add(R.id.flContainer, fragment)\r\n                                .commit();\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            });\r\n            holder.binds.llRemoveAudio.setOnClickListener(view -> {\r\n                if (AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binds.ivLock.setVisibility(View.GONE);\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddAudioToPlaylist(AudiolistsModel.get(position).getID(), \"\", \"0\");\r\n                            }\r\n                        } else {\r\n                            callAddAudioToPlaylist(AudiolistsModel.get(position).getID(), \"\", \"0\");\r\n                        }\r\n                    } else if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binds.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binds.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    }\r\n                } else if (AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binds.ivLock.setVisibility(View.GONE);\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddAudioToPlaylist(AudiolistsModel.get(position).getID(), \"\", \"0\");\r\n                            }\r\n                        } else {\r\n                            callAddAudioToPlaylist(AudiolistsModel.get(position).getID(), \"\", \"0\");\r\n                        }\r\n                    } else if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binds.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binds.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    }\r\n                } else if (AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binds.ivLock.setVisibility(View.GONE);\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        } else {\r\n                            callAddAudioToPlaylist(AudiolistsModel.get(position).getID(), \"\", \"0\");\r\n                        }\r\n                    } else {\r\n                        callAddAudioToPlaylist(AudiolistsModel.get(position).getID(), \"\", \"0\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return AudiolistsModel.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binds;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binds) {\r\n                super(binds.getRoot());\r\n                this.binds = binds;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SuggestionPlayListsAdpater extends RecyclerView.Adapter<SuggestionPlayListsAdpater.MyViewHolder> {\r\n        private ArrayList<SearchPlaylistModel.ResponseData> PlaylistModel;\r\n\r\n        public SuggestionPlayListsAdpater(ArrayList<SearchPlaylistModel.ResponseData> PlaylistModel) {\r\n            this.PlaylistModel = PlaylistModel;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(PlaylistModel.get(position).getName());\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n\r\n            if (PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                    PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                            PlaylistModel.get(position).getTotalhour().equalsIgnoreCase(\"\")\r\n                            && PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                holder.binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n            } else {\r\n                if (PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() + \" Audio | \"\r\n                            + PlaylistModel.get(position).getTotalhour() + \"h 0m\");\r\n                } else {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() +\r\n                            \" Audios | \" + PlaylistModel.get(position).getTotalhour() + \"h \" + PlaylistModel.get(position).getTotalminute() + \"m\");\r\n                }\r\n            }\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(PlaylistModel.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n            if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    comefromDownload = \"0\";\r\n                    addToSearch = true;\r\n                    MyPlaylistIds = PlaylistModel.get(position).getID();\r\n                    PlaylistIDMS = PlaylistID;\r\n                    finish();\r\n                    /*comefrom_search = 1;\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    Bundle bundle = new Bundle();\r\n                    bundle.putString(\"New\", \"0\");\r\n                    bundle.putString(\"PlaylistID\", PlaylistModel.get(position).getID());\r\n                    bundle.putString(\"PlaylistName\", PlaylistModel.get(position).getName());\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();*/\r\n                }\r\n            });\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    comefromDownload = \"0\";\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        } else {\r\n                            callAddAudioToPlaylist(\"\", PlaylistModel.get(position).getID(), \"1\");\r\n                        }\r\n                    } else {\r\n                        callAddAudioToPlaylist(\"\", PlaylistModel.get(position).getID(), \"1\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return PlaylistModel.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewSuggestedActivity.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewSuggestedActivity.java	(date 1604409033633)
@@ -241,8 +241,7 @@
         @NonNull
         @Override
         public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
-            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())
-                    , R.layout.downloads_layout, parent, false);
+            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.downloads_layout, parent, false);
             return new MyViewHolder(v);
         }
 
@@ -304,7 +303,6 @@
                             mainPlayModel.setDownload("");
                             mainPlayModel.setAudioDuration("0:48");
                             listModelList2.add(mainPlayModel);
-
                             listModelList2.add(AudiolistsModel.get(position));
                             String json = gson.toJson(listModelList2);
                             editor.putString(CONSTANTS.PREF_KEY_modelList, json);
@@ -318,8 +316,7 @@
                             Fragment fragment = new TransparentPlayerFragment();
                             FragmentManager fragmentManager1 = getSupportFragmentManager();
                             fragmentManager1.beginTransaction()
-                                    .add(R.id.flContainer, fragment)
-                                    .commit();
+                                    .add(R.id.flContainer, fragment).commit();
                         } catch (Exception e) {
                             e.printStackTrace();
                         }
@@ -357,7 +354,6 @@
                         mainPlayModel.setDownload("");
                         mainPlayModel.setAudioDuration("0:48");
                         listModelList2.add(mainPlayModel);
-
                         listModelList2.add(AudiolistsModel.get(position));
                         String json = gson.toJson(listModelList2);
                         editor.putString(CONSTANTS.PREF_KEY_modelList, json);
@@ -371,8 +367,7 @@
                         Fragment fragment = new TransparentPlayerFragment();
                         FragmentManager fragmentManager1 = getSupportFragmentManager();
                         fragmentManager1.beginTransaction()
-                                .add(R.id.flContainer, fragment)
-                                .commit();
+                                .add(R.id.flContainer, fragment).commit();
                     } catch (Exception e) {
                         e.printStackTrace();
                     }
@@ -536,20 +531,6 @@
                     MyPlaylistIds = PlaylistModel.get(position).getID();
                     PlaylistIDMS = PlaylistID;
                     finish();
-                    /*comefrom_search = 1;
-                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);
-                    holder.binding.ivLock.setVisibility(View.GONE);
-                    Fragment myPlaylistsFragment = new MyPlaylistsFragment();
-                    Bundle bundle = new Bundle();
-                    bundle.putString("New", "0");
-                    bundle.putString("PlaylistID", PlaylistModel.get(position).getID());
-                    bundle.putString("PlaylistName", PlaylistModel.get(position).getName());
-                    bundle.putString("MyDownloads", "0");
-                    myPlaylistsFragment.setArguments(bundle);
-                    FragmentManager fragmentManager1 = getSupportFragmentManager();
-                    fragmentManager1.beginTransaction()
-                            .replace(R.id.flContainer, myPlaylistsFragment)
-                            .commit();*/
                 }
             });
 
Index: app/src/main/java/com/brainwellnessspa/Utility/APIInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.Utility;\r\n\r\nimport com.brainwellnessspa.AddPayment.Model.AddCardModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.BillingAddressSaveModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.BillingAddressViewModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CancelPlanModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardListModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CurrentPlanVieViewModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.PayNowDetailsModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.PlanListBillingModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.CreatePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.DirectionModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.DownloadPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.LogoutModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.NextSessionViewModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.PlaylistingModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.PreviousAppointmentsModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ReminderStatusPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.RenamePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SessionListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestionAudiosModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.UnlockAudioList;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllPlayListModel;\r\nimport com.brainwellnessspa.DownloadModule.Models.DownloadlistModel;\r\nimport com.brainwellnessspa.FaqModule.Models.FaqListModel;\r\nimport com.brainwellnessspa.InvoiceModule.Models.InvoiceDetailModel;\r\nimport com.brainwellnessspa.InvoiceModule.Models.InvoiceListModel;\r\nimport com.brainwellnessspa.LoginModule.Models.CountryListModel;\r\nimport com.brainwellnessspa.LoginModule.Models.LoginModel;\r\nimport com.brainwellnessspa.LoginModule.Models.OtpModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.MembershipPlanListModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.SignUpModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.DeleteRemiderModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.RemiderDetailsModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.ReminderStatusModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.SelectPlaylistModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.SetReminderModel;\r\nimport com.brainwellnessspa.ResourceModule.Models.ResourceFilterModel;\r\nimport com.brainwellnessspa.ResourceModule.Models.ResourceListModel;\r\nimport com.brainwellnessspa.SplashModule.Models.VersionModel;\r\nimport com.brainwellnessspa.UserModule.Models.AddProfileModel;\r\nimport com.brainwellnessspa.UserModule.Models.ProfileUpdateModel;\r\nimport com.brainwellnessspa.UserModule.Models.ProfileViewModel;\r\nimport com.brainwellnessspa.UserModule.Models.RemoveProfileModel;\r\n\r\nimport retrofit.mime.TypedFile;\r\nimport retrofit2.Call;\r\nimport retrofit2.http.Field;\r\nimport retrofit2.http.FormUrlEncoded;\r\nimport retrofit2.http.GET;\r\nimport retrofit2.http.Multipart;\r\nimport retrofit2.http.POST;\r\nimport retrofit2.http.Part;\r\n\r\npublic interface APIInterface {\r\n\r\n  /*  @Multipart\r\n    @POST(\"/addprofileimage\")\r\n    void getAddProfile(@Part(\"UserID\") String UserID,\r\n                       @Part(\"ProfileImage\") TypedFile Avtar,\r\n                       Callback<AddProfileModel> addProfileModelCallback);*/\r\n\r\n    /*TODO UserProfileActivity */\r\n\r\n    @Multipart\r\n    @POST(\"addprofileimage\")\r\n    Call<AddProfileModel> getAddProfile(@Part(\"UserID\") String userID,\r\n                                        @Part(\"ProfileImage\") TypedFile profileImage);\r\n\r\n    /*TODO App Version*/\r\n    @POST(\"appversion\")\r\n    @FormUrlEncoded\r\n    Call<VersionModel> getVersionDatas(@Field(\"Version\") String version,\r\n                                       @Field(\"AppType\") String appType);\r\n\r\n    /* TODO LoginActivtiy & OtpActivity */\r\n    @POST(\"sendotp\")\r\n    @FormUrlEncoded\r\n    Call<LoginModel> getLoginDatas(@Field(\"MobileNo\") String mobileNo,\r\n                                   @Field(\"CountryCode\") String countryCode,\r\n                                   @Field(\"DeviceType\") String deviceType,\r\n                                   @Field(\"Resend\") String resend,\r\n                                   @Field(\"key\") String key);\r\n\r\n    /* TODO Registration */\r\n    @POST(\"signupcheckout\")\r\n    @FormUrlEncoded\r\n    Call<LoginModel> getRegData(@Field(\"MobileNo\") String mobileNo,\r\n                                @Field(\"CountryCode\") String countryCode);\r\n\r\n    /* TODO Membership Payment */\r\n    @POST(\"payment\")\r\n    @FormUrlEncoded\r\n    Call<AddCardModel> getMembershipPayment(\r\n            @Field(\"PlanId\") String planId,\r\n            @Field(\"PlanFlag\") String planFlag,\r\n            @Field(\"TokenId\") String CardId,\r\n            @Field(\"MobileNo\") String MobileNo,\r\n            @Field(\"CountryCode\") String CountryCode);\r\n\r\n    /* TODO CheckoutGetCodeActivity */\r\n    @POST(\"signupcheckout\")\r\n    @FormUrlEncoded\r\n    Call<SignUpModel> getSignUpDatas(@Field(\"MobileNo\") String mobileNo,\r\n                                     @Field(\"CountryCode\") String countryCode,\r\n                                     @Field(\"DeviceType\") String deviceType,\r\n                                     @Field(\"Resend\") String resend,\r\n                                     @Field(\"key\") String key);\r\n\r\n    /* TODO OtpActivity */\r\n    @POST(\"authotp\")\r\n    @FormUrlEncoded\r\n    Call<OtpModel> getAuthOtps(@Field(\"OTP\") String otp,\r\n                               @Field(\"Token\") String token,\r\n                               @Field(\"DeviceType\") String deviceType,\r\n                               @Field(\"DeviceID\") String deviceID,\r\n                               @Field(\"MobileNo\") String mobileNo,\r\n                               @Field(\"SignupFlag\") String signupFlag);\r\n\r\n    /* TODO OtpActivity */\r\n    @POST(\"authotp\")\r\n    @FormUrlEncoded\r\n    Call<OtpModel> getAuthOtps1(@Field(\"OTP\") String otp,\r\n                                @Field(\"Token\") String token,\r\n                                @Field(\"DeviceType\") String deviceType,\r\n                                @Field(\"DeviceID\") String deviceID,\r\n                                @Field(\"MobileNo\") String mobileNo,\r\n                                @Field(\"SignupFlag\") String signupFlag);\r\n\r\n    /* TODO AccountFragment */\r\n    @POST(\"logout\")\r\n    @FormUrlEncoded\r\n    Call<LogoutModel> getLogout(@Field(\"UserID\") String otp,\r\n                                @Field(\"Token\") String token,\r\n                                @Field(\"Type\") String type);\r\n\r\n    /* TODO CountryActivity */\r\n    @GET(\"countrylist\")\r\n    Call<CountryListModel> getCountryLists();\r\n\r\n    /* TODO AudioFaqActivity */\r\n    @GET(\"faqlist\")\r\n    Call<FaqListModel> getFaqLists();\r\n\r\n    /* TODO AudioFaqActivity */\r\n    @GET(\"faqlistmembership\")\r\n    Call<FaqListModel> getFaqListings();\r\n\r\n    /* TODO UserProfileActivity */\r\n    @POST(\"profiledetail\")\r\n    @FormUrlEncoded\r\n    Call<ProfileViewModel> getProfileView(@Field(\"UserID\") String userID);\r\n\r\n    /*TODO UserProfileActivity */\r\n    @POST(\"profileupdate\")\r\n    @FormUrlEncoded\r\n    Call<ProfileUpdateModel> getProfileUpdate(@Field(\"UserID\") String userID,\r\n                                              @Field(\"Name\") String name,\r\n                                              @Field(\"Dob\") String dob,\r\n                                              @Field(\"MobileNo\") String mobileNo,\r\n                                              @Field(\"EmailId\") String emailId,\r\n                                              @Field(\"IsVerify\") String isVerify);\r\n\r\n    /* TODO Membership Plan List */\r\n    @GET(\"planlist\")\r\n    Call<MembershipPlanListModel> getMembershipPlanList();\r\n\r\n    /*TODO UserProfileActivity */\r\n    @POST(\"removeprofileimage\")\r\n    @FormUrlEncoded\r\n    Call<RemoveProfileModel> getRemoveProfile(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AudioFragment */\r\n    @POST(\"homeaudioscreen\")\r\n    @FormUrlEncoded\r\n    Call<MainAudioModel> getMainAudioLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AudioFragment */\r\n    @POST(\"unlockaudiolist\")\r\n    @FormUrlEncoded\r\n    Call<UnlockAudioList> getUnLockAudioList(@Field(\"UserID\") String userID);\r\n\r\n\r\n    /* TODO PlaylistFragment */\r\n    @POST(\"getlibrary\")\r\n    @FormUrlEncoded\r\n    Call<MainPlayListModel> getMainPlayLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO ViewAllPlaylistFragment */\r\n    @POST(\"playlistongetlibrary\")\r\n    @FormUrlEncoded\r\n    Call<ViewAllPlayListModel> getViewAllPlayLists(@Field(\"UserID\") String userID,\r\n                                                   @Field(\"GetLibraryId\") String getLibraryId);\r\n\r\n    /* TODO ViewAllAudioFragment */\r\n    @POST(\"gethomeallaudio\")\r\n    @FormUrlEncoded\r\n    Call<ViewAllAudioListModel> getViewAllAudioLists(@Field(\"UserID\") String userID,\r\n                                                     @Field(\"GetHomeId\") String HomeId,\r\n                                                     @Field(\"CategoryName\") String CategoryName);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"playlistdetails\")\r\n    @FormUrlEncoded\r\n    Call<SubPlayListModel> getSubPlayLists(@Field(\"UserID\") String userID,\r\n                                           @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"addaudiosearch\")\r\n    @FormUrlEncoded\r\n    Call<SuggestionAudiosModel> getAddSearchAudio(@Field(\"AudioName\") String audioName,\r\n                                                  @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO AddAudioActivity & SearchFragment */\r\n    @POST(\"suggestedaudio\")\r\n    @FormUrlEncoded\r\n    Call<SuggestedModel> getSuggestedLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO SearchFragment */\r\n    @POST(\"suggestedplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SearchPlaylistModel> getSuggestedPlayLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO SearchFragment */\r\n    @POST(\"searchonsuggestedlist\")\r\n    @FormUrlEncoded\r\n    Call<SearchBothModel> getSearchBoth(@Field(\"UserID\") String userID,\r\n                                        @Field(\"SuggestedName\") String suggestedName);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"addaudiotoplaylist\")\r\n    @FormUrlEncoded\r\n    Call<AddToPlaylist> getAddSearchAudioFromPlaylist(@Field(\"UserID\") String userID,\r\n                                                      @Field(\"AudioId\") String audioId,\r\n                                                      @Field(\"PlaylistId\") String playlistId,\r\n                                                      @Field(\"FromPlaylistId\") String fromPlaylistId);\r\n\r\n    /* TODO BillingAddressFragment */\r\n    @POST(\"billingaddress\")\r\n    @FormUrlEncoded\r\n    Call<BillingAddressViewModel> getBillingAddressView(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO BillingAddressFragment */\r\n    @POST(\"payonbillingorder\")\r\n    @FormUrlEncoded\r\n    Call<PayNowDetailsModel> getPayNowDetails(@Field(\"UserID\") String userID,\r\n                                              @Field(\"CardId\") String cardId,\r\n                                              @Field(\"PlanId\") String planId,\r\n                                              @Field(\"PlanType\") String planType,\r\n                                              @Field(\"invoicePayId\") String invoicePayId,\r\n                                              @Field(\"PlanStatus\") String planStatus);\r\n\r\n    /* TODO BillingAddressFragment */\r\n    @POST(\"billingdetailsave\")\r\n    @FormUrlEncoded\r\n    Call<BillingAddressSaveModel> getBillingAddressSave(@Field(\"UserID\") String userID,\r\n                                                        @Field(\"Name\") String name,\r\n                                                        @Field(\"Email\") String email,\r\n                                                        @Field(\"Country\") String country,\r\n                                                        @Field(\"AddressLine1\") String addressLine1,\r\n                                                        @Field(\"AddressLine2\") String addressLine2,\r\n                                                        @Field(\"Suburb\") String suburb,\r\n                                                        @Field(\"State\") String state,\r\n                                                        @Field(\"Postcode\") String postcode);\r\n\r\n    /* TODO CurrentPlanFragment */\r\n    @POST(\"billingorder\")\r\n    @FormUrlEncoded\r\n    Call<CurrentPlanVieViewModel> getCurrentPlanView(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO CancelMembershipActivity */\r\n    @POST(\"cancelplan\")\r\n    @FormUrlEncoded\r\n    Call<CancelPlanModel> getCancelPlan(@Field(\"UserID\") String userID,\r\n                                        @Field(\"CancelId\") String cancelId,\r\n                                        @Field(\"CancelReason\") String cancelReason);\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"nextsessionview\")\r\n    @FormUrlEncoded\r\n    Call<NextSessionViewModel> getNextSessionVIew(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"appointmentcategorylist\")\r\n    @FormUrlEncoded\r\n    Call<PreviousAppointmentsModel> getAppointmentVIew(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"appointmentsession\")\r\n    @FormUrlEncoded\r\n    Call<SessionListModel> getAppointmentSession(@Field(\"UserID\") String userID,\r\n                                                 @Field(\"AppointmentName\") String appointmentName\r\n    );\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"appointmentdetail\")\r\n    @FormUrlEncoded\r\n    Call<AppointmentDetailModel> getAppointmentDetails(@Field(\"UserID\") String userID,\r\n                                                       @Field(\"AppointmentTypeId\") String appointmentTypeId);\r\n\r\n    /* TODO ReminderActivity */\r\n    @POST(\"setreminder\")\r\n    @FormUrlEncoded\r\n    Call<SetReminderModel> SetReminder(@Field(\"PlaylistId\") String PlaylistId,\r\n                                       @Field(\"UserID\") String userID,\r\n                                       @Field(\"IsSingle\") String IsSingle,\r\n                                       @Field(\"ReminderTime\") String ReminderTime,\r\n                                       @Field(\"ReminderDay\") String ReminderDay\r\n    );\r\n\r\n    /* TODO PlayWellnessActivity */\r\n    @POST(\"recentlyplayed\")\r\n    @FormUrlEncoded\r\n    Call<SucessModel> getRecentlyplayed(@Field(\"AudioId\") String audioId,\r\n                                        @Field(\"UserID\") String userID);\r\n\r\n    /* TODO AddQueueActivity */\r\n    @POST(\"audiodetail\")\r\n    @FormUrlEncoded\r\n    Call<DirectionModel> getAudioDetailLists(@Field(\"UserID\") String userID,\r\n                                             @Field(\"AudioId\") String audioId);\r\n\r\n    /* TODO AddPaymentActivity */\r\n    @POST(\"cardadd\")\r\n    @FormUrlEncoded\r\n    Call<AddCardModel> getAddCard(@Field(\"UserID\") String userID,\r\n                                  @Field(\"TokenId\") String tokenId);\r\n\r\n    /* TODO MembershipChangeActivity */\r\n    @POST(\"planlistonbilling\")\r\n    @FormUrlEncoded\r\n    Call<PlanListBillingModel> getPlanListBilling(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO PaymentFragment & AllCardAdapter*/\r\n    @POST(\"cardlist\")\r\n    @FormUrlEncoded\r\n    Call<CardListModel> getCardLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AllCardAdapter */\r\n    @POST(\"carddefault\")\r\n    @FormUrlEncoded\r\n    Call<CardListModel> getChangeCard(@Field(\"UserID\") String userID,\r\n                                      @Field(\"CardId\") String cardId);\r\n\r\n    /* TODO AllCardAdapter */\r\n    @POST(\"cardremove\")\r\n    @FormUrlEncoded\r\n    Call<CardModel> getRemoveCard(@Field(\"UserID\") String userID,\r\n                                  @Field(\"CardId\") String cardId);\r\n\r\n    /* TODO AddQueueActivity */\r\n    @POST(\"audiolike\")\r\n    @FormUrlEncoded\r\n    Call<AudioLikeModel> getAudioLike(@Field(\"AudioId\") String audioId,\r\n                                      @Field(\"UserID\") String userID);\r\n\r\n    /* TODO PlaylistFragment & AddPlaylistActivity*/\r\n    @POST(\"createplaylist\")\r\n    @FormUrlEncoded\r\n    Call<CreatePlaylistModel> getCreatePlaylist(@Field(\"UserID\") String userID,\r\n                                                @Field(\"PlaylistName\") String playlistName);\r\n\r\n    /* TODO MyPlaylistActivity */\r\n    @POST(\"renameplaylist\")\r\n    @FormUrlEncoded\r\n    Call<RenamePlaylistModel> getRenamePlaylist(@Field(\"UserID\") String userID,\r\n                                                @Field(\"PlaylistId\") String playlistId,\r\n                                                @Field(\"PlaylistNewName\") String playlistNewName);\r\n\r\n    /* TODO MyPlaylistActivity */\r\n    @POST(\"removeaudiofromplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SucessModel> getRemoveAudioFromPlaylist(@Field(\"UserID\") String userID,\r\n                                                 @Field(\"AudioId\") String audioId,\r\n                                                 @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"deleteplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SucessModel> getDeletePlaylist(@Field(\"UserID\") String userID,\r\n                                        @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO AddPlaylistActivity */\r\n    @POST(\"playlist\")\r\n    @FormUrlEncoded\r\n    Call<PlaylistingModel> getPlaylisting(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO set Shorted Audio from created Playlist */\r\n    @POST(\"sortingplaylistaudio\")\r\n    @FormUrlEncoded\r\n    Call<CardModel> setShortedAudio(@Field(\"UserID\") String userID,\r\n                                    @Field(\"PlaylistId\") String playListId,\r\n                                    @Field(\"PlaylistAudioId\") String audioId);\r\n\r\n    /* TODO AddQueueActivity & PlayWellnessActivity */\r\n    @POST(\"downloads\")\r\n    @FormUrlEncoded\r\n    Call<DownloadPlaylistModel> getDownloadlistPlaylist(@Field(\"UserID\") String userID,\r\n                                                        @Field(\"AudioId\") String audioId,\r\n                                                        @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO InvoiceActivity */\r\n    @POST(\"invoicelist\")\r\n    @FormUrlEncoded\r\n    Call<InvoiceListModel> getInvoicelistPlaylist(@Field(\"UserID\") String userID,\r\n                                                  @Field(\"Flag\") String flag);\r\n\r\n    /* TODO InvoiceReceiptFragment */\r\n    @POST(\"invoicedetaildownload\")\r\n    @FormUrlEncoded\r\n    Call<InvoiceDetailModel> getInvoiceDetailPlaylist(@Field(\"UserID\") String userID,\r\n                                                      @Field(\"InvoiceId\") String invoiceId,\r\n                                                      @Field(\"Flag\") String flag);\r\n\r\n    /* TODO DownloadsActivity */\r\n    @POST(\"downloadlist\")\r\n    @FormUrlEncoded\r\n    Call<DownloadlistModel> getDownloadlistPlaylist(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AppsFragment & AudioBooksFragment & DocumentariesFragment & PodcastsFragment & WebsiteFragment */\r\n    @POST(\"resourcelist\")\r\n    @FormUrlEncoded\r\n    Call<ResourceListModel> getResourcLists(@Field(\"UserID\") String userID,\r\n                                            @Field(\"ResourceTypeId\") String resourceTypeId,\r\n                                            @Field(\"Category\") String category);\r\n\r\n    /* TODO ResourceActivity */\r\n    @POST(\"resourcecategorylist\")\r\n    @FormUrlEncoded\r\n    Call<ResourceFilterModel> getResourcFilterLists(@Field(\"UserID\") String userID);\r\n\r\n\r\n    /* TODO ReminderDetailsActivity */\r\n    @POST(\"getreminder\")\r\n    @FormUrlEncoded\r\n    Call<RemiderDetailsModel> getGetReminderStatus(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO ReminderDetailsActivity */\r\n    @POST(\"deletereminder\")\r\n    @FormUrlEncoded\r\n    Call<DeleteRemiderModel> getDeleteRemiderStatus(@Field(\"UserID\") String userID,\r\n                                                    @Field(\"ReminderId\") String reminderId);\r\n\r\n    /* TODO ReminderActivity */\r\n    @POST(\"reminderstatus\")\r\n    @FormUrlEncoded\r\n    Call<ReminderStatusModel> getReminderStatus(@Field(\"UserID\") String userID,\r\n                                                @Field(\"PlaylistId\") String playlistId,\r\n                                                @Field(\"ReminderStatus\") String reminderStatus);\r\n\r\n    /* TODO ReminderActivity */\r\n    @POST(\"reminderstatus\")\r\n    @FormUrlEncoded\r\n    Call<ReminderStatusPlaylistModel> getReminderStatusPlaylist(@Field(\"UserID\") String userID,\r\n                                                                @Field(\"PlaylistId\") String playlistId,\r\n                                                                @Field(\"ReminderStatus\") String reminderStatus);\r\n\r\n    /* TODO SelectPlaylistActivity */\r\n    @POST(\"allplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SelectPlaylistModel> getAllPlayListing(@Field(\"UserID\") String userID);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/Utility/APIInterface.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/Utility/APIInterface.java	(date 1604397265933)
@@ -37,6 +37,7 @@
 import com.brainwellnessspa.FaqModule.Models.FaqListModel;
 import com.brainwellnessspa.InvoiceModule.Models.InvoiceDetailModel;
 import com.brainwellnessspa.InvoiceModule.Models.InvoiceListModel;
+import com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;
 import com.brainwellnessspa.LoginModule.Models.CountryListModel;
 import com.brainwellnessspa.LoginModule.Models.LoginModel;
 import com.brainwellnessspa.LoginModule.Models.OtpModel;
@@ -429,6 +430,11 @@
     @FormUrlEncoded
     Call<DownloadlistModel> getDownloadlistPlaylist(@Field("UserID") String userID);
 
+    /* TODO LikeAudiosFragment & LikePlaylistsFragment */
+    @POST("likelist")
+    @FormUrlEncoded
+    Call<LikesHistoryModel> getLikeAudioPlaylistListing(@Field("UserID") String userID);
+
     /* TODO AppsFragment & AudioBooksFragment & DocumentariesFragment & PodcastsFragment & WebsiteFragment */
     @POST("resourcelist")
     @FormUrlEncoded
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/MyPlaylistActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.SystemClock;\r\nimport android.text.Editable;\r\nimport android.text.Selection;\r\nimport android.text.TextWatcher;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Adapters.DirectionAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Models.RenamePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Playlist.PlaylistFragment;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityMyPlaylistBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.RefreshIconData;\r\n\r\npublic class MyPlaylistActivity extends AppCompatActivity {\r\n    public static int deleteFrg = 0;\r\n    public static int ComeFindAudio = 0;\r\n    ActivityMyPlaylistBinding binding;\r\n    String UserID, PlaylistID, Download = \"\";\r\n    Context ctx;\r\n    Activity activity;\r\n    public static int comeAddPlaylist = 0;\r\n    public static int comeRename = 0;\r\n    private long mLastClickTime = 0;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    List<DownloadAudioDetails> playlistWiseAudioDetails;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    DownloadPlaylistDetails downloadPlaylistDetails;\r\n    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongsList;\r\n    List<String> fileNameList, playlistDownloadId, remainAudio;\r\n    int SongListSize = 0, count;\r\n  /*  private Handler handler1;\r\n    private Runnable UpdateSongTime1 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n*//*            if (fileNameList.size() != 0) {\r\n                if (remainAudio.size() <= SongListSize) {\r\n                    int total = SongListSize;\r\n                    int remain = remainAudio.size();\r\n                    int complate = total - remain;\r\n                    long progressPercent = complate * 100 / total;\r\n                    int downloadProgress1 = (int) progressPercent;\r\n                    if (SongListSize == 1) {\r\n                        if (downloadProgress <= 100) {\r\n                            binding.pbProgress.setProgress(downloadProgress);\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            if(downloadProgress == 100){\r\n                                getDownloadData();\r\n                            }\r\n                        }\r\n                    } else if (downloadProgress1 <= 100) {\r\n                        if(downloadProgress1 == 100){\r\n                            getDownloadData();\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        }else{\r\n                            binding.pbProgress.setProgress(downloadProgress1);\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                getDownloadData();\r\n                handler1.postDelayed(this, 500);\r\n            }else{\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n                getDownloadData();\r\n            }*//*\r\n//            getMediaByPer(PlaylistID,SongListSize);\r\n        }\r\n    };*/\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_my_playlist);\r\n        ctx = MyPlaylistActivity.this;\r\n        activity = MyPlaylistActivity.this;\r\n//        handler1 = new Handler();\r\n        fileNameList = new ArrayList<>();\r\n        playlistDownloadId = new ArrayList<>();\r\n        remainAudio = new ArrayList<>();\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        playlistSongsList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        if (getIntent().getExtras() != null) {\r\n            PlaylistID = getIntent().getStringExtra(CONSTANTS.PlaylistID);\r\n        }\r\n        getPrepareData();\r\n        downloadAudioDetailsList = GetAllMedia();\r\n        downloadPlaylistDetailsList = GetPlaylistDetail();\r\n        binding.llBack.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                ComeFindAudio = 1;\r\n//                handler1.removeCallbacks(UpdateSongTime1);\r\n                finish();\r\n            }\r\n        });\r\n        binding.llDownload.setOnClickListener(view -> callDownload());\r\n    }\r\n\r\n    /*  private void getMediaByPer(String playlistID, int totalAudio) {\r\n          class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n\r\n              @Override\r\n              protected Void doInBackground(Void... voids) {\r\n                  count= DatabaseClient.getInstance(ctx)\r\n                          .getaudioDatabase()\r\n                          .taskDao()\r\n                          .getCountDownloadProgress(\"Complete\",playlistID);\r\n\r\n                  return null;\r\n              }\r\n\r\n              @Override\r\n              protected void onPostExecute(Void aVoid) {\r\n                  downloadPlaylistDetailsList = GetPlaylistDetail();\r\n                  if(downloadPlaylistDetailsList.size()!=0) {\r\n                      if (count < totalAudio) {\r\n                          long progressPercent = count * 100 / totalAudio;\r\n                          int downloadProgress1 = (int) progressPercent;\r\n                          binding.pbProgress.setVisibility(View.VISIBLE);\r\n                          binding.ivDownloads.setVisibility(View.GONE);\r\n                          binding.pbProgress.setProgress(downloadProgress1);\r\n                          handler1.postDelayed(UpdateSongTime1, 300);\r\n                      } else {\r\n                          binding.pbProgress.setVisibility(View.GONE);\r\n                          binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                          handler1.removeCallbacks(UpdateSongTime1);\r\n                      }\r\n                  }\r\n                  super.onPostExecute(aVoid);\r\n              }\r\n          }\r\n\r\n          getMediaByPer st = new getMediaByPer();\r\n          st.execute();\r\n      }*/\r\n/*\r\n    private void getDownloadData() {\r\n        try {\r\n            SharedPreferences sharedy = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n                remainAudio = new ArrayList<>();\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 0; i < fileNameList.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            remainAudio.add(playlistDownloadId.get(i));\r\n                        }\r\n                    }\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        if (remainAudio.size() < SongListSize) {\r\n                            handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    }\r\n                    //\r\n                }else {\r\n                    fileNameList = new ArrayList<>();\r\n                    playlistDownloadId = new ArrayList<>();\r\n                    remainAudio = new ArrayList<>();\r\n                }\r\n            } else {\r\n                fileNameList = new ArrayList<>();\r\n                playlistDownloadId = new ArrayList<>();\r\n                remainAudio = new ArrayList<>();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n*/\r\n    public List<DownloadAudioDetails> GetAllMedia() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData1();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }\r\n\r\n    private void callDownload() {\r\n        List<String> url = new ArrayList<>();\r\n        List<String> name = new ArrayList<>();\r\n        List<String> downloadPlaylistId = new ArrayList<>();\r\n        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs2 = new ArrayList<>();\r\n        playlistSongs2 = playlistSongsList;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                if (playlistSongs2.size() == 0) {\r\n                    break;\r\n                } else {\r\n                    for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                        if (playlistSongs2.size() != 0) {\r\n                            if (playlistSongs2.get(x).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                playlistSongs2.remove(x);\r\n                            }\r\n                            if (playlistSongs2.size() == 0) {\r\n                                break;\r\n                            }\r\n                        } else break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (int x = 0; x < playlistSongs2.size(); x++) {\r\n            name.add(playlistSongs2.get(x).getName());\r\n            url.add(playlistSongs2.get(x).getAudioFile());\r\n            downloadPlaylistId.add(playlistSongs2.get(x).getPlaylistID());\r\n        }\r\n        enableDisableDownload(false, \"orange\");\r\n        byte[] encodedBytes = new byte[1024];\r\n\r\n        SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n        Gson gson1 = new Gson();\r\n        String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n        String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n        String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n            Type type = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> fileNameList = gson1.fromJson(json, type);\r\n            List<String> audioFile = gson1.fromJson(json1, type);\r\n            List<String> playlistId1 = gson1.fromJson(json2, type);\r\n            if (fileNameList.size() != 0) {\r\n                url.addAll(audioFile);\r\n                name.addAll(fileNameList);\r\n                downloadPlaylistId.addAll(playlistId1);\r\n            }\r\n        }\r\n\r\n        if (url.size() != 0) {\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n            downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String urlJson = gson.toJson(url);\r\n            String nameJson = gson.toJson(name);\r\n            String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n            fileNameList = name;\r\n            playlistDownloadId = downloadPlaylistId;\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n            editor.commit();\r\n        }\r\n        SongListSize = playlistSongsList.size();\r\n        savePlaylist();\r\n        saveAllMedia(playlistSongsList, encodedBytes);\r\n\r\n    }\r\n\r\n    private void savePlaylist() {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertPlaylist(downloadPlaylistDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n//                getMediaByPer(PlaylistID,SongListSize);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void saveAllMedia(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, byte[] encodedBytes) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                for (int i = 0; i < playlistSongs.size(); i++) {\r\n                    downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                    downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"0\");\r\n                    downloadAudioDetails.setPlaylistId(playlistSongs.get(i).getPlaylistID());\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                    DatabaseClient.getInstance(ctx)\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .insertMedia(downloadAudioDetails);\r\n                }\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n                enableDisableDownload(false, \"orange\");\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        ComeFindAudio = 1;\r\n//        handler1.removeCallbacks(UpdateSongTime1);\r\n        finish();\r\n    }\r\n\r\n    private void getPrepareData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SubPlayListModel> listCall = APIClient.getClient().getSubPlayLists(UserID, PlaylistID);\r\n            listCall.enqueue(new Callback<SubPlayListModel>() {\r\n                @Override\r\n                public void onResponse(Call<SubPlayListModel> call, Response<SubPlayListModel> response) {\r\n                    try {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            SubPlayListModel model = response.body();\r\n                            playlistSongsList = model.getResponseData().getPlaylistSongs();\r\n                            downloadPlaylistDetails = new DownloadPlaylistDetails();\r\n                            downloadPlaylistDetails.setPlaylistID(model.getResponseData().getPlaylistID());\r\n                            downloadPlaylistDetails.setPlaylistName(model.getResponseData().getPlaylistName());\r\n                            downloadPlaylistDetails.setPlaylistDesc(model.getResponseData().getPlaylistDesc());\r\n                            downloadPlaylistDetails.setIsReminder(model.getResponseData().getIsReminder());\r\n                            downloadPlaylistDetails.setPlaylistMastercat(model.getResponseData().getPlaylistMastercat());\r\n                            downloadPlaylistDetails.setPlaylistSubcat(model.getResponseData().getPlaylistSubcat());\r\n                            downloadPlaylistDetails.setPlaylistImage(model.getResponseData().getPlaylistImage());\r\n                            downloadPlaylistDetails.setPlaylistImageDetails(model.getResponseData().getPlaylistImageDetail());\r\n                            downloadPlaylistDetails.setTotalAudio(model.getResponseData().getTotalAudio());\r\n                            downloadPlaylistDetails.setTotalDuration(model.getResponseData().getTotalDuration());\r\n                            downloadPlaylistDetails.setTotalhour(model.getResponseData().getTotalhour());\r\n                            downloadPlaylistDetails.setTotalminute(model.getResponseData().getTotalminute());\r\n                            downloadPlaylistDetails.setCreated(model.getResponseData().getCreated());\r\n                            downloadPlaylistDetails.setDownload(model.getResponseData().getDownload());\r\n                            downloadPlaylistDetails.setLike(model.getResponseData().getLike());\r\n                            binding.tvName.setText(model.getResponseData().getPlaylistName());\r\n                            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 20,\r\n                                    1, 1, 0.54f, 20);\r\n                            binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n                            binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n                            binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n                            if (!model.getResponseData().getPlaylistImage().equalsIgnoreCase(\"\")) {\r\n                                Glide.with(ctx).load(model.getResponseData().getPlaylistImage())\r\n                                        .thumbnail(0.05f)\r\n                                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                            } else {\r\n                                binding.ivRestaurantImage.setImageResource(R.drawable.ic_playlist_bg);\r\n                            }\r\n//                            getDownloadData();\r\n                            SongListSize = model.getResponseData().getPlaylistSongs().size();\r\n//                            getMediaByPer(PlaylistID,SongListSize);\r\n//                            SongListSize = model.getResponseData().getPlaylistSongs().size();\r\n                            Download = model.getResponseData().getDownload();\r\n                            binding.llAddPlaylist.setVisibility(View.VISIBLE);\r\n//                            getDownloadData();\r\n                            binding.llAddPlaylist.setOnClickListener(view -> {\r\n                                comeAddPlaylist = 1;\r\n                                if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                                    return;\r\n                                }\r\n                                mLastClickTime = SystemClock.elapsedRealtime();\r\n                                Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                                i.putExtra(\"AudioId\", \"\");\r\n                                i.putExtra(\"PlaylistID\", model.getResponseData().getPlaylistID());\r\n                                startActivity(i);\r\n                                finish();\r\n                            });\r\n                            if (model.getResponseData().getCreated().equalsIgnoreCase(\"1\")) {\r\n                                binding.llOptions.setVisibility(View.GONE);\r\n                                binding.llRename.setVisibility(View.VISIBLE);\r\n                                binding.llDelete.setVisibility(View.VISIBLE);\r\n                                binding.llFind.setVisibility(View.GONE);\r\n                            } else if (model.getResponseData().getCreated().equalsIgnoreCase(\"0\")) {\r\n                                binding.llOptions.setVisibility(View.VISIBLE);\r\n                                binding.llRename.setVisibility(View.GONE);\r\n                                binding.llDelete.setVisibility(View.GONE);\r\n                                binding.llFind.setVisibility(View.VISIBLE);\r\n                            }\r\n\r\n                            binding.llFind.setOnClickListener(view -> {\r\n                                ComeFindAudio = 2;\r\n                                finish();\r\n                            });\r\n                            if (model.getResponseData().getPlaylistMastercat().equalsIgnoreCase(\"\")) {\r\n                                binding.tvDesc.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.tvDesc.setVisibility(View.VISIBLE);\r\n                                binding.tvDesc.setText(model.getResponseData().getPlaylistMastercat());\r\n                            }\r\n\r\n                            if (model.getResponseData().getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                                    model.getResponseData().getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                                            model.getResponseData().getTotalhour().equalsIgnoreCase(\"\")\r\n                                            && model.getResponseData().getTotalminute().equalsIgnoreCase(\"\")) {\r\n                                binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n                            } else {\r\n                                if (model.getResponseData().getTotalminute().equalsIgnoreCase(\"\")) {\r\n                                    binding.tvTime.setText(model.getResponseData().getTotalAudio() + \" Audio | \"\r\n                                            + model.getResponseData().getTotalhour() + \"h 0m\");\r\n                                } else {\r\n                                    binding.tvTime.setText(model.getResponseData().getTotalAudio() + \" Audio | \"\r\n                                            + model.getResponseData().getTotalhour() + \"h \" + model.getResponseData().getTotalminute() + \"m\");\r\n                                }\r\n                            }\r\n\r\n                            if (model.getResponseData().getPlaylistDesc().equalsIgnoreCase(\"\")) {\r\n                                binding.tvTitleDec.setVisibility(View.GONE);\r\n                                binding.tvSubDec.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.tvTitleDec.setVisibility(View.VISIBLE);\r\n                                binding.tvSubDec.setVisibility(View.VISIBLE);\r\n                            }\r\n\r\n                            binding.tvSubDec.setText(model.getResponseData().getPlaylistDesc());\r\n                            int linecount = binding.tvSubDec.getLineCount();\r\n                            if (linecount >= 4) {\r\n                                binding.tvReadMore.setVisibility(View.VISIBLE);\r\n                            } else {\r\n                                binding.tvReadMore.setVisibility(View.GONE);\r\n                            }\r\n\r\n                            binding.tvReadMore.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View view) {\r\n                                    final Dialog dialog = new Dialog(ctx);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.full_desc_layout);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvDesc = dialog.findViewById(R.id.tvDesc);\r\n                                    final RelativeLayout tvClose = dialog.findViewById(R.id.tvClose);\r\n                                    tvDesc.setText(model.getResponseData().getPlaylistDesc());\r\n\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n\r\n                                    tvClose.setOnClickListener(v -> dialog.dismiss());\r\n\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n                                }\r\n                            });\r\n\r\n                    /*    if (model.getResponseData().getDownload().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                            binding.tvDownload.setTextColor(getResources().getColor(R.color.light_gray));\r\n                            binding.llDownload.setClickable(false);\r\n                            binding.llDownload.setEnabled(false);\r\n                        } else if (!model.getResponseData().getDownload().equalsIgnoreCase(\"\")) {\r\n                            binding.llDownload.setClickable(true);\r\n                            binding.llDownload.setEnabled(true);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n                            binding.tvDownload.setTextColor(getResources().getColor(R.color.white));\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                        }*/\r\n\r\n                            binding.llDownload.setVisibility(View.VISIBLE);\r\n\r\n/*\r\n                            binding.llDownload.setOnClickListener(view -> {\r\n                                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                    BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    Call<DownloadPlaylistModel> listCall13 = null;\r\n                                    listCall13 = APIClient.getClient().getDownloadlistPlaylist(UserID, \"\", PlaylistID);\r\n                                    listCall13.enqueue(new Callback<DownloadPlaylistModel>() {\r\n                                        @Override\r\n                                        public void onResponse(Call<DownloadPlaylistModel> call13, Response<DownloadPlaylistModel> response13) {\r\n                                            if (response13.isSuccessful()) {\r\n                                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                DownloadPlaylistModel model1 = response13.body();\r\n                                                BWSApplication.showToast(model1.getResponseMessage(), ctx);\r\n                                            }\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void onFailure(Call<DownloadPlaylistModel> call13, Throwable t) {\r\n                                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        }\r\n                                    });\r\n\r\n                                } else {\r\n                                    Toast.makeText(getApplicationContext(), getString(R.string.no_server_found), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            });\r\n*/\r\n\r\n                            String[] elements = model.getResponseData().getPlaylistSubcat().split(\",\");\r\n                            List<String> direction = Arrays.asList(elements);\r\n\r\n                            DirectionAdapter directionAdapter = new DirectionAdapter(direction, ctx);\r\n                            RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(ctx, LinearLayoutManager.HORIZONTAL, false);\r\n                            binding.rvDirlist.setLayoutManager(recentlyPlayed);\r\n                            binding.rvDirlist.setItemAnimator(new DefaultItemAnimator());\r\n                            binding.rvDirlist.setAdapter(directionAdapter);\r\n                            String PlaylistID = model.getResponseData().getPlaylistID();\r\n                            binding.llRename.setOnClickListener(view -> {\r\n                                final Dialog dialog = new Dialog(ctx);\r\n                                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                dialog.setContentView(R.layout.create_palylist);\r\n                                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                final EditText edtCreate = dialog.findViewById(R.id.edtCreate);\r\n                                final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                                final TextView tvHeading = dialog.findViewById(R.id.tvHeading);\r\n                                final Button btnSendCode = dialog.findViewById(R.id.btnSendCode);\r\n                                tvHeading.setText(R.string.Rename_your_playlist);\r\n                                btnSendCode.setText(R.string.Save);\r\n                                edtCreate.requestFocus();\r\n                                edtCreate.setText(model.getResponseData().getPlaylistName());\r\n                                int position1 = edtCreate.getText().length();\r\n                                Editable editObj = edtCreate.getText();\r\n                                Selection.setSelection(editObj, position1);\r\n                                btnSendCode.setEnabled(true);\r\n                                btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                        dialog.dismiss();\r\n                                        return true;\r\n                                    }\r\n                                    return false;\r\n                                });\r\n\r\n                                TextWatcher popupTextWatcher = new TextWatcher() {\r\n                                    @Override\r\n                                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                                        String number = edtCreate.getText().toString().trim();\r\n                                        if (!number.isEmpty()) {\r\n                                            btnSendCode.setEnabled(true);\r\n                                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                            btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                                        } else {\r\n                                            btnSendCode.setEnabled(false);\r\n                                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                            btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n                                        }\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void afterTextChanged(Editable s) {\r\n                                    }\r\n                                };\r\n\r\n\r\n                                edtCreate.addTextChangedListener(popupTextWatcher);\r\n\r\n                                btnSendCode.setOnClickListener(view1 -> {\r\n                                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                        BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        Call<RenamePlaylistModel> listCall1 = APIClient.getClient().getRenamePlaylist(UserID, PlaylistID, edtCreate.getText().toString());\r\n                                        listCall1.enqueue(new Callback<RenamePlaylistModel>() {\r\n                                            @Override\r\n                                            public void onResponse(Call<RenamePlaylistModel> call1, Response<RenamePlaylistModel> response1) {\r\n                                                if (response1.isSuccessful()) {\r\n                                                    comeRename = 1;\r\n                                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                    RenamePlaylistModel listModel = response1.body();\r\n                                                    BWSApplication.showToast(listModel.getResponseMessage(), ctx);\r\n                                                    dialog.dismiss();\r\n                                                    finish();\r\n                                                }\r\n                                            }\r\n\r\n                                            @Override\r\n                                            public void onFailure(Call<RenamePlaylistModel> call1, Throwable t) {\r\n                                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                                    }\r\n\r\n                                });\r\n                                tvCancel.setOnClickListener(v -> dialog.dismiss());\r\n                                dialog.show();\r\n                                dialog.setCancelable(false);\r\n                            });\r\n\r\n                            binding.llDelete.setOnClickListener(view -> {\r\n                                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                    BWSApplication.showToast(\"Currently this playlist is in player,so you can't delete this playlist as of now\", ctx);\r\n                                } else {\r\n                                    final Dialog dialog = new Dialog(ctx);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.delete_playlist);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                                    final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n                                    final RelativeLayout tvconfirm = dialog.findViewById(R.id.tvconfirm);\r\n                                    tvHeader.setText(\"Are you sure you want to delete \" + model.getResponseData().getPlaylistName() + \"  playlist?\");\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            Fragment playlistFragment = new PlaylistFragment();\r\n                                            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                                            fragmentManager1.beginTransaction()\r\n                                                    .add(R.id.flContainer, playlistFragment)\r\n                                                    .commit();\r\n                                            Bundle bundle = new Bundle();\r\n                                            playlistFragment.setArguments(bundle);\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n\r\n                                    tvconfirm.setOnClickListener(v -> {\r\n                                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                            Call<SucessModel> listCall12 = APIClient.getClient().getDeletePlaylist(UserID, PlaylistID);\r\n                                            listCall12.enqueue(new Callback<SucessModel>() {\r\n                                                @Override\r\n                                                public void onResponse(Call<SucessModel> call12, Response<SucessModel> response12) {\r\n                                                    if (response12.isSuccessful()) {\r\n                                                        deleteFrg = 1;\r\n                                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                        SucessModel listModel = response12.body();\r\n                                                        dialog.dismiss();\r\n                                                        BWSApplication.showToast(listModel.getResponseMessage(), ctx);\r\n                                                        finish();\r\n                                                    }\r\n                                                }\r\n\r\n                                                @Override\r\n                                                public void onFailure(Call<SucessModel> call12, Throwable t) {\r\n                                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                }\r\n                                            });\r\n                                        } else {\r\n                                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                                        }\r\n                                    });\r\n\r\n                                    tvGoBack.setOnClickListener(v -> dialog.dismiss());\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n                                }\r\n                            });\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SubPlayListModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (RefreshIconData == 0) {\r\n                    enableDisableDownload(false, \"gray\");\r\n                } else if (Download.equalsIgnoreCase(\"1\")) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (Download.equalsIgnoreCase(\"0\") || Download.equalsIgnoreCase(\"\") ||\r\n                        RefreshIconData != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                } else if (downloadPlaylistDetailsList.size() == 0 && RefreshIconData != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                }\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private void enableDisableDownload(boolean b, String color) {\r\n        if (b) {\r\n            binding.llDownload.setClickable(true);\r\n            binding.llDownload.setEnabled(true);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.tvDownload.setTextColor(getResources().getColor(R.color.white));\r\n        } else {\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.llDownload.setClickable(false);\r\n            binding.llDownload.setEnabled(false);\r\n            if (color.equalsIgnoreCase(\"gray\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            } else if (color.equalsIgnoreCase(\"orange\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n            }\r\n            binding.tvDownload.setTextColor(getResources().getColor(R.color.white));\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/MyPlaylistActivity.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/MyPlaylistActivity.java	(date 1604408785269)
@@ -31,6 +31,7 @@
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
+import com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.google.gson.Gson;
@@ -471,12 +472,49 @@
                                 binding.llRename.setVisibility(View.VISIBLE);
                                 binding.llDelete.setVisibility(View.VISIBLE);
                                 binding.llFind.setVisibility(View.GONE);
+                                binding.llLikes.setVisibility(View.GONE);
                             } else if (model.getResponseData().getCreated().equalsIgnoreCase("0")) {
                                 binding.llOptions.setVisibility(View.VISIBLE);
                                 binding.llRename.setVisibility(View.GONE);
                                 binding.llDelete.setVisibility(View.GONE);
                                 binding.llFind.setVisibility(View.VISIBLE);
+                                binding.llLikes.setVisibility(View.GONE);
                             }
+
+                          /*  binding.llLikes.setOnClickListener(new View.OnClickListener() {
+                                @Override
+                                public void onClick(View v) {
+                                    if (BWSApplication.isNetworkConnected(ctx)) {
+                                        BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                                        Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(AudioId, UserID);
+                                        listCall.enqueue(new Callback<AudioLikeModel>() {
+                                            @Override
+                                            public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {
+                                                if (response.isSuccessful()) {
+                                                    try {
+                                                        binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);
+                                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                                                        AudioLikeModel model = response.body();
+                                                        if (model.getResponseData().getFlag().equalsIgnoreCase("0")) {
+                                                            binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);
+                                                            Like = "0";
+                                                        } else if (model.getResponseData().getFlag().equalsIgnoreCase("1")) {
+                                                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);
+                                                            Like = "1";
+                                                        }
+                                                }
+                                            }
+
+                                            @Override
+                                            public void onFailure(Call<AudioLikeModel> call, Throwable t) {
+                                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                                            }
+                                        });
+                                    } else {
+                                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);
+                                    }
+                                }
+                            });*/
 
                             binding.llFind.setOnClickListener(view -> {
                                 ComeFindAudio = 2;
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/DashboardActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.media.AudioManager;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.telephony.PhoneStateListener;\r\nimport android.telephony.TelephonyManager;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.navigation.ui.AppBarConfiguration;\r\nimport androidx.navigation.ui.NavigationUI;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.databinding.ActivityDashboardBinding;\r\n\r\nimport static com.brainwellnessspa.InvoiceModule.Activities.InvoiceActivity.invoiceToDashboard;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class DashboardActivity extends AppCompatActivity implements AudioManager.OnAudioFocusChangeListener {\r\n    public static int player = 0;\r\n    ActivityDashboardBinding binding;\r\n    boolean doubleBackToExitPressedOnce = false;\r\n    String Goplaylist= \"\", PlaylistID = \"\",PlaylistName = \"\",PlaylistImage=\"\";\r\n    TelephonyManager mTelephonyMgr;\r\n    AudioManager mAudioManager;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_dashboard);\r\n        AppBarConfiguration appBarConfiguration = new AppBarConfiguration.Builder(\r\n                R.id.navigation_audio, R.id.navigation_playlist, R.id.navigation_search,\r\n                R.id.navigation_appointment, R.id.navigation_account).build();\r\n        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);\r\n//        NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration);\r\n        NavigationUI.setupWithNavController(binding.navView, navController);\r\n        mTelephonyMgr = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);\r\n        mTelephonyMgr.listen(mPhoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);\r\n        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);\r\n\r\n        if (getIntent().hasExtra(\"Goplaylist\")){\r\n            Goplaylist = getIntent().getStringExtra(\"Goplaylist\");\r\n            PlaylistID = getIntent().getStringExtra(\"PlaylistID\");\r\n            PlaylistName = getIntent().getStringExtra(\"PlaylistName\");\r\n            PlaylistImage = getIntent().getStringExtra(\"PlaylistImage\");\r\n        }\r\n        if (Goplaylist.equalsIgnoreCase(\"1\")) {\r\n            binding.navView.setSelectedItemId(R.id.navigation_playlist);\r\n            Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n            Bundle bundle = new Bundle();\r\n            bundle.putString(\"New\", \"0\");\r\n            bundle.putString(\"PlaylistID\", PlaylistID);\r\n            bundle.putString(\"PlaylistName\", PlaylistName);\r\n            bundle.putString(\"PlaylistImage\", PlaylistImage);\r\n            bundle.putString(\"MyDownloads\", \"0\");\r\n            myPlaylistsFragment.setArguments(bundle);\r\n            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, myPlaylistsFragment)\r\n                    .commit();\r\n        }\r\n//\r\n//        ConnectivityManager connMgr = (ConnectivityManager)\r\n//                getSystemService(Context.CONNECTIVITY_SERVICE);\r\n//// Checks if the device is on a metered network\r\n//        if (connMgr.isActiveNetworkMetered()) {\r\n//            // Checks user’s Data Saver settings.\r\n//            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n//                switch (connMgr.getRestrictBackgroundStatus()) {\r\n//                    case ConnectivityManager.RESTRICT_BACKGROUND_STATUS_ENABLED:\r\n//                        // Background data usage is blocked for this app. Wherever possible,\r\n//                        // the app should also use less data in the foreground.\r\n//\r\n//                    case ConnectivityManager.RESTRICT_BACKGROUND_STATUS_WHITELISTED:\r\n//                        // The app is allowed to bypass Data Saver. Nevertheless, wherever possible,\r\n//                        // the app should use less data in the foreground and background.\r\n//\r\n//                    case ConnectivityManager.RESTRICT_BACKGROUND_STATUS_DISABLED:\r\n//                        // Data Saver is disabled. Since the device is connected to a\r\n//                        // metered network, the app should use less data wherever possible.\r\n//                }\r\n//            }\r\n//        } else {\r\n//            // The device is not on a metered network.\r\n//            // Use data as required to perform syncs, downloads, and updates.\r\n//        }\r\n    }\r\n    private PhoneStateListener mPhoneStateListener = new PhoneStateListener() {\r\n        @Override\r\n        public void onCallStateChanged(int state, String incomingNumber) {\r\n            // Test for incoming call, dialing call, active or on hold\r\n            if (state==TelephonyManager.CALL_STATE_RINGING || state==TelephonyManager.CALL_STATE_OFFHOOK)\r\n            {\r\n                if(isMediaStart){\r\n                    pauseMedia();\r\n                }  // Put here the code to stop your music\r\n            }else if(state == TelephonyManager.CALL_STATE_IDLE){\r\n            }\r\n            super.onCallStateChanged(state, incomingNumber);\r\n        }\r\n    };\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (invoiceToDashboard == 1) {\r\n            finishAffinity();\r\n        }\r\n\r\n        if (binding.navView.getSelectedItemId() == R.id.navigation_audio) {\r\n            binding.navView.setSelectedItemId(R.id.navigation_audio);\r\n            if (doubleBackToExitPressedOnce) {\r\n                super.onBackPressed();\r\n                return;\r\n            }\r\n\r\n            this.doubleBackToExitPressedOnce = true;\r\n            BWSApplication.showToast(\"Press again to exit\", DashboardActivity.this);\r\n\r\n            new Handler().postDelayed(() -> doubleBackToExitPressedOnce = false, 2000);\r\n        } else {\r\n            super.onBackPressed();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        mTelephonyMgr.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE);\r\n    }\r\n\r\n    @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n//                if(isPause)\r\n//                resumeMedia();\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if (isMediaStart) {\r\n                    pauseMedia();\r\n//                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n//                    binding.ivPause.setVisibility(View.GONE);\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/DashboardActivity.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/DashboardActivity.java	(date 1604409033581)
@@ -35,9 +35,10 @@
     public static int player = 0;
     ActivityDashboardBinding binding;
     boolean doubleBackToExitPressedOnce = false;
-    String Goplaylist= "", PlaylistID = "",PlaylistName = "",PlaylistImage="";
+    String Goplaylist = "", PlaylistID = "", PlaylistName = "", PlaylistImage = "";
     TelephonyManager mTelephonyMgr;
     AudioManager mAudioManager;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -54,7 +55,7 @@
         mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,
                 AudioManager.AUDIOFOCUS_GAIN);
 
-        if (getIntent().hasExtra("Goplaylist")){
+        if (getIntent().hasExtra("Goplaylist")) {
             Goplaylist = getIntent().getStringExtra("Goplaylist");
             PlaylistID = getIntent().getStringExtra("PlaylistID");
             PlaylistName = getIntent().getStringExtra("PlaylistName");
@@ -101,20 +102,21 @@
 //            // Use data as required to perform syncs, downloads, and updates.
 //        }
     }
+
     private PhoneStateListener mPhoneStateListener = new PhoneStateListener() {
         @Override
         public void onCallStateChanged(int state, String incomingNumber) {
             // Test for incoming call, dialing call, active or on hold
-            if (state==TelephonyManager.CALL_STATE_RINGING || state==TelephonyManager.CALL_STATE_OFFHOOK)
-            {
-                if(isMediaStart){
+            if (state == TelephonyManager.CALL_STATE_RINGING || state == TelephonyManager.CALL_STATE_OFFHOOK) {
+                if (isMediaStart) {
                     pauseMedia();
                 }  // Put here the code to stop your music
-            }else if(state == TelephonyManager.CALL_STATE_IDLE){
+            } else if (state == TelephonyManager.CALL_STATE_IDLE) {
             }
             super.onCallStateChanged(state, incomingNumber);
         }
     };
+
     @Override
     protected void onResume() {
         super.onResume();
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Account/AccountFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Account;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.SystemClock;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.bumptech.glide.Glide;\r\nimport com.downloader.PRDownloader;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.firebase.iid.FirebaseInstanceId;\r\nimport com.google.firebase.iid.InstanceIdResult;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.BillingOrderActivity;\r\nimport com.brainwellnessspa.BuildConfig;\r\nimport com.brainwellnessspa.DashboardModule.Models.LogoutModel;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity;\r\nimport com.brainwellnessspa.FaqModule.Activities.FaqActivity;\r\nimport com.brainwellnessspa.InvoiceModule.Activities.InvoiceActivity;\r\nimport com.brainwellnessspa.LoginModule.Activities.LoginActivity;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.ReminderModule.Activities.ReminderDetailsActivity;\r\nimport com.brainwellnessspa.ResourceModule.Activities.ResourceActivity;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.UserModule.Activities.UserProfileActivity;\r\nimport com.brainwellnessspa.UserModule.Models.ProfileViewModel;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.databinding.FragmentAccountBinding;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadIdOne;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.isDownloading;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class AccountFragment extends Fragment {\r\n    public static String IsLock = \"\";\r\n    public static int ComeScreenReminder = 0;\r\n    public static int ComeScreenAccount = 0;\r\n    public static boolean logout = false;\r\n    FragmentAccountBinding binding;\r\n    String UserID,MobileNo;\r\n    private long mLastClickTime = 0;\r\n\r\n    @SuppressLint({\"ClickableViewAccessibility\", \"SetTextI18n\"})\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_account, container, false);\r\n        View view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        MobileNo = (shared1.getString(CONSTANTS.PREF_KEY_MobileNo, \"\"));\r\n        ComeScreenAccount = 1;\r\n        comefromDownload = \"0\";\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 10,\r\n                1, 1, 0.2f, 10);\r\n        binding.civProfile.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.civProfile.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n\r\n        MeasureRatio measureRatios = BWSApplication.measureRatio(getActivity(), 10,\r\n                1, 1, 0.2f, 10);\r\n        binding.civLetter.getLayoutParams().height = (int) (measureRatios.getHeight() * measureRatios.getRatio());\r\n        binding.civLetter.getLayoutParams().width = (int) (measureRatios.getWidthImg() * measureRatios.getRatio());\r\n        profileViewData(getActivity());\r\n\r\n        binding.tvVersion.setText(\"Version \" + BuildConfig.VERSION_NAME);\r\n\r\n        binding.llDownloads.setOnClickListener(view12 -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            Intent i = new Intent(getActivity(), DownloadsActivity.class);\r\n            startActivity(i);\r\n        });\r\n\r\n        binding.llInvoices.setOnClickListener(view14 -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Intent i = new Intent(getActivity(), InvoiceActivity.class);\r\n                i.putExtra(\"ComeFrom\", \"\");\r\n                startActivity(i);\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        });\r\n\r\n        binding.llBillingOrder.setOnClickListener(view15 -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Intent i = new Intent(getActivity(), BillingOrderActivity.class);\r\n                startActivity(i);\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        });\r\n\r\n        binding.llResource.setOnClickListener(view17 -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Intent i = new Intent(getActivity(), ResourceActivity.class);\r\n                startActivity(i);\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        });\r\n\r\n        binding.llReminder.setOnClickListener(view16 -> {\r\n            ComeScreenReminder = 1;\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Intent i = new Intent(getActivity(), ReminderDetailsActivity.class);\r\n                startActivity(i);\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        });\r\n        binding.llFaq.setOnClickListener(view18 -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Intent i = new Intent(getActivity(), FaqActivity.class);\r\n                startActivity(i);\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        });\r\n\r\n        binding.llLogout.setOnClickListener(view19 -> {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                final Dialog dialog = new Dialog(getActivity());\r\n                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                dialog.setContentView(R.layout.logout_layout);\r\n                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                final Button Btn = dialog.findViewById(R.id.Btn);\r\n\r\n                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                        dialog.hide();\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n\r\n                Btn.setOnTouchListener((view1, event) -> {\r\n                    switch (event.getAction()) {\r\n                        case MotionEvent.ACTION_DOWN: {\r\n                            Button views = (Button) view1;\r\n                            views.getBackground().setColorFilter(0x77000000, PorterDuff.Mode.SRC_ATOP);\r\n                            view1.invalidate();\r\n                            break;\r\n                        }\r\n                        case MotionEvent.ACTION_UP:\r\n                            if(isMediaStart){\r\n                                stopMedia();\r\n                                releasePlayer();\r\n                            }\r\n                            clearData(dialog);\r\n                        case MotionEvent.ACTION_CANCEL: {\r\n                            Button views = (Button) view1;\r\n                            views.getBackground().clearColorFilter();\r\n                            views.invalidate();\r\n                            break;\r\n                        }\r\n                    }\r\n                    return true;\r\n                });\r\n\r\n                tvGoBack.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View v) {\r\n                        dialog.hide();\r\n                    }\r\n                });\r\n                dialog.show();\r\n                dialog.setCancelable(false);\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        });\r\n        return view;\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        comefromDownload = \"0\";\r\n        profileViewData(getActivity());\r\n    }\r\n\r\n    void clearData(Dialog dialog) {\r\n        DeleteCall();\r\n        SharedPreferences sharedPreferences2 = getActivity().getSharedPreferences(CONSTANTS.Token, Context.MODE_PRIVATE);\r\n        String fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n        if (TextUtils.isEmpty(fcm_id)) {\r\n            FirebaseInstanceId.getInstance().getInstanceId().addOnSuccessListener(getActivity(), new OnSuccessListener<InstanceIdResult>() {\r\n                @Override\r\n                public void onSuccess(InstanceIdResult instanceIdResult) {\r\n                    String newToken = instanceIdResult.getToken();\r\n                    Log.e(\"newToken\", newToken);\r\n                    SharedPreferences.Editor editor = getActivity().getSharedPreferences(CONSTANTS.Token, Context.MODE_PRIVATE).edit();\r\n                    editor.putString(CONSTANTS.Token, newToken); //Friend\r\n                    editor.apply();\r\n                    editor.commit();\r\n                }\r\n            });\r\n            fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<LogoutModel> listCall = APIClient.getClient().getLogout(UserID, fcm_id, CONSTANTS.FLAG_ONE);\r\n            listCall.enqueue(new Callback<LogoutModel>() {\r\n                @Override\r\n                public void onResponse(Call<LogoutModel> call, Response<LogoutModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        LogoutModel loginModel = response.body();\r\n                        dialog.hide();\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                            return;\r\n                        }\r\n                        mLastClickTime = SystemClock.elapsedRealtime();\r\n                        Intent i = new Intent(getActivity(), LoginActivity.class);\r\n                        startActivity(i);\r\n                    } else {\r\n                        BWSApplication.showToast(response.message(), getActivity());\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<LogoutModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    void DeleteCall() {\r\n        if(isMediaStart){\r\n            stopMedia();\r\n            releasePlayer();\r\n        }\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGOUT, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editorcv = shared.edit();\r\n        editorcv.putString(CONSTANTS.PREF_KEY_LOGOUT_UserID, UserID);\r\n        editorcv.putString(CONSTANTS.PREF_KEY_LOGOUT_MobileNO,MobileNo);\r\n        editorcv.commit();\r\n\r\n        Log.e(\"Old UserId MobileNo\",UserID+\".....\" + MobileNo);\r\n\r\n        SharedPreferences preferences = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor edit = preferences.edit();\r\n        edit.remove(CONSTANTS.PREF_KEY_UserID);\r\n        edit.remove(CONSTANTS.PREF_KEY_MobileNo);\r\n        edit.remove(CONSTANTS.PREF_KEY_ExpDate);\r\n        edit.remove(CONSTANTS.PREF_KEY_IsLock);\r\n        edit.clear();\r\n        edit.commit();\r\n        SharedPreferences preferencesx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editx = preferencesx.edit();\r\n        editx.remove(CONSTANTS.PREF_KEY_IsRepeat);\r\n        editx.remove(CONSTANTS.PREF_KEY_IsShuffle);\r\n        editx.clear();\r\n        editx.commit();\r\n        PRDownloader.cancel(downloadIdOne);\r\n        filename = \"\";\r\n        logout = true;\r\n        SharedPreferences preferences11 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor edit1 = preferences11.edit();\r\n        edit1.remove(CONSTANTS.PREF_KEY_DownloadName);\r\n        edit1.remove(CONSTANTS.PREF_KEY_DownloadUrl);\r\n        edit1.remove(CONSTANTS.PREF_KEY_DownloadPlaylistId);\r\n        edit1.clear();\r\n        edit1.commit();\r\n        SharedPreferences shareds = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_CardID, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shareds.edit();\r\n        editor.remove(CONSTANTS.PREF_KEY_CardID);\r\n        editor.clear();\r\n        editor.commit();\r\n\r\n        SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editorr = sharedm.edit();\r\n        editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n        editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n        editorr.remove(CONSTANTS.PREF_KEY_position);\r\n        editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n        editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n        editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n        editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n        editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n        editorr.clear();\r\n        editorr.commit();\r\n    }\r\n\r\n\r\n    void profileViewData(Context ctx) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<ProfileViewModel> listCall = APIClient.getClient().getProfileView(UserID);\r\n            listCall.enqueue(new Callback<ProfileViewModel>() {\r\n                @SuppressLint(\"SetTextI18n\")\r\n                @Override\r\n                public void onResponse(Call<ProfileViewModel> call, Response<ProfileViewModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        ProfileViewModel viewModel = response.body();\r\n                        binding.tvViewProfile.setVisibility(View.VISIBLE);\r\n\r\n                        if (viewModel.getResponseData().getName().equalsIgnoreCase(\"\") ||\r\n                                viewModel.getResponseData().getName().equalsIgnoreCase(\" \") ||\r\n                                viewModel.getResponseData().getName() == null) {\r\n                            binding.tvName.setText(R.string.Guest);\r\n                        } else {\r\n                            binding.tvName.setText(viewModel.getResponseData().getName());\r\n                        }\r\n                        if(viewModel.getResponseData().getName().equalsIgnoreCase(\"\")){\r\n                            String Letter = \"G\";\r\n                            String profilePicPath = viewModel.getResponseData().getImage();\r\n                            IsLock = viewModel.getResponseData().getIsLock();\r\n                            if (profilePicPath.equalsIgnoreCase(\"\")) {\r\n                                binding.civProfile.setVisibility(View.GONE);\r\n                                binding.rlLetter.setVisibility(View.VISIBLE);\r\n                                binding.tvLetter.setText(Letter);\r\n                            } else {\r\n                                binding.civProfile.setVisibility(View.VISIBLE);\r\n                                binding.rlLetter.setVisibility(View.GONE);\r\n                                Glide.with(ctx).load(profilePicPath).thumbnail(1f).dontAnimate().into(binding.civProfile);\r\n                            }\r\n                        }else {\r\n                            String Name = viewModel.getResponseData().getName();\r\n                            String Letter = Name.substring(0, 1);\r\n                            String profilePicPath = viewModel.getResponseData().getImage();\r\n                            IsLock = viewModel.getResponseData().getIsLock();\r\n                            if (profilePicPath.equalsIgnoreCase(\"\")) {\r\n                                binding.civProfile.setVisibility(View.GONE);\r\n                                binding.rlLetter.setVisibility(View.VISIBLE);\r\n                                binding.tvLetter.setText(Letter);\r\n                            } else {\r\n                                binding.civProfile.setVisibility(View.VISIBLE);\r\n                                binding.rlLetter.setVisibility(View.GONE);\r\n                                Glide.with(ctx).load(profilePicPath).thumbnail(1f).dontAnimate().into(binding.civProfile);\r\n                            }\r\n                        }\r\n\r\n\r\n                        binding.llUserProfile.setOnClickListener(view13 -> {\r\n//                            if (viewModel.getResponseData().getPatientid().equalsIgnoreCase(\"1\")){\r\n                            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                                return;\r\n                            }\r\n                            mLastClickTime = SystemClock.elapsedRealtime();\r\n                            Intent i = new Intent(getActivity(), UserProfileActivity.class);\r\n                            startActivity(i);\r\n                           /* }else if (viewModel.getResponseData().getPatientid().equalsIgnoreCase(\"0\")) {\r\n                                final Dialog dialog = new Dialog(ctx);\r\n                                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                dialog.setContentView(R.layout.patient_popup);\r\n                                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                final RelativeLayout rlGoBack = dialog.findViewById(R.id.rlGoBack);\r\n                                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                        dialog.dismiss();\r\n                                        return true;\r\n                                    }\r\n                                    return false;\r\n                                });\r\n\r\n                                rlGoBack.setOnClickListener(v -> {\r\n                                    dialog.dismiss();\r\n                                });\r\n                                dialog.show();\r\n                                dialog.setCancelable(false);\r\n                            }*/\r\n                        });\r\n\r\n                        if (viewModel.getResponseData().getOrderTotal().equalsIgnoreCase(\"\")) {\r\n                            binding.tvCrtPlan.setText(\"Premium Team Plan one\");\r\n                        } else {\r\n                            if (viewModel.getResponseData().getPlanperiod().equalsIgnoreCase(\"\")) {\r\n                                binding.tvCrtPlan.setText(\"Current plan: \" + viewModel.getResponseData().getOrderTotal());\r\n                            } else {\r\n                                binding.tvCrtPlan.setText(\"Current plan: \" + viewModel.getResponseData().getOrderTotal() + \" / \" +\r\n                                        viewModel.getResponseData().getPlanperiod());\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<ProfileViewModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Account/AccountFragment.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Account/AccountFragment.java	(date 1604397265956)
@@ -26,6 +26,7 @@
 import androidx.fragment.app.Fragment;
 
 import com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;
+import com.brainwellnessspa.LikeModule.Activities.LikeActivity;
 import com.bumptech.glide.Glide;
 import com.downloader.PRDownloader;
 import com.google.android.gms.tasks.OnSuccessListener;
@@ -76,7 +77,7 @@
     public static int ComeScreenAccount = 0;
     public static boolean logout = false;
     FragmentAccountBinding binding;
-    String UserID,MobileNo;
+    String UserID, MobileNo;
     private long mLastClickTime = 0;
 
     @SuppressLint({"ClickableViewAccessibility", "SetTextI18n"})
@@ -110,6 +111,15 @@
             Intent i = new Intent(getActivity(), DownloadsActivity.class);
             startActivity(i);
         });
+
+        binding.llFavorites.setOnClickListener(view12 -> {
+            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {
+                return;
+            }
+            mLastClickTime = SystemClock.elapsedRealtime();
+            Intent i = new Intent(getActivity(), LikeActivity.class);
+            startActivity(i);
+        });
 
         binding.llInvoices.setOnClickListener(view14 -> {
             if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {
@@ -205,7 +215,7 @@
                             break;
                         }
                         case MotionEvent.ACTION_UP:
-                            if(isMediaStart){
+                            if (isMediaStart) {
                                 stopMedia();
                                 releasePlayer();
                             }
@@ -293,17 +303,17 @@
     }
 
     void DeleteCall() {
-        if(isMediaStart){
+        if (isMediaStart) {
             stopMedia();
             releasePlayer();
         }
         SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGOUT, Context.MODE_PRIVATE);
         SharedPreferences.Editor editorcv = shared.edit();
         editorcv.putString(CONSTANTS.PREF_KEY_LOGOUT_UserID, UserID);
-        editorcv.putString(CONSTANTS.PREF_KEY_LOGOUT_MobileNO,MobileNo);
+        editorcv.putString(CONSTANTS.PREF_KEY_LOGOUT_MobileNO, MobileNo);
         editorcv.commit();
 
-        Log.e("Old UserId MobileNo",UserID+"....." + MobileNo);
+        Log.e("Old UserId MobileNo", UserID + "....." + MobileNo);
 
         SharedPreferences preferences = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);
         SharedPreferences.Editor edit = preferences.edit();
@@ -370,7 +380,7 @@
                         } else {
                             binding.tvName.setText(viewModel.getResponseData().getName());
                         }
-                        if(viewModel.getResponseData().getName().equalsIgnoreCase("")){
+                        if (viewModel.getResponseData().getName().equalsIgnoreCase("")) {
                             String Letter = "G";
                             String profilePicPath = viewModel.getResponseData().getImage();
                             IsLock = viewModel.getResponseData().getIsLock();
@@ -383,7 +393,7 @@
                                 binding.rlLetter.setVisibility(View.GONE);
                                 Glide.with(ctx).load(profilePicPath).thumbnail(1f).dontAnimate().into(binding.civProfile);
                             }
-                        }else {
+                        } else {
                             String Name = viewModel.getResponseData().getName();
                             String Letter = Name.substring(0, 1);
                             String profilePicPath = viewModel.getResponseData().getImage();
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/PlaylistFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Playlist;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadPlaylistActivity;\r\nimport com.brainwellnessspa.databinding.MainPlaylistLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.CreatePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.FragmentPlaylistBinding;\r\nimport com.brainwellnessspa.databinding.MainAudioLayoutBinding;\r\nimport com.brainwellnessspa.databinding.PlaylistCustomLayoutBinding;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class PlaylistFragment extends Fragment {\r\n    FragmentPlaylistBinding binding;\r\n    String UserID, Check = \"\", AudioFlag;\r\n    View view;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    List<DownloadAudioDetails> playlistWiseAudioDetails = new ArrayList<>();\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_playlist, container, false);\r\n        view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        ComeScreenAccount = 0;\r\n        if (getArguments() != null) {\r\n            Check = getArguments().getString(\"Check\");\r\n        }\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvMainPlayList.setLayoutManager(manager);\r\n        binding.rvMainPlayList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        prepareData();\r\n        return view;\r\n    }\r\n\r\n    private void callMyPlaylistsFragment(String s, String id, String name, String playlistImage, String MyDownloads) {\r\n        try {\r\n            comefrom_search = 0;\r\n            Bundle bundle = new Bundle();\r\n            Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            bundle.putString(\"New\", s);\r\n            bundle.putString(\"PlaylistID\", id);\r\n            bundle.putString(\"PlaylistName\", name);\r\n            bundle.putString(\"PlaylistImage\", playlistImage);\r\n            bundle.putString(\"MyDownloads\", MyDownloads);\r\n            myPlaylistsFragment.setArguments(bundle);\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, myPlaylistsFragment)\r\n                    .commit();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        prepareData();\r\n    }\r\n\r\n    private void prepareData() {\r\n        try {\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n                } else {\r\n                    SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if(isMediaStart){\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if(isMediaStart){\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(13, 6, 13, 200);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(13, 6, 13, 0);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<MainPlayListModel> listCall = APIClient.getClient().getMainPlayLists(UserID);\r\n            listCall.enqueue(new Callback<MainPlayListModel>() {\r\n                @Override\r\n                public void onResponse(Call<MainPlayListModel> call, Response<MainPlayListModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        MainPlayListModel listModel = response.body();\r\n                        binding.rlCreatePlaylist.setVisibility(View.VISIBLE);\r\n                        downloadPlaylistDetailsList = GetPlaylistDetail(listModel.getResponseData());\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<MainPlayListModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            ArrayList<MainPlayListModel.ResponseData> responseData = new ArrayList<>();\r\n            ArrayList<MainPlayListModel.ResponseData.Detail> details = new ArrayList<>();\r\n            MainPlayListModel.ResponseData listModel = new MainPlayListModel.ResponseData();\r\n            listModel.setGetLibraryID(\"2\");\r\n            listModel.setDetails(details);\r\n            listModel.setUserID(UserID);\r\n            listModel.setView(\"My Downloads\");\r\n            listModel.setIsLock(IsLock);\r\n            responseData.add(listModel);\r\n            downloadPlaylistDetailsList = GetPlaylistDetail(responseData);\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail(ArrayList<MainPlayListModel.ResponseData> responseData) {\r\n        ArrayList<MainPlayListModel.ResponseData.Detail> details = new ArrayList<>();\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllPlaylist();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    for (int i = 0; i < downloadPlaylistDetailsList.size(); i++) {\r\n                        MainPlayListModel.ResponseData.Detail detail = new MainPlayListModel.ResponseData.Detail();\r\n                        detail.setTotalAudio(downloadPlaylistDetailsList.get(i).getTotalAudio());\r\n                        detail.setTotalhour(downloadPlaylistDetailsList.get(i).getTotalhour());\r\n                        detail.setTotalminute(downloadPlaylistDetailsList.get(i).getTotalminute());\r\n                        detail.setPlaylistID(downloadPlaylistDetailsList.get(i).getPlaylistID());\r\n                        detail.setPlaylistDesc(downloadPlaylistDetailsList.get(i).getPlaylistDesc());\r\n                        detail.setMasterCategory(downloadPlaylistDetailsList.get(i).getPlaylistMastercat());\r\n                        detail.setSubCategory(downloadPlaylistDetailsList.get(i).getPlaylistSubcat());\r\n                        detail.setPlaylistName(downloadPlaylistDetailsList.get(i).getPlaylistName());\r\n                        detail.setPlaylistImage(downloadPlaylistDetailsList.get(i).getPlaylistImage());\r\n                        detail.setPlaylistImageDetails(downloadPlaylistDetailsList.get(i).getPlaylistImageDetails());\r\n                        detail.setPlaylistId(downloadPlaylistDetailsList.get(i).getPlaylistID());\r\n                        details.add(detail);\r\n                    }\r\n                    for (int i = 0; i < responseData.size(); i++) {\r\n                        if (responseData.get(i).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                            responseData.get(i).setDetails(details);\r\n                        }\r\n                    }\r\n\r\n                    MainPlayListAdapter adapter = new MainPlayListAdapter(responseData, getActivity());\r\n                    binding.rvMainPlayList.setAdapter(adapter);\r\n                } else {\r\n                    MainPlayListAdapter adapter = new MainPlayListAdapter(responseData, getActivity());\r\n                    binding.rvMainPlayList.setAdapter(adapter);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    public class MainPlayListAdapter extends RecyclerView.Adapter<MainPlayListAdapter.MyViewHolder> {\r\n        Context ctx;\r\n        private ArrayList<MainPlayListModel.ResponseData> listModelList;\r\n\r\n        public MainPlayListAdapter(ArrayList<MainPlayListModel.ResponseData> listModelList, Context ctx) {\r\n            this.listModelList = listModelList;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MainPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.main_playlist_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            if (listModelList.get(position).getDetails() != null &&\r\n                    listModelList.get(position).getDetails().size() > 6) {\r\n                holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n            } else {\r\n                holder.binding.tvViewAll.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.tvViewAll.setOnClickListener(view -> {\r\n                Fragment viewAllPlaylistFragment = new ViewAllPlaylistFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, viewAllPlaylistFragment)\r\n                        .commit();\r\n                Bundle bundle = new Bundle();\r\n                if (listModelList.get(position).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                    bundle.putString(\"MyDownloads\", \"1\");\r\n                } else {\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                }\r\n                bundle.putString(\"GetLibraryID\", listModelList.get(position).getGetLibraryID());\r\n                bundle.putString(\"Name\", listModelList.get(position).getView());\r\n                viewAllPlaylistFragment.setArguments(bundle);\r\n            });\r\n            if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            binding.rlCreatePlaylist.setOnClickListener(view -> {\r\n                if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    binding.ivLock.setVisibility(View.GONE);\r\n                    final Dialog dialog = new Dialog(getActivity());\r\n                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                    dialog.setContentView(R.layout.create_palylist);\r\n                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                    final EditText edtCreate = dialog.findViewById(R.id.edtCreate);\r\n                    final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                    final Button btnSendCode = dialog.findViewById(R.id.btnSendCode);\r\n                    edtCreate.requestFocus();\r\n                    TextWatcher popupTextWatcher = new TextWatcher() {\r\n                        @Override\r\n                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                        }\r\n\r\n                        @Override\r\n                        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                            String number = edtCreate.getText().toString().trim();\r\n                            if (!number.isEmpty()) {\r\n                                btnSendCode.setEnabled(true);\r\n                                btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                            } else {\r\n                                btnSendCode.setEnabled(false);\r\n                                btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void afterTextChanged(Editable s) {\r\n                        }\r\n                    };\r\n\r\n\r\n                    edtCreate.addTextChangedListener(popupTextWatcher);\r\n                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                            dialog.dismiss();\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    });\r\n\r\n                    btnSendCode.setOnClickListener(view1 -> {\r\n                        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                            Call<CreatePlaylistModel> listCall = APIClient.getClient().getCreatePlaylist(UserID, edtCreate.getText().toString());\r\n                            listCall.enqueue(new Callback<CreatePlaylistModel>() {\r\n                                @Override\r\n                                public void onResponse(Call<CreatePlaylistModel> call, Response<CreatePlaylistModel> response) {\r\n                                    if (response.isSuccessful()) {\r\n                                        CreatePlaylistModel listModel = response.body();\r\n                                        if (listModel.getResponseData().getIscreated().equalsIgnoreCase(\"0\")) {\r\n                                            BWSApplication.showToast(listModel.getResponseMessage(), getActivity());\r\n                                        } else if (listModel.getResponseData().getIscreated().equalsIgnoreCase(\"1\") ||\r\n                                                listModel.getResponseData().getIscreated().equalsIgnoreCase(\"\")) {\r\n                                            callMyPlaylistsFragment(\"1\", listModel.getResponseData().getId(), listModel.getResponseData().getName(), \"\", \"0\");\r\n                                            dialog.dismiss();\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onFailure(Call<CreatePlaylistModel> call, Throwable t) {\r\n                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                                }\r\n                            });\r\n                        } else {\r\n                            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n                        }\r\n                    });\r\n\r\n                    tvCancel.setOnClickListener(v -> dialog.dismiss());\r\n                    dialog.show();\r\n                    dialog.setCancelable(false);\r\n                }\r\n            });\r\n\r\n            RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n            holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n            holder.binding.rvMainAudio.setLayoutManager(manager);\r\n\r\n            if (listModelList.get(position).getDetails().size() == 0) {\r\n                holder.binding.llMainLayout.setVisibility(View.GONE);\r\n            } else {\r\n                holder.binding.llMainLayout.setVisibility(View.VISIBLE);\r\n                holder.binding.tvTitle.setText(listModelList.get(position).getView());\r\n                if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.your_created))) {\r\n                    PlaylistAdapter adapter1 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"0\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter1);\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                    PlaylistAdapter adapter2 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"1\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter2);\r\n\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.Recommended_Playlist))) {\r\n                    PlaylistAdapter adapter3 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"0\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter3);\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.populars))) {\r\n                    PlaylistAdapter adapter4 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"0\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter4);\r\n                }\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MainPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolder(MainPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getMedia(String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                player = 1;\r\n                if (isPrepare || isMediaStart || isPause) {\r\n                    stopMedia();\r\n                }\r\n                isPause = false;\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n                isCompleteStop = false;\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                ArrayList<DownloadAudioDetails> listModelList2 = new ArrayList<>();\r\n                DownloadAudioDetails  mainPlayModel = new DownloadAudioDetails();\r\n                mainPlayModel.setID(\"0\");\r\n                mainPlayModel.setName(\"Disclaimer\");\r\n                mainPlayModel.setAudioFile(\"\");\r\n                mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                mainPlayModel.setAudiomastercat(\"\");\r\n                mainPlayModel.setAudioSubCategory(\"\");\r\n                mainPlayModel.setImageFile(\"\");\r\n                mainPlayModel.setLike(\"\");\r\n                mainPlayModel.setDownload(\"\");\r\n                mainPlayModel.setAudioDuration(\"0:48\");\r\n                listModelList2.add(mainPlayModel);\r\n                listModelList2.addAll(playlistWiseAudioDetails);\r\n\r\n                String json = gson.toJson(listModelList2);\r\n                editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"Downloadlist\");\r\n                editor.commit();\r\n                try {\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public class PlaylistAdapter extends RecyclerView.Adapter<PlaylistAdapter.MyViewHolder> {\r\n        Context ctx;\r\n        String IsLock, MyDownloads;\r\n        private ArrayList<MainPlayListModel.ResponseData.Detail> listModelList;\r\n\r\n        public PlaylistAdapter(ArrayList<MainPlayListModel.ResponseData.Detail> listModelList, Context ctx, String IsLock, String MyDownloads) {\r\n            this.listModelList = listModelList;\r\n            this.ctx = ctx;\r\n            this.IsLock = IsLock;\r\n            this.MyDownloads = MyDownloads;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            PlaylistCustomLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.playlist_custom_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.44f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n\r\n            holder.binding.tvPlaylistName.setText(listModelList.get(position).getPlaylistName());\r\n            Glide.with(ctx).load(listModelList.get(position).getPlaylistImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.rlMainLayout.setOnClickListener(view -> {\r\n                if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                        callMyPlaylistsFragment(\"0\", listModelList.get(position).getPlaylistID(), listModelList.get(position).getPlaylistName(),\r\n                                listModelList.get(position).getPlaylistImage(), MyDownloads);\r\n//                        getMedia(listModelList.get(position).getPlaylistID());\r\n                       /* Intent i = new Intent(ctx, DownloadPlaylistActivity.class);\r\n                        i.putExtra(\"New\", \"0\");\r\n                        i.putExtra(\"PlaylistID\", listModelList.get(position).getPlaylistID());\r\n                        i.putExtra(\"PlaylistName\", listModelList.get(position).getPlaylistName());\r\n                        i.putExtra(\"PlaylistImage\", listModelList.get(position).getPlaylistImage());\r\n                        i.putExtra(\"PlaylistImageDetails\", listModelList.get(position).getPlaylistImageDetails());\r\n                        i.putExtra(\"TotalAudio\", listModelList.get(position).getTotalAudio());\r\n                        i.putExtra(\"Totalhour\", listModelList.get(position).getTotalhour());\r\n                        i.putExtra(\"Totalminute\", listModelList.get(position).getTotalminute());\r\n                        i.putExtra(\"MyDownloads\", \"1\");\r\n                        ctx.startActivity(i);*/\r\n                    } else {\r\n                        callMyPlaylistsFragment(\"0\", listModelList.get(position).getPlaylistID(), listModelList.get(position).getPlaylistName(),\r\n                                listModelList.get(position).getPlaylistImage(), MyDownloads);\r\n                    }\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (6 > listModelList.size()) {\r\n                return listModelList.size();\r\n            } else {\r\n                return 6;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            PlaylistCustomLayoutBinding binding;\r\n\r\n            public MyViewHolder(PlaylistCustomLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/PlaylistFragment.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/PlaylistFragment.java	(date 1604397482442)
@@ -165,7 +165,7 @@
                     editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);
                     editorr.clear();
                     editorr.commit();
-                    if(isMediaStart){
+                    if (isMediaStart) {
                         stopMedia();
                         releasePlayer();
                     }
@@ -184,7 +184,7 @@
                 editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);
                 editorr.clear();
                 editorr.commit();
-                if(isMediaStart){
+                if (isMediaStart) {
                     stopMedia();
                     releasePlayer();
                 }
@@ -510,7 +510,7 @@
                 SharedPreferences.Editor editor = shared.edit();
                 Gson gson = new Gson();
                 ArrayList<DownloadAudioDetails> listModelList2 = new ArrayList<>();
-                DownloadAudioDetails  mainPlayModel = new DownloadAudioDetails();
+                DownloadAudioDetails mainPlayModel = new DownloadAudioDetails();
                 mainPlayModel.setID("0");
                 mainPlayModel.setName("Disclaimer");
                 mainPlayModel.setAudioFile("");
@@ -572,12 +572,18 @@
 
         @Override
         public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
-            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,
-                    1, 1, 0.44f, 0);
+
+            MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,
+                    1, 1, 0.38f, 0);
             holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());
             holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());
             holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);
 
+            MeasureRatio measureRatio1 = BWSApplication.measureRatio(getActivity(), 0,
+                    1, 1, 0.38f, 0);
+            holder.binding.rlMainLayout.getLayoutParams().height = (int) (measureRatio1.getHeight() * measureRatio1.getRatio());
+            holder.binding.rlMainLayout.getLayoutParams().width = (int) (measureRatio1.getWidthImg() * measureRatio1.getRatio());
+
             holder.binding.tvPlaylistName.setText(listModelList.get(position).getPlaylistName());
             Glide.with(ctx).load(listModelList.get(position).getPlaylistImage()).thumbnail(0.05f)
                     .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);
Index: app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DownloadModule.Activities;\r\n\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ProgressBar;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.fragment.app.FragmentStatePagerAdapter;\r\n\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DownloadModule.Fragments.AudioDownloadsFragment;\r\nimport com.brainwellnessspa.DownloadModule.Fragments.PlaylistsDownlaodsFragment;\r\nimport com.brainwellnessspa.DownloadModule.Models.DownloadlistModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityDownloadsBinding;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\nimport static com.brainwellnessspa.DownloadModule.Activities.DownloadPlaylistActivity.comeDeletePlaylist;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\n\r\npublic class DownloadsActivity extends AppCompatActivity {\r\n    ActivityDownloadsBinding binding;\r\n    ArrayList<DownloadlistModel.Audio> audioList;\r\n    ArrayList<DownloadlistModel.Playlist> playlistList;\r\n    String UserID, AudioFlag;\r\n    public static boolean ComeFrom_Playlist = false;\r\n    Context ctx;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_downloads);\r\n        ctx = DownloadsActivity.this;\r\n        ComeScreenAccount = 0;\r\n        SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared2.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            comefromDownload = \"0\";\r\n            ComeScreenAccount = 1;\r\n            finish();\r\n        });\r\n        prepareData();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        comefromDownload = \"0\";\r\n        ComeScreenAccount = 1;\r\n        finish();\r\n    }\r\n\r\n    public void prepareData() {\r\n        callMembershipMediaPlayer();\r\n/*        if (BWSApplication.isNetworkConnected(this)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<DownloadlistModel> listCall = APIClient.getClient().getDownloadlistPlaylist(UserID);\r\n            listCall.enqueue(new Callback<DownloadlistModel>() {\r\n                @Override\r\n                public void onResponse(Call<DownloadlistModel> call, Response<DownloadlistModel> response) {\r\n                    if (response.isSuccessful()) {*/\r\n//                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n\r\n        audioList = new ArrayList<>();\r\n        playlistList = new ArrayList<>();\r\n\r\n\r\n//                        audioList = listModel.getResponseData().getAudio();\r\n//                        playlistList = listModel.getResponseData().getPlaylist();\r\n        binding.viewPager.setOffscreenPageLimit(2);\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(\"Audio\"));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(\"Playlists\"));\r\n        binding.tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);\r\n\r\n        TabAdapter adapter = new TabAdapter(getSupportFragmentManager(), ctx, binding.tabLayout.getTabCount(),\r\n                UserID, binding.progressBarHolder, binding.progressBar);\r\n        binding.viewPager.setAdapter(adapter);\r\n        binding.viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(binding.tabLayout));\r\n        if (ComeFrom_Playlist) {\r\n            binding.viewPager.setCurrentItem(1);\r\n            ComeFrom_Playlist = false;\r\n        } else {\r\n            binding.viewPager.setCurrentItem(0);\r\n        }\r\n        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                binding.viewPager.setCurrentItem(tab.getPosition());\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public void prepareData1() {\r\n        callMembershipMediaPlayer();\r\n    }\r\n\r\n    private void callMembershipMediaPlayer() {\r\n        try {\r\n            SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n                } else {\r\n                    SharedPreferences sharedm = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if (isMediaStart) {\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if (isMediaStart) {\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared22 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared22.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                comefromDownload = \"1\";\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public class TabAdapter extends FragmentStatePagerAdapter {\r\n        int totalTabs;\r\n        String UserID;\r\n        FrameLayout progressBarHolder;\r\n        ProgressBar ImgV;\r\n        private Context myContext;\r\n\r\n        public TabAdapter(FragmentManager fm, Context myContext, int totalTabs, String UserID, FrameLayout progressBarHolder, ProgressBar ImgV) {\r\n            super(fm);\r\n            this.myContext = myContext;\r\n            this.totalTabs = totalTabs;\r\n            this.UserID = UserID;\r\n            this.progressBarHolder = progressBarHolder;\r\n            this.ImgV = ImgV;\r\n        }\r\n\r\n        @Override\r\n        public Fragment getItem(int position) {\r\n            switch (position) {\r\n                case 0:\r\n                    Bundle bundle = new Bundle();\r\n                    AudioDownloadsFragment audioDownloadsFragment = new AudioDownloadsFragment();\r\n                    bundle.putString(\"UserID\", UserID);\r\n//                    bundle.putParcelableArrayList(\"audioDownloadsFragment\", audioList);\r\n                    audioDownloadsFragment.setArguments(bundle);\r\n                    return audioDownloadsFragment;\r\n                case 1:\r\n                    bundle = new Bundle();\r\n                    PlaylistsDownlaodsFragment playlistsDownlaodsFragment = new PlaylistsDownlaodsFragment();\r\n                    bundle.putString(\"UserID\", UserID);\r\n//                    bundle.putParcelableArrayList(\"playlistsDownlaodsFragment\", playlistList);\r\n                    playlistsDownlaodsFragment.setArguments(bundle);\r\n                    return playlistsDownlaodsFragment;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getCount() {\r\n            return totalTabs;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        prepareData1();\r\n        if (comeDeletePlaylist == 1) {\r\n            prepareData1();\r\n            comeDeletePlaylist = 0;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadsActivity.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadsActivity.java	(date 1604397266003)
@@ -88,7 +88,7 @@
 //                        audioList = listModel.getResponseData().getAudio();
 //                        playlistList = listModel.getResponseData().getPlaylist();
         binding.viewPager.setOffscreenPageLimit(2);
-        binding.tabLayout.addTab(binding.tabLayout.newTab().setText("Audio"));
+        binding.tabLayout.addTab(binding.tabLayout.newTab().setText("Audios"));
         binding.tabLayout.addTab(binding.tabLayout.newTab().setText("Playlists"));
         binding.tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);
 
Index: app/src/main/res/layout/activity_my_playlist.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n    <RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/dark_blue_gray\">\r\n\r\n        <androidx.core.widget.NestedScrollView\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:overScrollMode=\"never\">\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                android:layout_marginBottom=\"@dimen/_26sdp\"\r\n                android:orientation=\"vertical\">\r\n\r\n                <RelativeLayout\r\n                    android:id=\"@+id/rlLayout\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"@dimen/_56sdp\">\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llBack\"\r\n                        android:layout_width=\"42dp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_centerVertical=\"true\"\r\n                        android:gravity=\"center\">\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:src=\"@drawable/ic_close_white_icon\"\r\n                            app:tint=\"@color/white\" />\r\n\r\n                    </LinearLayout>\r\n\r\n                </RelativeLayout>\r\n\r\n                <androidx.cardview.widget.CardView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_gravity=\"center_horizontal\"\r\n                    android:layout_marginTop=\"@dimen/_26sdp\"\r\n                    app:cardCornerRadius=\"@dimen/_10sdp\">\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ivRestaurantImage\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\" />\r\n                </androidx.cardview.widget.CardView>\r\n\r\n                <TextView\r\n                    android:id=\"@+id/tvName\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_26sdp\"\r\n                    android:ellipsize=\"end\"\r\n                    android:fontFamily=\"@font/montserrat_medium\"\r\n                    android:gravity=\"center\"\r\n                    android:textColor=\"@color/white\"\r\n                    android:textSize=\"@dimen/_22sdp\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/tvDesc\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_6sdp\"\r\n                    android:ellipsize=\"end\"\r\n                    android:fontFamily=\"@font/montserrat_regular\"\r\n                    android:gravity=\"center\"\r\n                    android:maxLines=\"1\"\r\n                    android:textColor=\"#838383\"\r\n                    android:textSize=\"@dimen/_13sdp\"\r\n                    android:visibility=\"gone\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/tvTime\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_6sdp\"\r\n                    android:ellipsize=\"end\"\r\n                    android:fontFamily=\"@font/montserrat_regular\"\r\n                    android:gravity=\"center\"\r\n                    android:textColor=\"#838383\"\r\n                    android:textSize=\"@dimen/_13sdp\" />\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llOptions\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:orientation=\"vertical\"\r\n                    android:visibility=\"visible\">\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvTitleDec\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:layout_marginTop=\"@dimen/_20sdp\"\r\n                        android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                        android:gravity=\"start\"\r\n                        android:text=\"@string/Description\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_16sdp\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                    <RelativeLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\">\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvSubDec\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                            android:layout_marginTop=\"@dimen/_10sdp\"\r\n                            android:fontFamily=\"@font/montserrat_regular\"\r\n                            android:gravity=\"start\"\r\n                            android:justificationMode=\"inter_word\"\r\n                            android:lineSpacingExtra=\"@dimen/_4sdp\"\r\n                            android:maxLines=\"3\"\r\n                            android:textColor=\"@color/white\"\r\n                            android:textSize=\"@dimen/_13sdp\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvReadMore\"\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_below=\"@id/tvSubDec\"\r\n                            android:layout_alignParentLeft=\"true\"\r\n                            android:layout_alignParentBottom=\"true\"\r\n                            android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                            android:layout_marginTop=\"@dimen/_2sdp\"\r\n                            android:text=\"Read More...\"\r\n                            android:textColor=\"#F89552\"\r\n                            android:visibility=\"gone\" />\r\n                    </RelativeLayout>\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvDire\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:layout_marginTop=\"@dimen/_20sdp\"\r\n                        android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                        android:gravity=\"start\"\r\n                        android:text=\"@string/Directions\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_16sdp\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvSubDire\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:layout_marginTop=\"@dimen/_10sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"start\"\r\n                        android:justificationMode=\"inter_word\"\r\n                        android:lineSpacingExtra=\"@dimen/_4sdp\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_13sdp\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                    <androidx.recyclerview.widget.RecyclerView\r\n                        android:id=\"@+id/rvDirlist\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:overScrollMode=\"never\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llRename\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"@dimen/_56sdp\"\r\n                        android:layout_height=\"@dimen/_50sdp\"\r\n                        android:padding=\"@dimen/_15sdp\"\r\n                        android:src=\"@drawable/ic_edit_number_icon\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvRename\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"left\"\r\n                        android:text=\"@string/Rename_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llFind\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"@dimen/_56sdp\"\r\n                        android:layout_height=\"@dimen/_50sdp\"\r\n                        android:padding=\"@dimen/_15sdp\"\r\n                        android:src=\"@drawable/ic_search_icon\"\r\n                        app:tint=\"@color/white\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvFind\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"left\"\r\n                        android:text=\"@string/Find_in_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llDelete\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"@dimen/_56sdp\"\r\n                        android:layout_height=\"@dimen/_50sdp\"\r\n                        android:padding=\"@dimen/_18sdp\"\r\n                        android:src=\"@drawable/ic_close_white_icon\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvDelete\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"left\"\r\n                        android:text=\"@string/Delete_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llDownload\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <RelativeLayout\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\">\r\n\r\n                        <ProgressBar\r\n                            android:id=\"@+id/pbProgress\"\r\n                            style=\"?android:attr/progressBarStyleHorizontal\"\r\n                            android:layout_width=\"@dimen/_55sdp\"\r\n                            android:layout_height=\"@dimen/_55sdp\"\r\n                            android:layout_centerInParent=\"true\"\r\n                            android:background=\"@drawable/circular_shapesm\"\r\n                            android:indeterminate=\"false\"\r\n                            android:indeterminateTint=\"@color/dark_yellow\"\r\n                            android:max=\"100\"\r\n                            android:progress=\"50\"\r\n                            android:progressDrawable=\"@drawable/circular_progress_barsm\"\r\n                            android:visibility=\"gone\" />\r\n\r\n                        <ImageView\r\n                            android:id=\"@+id/ivDownloads\"\r\n                            android:layout_width=\"@dimen/_56sdp\"\r\n                            android:layout_height=\"@dimen/_50sdp\"\r\n                            android:padding=\"@dimen/_15sdp\"\r\n                            android:src=\"@drawable/ic_download_white_icon\" />\r\n                    </RelativeLayout>\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvDownload\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"left\"\r\n                        android:text=\"@string/Download_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llAddPlaylist\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ivAddPlaylist\"\r\n                        android:layout_width=\"@dimen/_56sdp\"\r\n                        android:layout_height=\"@dimen/_50sdp\"\r\n                        android:padding=\"@dimen/_15sdp\"\r\n                        android:src=\"@drawable/ic_playlist_white_icon\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvAddPlaylist\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"start\"\r\n                        android:text=\"@string/Add_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n            </LinearLayout>\r\n        </androidx.core.widget.NestedScrollView>\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:gravity=\"center\"\r\n            android:padding=\"@dimen/_60sdp\">\r\n\r\n            <ProgressBar\r\n                android:id=\"@+id/progressBar\"\r\n                android:layout_width=\"@dimen/_50sdp\"\r\n                android:layout_height=\"@dimen/_50sdp\"\r\n                android:indeterminateTint=\"@color/blue\"\r\n                android:scaleType=\"centerInside\"\r\n                android:visibility=\"gone\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <FrameLayout\r\n            android:id=\"@+id/progressBarHolder\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:alpha=\"0.4\"\r\n            android:animateLayoutChanges=\"true\"\r\n            android:background=\"#C0000000\"\r\n            android:visibility=\"gone\" />\r\n    </RelativeLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_my_playlist.xml	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/res/layout/activity_my_playlist.xml	(date 1604408785323)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <layout>
+
     <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
         xmlns:app="http://schemas.android.com/apk/res-auto"
         android:layout_width="match_parent"
@@ -174,6 +175,33 @@
                         android:overScrollMode="never" />
                 </LinearLayout>
 
+                <LinearLayout
+                    android:id="@+id/llLikes"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/_13sdp"
+                    android:gravity="center_vertical"
+                    android:visibility="gone">
+
+                    <ImageView
+                        android:id="@+id/ivLike"
+                        android:layout_width="@dimen/_56sdp"
+                        android:layout_height="@dimen/_50sdp"
+                        android:padding="@dimen/_15sdp"
+                        android:src="@drawable/ic_edit_number_icon" />
+
+                    <TextView
+                        android:id="@+id/tvLikes"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginLeft="@dimen/_4sdp"
+                        android:fontFamily="@font/montserrat_regular"
+                        android:gravity="left"
+                        android:text="@string/Rename_playlist"
+                        android:textColor="@color/white"
+                        android:textSize="@dimen/_15sdp" />
+                </LinearLayout>
+
                 <LinearLayout
                     android:id="@+id/llRename"
                     android:layout_width="match_parent"
@@ -186,7 +214,8 @@
                         android:layout_width="@dimen/_56sdp"
                         android:layout_height="@dimen/_50sdp"
                         android:padding="@dimen/_15sdp"
-                        android:src="@drawable/ic_edit_number_icon" />
+                        android:src="@drawable/ic_edit_number_icon"
+                        app:tint="@color/white" />
 
                     <TextView
                         android:id="@+id/tvRename"
Index: app/src/main/java/com/brainwellnessspa/LikeModule/Activities/LikeActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LikeModule/Activities/LikeActivity.java	(date 1604397265587)
+++ app/src/main/java/com/brainwellnessspa/LikeModule/Activities/LikeActivity.java	(date 1604397265587)
@@ -0,0 +1,113 @@
+package com.brainwellnessspa.LikeModule.Activities;
+
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.databinding.DataBindingUtil;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentManager;
+import androidx.fragment.app.FragmentStatePagerAdapter;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Bundle;
+import android.view.View;
+
+import com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity;
+import com.brainwellnessspa.LikeModule.Fragments.LikeAudiosFragment;
+import com.brainwellnessspa.LikeModule.Fragments.LikePlaylistsFragment;
+import com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;
+import com.brainwellnessspa.R;
+import com.brainwellnessspa.databinding.ActivityLikeBinding;
+import com.google.android.material.tabs.TabLayout;
+
+import retrofit2.Callback;
+
+public class LikeActivity extends AppCompatActivity {
+    ActivityLikeBinding binding;
+    Activity activity;
+    Context ctx;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        binding = DataBindingUtil.setContentView(this, R.layout.activity_like);
+        activity = LikeActivity.this;
+        ctx = LikeActivity.this;
+        binding.llBack.setOnClickListener(view -> finish());
+
+        prepareData();
+    }
+
+    public void prepareData() {
+        binding.viewPager.setOffscreenPageLimit(2);
+        binding.tabLayout.addTab(binding.tabLayout.newTab().setText("Audios"));
+        binding.tabLayout.addTab(binding.tabLayout.newTab().setText("Playlists"));
+        binding.tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);
+
+        TabAdapter adapter = new TabAdapter(getSupportFragmentManager(), ctx, binding.tabLayout.getTabCount());
+        binding.viewPager.setAdapter(adapter);
+        binding.viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(binding.tabLayout));
+
+        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
+            @Override
+            public void onTabSelected(TabLayout.Tab tab) {
+                binding.viewPager.setCurrentItem(tab.getPosition());
+            }
+
+            @Override
+            public void onTabUnselected(TabLayout.Tab tab) {
+
+            }
+
+            @Override
+            public void onTabReselected(TabLayout.Tab tab) {
+
+            }
+        });
+    }
+
+    @Override
+    public void onBackPressed() {
+        finish();
+    }
+
+    public class TabAdapter extends FragmentStatePagerAdapter {
+        int totalTabs;
+        private Context myContext;
+        Callback<LikesHistoryModel> likesHistoryModelCallback;
+
+        public TabAdapter(FragmentManager fm, Context myContext, int totalTabs) {
+            super(fm);
+            this.myContext = myContext;
+            this.totalTabs = totalTabs;
+        }
+
+        public TabAdapter(FragmentManager fm, Callback<LikesHistoryModel> likesHistoryModelCallback, int totalTabs) {
+            super(fm);
+            this.likesHistoryModelCallback = likesHistoryModelCallback;
+            this.totalTabs = totalTabs;
+        }
+
+        @Override
+        public Fragment getItem(int position) {
+            switch (position) {
+                case 0:
+                    LikeAudiosFragment likeAudiosFragment = new LikeAudiosFragment();
+                    Bundle bundle = new Bundle();
+                    likeAudiosFragment.setArguments(bundle);
+                    return likeAudiosFragment;
+                case 1:
+                    LikePlaylistsFragment likePlaylistsFragment = new LikePlaylistsFragment();
+                    bundle = new Bundle();
+                    likePlaylistsFragment.setArguments(bundle);
+                    return likePlaylistsFragment;
+                default:
+                    return null;
+            }
+        }
+
+        @Override
+        public int getCount() {
+            return totalTabs;
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/activity_like.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_like.xml	(date 1604397265744)
+++ app/src/main/res/layout/activity_like.xml	(date 1604397265744)
@@ -0,0 +1,110 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout>
+
+    <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:id="@+id/flContainer"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:background="@color/white"
+        tools:context=".LikeModule.Activities.LikeActivity">
+
+
+        <RelativeLayout
+            android:id="@+id/rlMainLayout"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
+
+            <RelativeLayout
+                android:id="@+id/rlLayout"
+                android:layout_width="match_parent"
+                android:layout_height="@dimen/_56sdp">
+
+                <LinearLayout
+                    android:id="@+id/llBack"
+                    android:layout_width="42dp"
+                    android:layout_height="match_parent"
+                    android:layout_centerVertical="true"
+                    android:gravity="center">
+
+                    <ImageView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:src="@drawable/ic_left_arrow_icon"
+                        app:tint="@color/black" />
+
+                </LinearLayout>
+
+                <TextView
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_centerVertical="true"
+                    android:fontFamily="@font/montserrat_bold"
+                    android:gravity="center"
+                    android:text="@string/Favorites"
+                    android:textColor="@color/black"
+                    android:textSize="@dimen/_15sdp" />
+
+            </RelativeLayout>
+
+            <RelativeLayout
+                android:id="@+id/rlTabs"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_below="@+id/rlLayout"
+                android:elevation="@dimen/_2sdp"
+                app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+                app:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar">
+
+                <com.google.android.material.tabs.TabLayout
+                    android:id="@+id/tabLayout"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    app:layout_constraintLeft_toLeftOf="parent"
+                    app:layout_constraintRight_toRightOf="parent"
+                    app:tabBackground="@color/white"
+                    app:tabGravity="fill"
+                    app:tabIndicatorColor="@color/blue"
+                    app:tabIndicatorHeight="@dimen/_2sdp"
+                    app:tabMode="fixed"
+                    app:tabSelectedTextColor="@color/blue"
+                    app:tabTextAppearance="@style/TabLayoutTextStyle"
+                    app:tabTextColor="@color/black" />
+
+            </RelativeLayout>
+
+        </RelativeLayout>
+
+        <androidx.viewpager.widget.ViewPager
+            android:id="@+id/viewPager"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_below="@id/rlMainLayout" />
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:gravity="center"
+            android:padding="@dimen/_60sdp">
+
+            <ProgressBar
+                android:id="@+id/progressBar"
+                android:layout_width="@dimen/_50sdp"
+                android:layout_height="@dimen/_50sdp"
+                android:indeterminateTint="@color/blue"
+                android:scaleType="centerInside"
+                android:visibility="gone" />
+
+        </LinearLayout>
+
+        <FrameLayout
+            android:id="@+id/progressBarHolder"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:alpha="0.4"
+            android:animateLayoutChanges="true"
+            android:background="#C0000000"
+            android:visibility="gone" />
+    </RelativeLayout>
+</layout>
\ No newline at end of file
Index: app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikeAudiosFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikeAudiosFragment.java	(date 1604408460084)
+++ app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikeAudiosFragment.java	(date 1604408460084)
@@ -0,0 +1,207 @@
+package com.brainwellnessspa.LikeModule.Fragments;
+
+import android.app.Dialog;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.graphics.drawable.ColorDrawable;
+import android.os.Bundle;
+
+import androidx.annotation.NonNull;
+import androidx.databinding.DataBindingUtil;
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentManager;
+import androidx.recyclerview.widget.DefaultItemAnimator;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.Window;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.brainwellnessspa.BWSApplication;
+import com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;
+import com.brainwellnessspa.InvoiceModule.Activities.InvoiceActivity;
+import com.brainwellnessspa.InvoiceModule.Fragments.InvoiceReceiptFragment;
+import com.brainwellnessspa.InvoiceModule.Fragments.MembershipInvoiceFragment;
+import com.brainwellnessspa.InvoiceModule.Models.InvoiceListModel;
+import com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;
+import com.brainwellnessspa.R;
+import com.brainwellnessspa.Utility.APIClient;
+import com.brainwellnessspa.Utility.CONSTANTS;
+import com.brainwellnessspa.Utility.MeasureRatio;
+import com.brainwellnessspa.databinding.FragmentLikesBinding;
+import com.brainwellnessspa.databinding.InvoiceListLayoutBinding;
+import com.brainwellnessspa.databinding.LikeListLayoutBinding;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+import com.downloader.PRDownloader;
+import com.google.android.material.tabs.TabLayout;
+import com.google.gson.Gson;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+import static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadIdOne;
+import static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadProgress;
+import static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;
+
+public class LikeAudiosFragment extends Fragment {
+    FragmentLikesBinding binding;
+    String UserID;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_likes, container, false);
+        View view = binding.getRoot();
+        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);
+        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, ""));
+        prepareData();
+        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getActivity());
+        binding.rvLikesList.setLayoutManager(mLayoutManager);
+        binding.rvLikesList.setItemAnimator(new DefaultItemAnimator());
+        binding.llError.setVisibility(View.GONE);
+        binding.tvFound.setText("No result found");
+        return view;
+    }
+
+    public void prepareData() {
+        if (BWSApplication.isNetworkConnected(getActivity())) {
+            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
+            Call<LikesHistoryModel> listCall = APIClient.getClient().getLikeAudioPlaylistListing(UserID);
+            listCall.enqueue(new Callback<LikesHistoryModel>() {
+                @Override
+                public void onResponse(Call<LikesHistoryModel> call, Response<LikesHistoryModel> response) {
+                    if (response.isSuccessful()) {
+                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
+                        LikesHistoryModel listModel = response.body();
+                        List<LikesHistoryModel.ResponseData.Audio> listDataModel = listModel.getResponseData().getAudio();
+                        if (listDataModel.size() == 0) {
+                            binding.tvFound.setVisibility(View.VISIBLE);
+                            binding.llError.setVisibility(View.VISIBLE);
+                        } else {
+                            binding.llError.setVisibility(View.GONE);
+                            LikeAudiosAdapter adapter = new LikeAudiosAdapter(listModel.getResponseData().getAudio(), getActivity());
+                            binding.rvLikesList.setAdapter(adapter);
+                        }
+                    }
+                }
+
+                @Override
+                public void onFailure(Call<LikesHistoryModel> call, Throwable t) {
+                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
+                }
+            });
+        } else {
+            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());
+        }
+    }
+
+    public class LikeAudiosAdapter extends RecyclerView.Adapter<LikeAudiosAdapter.MyViewHolder> {
+        private List<LikesHistoryModel.ResponseData.Audio> modelList;
+        Context ctx;
+
+        public LikeAudiosAdapter(List<LikesHistoryModel.ResponseData.Audio> modelList, Context ctx) {
+            this.modelList = modelList;
+            this.ctx = ctx;
+        }
+
+        @NonNull
+        @Override
+        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+            LikeListLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.like_list_layout, parent, false);
+            return new MyViewHolder(v);
+        }
+
+        @Override
+        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
+            holder.binding.tvTitle.setText(modelList.get(position).getName());
+            holder.binding.tvTime.setText(modelList.get(position).getAudioDuration());
+            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,
+                    1, 1, 0.12f, 0);
+            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());
+            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());
+            Glide.with(ctx).load(modelList.get(position).getImageFile()).thumbnail(0.05f)
+                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);
+            holder.binding.llRemoveAudio.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    final Dialog dialog = new Dialog(ctx);
+                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
+                    dialog.setContentView(R.layout.logout_layout);
+                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));
+                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+
+                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);
+                    final TextView tvHeader = dialog.findViewById(R.id.tvHeader);
+                    final TextView tvTitle = dialog.findViewById(R.id.tvTitle);
+                    final Button Btn = dialog.findViewById(R.id.Btn);
+                    tvTitle.setText("Remove from Liked Audios?");
+                    tvHeader.setText(modelList.get(position).getName());
+                    Btn.setText("Remove");
+                    tvGoBack.setText("Cancel");
+                    dialog.setOnKeyListener((v1, keyCode, event) -> {
+                        if (keyCode == KeyEvent.KEYCODE_BACK) {
+                            dialog.dismiss();
+                        }
+                        return false;
+                    });
+
+                    Btn.setOnClickListener(v4 -> {
+                        callRemoveLike(modelList.get(position).getID());
+                        dialog.dismiss();
+                    });
+                    tvGoBack.setOnClickListener(v3 -> dialog.dismiss());
+                    dialog.show();
+                    dialog.setCancelable(false);
+                }
+            });
+        }
+
+        @Override
+        public int getItemCount() {
+            return modelList.size();
+        }
+
+        public class MyViewHolder extends RecyclerView.ViewHolder {
+            LikeListLayoutBinding binding;
+
+            public MyViewHolder(LikeListLayoutBinding binding) {
+                super(binding.getRoot());
+                this.binding = binding;
+            }
+        }
+    }
+
+    private void callRemoveLike(String id) {
+        if (BWSApplication.isNetworkConnected(getActivity())) {
+            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
+            Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(id, UserID);
+            listCall.enqueue(new Callback<AudioLikeModel>() {
+                @Override
+                public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {
+                    if (response.isSuccessful()) {
+                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
+                        AudioLikeModel model = response.body();
+                        BWSApplication.showToast(model.getResponseMessage(), getActivity());
+                        prepareData();
+                    }
+                }
+
+                @Override
+                public void onFailure(Call<AudioLikeModel> call, Throwable t) {
+                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
+                }
+            });
+        } else {
+            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikePlaylistsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikePlaylistsFragment.java	(date 1604408460142)
+++ app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikePlaylistsFragment.java	(date 1604408460142)
@@ -0,0 +1,210 @@
+package com.brainwellnessspa.LikeModule.Fragments;
+
+import android.app.Dialog;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.graphics.drawable.ColorDrawable;
+import android.os.Bundle;
+
+import androidx.annotation.NonNull;
+import androidx.databinding.DataBindingUtil;
+import androidx.fragment.app.Fragment;
+import androidx.recyclerview.widget.DefaultItemAnimator;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.Window;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.brainwellnessspa.BWSApplication;
+import com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;
+import com.brainwellnessspa.InvoiceModule.Models.InvoiceListModel;
+import com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;
+import com.brainwellnessspa.R;
+import com.brainwellnessspa.Utility.APIClient;
+import com.brainwellnessspa.Utility.CONSTANTS;
+import com.brainwellnessspa.Utility.MeasureRatio;
+import com.brainwellnessspa.databinding.FragmentLikesBinding;
+import com.brainwellnessspa.databinding.LikeListLayoutBinding;
+import com.bumptech.glide.Glide;
+import com.bumptech.glide.load.engine.DiskCacheStrategy;
+
+import java.util.List;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+public class LikePlaylistsFragment extends Fragment {
+    FragmentLikesBinding binding;
+    String UserID;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_likes, container, false);
+        View view = binding.getRoot();
+        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);
+        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, ""));
+        prepareData();
+
+        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getActivity());
+        binding.rvLikesList.setLayoutManager(mLayoutManager);
+        binding.rvLikesList.setItemAnimator(new DefaultItemAnimator());
+        binding.llError.setVisibility(View.GONE);
+        binding.tvFound.setText("No result found");
+        return view;
+    }
+
+    public void prepareData() {
+        if (BWSApplication.isNetworkConnected(getActivity())) {
+            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
+            Call<LikesHistoryModel> listCall = APIClient.getClient().getLikeAudioPlaylistListing(UserID);
+            listCall.enqueue(new Callback<LikesHistoryModel>() {
+                @Override
+                public void onResponse(Call<LikesHistoryModel> call, Response<LikesHistoryModel> response) {
+                    if (response.isSuccessful()) {
+                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
+                        LikesHistoryModel listModel = response.body();
+                        List<LikesHistoryModel.ResponseData.Playlist> listDataModel = listModel.getResponseData().getPlaylist();
+                        if (listDataModel.size() == 0) {
+                            binding.tvFound.setVisibility(View.VISIBLE);
+                            binding.llError.setVisibility(View.VISIBLE);
+                        } else {
+                            binding.llError.setVisibility(View.GONE);
+                            LikePlaylistsAdapter adapter = new LikePlaylistsAdapter(listModel.getResponseData().getPlaylist(), getActivity());
+                            binding.rvLikesList.setAdapter(adapter);
+                        }
+                    }
+                }
+
+                @Override
+                public void onFailure(Call<LikesHistoryModel> call, Throwable t) {
+                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
+                }
+            });
+        } else {
+            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());
+        }
+    }
+
+    public class LikePlaylistsAdapter extends RecyclerView.Adapter<LikePlaylistsAdapter.MyViewHolder> {
+        private List<LikesHistoryModel.ResponseData.Playlist> modelList;
+        Context ctx;
+
+        public LikePlaylistsAdapter(List<LikesHistoryModel.ResponseData.Playlist> modelList, Context ctx) {
+            this.modelList = modelList;
+            this.ctx = ctx;
+        }
+
+        @NonNull
+        @Override
+        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+            LikeListLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.like_list_layout, parent, false);
+            return new MyViewHolder(v);
+        }
+
+        @Override
+        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
+            holder.binding.tvTitle.setText(modelList.get(position).getPlaylistName());
+            if (modelList.get(position).getTotalAudio().equalsIgnoreCase("") ||
+                    modelList.get(position).getTotalAudio().equalsIgnoreCase("0") &&
+                            modelList.get(position).getTotalhour().equalsIgnoreCase("")
+                            && modelList.get(position).getTotalminute().equalsIgnoreCase("")) {
+                holder.binding.tvTime.setText("0 Audio | 0h 0m");
+            } else {
+                if (modelList.get(position).getTotalminute().equalsIgnoreCase("")) {
+                    holder.binding.tvTime.setText(modelList.get(position).getTotalAudio() + " Audio | "
+                            + modelList.get(position).getTotalhour() + "h 0m");
+                } else {
+                    holder.binding.tvTime.setText(modelList.get(position).getTotalAudio() +
+                            " Audios | " + modelList.get(position).getTotalhour() + "h " + modelList.get(position).getTotalminute() + "m");
+                }
+            }
+            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,
+                    1, 1, 0.12f, 0);
+            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());
+            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());
+            Glide.with(ctx).load(modelList.get(position).getPlaylistImage()).thumbnail(0.05f)
+                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);
+
+            holder.binding.llRemoveAudio.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Dialog dialog = new Dialog(ctx);
+                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
+                    dialog.setContentView(R.layout.logout_layout);
+                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));
+                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+
+                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);
+                    final TextView tvHeader = dialog.findViewById(R.id.tvHeader);
+                    final TextView tvTitle = dialog.findViewById(R.id.tvTitle);
+                    final Button Btn = dialog.findViewById(R.id.Btn);
+                    tvTitle.setText("Remove from Liked Playlists?");
+                    tvHeader.setText(modelList.get(position).getPlaylistName());
+                    Btn.setText("Remove");
+                    tvGoBack.setText("Cancel");
+                    dialog.setOnKeyListener((v1, keyCode, event) -> {
+                        if (keyCode == KeyEvent.KEYCODE_BACK) {
+                            dialog.dismiss();
+                        }
+                        return false;
+                    });
+
+                    Btn.setOnClickListener(v2 -> {
+//                        callRemoveLike(modelList.get(position).getPlaylistId());
+                        dialog.dismiss();
+                    });
+                    tvGoBack.setOnClickListener(v3 -> dialog.dismiss());
+                    dialog.show();
+                    dialog.setCancelable(false);
+                }
+            });
+
+        }
+
+        @Override
+        public int getItemCount() {
+            return modelList.size();
+        }
+
+        public class MyViewHolder extends RecyclerView.ViewHolder {
+            LikeListLayoutBinding binding;
+
+            public MyViewHolder(LikeListLayoutBinding binding) {
+                super(binding.getRoot());
+                this.binding = binding;
+            }
+        }
+    }
+    private void callRemoveLike(String id) {
+        if (BWSApplication.isNetworkConnected(getActivity())) {
+            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
+            Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(id, UserID);
+            listCall.enqueue(new Callback<AudioLikeModel>() {
+                @Override
+                public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {
+                    if (response.isSuccessful()) {
+                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
+                        AudioLikeModel model = response.body();
+                        BWSApplication.showToast(model.getResponseMessage(), getActivity());
+                        prepareData();
+                    }
+                }
+
+                @Override
+                public void onFailure(Call<AudioLikeModel> call, Throwable t) {
+                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
+                }
+            });
+        } else {
+            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/res/layout/like_list_layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/like_list_layout.xml	(date 1604408131552)
+++ app/src/main/res/layout/like_list_layout.xml	(date 1604408131552)
@@ -0,0 +1,139 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout>
+
+    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        android:id="@+id/llMainLayout"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:gravity="center_vertical"
+        android:orientation="horizontal"
+        android:weightSum="1">
+
+        <LinearLayout
+            android:layout_width="@dimen/_0sdp"
+            android:layout_height="match_parent"
+            android:layout_gravity="center"
+            android:layout_weight="0.2"
+            android:gravity="center"
+            android:padding="@dimen/_6sdp">
+
+            <androidx.cardview.widget.CardView
+                android:id="@+id/cvImage"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:layout_marginHorizontal="@dimen/_8sdp"
+                android:layout_marginVertical="@dimen/_4sdp"
+                app:cardCornerRadius="@dimen/_10sdp">
+
+                <RelativeLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent">
+
+
+                    <androidx.constraintlayout.widget.ConstraintLayout
+                        android:id="@+id/title_layout"
+                        android:layout_width="match_parent"
+                        android:layout_height="match_parent">
+
+                        <ImageView
+                            android:id="@+id/ivRestaurantImage"
+                            android:layout_width="match_parent"
+                            android:layout_height="match_parent"
+                            android:layout_marginHorizontal="-3dp"
+                            android:scaleType="fitXY"
+                            app:layout_constraintDimensionRatio="1:1"
+                            app:layout_constraintLeft_toLeftOf="parent"
+                            app:layout_constraintRight_toRightOf="parent"
+                            app:layout_constraintTop_toTopOf="parent" />
+
+                    </androidx.constraintlayout.widget.ConstraintLayout>
+                </RelativeLayout>
+
+                <ImageView
+                    android:id="@+id/ivBackgroundImage"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_centerInParent="true"
+                    android:scaleType="fitXY"
+                    android:visibility="gone" />
+
+                <ImageView
+                    android:id="@+id/ivLock"
+                    android:layout_width="@dimen/_26sdp"
+                    android:layout_height="@dimen/_26sdp"
+                    android:layout_centerInParent="true"
+                    android:layout_gravity="center"
+                    android:scaleType="fitXY"
+                    android:src="@drawable/ic_lock_icon"
+                    android:visibility="gone" />
+
+            </androidx.cardview.widget.CardView>
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:layout_width="@dimen/_0sdp"
+            android:layout_height="match_parent"
+            android:layout_weight="0.53"
+            android:gravity="center_vertical"
+            android:orientation="vertical">
+
+            <TextView
+                android:id="@+id/tvTitle"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="@dimen/_2sdp"
+                android:ellipsize="end"
+                android:fontFamily="@font/montserrat_medium"
+                android:gravity="start"
+                android:maxLines="1"
+                android:textColor="@color/black"
+                android:textSize="@dimen/_14sdp" />
+
+            <TextView
+                android:id="@+id/tvTime"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="@dimen/_6sdp"
+                android:fontFamily="@font/montserrat_medium"
+                android:gravity="start"
+                android:textColor="@color/extra_light_gray"
+                android:textSize="@dimen/_14sdp" />
+        </LinearLayout>
+
+        <LinearLayout
+            android:id="@+id/llLikes"
+            android:layout_width="@dimen/_0sdp"
+            android:layout_height="match_parent"
+            android:layout_gravity="center"
+            android:layout_weight="0.12"
+            android:gravity="center">
+
+            <ImageView
+                android:id="@+id/ivLikes"
+                android:layout_width="@dimen/_40sdp"
+                android:layout_height="@dimen/_40sdp"
+                android:padding="@dimen/_9sdp"
+                android:src="@drawable/ic_fill_like_icon" />
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:id="@+id/llRemoveAudio"
+            android:layout_width="@dimen/_0sdp"
+            android:layout_height="match_parent"
+            android:layout_gravity="center"
+            android:layout_weight="0.14"
+            android:gravity="center">
+
+            <ImageView
+                android:id="@+id/ivIcon"
+                android:layout_width="@dimen/_40sdp"
+                android:layout_height="@dimen/_40sdp"
+                android:padding="@dimen/_9sdp"
+                android:src="@drawable/remove_icon" />
+
+        </LinearLayout>
+    </LinearLayout>
+</layout>
\ No newline at end of file
Index: app/src/main/java/com/brainwellnessspa/LikeModule/Models/LikesHistoryModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LikeModule/Models/LikesHistoryModel.java	(date 1604397265772)
+++ app/src/main/java/com/brainwellnessspa/LikeModule/Models/LikesHistoryModel.java	(date 1604397265772)
@@ -0,0 +1,318 @@
+package com.brainwellnessspa.LikeModule.Models;
+
+import android.os.Parcelable;
+
+import com.brainwellnessspa.InvoiceModule.Models.InvoiceListModel;
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.util.List;
+
+public class LikesHistoryModel {
+    @SerializedName("ResponseData")
+    @Expose
+    private ResponseData responseData;
+    @SerializedName("ResponseCode")
+    @Expose
+    private String responseCode;
+    @SerializedName("ResponseMessage")
+    @Expose
+    private String responseMessage;
+    @SerializedName("ResponseStatus")
+    @Expose
+    private String responseStatus;
+
+    public ResponseData getResponseData() {
+        return responseData;
+    }
+
+    public void setResponseData(ResponseData responseData) {
+        this.responseData = responseData;
+    }
+
+    public String getResponseCode() {
+        return responseCode;
+    }
+
+    public void setResponseCode(String responseCode) {
+        this.responseCode = responseCode;
+    }
+
+    public String getResponseMessage() {
+        return responseMessage;
+    }
+
+    public void setResponseMessage(String responseMessage) {
+        this.responseMessage = responseMessage;
+    }
+
+    public String getResponseStatus() {
+        return responseStatus;
+    }
+
+    public void setResponseStatus(String responseStatus) {
+        this.responseStatus = responseStatus;
+    }
+
+    public class ResponseData {
+        @SerializedName("Audio")
+        @Expose
+        private List<Audio> audio = null;
+        @SerializedName("Playlist")
+        @Expose
+        private List<Playlist> playlist = null;
+
+        public List<Audio> getAudio() {
+            return audio;
+        }
+
+        public void setAudio(List<Audio> audio) {
+            this.audio = audio;
+        }
+
+        public List<Playlist> getPlaylist() {
+            return playlist;
+        }
+
+        public void setPlaylist(List<Playlist> playlist) {
+            this.playlist = playlist;
+        }
+
+        public class Audio {
+            @SerializedName("ID")
+            @Expose
+            private String iD;
+            @SerializedName("PlaylistId")
+            @Expose
+            private String playlistId;
+            @SerializedName("Name")
+            @Expose
+            private String name;
+            @SerializedName("AudioFile")
+            @Expose
+            private String audioFile;
+            @SerializedName("ImageFile")
+            @Expose
+            private String imageFile;
+            @SerializedName("Audiomastercat")
+            @Expose
+            private String audiomastercat;
+            @SerializedName("AudioSubCategory")
+            @Expose
+            private String audioSubCategory;
+            @SerializedName("AudioDuration")
+            @Expose
+            private String audioDuration;
+            @SerializedName("AudioDirection")
+            @Expose
+            private String audioDirection;
+            @SerializedName("Like")
+            @Expose
+            private String like;
+            @SerializedName("Download")
+            @Expose
+            private String download;
+            @SerializedName("IsLock")
+            @Expose
+            private String isLock;
+            @SerializedName("IsPlay")
+            @Expose
+            private String isPlay;
+
+            public String getID() {
+                return iD;
+            }
+
+            public void setID(String iD) {
+                this.iD = iD;
+            }
+
+            public String getPlaylistId() {
+                return playlistId;
+            }
+
+            public void setPlaylistId(String playlistId) {
+                this.playlistId = playlistId;
+            }
+
+            public String getName() {
+                return name;
+            }
+
+            public void setName(String name) {
+                this.name = name;
+            }
+
+            public String getAudioFile() {
+                return audioFile;
+            }
+
+            public void setAudioFile(String audioFile) {
+                this.audioFile = audioFile;
+            }
+
+            public String getImageFile() {
+                return imageFile;
+            }
+
+            public void setImageFile(String imageFile) {
+                this.imageFile = imageFile;
+            }
+
+            public String getAudiomastercat() {
+                return audiomastercat;
+            }
+
+            public void setAudiomastercat(String audiomastercat) {
+                this.audiomastercat = audiomastercat;
+            }
+
+            public String getAudioSubCategory() {
+                return audioSubCategory;
+            }
+
+            public void setAudioSubCategory(String audioSubCategory) {
+                this.audioSubCategory = audioSubCategory;
+            }
+
+            public String getAudioDuration() {
+                return audioDuration;
+            }
+
+            public void setAudioDuration(String audioDuration) {
+                this.audioDuration = audioDuration;
+            }
+
+            public String getAudioDirection() {
+                return audioDirection;
+            }
+
+            public void setAudioDirection(String audioDirection) {
+                this.audioDirection = audioDirection;
+            }
+
+            public String getLike() {
+                return like;
+            }
+
+            public void setLike(String like) {
+                this.like = like;
+            }
+
+            public String getDownload() {
+                return download;
+            }
+
+            public void setDownload(String download) {
+                this.download = download;
+            }
+
+            public String getIsLock() {
+                return isLock;
+            }
+
+            public void setIsLock(String isLock) {
+                this.isLock = isLock;
+            }
+
+            public String getIsPlay() {
+                return isPlay;
+            }
+
+            public void setIsPlay(String isPlay) {
+                this.isPlay = isPlay;
+            }
+        }
+
+        public class Playlist {
+            @SerializedName("PlaylistId")
+            @Expose
+            private String playlistId;
+            @SerializedName("PlaylistName")
+            @Expose
+            private String playlistName;
+            @SerializedName("PlaylistImage")
+            @Expose
+            private String playlistImage;
+            @SerializedName("TotalAudio")
+            @Expose
+            private String totalAudio;
+            @SerializedName("IsLock")
+            @Expose
+            private String isLock;
+            @SerializedName("TotalDuration")
+            @Expose
+            private String totalDuration;
+            @SerializedName("Totalhour")
+            @Expose
+            private String totalhour;
+            @SerializedName("Totalminute")
+            @Expose
+            private String totalminute;
+
+            public String getPlaylistId() {
+                return playlistId;
+            }
+
+            public void setPlaylistId(String playlistId) {
+                this.playlistId = playlistId;
+            }
+
+            public String getPlaylistName() {
+                return playlistName;
+            }
+
+            public void setPlaylistName(String playlistName) {
+                this.playlistName = playlistName;
+            }
+
+            public String getPlaylistImage() {
+                return playlistImage;
+            }
+
+            public void setPlaylistImage(String playlistImage) {
+                this.playlistImage = playlistImage;
+            }
+
+            public String getTotalAudio() {
+                return totalAudio;
+            }
+
+            public void setTotalAudio(String totalAudio) {
+                this.totalAudio = totalAudio;
+            }
+
+            public String getIsLock() {
+                return isLock;
+            }
+
+            public void setIsLock(String isLock) {
+                this.isLock = isLock;
+            }
+
+            public String getTotalDuration() {
+                return totalDuration;
+            }
+
+            public void setTotalDuration(String totalDuration) {
+                this.totalDuration = totalDuration;
+            }
+
+            public String getTotalhour() {
+                return totalhour;
+            }
+
+            public void setTotalhour(String totalhour) {
+                this.totalhour = totalhour;
+            }
+
+            public String getTotalminute() {
+                return totalminute;
+            }
+
+            public void setTotalminute(String totalminute) {
+                this.totalminute = totalminute;
+            }
+        }
+    }
+}
Index: app/src/main/res/layout/fragment_likes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_likes.xml	(date 1604397265780)
+++ app/src/main/res/layout/fragment_likes.xml	(date 1604397265780)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout>
+
+    <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:id="@+id/flContainer"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:clickable="true">
+
+        <RelativeLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent">
+
+            <LinearLayout
+                android:id="@+id/llSpace"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content">
+
+                <androidx.recyclerview.widget.RecyclerView
+                    android:id="@+id/rvLikesList"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:paddingTop="@dimen/_8sdp"
+                    android:overScrollMode="never"/>
+
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:gravity="center"
+                android:padding="@dimen/_60sdp">
+
+                <ProgressBar
+                    android:id="@+id/progressBar"
+                    android:layout_width="@dimen/_50sdp"
+                    android:layout_height="@dimen/_50sdp"
+                    android:indeterminateTint="@color/blue"
+                    android:scaleType="centerInside"
+                    android:visibility="gone" />
+
+            </LinearLayout>
+
+            <FrameLayout
+                android:id="@+id/progressBarHolder"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:alpha="0.4"
+                android:animateLayoutChanges="true"
+                android:background="#C0000000"
+                android:visibility="gone" />
+
+            <LinearLayout
+                android:id="@+id/llError"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_centerInParent="true"
+                android:gravity="center"
+                android:visibility="gone"
+                android:orientation="vertical">
+
+                <TextView
+                    android:id="@+id/tvFound"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_centerInParent="true"
+                    android:layout_marginHorizontal="@dimen/_20sdp"
+                    android:fontFamily="@font/montserrat_regular"
+                    android:gravity="center"
+                    android:lineSpacingExtra="@dimen/_4sdp"
+                    android:textColor="@color/dark_blue_gray"
+                    android:textSize="@dimen/_16sdp" />
+
+            </LinearLayout>
+        </RelativeLayout>
+    </FrameLayout>
+</layout>
\ No newline at end of file
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/TopCategoriesAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.brainwellnessspa.DashboardModule.Audio.ViewAllAudioFragment;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.databinding.RoundBoxLayoutBinding;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class  TopCategoriesAdapter extends RecyclerView.Adapter<TopCategoriesAdapter.MyViewHolder> {\r\n    private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;\r\n    Context ctx;\r\n    FragmentActivity activity;\r\n    String HomeID, Views;\r\n\r\n    public TopCategoriesAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,\r\n                                String HomeID, String Views) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.activity = activity;\r\n        this.HomeID = HomeID;\r\n        this.Views = Views;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        RoundBoxLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.round_box_layout, parent, false);\r\n        return new MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getCategoryName());\r\n        Glide.with(ctx).load(listModelList.get(position).getCatImage()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n        /*MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 16,\r\n                1, 1, 0.52f, 10);\r\n        holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());*/\r\n//        holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n            Fragment viewAllAudioFragment = new ViewAllAudioFragment();\r\n            FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, viewAllAudioFragment)\r\n                    .commit();\r\n            Bundle bundle = new Bundle();\r\n            bundle.putString(\"ID\", HomeID);\r\n            bundle.putString(\"Name\", Views);\r\n            bundle.putString(\"Category\", listModelList.get(position).getCategoryName());\r\n            viewAllAudioFragment.setArguments(bundle);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return listModelList.size();\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        RoundBoxLayoutBinding binding;\r\n\r\n        public MyViewHolder(RoundBoxLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/TopCategoriesAdapter.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/TopCategoriesAdapter.java	(date 1604409033640)
@@ -21,7 +21,7 @@
 
 import java.util.ArrayList;
 
-public class  TopCategoriesAdapter extends RecyclerView.Adapter<TopCategoriesAdapter.MyViewHolder> {
+public class TopCategoriesAdapter extends RecyclerView.Adapter<TopCategoriesAdapter.MyViewHolder> {
     private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;
     Context ctx;
     FragmentActivity activity;
@@ -49,7 +49,6 @@
         holder.binding.tvTitle.setText(listModelList.get(position).getCategoryName());
         Glide.with(ctx).load(listModelList.get(position).getCatImage()).thumbnail(0.05f)
                 .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);
-
         /*MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 16,
                 1, 1, 0.52f, 10);
         holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());
Index: app/src/main/java/com/brainwellnessspa/BWSApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa;\r\n\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.app.Application;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.provider.Settings;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.Gravity;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.room.migration.Migration;\r\nimport androidx.sqlite.db.SupportSQLiteDatabase;\r\n\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.SplashModule.Models.VersionModel;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.AppSignatureHashHelper;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.CryptLib;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.R;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Random;\r\nimport java.util.TimeZone;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static java.sql.DriverManager.println;\r\n\r\npublic class BWSApplication extends Application {\r\n    private static Context mContext;\r\n    private static BWSApplication BWSApplication;\r\n    private static List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    public static Context getContext() {\r\n        return mContext;\r\n    }\r\n\r\n    public static MeasureRatio measureRatio(Context context, float outerMargin, float aspectX, float aspectY,\r\n                                            float proportion, float innerMargin) {\r\n\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        try {\r\n            WindowManager windowmanager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\r\n            windowmanager.getDefaultDisplay().getMetrics(displayMetrics);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        float width = displayMetrics.widthPixels / displayMetrics.density;\r\n        float widthImg = ((width - outerMargin) * proportion) - innerMargin;\r\n        float height = widthImg * aspectY / aspectX;\r\n        //Log.e(\"width.........\", \"\" + context.getClass().getSimpleName()+\",\"+width);\r\n//        //Log.e(\"widthImg.........\", \"\" + context.getClass().getSimpleName()+\",\"+widthImg);\r\n//        //Log.e(\"height...........\", \"\" + context.getClass().getSimpleName()+\",\"+height);\r\n//        //Log.e(\"displayMetrics.density...........\", \"\" + context.getClass().getSimpleName()+\",\"+displayMetrics.density);\r\n        return new MeasureRatio(widthImg, height, displayMetrics.density, proportion);\r\n    }\r\n    public static final Migration MIGRATION_1_2 = new Migration(1, 2) {\r\n        @Override\r\n        public void migrate(SupportSQLiteDatabase database) {\r\n            database.execSQL(\"ALTER TABLE 'playlist_table' ADD COLUMN 'PlaylistImageDetails' TEXT\");\r\n        }\r\n    };\r\n    public static void getLatasteUpdate(Context context) {\r\n        String appURI = \"https://play.google.com/store/apps/details?id=com.brainwellnessspa\";\r\n        if (BWSApplication.isNetworkConnected(context)) {\r\n            Call<VersionModel> listCall = APIClient.getClient().getVersionDatas(String.valueOf(BuildConfig.VERSION_CODE), CONSTANTS.FLAG_ONE);\r\n            listCall.enqueue(new Callback<VersionModel>() {\r\n                @Override\r\n                public void onResponse(Call<VersionModel> call, Response<VersionModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        VersionModel versionModel = response.body();\r\n//                    if (versionModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                         if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"0\")) {\r\n                            AlertDialog.Builder builder = new AlertDialog.Builder(context);\r\n                            builder.setTitle(\"Update Brain Wellness Spa\");\r\n                            builder.setCancelable(false);\r\n                            builder.setMessage(\"Brain Wellness Spa recommends that you update to the latest version\")\r\n                                    .setPositiveButton(\"UPDATE\", (dialog, id) -> {\r\n                                        context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(appURI)));\r\n                                        dialog.cancel();\r\n                                    })\r\n                                    .setNegativeButton(\"NOT NOW\", (dialog, id) -> dialog.dismiss());\r\n                            builder.create().show();\r\n                        } else if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"1\")) {\r\n                            AlertDialog.Builder builder = new AlertDialog.Builder(context);\r\n                            builder.setTitle(\"Update Required\");\r\n                            builder.setCancelable(false);\r\n                            builder.setMessage(\"To keep using Brain Wellness Spa, download the latest version\")\r\n                                    .setCancelable(false)\r\n                                    .setPositiveButton(\"UPDATE\", (dialog, id) -> context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(appURI))));\r\n                            builder.create().show();\r\n                        } else if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"\")) {\r\n                        }\r\n                    }\r\n                    /*} else {\r\n                    }*/\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<VersionModel> call, Throwable t) {\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(context.getString(R.string.no_server_found), context);\r\n        }\r\n    }\r\n    public static String getKey(Context context){\r\n        AppSignatureHashHelper appSignatureHashHelper = new AppSignatureHashHelper(context);\r\n       String key = appSignatureHashHelper.getAppSignatures().get(0);\r\n\r\n        SharedPreferences shared = context.getSharedPreferences(CONSTANTS.PREF_KEY_Splash, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putString(CONSTANTS.PREF_KEY_SplashKey, appSignatureHashHelper.getAppSignatures().get(0));\r\n        editor.commit();\r\n        return key;\r\n    }\r\n    public static void showToast(String message, Context context) {\r\n        Toast toast = new Toast(context);\r\n        View view = LayoutInflater.from(context).inflate(R.layout.toast_layout, null);\r\n        TextView tvMessage = view.findViewById(R.id.tvMessage);\r\n        tvMessage.setText(message);\r\n        toast.setGravity(Gravity.BOTTOM | Gravity.CENTER, 0, 35);\r\n        toast.setView(view);\r\n        toast.show();\r\n    }\r\n    public static String getProgressDisplayLine(long currentBytes, long totalBytes) {\r\n        return getBytesToMBString(currentBytes) + \"/\" + getBytesToMBString(totalBytes);\r\n    }\r\n\r\n    private static String getBytesToMBString(long bytes){\r\n        return String.format(Locale.ENGLISH, \"%.2fMb\", bytes / (1024.00 * 1024.00));\r\n    }\r\n/*    public static List<DownloadAudioDetails> GetAllMedia(Context ctx) {\r\n\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }*/\r\n\r\n    public static synchronized BWSApplication getInstance() {\r\n        return BWSApplication;\r\n    }\r\n\r\n    public static void hideProgressBar(ProgressBar progressBar, FrameLayout progressBarHolder, Activity ctx) {\r\n        try {\r\n            progressBarHolder.setVisibility(View.GONE);\r\n            progressBar.setVisibility(View.GONE);\r\n            ctx.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void showProgressBar(ProgressBar progressBar, FrameLayout progressBarHolder, Activity ctx) {\r\n        try {\r\n            progressBarHolder.setVisibility(View.VISIBLE);\r\n            ctx.getWindow().setFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE, WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);\r\n            progressBar.setVisibility(View.VISIBLE);\r\n            progressBar.invalidate();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static boolean isEmailValid(String email) {\r\n        boolean isValid = false;\r\n        String expression = \"^[\\\\w\\\\.-]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,3}$\";\r\n        CharSequence inputStr = email;\r\n\r\n        Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);\r\n        Matcher matcher = pattern.matcher(inputStr);\r\n        if (matcher.matches()) {\r\n            isValid = true;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        mContext = this;\r\n        BWSApplication = this;\r\n    }\r\n\r\n    public static boolean isNetworkConnected(Context context) {\r\n        try {\r\n            ConnectivityManager mConnectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n            NetworkInfo mNetworkInfo = mConnectivityManager.getActiveNetworkInfo();\r\n            boolean flag = false;\r\n            ConnectivityManager manager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n//For 3G check\r\n            boolean is3g = manager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE)\r\n                    .isConnectedOrConnecting();\r\n//For WiFi Check\r\n            boolean isWifi = manager.getNetworkInfo(ConnectivityManager.TYPE_WIFI)\r\n                    .isConnectedOrConnecting();\r\n\r\n            flag = !(!is3g && !isWifi);\r\n            return flag;\r\n        } catch (NullPointerException e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static String securityKey() {\r\n        String key;\r\n        String DeviceId = Settings.Secure.getString(getContext().getContentResolver(), Settings.Secure.ANDROID_ID);\r\n        String AES = \"OsEUHhecSs4gRGcy2vMQs1s/XajBrLGADR71cKMRNtA=\";\r\n        String RSA = \"KlWxBHfKPGkkeTjkT7IEo32bZW8GlVCPq/nvVFuYfIY=\";\r\n        String TDES = \"1dpra0SZhVPpiUQvikMvkDxEp7qLLJL9pe9G6Apg01g=\";\r\n        String SHA1 = \"Ey8rBCHsqITEbh7KQKRmYObCGBXqFnvtL5GjMFQWHQo=\";\r\n        String MD5 = \"/qc2rO3RB8Z/XA+CmHY0tCaJch9a5BdlQW1xb7db+bg=\";\r\n\r\n        Calendar calendar = Calendar.getInstance();\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n        calendar.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n        calendar.setTime(new Date());\r\n        SimpleDateFormat outputFmt = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n        String dateAsString = outputFmt.format(calendar.getTime());\r\n        //        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n        //2019-11-21 06:45:32\r\n//        String currentDateandTime = sdf.format(new Date());\r\n        String finalKey = \"\";\r\n        HashMap<String, String> hash_map = new HashMap<String, String>();\r\n        hash_map.put(\"AES\", AES);\r\n        hash_map.put(\"RSA\", RSA);\r\n        hash_map.put(\"TDES\", TDES);\r\n        hash_map.put(\"SHA1\", SHA1);\r\n        hash_map.put(\"MD5\", MD5);\r\n\r\n        Random random = new Random();\r\n        List<String> keys = new ArrayList<String>(hash_map.keySet());\r\n        String randomKey = keys.get(random.nextInt(keys.size()));\r\n        String value = hash_map.get(randomKey);\r\n        key = DeviceId + \".\" + dateAsString + \".\" + randomKey + \".\" + value;\r\n\r\n        try {\r\n            finalKey = ProgramForAES(key);\r\n            System.out.println(finalKey);\r\n        } catch (Exception e) {\r\n        }\r\n        return finalKey;\r\n    }\r\n\r\n    public static String ProgramForAES(String baseString) {\r\n        String cipher = \"\";\r\n        try {\r\n            String key = \"5785abf057d4eea9e59151f75a6fadb724768053df2acdfabb68f2b946b972c6\";\r\n            CryptLib cryptLib = new CryptLib();\r\n            cipher = cryptLib.encryptPlainTextWithRandomIV(baseString, key);\r\n            println(\"cipherText\" + cipher);\r\n            String decryptedString = cryptLib.decryptCipherTextWithRandomIV(cipher, key);\r\n            println(\"decryptedString\" + decryptedString);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return cipher;\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/BWSApplication.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/BWSApplication.java	(date 1604397265881)
@@ -3,13 +3,21 @@
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Application;
+import android.app.NotificationChannel;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.net.Uri;
+import android.os.Build;
 import android.provider.Settings;
+import android.support.v4.media.session.MediaControllerCompat;
+import android.support.v4.media.session.MediaSessionCompat;
 import android.util.DisplayMetrics;
 import android.view.Gravity;
 import android.view.LayoutInflater;
@@ -20,9 +28,12 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import androidx.core.app.NotificationCompat;
+import androidx.media.MediaSessionManager;
 import androidx.room.migration.Migration;
 import androidx.sqlite.db.SupportSQLiteDatabase;
 
+import com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;
 import com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;
 import com.brainwellnessspa.SplashModule.Models.VersionModel;
 import com.brainwellnessspa.Utility.APIClient;
@@ -31,7 +42,14 @@
 import com.brainwellnessspa.Utility.CryptLib;
 import com.brainwellnessspa.Utility.MeasureRatio;
 import com.brainwellnessspa.R;
+import com.brainwellnessspa.Utility.MusicService;
+import com.brainwellnessspa.Utility.PlaybackStatus;
 
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URL;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Calendar;
@@ -44,6 +62,8 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
+import javax.net.ssl.HttpsURLConnection;
+
 import retrofit2.Call;
 import retrofit2.Callback;
 import retrofit2.Response;
@@ -54,6 +74,19 @@
     private static Context mContext;
     private static BWSApplication BWSApplication;
     private static List<DownloadAudioDetails> downloadAudioDetailsList;
+    private static final int NOTIFICATION_ID = 101;
+    public static final String ACTION_PLAY = "com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PLAY";
+    public static final String ACTION_PAUSE = "com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PAUSE";
+    public static final String ACTION_PREVIOUS = "com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PREVIOUS";
+    public static final String ACTION_NEXT = "com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_NEXT";
+    public static final String ACTION_STOP = "com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_STOP";
+    private static Bitmap myBitmap;
+
+    //MediaSession
+    private MediaSessionManager mediaSessionManager;
+    private MediaSessionCompat mediaSession;
+    private MediaControllerCompat.TransportControls transportControls;
+
     public static Context getContext() {
         return mContext;
     }
@@ -77,12 +110,248 @@
 //        //Log.e("displayMetrics.density...........", "" + context.getClass().getSimpleName()+","+displayMetrics.density);
         return new MeasureRatio(widthImg, height, displayMetrics.density, proportion);
     }
+
     public static final Migration MIGRATION_1_2 = new Migration(1, 2) {
         @Override
         public void migrate(SupportSQLiteDatabase database) {
             database.execSQL("ALTER TABLE 'playlist_table' ADD COLUMN 'PlaylistImageDetails' TEXT");
         }
     };
+
+    public static void simple_Notification(PlaybackStatus playbackStatus, ArrayList<MainPlayModel> mainPlayModelList, Activity activity, int position) {
+
+        int notificationAction = android.R.drawable.ic_media_pause;//needs to be initialized
+        PendingIntent play_pauseAction = null;
+
+        //Build a new notification according to the current state of the MediaPlayer
+        if (playbackStatus == PlaybackStatus.PLAYING) {
+            notificationAction = android.R.drawable.ic_media_pause;
+            //create the pause action
+            play_pauseAction = playbackAction(1, activity);
+        } else if (playbackStatus == PlaybackStatus.PAUSED) {
+            notificationAction = android.R.drawable.ic_media_play;
+            //create the play action
+            play_pauseAction = playbackAction(0, activity);
+        }
+       /* try {
+            URL url = new URL(mainPlayModelList.get(position).getImageFile());
+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+            connection.setDoInput(true);
+            connection.connect();
+            InputStream input = connection.getInputStream();
+            myBitmap = BitmapFactory.decodeStream(input);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }*/
+
+       /* try {
+            URL url = new URL(mainPlayModelList.get(position).getImageFile());
+            myBitmap = BitmapFactory.decodeStream(url.openConnection().getInputStream());
+        } catch (IOException e) {
+            e.printStackTrace();
+        }*/
+
+
+        // Create a new Notification
+        NotificationCompat.Builder notificationBuilder = (NotificationCompat.Builder) new NotificationCompat.Builder(activity)
+                .setShowWhen(false)
+                // Set the Notification style
+//                .setStyle(new NotificationCompat().MediaStyle()
+                // Attach our MediaSession token
+//                .setMediaSession(mediaSession.getSessionToken())
+                // Show our playback controls in the compact notification view.
+//                .setShowActionsInCompactView(0, 1, 2))
+                .setColor(activity.getResources().getColor(R.color.blue))
+                // Set the large and small icons
+                .setLargeIcon(BitmapFactory.decodeResource(activity.getResources(), R.drawable.square_app_icon))
+                .setSmallIcon(android.R.drawable.stat_sys_headset)
+                // Set Notification content information
+                .setContentText(mainPlayModelList.get(position).getAudioDirection())
+                .setContentTitle(mainPlayModelList.get(position).getName())
+                .setContentInfo("Brain Wellness Spa")
+                .setSound(null)
+                // Add playback actions
+                .addAction(android.R.drawable.ic_media_previous, "previous", playbackAction(3, activity))
+                .addAction(notificationAction, "pause", play_pauseAction)
+                .addAction(android.R.drawable.ic_media_next, "next", playbackAction(2, activity));
+
+        NotificationManager notificationManager = (NotificationManager) activity.getSystemService(Context.NOTIFICATION_SERVICE);
+
+//Android 8 introduced a new requirement of setting the channelId property by using a NotificationChannel.
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            String channelId = "YOUR_CHANNEL_ID";
+            NotificationChannel channel = new NotificationChannel(channelId,
+                    "Channel human readable title",
+                    NotificationManager.IMPORTANCE_LOW);
+            channel.setSound(null, null);
+            notificationManager.createNotificationChannel(channel);
+            notificationBuilder.setChannelId(channelId);
+        }
+
+        notificationManager.notify(NOTIFICATION_ID, notificationBuilder.build());
+    }
+
+
+    public static PendingIntent playbackAction(int actionNumber, Activity activity) {
+        Intent playbackAction = new Intent(activity, MusicService.class);
+        switch (actionNumber) {
+            case 0:
+                // Play
+                playbackAction.setAction(ACTION_PLAY);
+                return PendingIntent.getService(activity, actionNumber, playbackAction, 0);
+            case 1:
+                // Pause
+                playbackAction.setAction(ACTION_PAUSE);
+                return PendingIntent.getService(activity, actionNumber, playbackAction, 0);
+            case 2:
+                // Next track
+                playbackAction.setAction(ACTION_NEXT);
+                return PendingIntent.getService(activity, actionNumber, playbackAction, 0);
+            case 3:
+                // Previous track
+                playbackAction.setAction(ACTION_PREVIOUS);
+                return PendingIntent.getService(activity, actionNumber, playbackAction, 0);
+            default:
+                break;
+        }
+        return null;
+    }
+
+    private void removeNotification(Activity activity) {
+        NotificationManager notificationManager = (NotificationManager) activity.getSystemService(Context.NOTIFICATION_SERVICE);
+        notificationManager.cancel(NOTIFICATION_ID);
+    }
+
+    private void handleIncomingActions(Intent playbackAction) {
+        if (playbackAction == null || playbackAction.getAction() == null) return;
+
+        String actionString = playbackAction.getAction();
+        if (actionString.equalsIgnoreCase(ACTION_PLAY)) {
+            transportControls.play();
+        } else if (actionString.equalsIgnoreCase(ACTION_PAUSE)) {
+            transportControls.pause();
+        } else if (actionString.equalsIgnoreCase(ACTION_NEXT)) {
+            transportControls.skipToNext();
+        } else if (actionString.equalsIgnoreCase(ACTION_PREVIOUS)) {
+            transportControls.skipToPrevious();
+        } else if (actionString.equalsIgnoreCase(ACTION_STOP)) {
+            transportControls.stop();
+        }
+    }
+/*    private void skipToNext() {
+        if (audioIndex == audioList.size() - 1) {
+            //if last in playlist
+            audioIndex = 0;
+            activeAudio = audioList.get(audioIndex);
+        } else {
+            //get next in playlist
+            activeAudio = audioList.get(++audioIndex);
+        }
+
+        //Update stored index
+        new StorageUtil(getApplicationContext()).storeAudioIndex(audioIndex);
+
+        stopMedia();
+        //reset mediaPlayer
+        mediaPlayer.reset();
+        initMediaPlayer();
+    }*/
+
+    /* private void skipToPrevious() {
+         if (audioIndex == 0) {
+             //if first in playlist
+             //set index to the last of audioList
+             audioIndex = audioList.size() - 1;
+             activeAudio = audioList.get(audioIndex);
+         } else {
+             //get previous in playlist
+             activeAudio = audioList.get(--audioIndex);
+         }
+
+         //Update stored index
+         new StorageUtil(getApplicationContext()).storeAudioIndex(audioIndex);
+
+         stopMedia();
+         //reset mediaPlayer
+         mediaPlayer.reset();
+         initMediaPlayer();
+     }*/
+
+    /* TODO Need this code Can't delete
+  @Override
+  public int onStartCommand(Intent intent, int flags, int startId) {
+      try {
+          //Load data from SharedPreferences
+          StorageUtil storage = new StorageUtil(getApplicationContext());
+          audioList = storage.loadAudio();
+          audioIndex = storage.loadAudioIndex();
+
+          if (audioIndex != -1 && audioIndex < audioList.size()) {
+              //index is in a valid range
+              activeAudio = audioList.get(audioIndex);
+          } else {
+              stopSelf();
+          }
+      } catch (NullPointerException e) {
+          stopSelf();
+      }
+
+      //Request audio focus
+      if (requestAudioFocus() == false) {
+          //Could not gain focus
+          stopSelf();
+      }
+
+      if (mediaSessionManager == null) {
+          try {
+              initMediaSession();
+              initMediaPlayer();
+          } catch (RemoteException e) {
+              e.printStackTrace();
+              stopSelf();
+          }
+          buildNotification(PlaybackStatus.PLAYING);
+      }
+
+      //Handle Intent action from MediaSession.TransportControls
+      handleIncomingActions(intent);
+      return super.onStartCommand(intent, flags, startId);
+  }*/
+/* @Override
+    public void onAudioFocusChange(int i) {
+        switch (i) {
+            case AudioManager.AUDIOFOCUS_GAIN:
+            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:
+                // Resume your media player here
+                resumeMedia();
+                break;
+            case AudioManager.AUDIOFOCUS_LOSS:
+            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:
+                if (isMediaStart) {
+                    pauseMedia();
+//                    binding.ivPlay.setVisibility(View.VISIBLE);
+//                    binding.ivPause.setVisibility(View.GONE);
+                }
+//                MusicService.pauseMedia();// Pause your media player here
+                break;
+        }
+    }*/
+
+  /*  public static Bitmap getBitmapFromURL(String src) {
+        try {
+            URL url = new URL(src);
+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+            connection.setDoInput(true);
+            connection.connect();
+            InputStream input = connection.getInputStream();
+            Bitmap myBitmap = BitmapFactory.decodeStream(input);
+            return myBitmap;
+        } catch (IOException e) {
+            e.printStackTrace();
+            return null;
+        }
+    }*/
+
     public static void getLatasteUpdate(Context context) {
         String appURI = "https://play.google.com/store/apps/details?id=com.brainwellnessspa";
         if (BWSApplication.isNetworkConnected(context)) {
@@ -93,7 +362,7 @@
                     if (response.isSuccessful()) {
                         VersionModel versionModel = response.body();
 //                    if (versionModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {
-                         if (versionModel.getResponseData().getIsForce().equalsIgnoreCase("0")) {
+                        if (versionModel.getResponseData().getIsForce().equalsIgnoreCase("0")) {
                             AlertDialog.Builder builder = new AlertDialog.Builder(context);
                             builder.setTitle("Update Brain Wellness Spa");
                             builder.setCancelable(false);
@@ -127,9 +396,10 @@
             BWSApplication.showToast(context.getString(R.string.no_server_found), context);
         }
     }
-    public static String getKey(Context context){
+
+    public static String getKey(Context context) {
         AppSignatureHashHelper appSignatureHashHelper = new AppSignatureHashHelper(context);
-       String key = appSignatureHashHelper.getAppSignatures().get(0);
+        String key = appSignatureHashHelper.getAppSignatures().get(0);
 
         SharedPreferences shared = context.getSharedPreferences(CONSTANTS.PREF_KEY_Splash, Context.MODE_PRIVATE);
         SharedPreferences.Editor editor = shared.edit();
@@ -137,6 +407,7 @@
         editor.commit();
         return key;
     }
+
     public static void showToast(String message, Context context) {
         Toast toast = new Toast(context);
         View view = LayoutInflater.from(context).inflate(R.layout.toast_layout, null);
@@ -146,11 +417,12 @@
         toast.setView(view);
         toast.show();
     }
+
     public static String getProgressDisplayLine(long currentBytes, long totalBytes) {
         return getBytesToMBString(currentBytes) + "/" + getBytesToMBString(totalBytes);
     }
 
-    private static String getBytesToMBString(long bytes){
+    private static String getBytesToMBString(long bytes) {
         return String.format(Locale.ENGLISH, "%.2fMb", bytes / (1024.00 * 1024.00));
     }
 /*    public static List<DownloadAudioDetails> GetAllMedia(Context ctx) {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecentlyPlayedAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.databinding.SmallBoxLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\n\r\n\r\npublic class RecentlyPlayedAdapter extends RecyclerView.Adapter<RecentlyPlayedAdapter.MyViewHolder> {\r\n    Context ctx;\r\n    FragmentActivity activity;\r\n    String IsLock;\r\n    private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;\r\n\r\n    public RecentlyPlayedAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,\r\n                                 String IsLock) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.activity = activity;\r\n        this.IsLock = IsLock;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        SmallBoxLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.small_box_layout, parent, false);\r\n        return new MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 16,\r\n                1, 1, 0.28f, 10);\r\n        holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n//       TODO                 Active and cancelled = 0, InActive = 1, Suspeded = 2\r\n            SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            if(queuePlay){\r\n                int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                Gson gson = new Gson();\r\n                String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                    }.getType();\r\n                    addToQueueModelList = gson.fromJson(json1, type1);\r\n                }\r\n                addToQueueModelList.remove(position1);\r\n                SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared2.edit();\r\n                String json = gson.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                editor.commit();\r\n            }\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callTransFrag(position);\r\n\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    ctx.startActivity(i);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callTransFrag(position);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n                callTransFrag(position);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callTransFrag(int position) {\r\n        try {\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                MusicService.stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n            MainAudioModel.ResponseData.Detail  mainPlayModel = new MainAudioModel.ResponseData.Detail();\r\n            mainPlayModel.setID(\"0\");\r\n            mainPlayModel.setName(\"Disclaimer\");\r\n            mainPlayModel.setAudioFile(\"\");\r\n            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n            mainPlayModel.setAudiomastercat(\"\");\r\n            mainPlayModel.setAudioSubCategory(\"\");\r\n            mainPlayModel.setImageFile(\"\");\r\n            mainPlayModel.setLike(\"\");\r\n            mainPlayModel.setDownload(\"\");\r\n            mainPlayModel.setAudioDuration(\"0:48\");\r\n            listModelList2.add(mainPlayModel);\r\n\r\n            listModelList2.add(listModelList.get(position));\r\n            String json = gson.toJson(listModelList2);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"MainAudioList\");\r\n            editor.commit();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (6 > listModelList.size()) {\r\n            return listModelList.size();\r\n        } else {\r\n            return 6;\r\n        }\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        SmallBoxLayoutBinding binding;\r\n\r\n        public MyViewHolder(SmallBoxLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecentlyPlayedAdapter.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecentlyPlayedAdapter.java	(date 1604409033597)
@@ -95,7 +95,7 @@
 //       TODO                 Active and cancelled = 0, InActive = 1, Suspeded = 2
             SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
             boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
-            if(queuePlay){
+            if (queuePlay) {
                 int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);
                 ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();
                 Gson gson = new Gson();
@@ -159,7 +159,7 @@
             SharedPreferences.Editor editor = shared.edit();
             Gson gson = new Gson();
             ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();
-            MainAudioModel.ResponseData.Detail  mainPlayModel = new MainAudioModel.ResponseData.Detail();
+            MainAudioModel.ResponseData.Detail mainPlayModel = new MainAudioModel.ResponseData.Detail();
             mainPlayModel.setID("0");
             mainPlayModel.setName("Disclaimer");
             mainPlayModel.setAudioFile("");
Index: app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutGetCodeActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.MembershipModule.Activities;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.SystemClock;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.LoginModule.Activities.CountrySelectActivity;\r\nimport com.brainwellnessspa.MembershipModule.Models.MembershipPlanListModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.SignUpModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.SplashModule.SplashScreenActivity;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityCheckoutGetCodeBinding;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.BWSApplication.getKey;\r\nimport static com.brainwellnessspa.MembershipModule.Activities.CheckoutOtpActivity.comeRegister;\r\n\r\npublic class CheckoutGetCodeActivity extends AppCompatActivity {\r\n    ActivityCheckoutGetCodeBinding binding;\r\n    String Name = \"\", Code = \"\", MobileNo = \"\";\r\n    Context ctx;\r\n    Activity activity;\r\n    String TrialPeriod;\r\n    private ArrayList<MembershipPlanListModel.Plan> listModelList;\r\n    int position;\r\n    private long mLastClickTime = 0;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_checkout_get_code);\r\n        ctx = CheckoutGetCodeActivity.this;\r\n        activity = CheckoutGetCodeActivity.this;\r\n\r\n        if (getIntent().hasExtra(\"Name\")) {\r\n            Name = getIntent().getStringExtra(CONSTANTS.Name);\r\n            Code = getIntent().getStringExtra(CONSTANTS.Code);\r\n            MobileNo = getIntent().getStringExtra(CONSTANTS.MobileNo);\r\n//            TrialPeriod = getIntent().getStringExtra(\"TrialPeriod\");\r\n//            listModelList = getIntent().getParcelableArrayListExtra(\"PlanData\");\r\n//            position = getIntent().getIntExtra(\"position\", 0);\r\n        }\r\n        binding.edtNumber.addTextChangedListener(signupTextWatcher);\r\n        if (Code.equalsIgnoreCase(\"\") || Name.equalsIgnoreCase(\"\")) {\r\n            binding.tvCountryCode.setText(R.string.code);\r\n            binding.tvCountry.setText(R.string.Australia);\r\n        } else {\r\n            binding.tvCountryCode.setText(Code);\r\n            binding.tvCountry.setText(Name);\r\n        }\r\n        if (MobileNo.equalsIgnoreCase(\"\")) {\r\n            binding.edtNumber.setText(\"\");\r\n        } else {\r\n            binding.edtNumber.setText(MobileNo);\r\n        }\r\n\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n//                Intent i = new Intent(ctx, OrderSummaryActivity.class);\r\n//                i.putParcelableArrayListExtra(\"PlanData\",listModelList);\r\n//                i.putExtra(\"TrialPeriod\",TrialPeriod);\r\n//                i.putExtra(\"position\",position);\r\n//                startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.rlCountrySelect.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            Intent i = new Intent(ctx, CountrySelectActivity.class);\r\n//                i.putParcelableArrayListExtra(\"PlanData\",listModelList);\r\n//                i.putExtra(\"TrialPeriod\",TrialPeriod);\r\n//                i.putExtra(\"position\",position);\r\n            i.putExtra(\"Name\", binding.tvCountry.getText().toString());\r\n            i.putExtra(\"Code\", binding.tvCountryCode.getText().toString());\r\n            i.putExtra(\"MobileNo\", binding.edtNumber.getText().toString());\r\n            i.putExtra(\"Check\", \"0\");\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n        if (comeRegister == 1) {\r\n            binding.edtNumber.requestFocus();\r\n            InputMethodManager imm = (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);\r\n            imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, InputMethodManager.HIDE_IMPLICIT_ONLY);\r\n        }\r\n\r\n        InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n        inputMethodManager.toggleSoftInputFromWindow(binding.edtNumber.getApplicationWindowToken(), InputMethodManager.SHOW_FORCED, 0);\r\n\r\n        binding.btnSendCode.setOnClickListener(view -> prepareData());\r\n    }\r\n\r\n    void prepareData() {\r\n       if (binding.edtNumber.getText().toString().length() == 0 || binding.edtNumber.getText().toString().length() < 8 ||\r\n                binding.edtNumber.getText().toString().length() > 10) {\r\n            binding.edtNumber.setFocusable(true);\r\n            binding.edtNumber.requestFocus();\r\n            binding.txtError.setVisibility(View.VISIBLE);\r\n            binding.txtError.setText(getString(R.string.not_valids_mobile_number));\r\n        } else {\r\n            binding.txtError.setVisibility(View.GONE);\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                String countryCode = binding.tvCountryCode.getText().toString().replace(\"+\",\"\");\r\n                SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_Splash, MODE_PRIVATE);\r\n                String key = (shared1.getString(CONSTANTS.PREF_KEY_SplashKey, \"\"));\r\n                if(key.equalsIgnoreCase(\"\")){\r\n                    key = getKey(ctx);\r\n                }\r\n                Call<SignUpModel> listCall = APIClient.getClient().getSignUpDatas(binding.edtNumber.getText().toString(), countryCode, CONSTANTS.FLAG_ONE, CONSTANTS.FLAG_ZERO,  key);\r\n                listCall.enqueue(new Callback<SignUpModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<SignUpModel> call, Response<SignUpModel> response) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        if (response.isSuccessful()) {\r\n                            SignUpModel loginModel = response.body();\r\n                            if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                Intent i = new Intent(ctx, CheckoutOtpActivity.class);\r\n//                            i.putParcelableArrayListExtra(\"PlanData\",listModelList);\r\n//                            i.putExtra(\"TrialPeriod\",TrialPeriod);\r\n//                            i.putExtra(\"position\",position);\r\n                                i.putExtra(\"MobileNo\", binding.edtNumber.getText().toString());\r\n                                i.putExtra(\"Name\", binding.tvCountry.getText().toString());\r\n                                i.putExtra(\"Code\", binding.tvCountryCode.getText().toString());\r\n                                BWSApplication.showToast(loginModel.getResponseMessage(), ctx);\r\n                                startActivity(i);\r\n                                finish();\r\n                            } else if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                binding.txtError.setVisibility(View.VISIBLE);\r\n                                binding.txtError.setText(loginModel.getResponseMessage());\r\n                            }\r\n                        } else {\r\n                            BWSApplication.showToast(response.message(), ctx);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<SignUpModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    }\r\n                });\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n    private TextWatcher signupTextWatcher = new TextWatcher() {\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            String number = binding.edtNumber.getText().toString().trim();\r\n            if (!number.isEmpty()) {\r\n                binding.btnSendCode.setEnabled(true);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnSendCode.setEnabled(false);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n        }\r\n    };\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutGetCodeActivity.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutGetCodeActivity.java	(date 1604397265941)
@@ -111,7 +111,7 @@
     }
 
     void prepareData() {
-       if (binding.edtNumber.getText().toString().length() == 0 || binding.edtNumber.getText().toString().length() < 8 ||
+        if (binding.edtNumber.getText().toString().length() == 0 || binding.edtNumber.getText().toString().length() < 8 ||
                 binding.edtNumber.getText().toString().length() > 10) {
             binding.edtNumber.setFocusable(true);
             binding.edtNumber.requestFocus();
@@ -121,13 +121,13 @@
             binding.txtError.setVisibility(View.GONE);
             if (BWSApplication.isNetworkConnected(ctx)) {
                 BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                String countryCode = binding.tvCountryCode.getText().toString().replace("+","");
+                String countryCode = binding.tvCountryCode.getText().toString().replace("+", "");
                 SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_Splash, MODE_PRIVATE);
                 String key = (shared1.getString(CONSTANTS.PREF_KEY_SplashKey, ""));
-                if(key.equalsIgnoreCase("")){
+                if (key.equalsIgnoreCase("")) {
                     key = getKey(ctx);
                 }
-                Call<SignUpModel> listCall = APIClient.getClient().getSignUpDatas(binding.edtNumber.getText().toString(), countryCode, CONSTANTS.FLAG_ONE, CONSTANTS.FLAG_ZERO,  key);
+                Call<SignUpModel> listCall = APIClient.getClient().getSignUpDatas(binding.edtNumber.getText().toString(), countryCode, CONSTANTS.FLAG_ONE, CONSTANTS.FLAG_ZERO, key);
                 listCall.enqueue(new Callback<SignUpModel>() {
                     @Override
                     public void onResponse(Call<SignUpModel> call, Response<SignUpModel> response) {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/DownloadAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.JsonSyntaxException;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.BigBoxLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\n\r\npublic class DownloadAdapter extends RecyclerView.Adapter<DownloadAdapter.MyViewHolder> {\r\n    Context ctx;\r\n    FragmentActivity activity;\r\n    String IsLock;\r\n    private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;\r\n\r\n    public DownloadAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,\r\n                           String IsLock) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.activity = activity;\r\n        this.IsLock = IsLock;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public DownloadAdapter.MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        BigBoxLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.big_box_layout, parent, false);\r\n        return new DownloadAdapter.MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull DownloadAdapter.MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 20,\r\n                1, 1, 0.48f, 20);\r\n        holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n            try {\r\n                SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                if(queuePlay){\r\n                    int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                    Gson gson = new Gson();\r\n                    String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                    if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                        Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                        }.getType();\r\n                        addToQueueModelList = gson.fromJson(json1, type1);\r\n                    }\r\n                    addToQueueModelList.remove(position1);\r\n                    SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared2.edit();\r\n                    String json = gson.toJson(addToQueueModelList);\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                    editor.commit();\r\n\r\n                }\r\n                if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    ctx.startActivity(i);\r\n                } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    SharedPreferences shared =ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransFrag(position,listModelList);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n                        MainAudioModel.ResponseData.Detail  mainPlayModel = new MainAudioModel.ResponseData.Detail();\r\n                        mainPlayModel.setID(\"0\");\r\n                        mainPlayModel.setName(\"Disclaimer\");\r\n                        mainPlayModel.setAudioFile(\"\");\r\n                        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                        mainPlayModel.setAudiomastercat(\"\");\r\n                        mainPlayModel.setAudioSubCategory(\"\");\r\n                        mainPlayModel.setImageFile(\"\");\r\n                        mainPlayModel.setLike(\"\");\r\n                        mainPlayModel.setDownload(\"\");\r\n                        mainPlayModel.setAudioDuration(\"0:48\");\r\n                        listModelList2.addAll(listModelList);\r\n                        listModelList2.add(position,mainPlayModel);\r\n                        callTransFrag(position,listModelList2);\r\n                    }\r\n                }\r\n            } catch (JsonSyntaxException e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callTransFrag(int position,ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {\r\n        try {\r\n            SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            if (queuePlay) {\r\n                int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                Gson gson = new Gson();\r\n                String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                    }.getType();\r\n                    addToQueueModelList = gson.fromJson(json1, type1);\r\n                }\r\n                addToQueueModelList.remove(position1);\r\n                SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared2.edit();\r\n                String json = gson.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                editor.commit();\r\n\r\n            }\r\n        player = 1;\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isPause = false;\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isCompleteStop = false;\r\n        Fragment fragment = new TransparentPlayerFragment();\r\n        FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n        fragmentManager1.beginTransaction()\r\n                .add(R.id.flContainer, fragment)\r\n                .commit();\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(listModelList);\r\n        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"DownloadListAudio\");\r\n        editor.commit();\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (4 > listModelList.size()) {\r\n            return listModelList.size();\r\n        } else {\r\n            return 4;\r\n        }\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        BigBoxLayoutBinding binding;\r\n\r\n        public MyViewHolder(BigBoxLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/DownloadAdapter.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/DownloadAdapter.java	(date 1604409033607)
@@ -89,7 +89,7 @@
             try {
                 SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
                 boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
-                if(queuePlay){
+                if (queuePlay) {
                     int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);
                     ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();
                     Gson gson = new Gson();
@@ -117,20 +117,20 @@
                     BWSApplication.showToast("Please re-activate your membership plan", ctx);
                 } else if (IsLock.equalsIgnoreCase("0") || IsLock.equalsIgnoreCase("")) {
                     holder.binding.ivLock.setVisibility(View.GONE);
-                    SharedPreferences shared =ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
+                    SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
                     boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
                     String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
                     if (audioPlay && AudioFlag.equalsIgnoreCase("DownloadListAudio")) {
                         if (isDisclaimer == 1) {
                             BWSApplication.showToast("The audio shall start playing after the disclaimer", ctx);
                         } else {
-                            callTransFrag(position,listModelList);
+                            callTransFrag(position, listModelList);
                         }
                     } else {
                         isDisclaimer = 0;
                         disclaimerPlayed = 0;
                         ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();
-                        MainAudioModel.ResponseData.Detail  mainPlayModel = new MainAudioModel.ResponseData.Detail();
+                        MainAudioModel.ResponseData.Detail mainPlayModel = new MainAudioModel.ResponseData.Detail();
                         mainPlayModel.setID("0");
                         mainPlayModel.setName("Disclaimer");
                         mainPlayModel.setAudioFile("");
@@ -142,8 +142,8 @@
                         mainPlayModel.setDownload("");
                         mainPlayModel.setAudioDuration("0:48");
                         listModelList2.addAll(listModelList);
-                        listModelList2.add(position,mainPlayModel);
-                        callTransFrag(position,listModelList2);
+                        listModelList2.add(position, mainPlayModel);
+                        callTransFrag(position, listModelList2);
                     }
                 }
             } catch (JsonSyntaxException e) {
@@ -152,7 +152,7 @@
         });
     }
 
-    private void callTransFrag(int position,ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {
+    private void callTransFrag(int position, ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {
         try {
             SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
             boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
@@ -174,34 +174,34 @@
                 editor.commit();
 
             }
-        player = 1;
-        if (isPrepare || isMediaStart || isPause) {
-            stopMedia();
-        }
-        isPause = false;
-        isMediaStart = false;
-        isPrepare = false;
-        isCompleteStop = false;
-        Fragment fragment = new TransparentPlayerFragment();
-        FragmentManager fragmentManager1 = activity.getSupportFragmentManager();
-        fragmentManager1.beginTransaction()
-                .add(R.id.flContainer, fragment)
-                .commit();
-        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
-        SharedPreferences.Editor editor = shared.edit();
-        Gson gson = new Gson();
-        String json = gson.toJson(listModelList);
-        editor.putString(CONSTANTS.PREF_KEY_modelList, json);
-        editor.putInt(CONSTANTS.PREF_KEY_position, position);
-        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
-        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
-        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, "");
-        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, "");
-        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, "DownloadListAudio");
-        editor.commit();
-    } catch (Exception e) {
-        e.printStackTrace();
-    }
+            player = 1;
+            if (isPrepare || isMediaStart || isPause) {
+                stopMedia();
+            }
+            isPause = false;
+            isMediaStart = false;
+            isPrepare = false;
+            isCompleteStop = false;
+            Fragment fragment = new TransparentPlayerFragment();
+            FragmentManager fragmentManager1 = activity.getSupportFragmentManager();
+            fragmentManager1.beginTransaction()
+                    .add(R.id.flContainer, fragment)
+                    .commit();
+            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
+            SharedPreferences.Editor editor = shared.edit();
+            Gson gson = new Gson();
+            String json = gson.toJson(listModelList);
+            editor.putString(CONSTANTS.PREF_KEY_modelList, json);
+            editor.putInt(CONSTANTS.PREF_KEY_position, position);
+            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
+            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
+            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, "");
+            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, "");
+            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, "DownloadListAudio");
+            editor.commit();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
     }
 
     @Override
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">Brain Wellness Spa</string>\r\n\r\n    <string name=\"ResponseCodesuccess\">200</string>\r\n    <string name=\"ResponseCodefail\">401</string>\r\n    <string name=\"stipe_test_key\">pk_test_Mm4d65j7STTpLo0YrkYGmaWH00tQO1qMnv</string>\r\n    <string name=\"stipe_live_key\">pk_live_nmRApzuiZfmKRruPcnpYhurb00tFp2EYYP</string>\r\n\r\n    <string name=\"sign_in\">Sign In</string>\r\n    <string name=\"enter_phone_number\">Enter Phone Number</string>\r\n    <string name=\"enter_mobile_number\">Enter Mobile Number</string>\r\n    <string name=\"mobile_number\">Mobile Number</string>\r\n    <string name=\"enter_your_code\">Enter your code</string>\r\n    <string name=\"phone_number\">Phone Number</string>\r\n    <string name=\"send_code_text\">We will send you a code by SMS to confirm your mobile number.</string>\r\n    <string name=\"register_text\"><u>Not a Member? Register</u></string>\r\n    <string name=\"privacy_policy\">Privacy Policy</string>\r\n    <string name=\"privacy_policy_t_n_c\">By clicking on Register or Sign up you agree to our</string>\r\n    <string name=\"get_the_code\">Get SMS code</string>\r\n    <string name=\"choose_your_country\">Choose your country</string>\r\n    <string name=\"enter_otp\">Enter OTP</string>\r\n    <string name=\"enter_sms\">Enter SMS Code</string>\r\n    <string name=\"resent_sms\">Resend SMS</string>\r\n    <string name=\"edit_phone_number\">Edit mobile number</string>\r\n    <string name=\"t_n_c\">Terms &amp; Conditions</string>\r\n    <string name=\"title_activity_dashboard\">MainActivity</string>\r\n    <string name=\"title_audio\">AUDIO</string>\r\n    <string name=\"title_playlist\">PLAYLIST</string>\r\n    <string name=\"title_appointment\">APPOINTMENT</string>\r\n    <string name=\"title_account\">ACCOUNT</string>\r\n    <string name=\"title_search\">SEARCH</string>\r\n    <string name=\"thank_u\">Thank You</string>\r\n    <string name=\"thank_u_quotes\">Congratulations on joining the Brain Wellness Spa Audio Membership</string>\r\n    <string name=\"explore_app\">Explore app</string>\r\n    <string name=\"view_invoice\"><u>View Invoice</u></string>\r\n    <string name=\"downloads\">Downloads</string>\r\n    <string name=\"invoices\">Invoices</string>\r\n    <string name=\"logout\">Log out</string>\r\n    <string name=\"faq\">FAQ</string>\r\n    <string name=\"reminder\">Reminder</string>\r\n    <string name=\"billing_and_order\">Billing and Order</string>\r\n    <string name=\"view_profile\">View Profile</string>\r\n    <string name=\"profile\">Profile</string>\r\n    <string name=\"Full_Name\">Full Name</string>\r\n    <string name=\"Date_of_Birth\">Date of Birth</string>\r\n    <string name=\"Mobile_Number\">Mobile Number</string>\r\n    <string name=\"Email_Address\">Email Address</string>\r\n    <string name=\"Downloads\">Downloads</string>\r\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\r\n    <string name=\"Invoice\">Invoice</string>\r\n    <string name=\"Billing_and_Order\">Billing and Order</string>\r\n    <string name=\"Cancel_Subscription\">Cancel Subscription</string>\r\n    <string name=\"Cancel\">Cancel</string>\r\n    <string name=\"cancel_quotes\">Are you sure you want to cancel your subscription?</string>\r\n    <string name=\"reminder_quotes\">Are you sure you want to delete your reminder?</string>\r\n    <string name=\"go_back\">Go Back</string>\r\n    <string name=\"Country\">Country</string>\r\n    <string name=\"Postcode\">Postcode</string>\r\n    <string name=\"State\">State</string>\r\n    <string name=\"Save\">Save</string>\r\n    <string name=\"Address_Line_One\">Address Line 1</string>\r\n    <string name=\"Address_Line_Two\">Address Line 2 (Optional)</string>\r\n    <string name=\"City\">Suburb / Town / City</string>\r\n    <string name=\"Card_Number\">Card Number</string>\r\n    <string name=\"Card_Holder_Name\">Card Holder Name</string>\r\n    <string name=\"Cvv\">CVV</string>\r\n    <string name=\"Add_New_Card\">Add New Card</string>\r\n    <string name=\"FAQ\">FAQ</string>\r\n    <string name=\"disclaimer\"><b>Disclaimer:</b> The Brain Wellness Spa offers a unique, alternative and drug free method created by our founder Terri Bowman aimed to assist people encountering struggles in their daily lives, to find inner peace and overcome negative thoughts and emotions (the Brain Wellness Spa Method).\\n\\nThe Brain Wellness Spa Method is not a scientific method. \\n\\nThe testimonials of our clients speak for themselves and we are so proud of the incredible results they have achieved – we want to help you and are committed to assisting you find a way to live a better life. However, as with any service, we accept that it may not be right for everyone and that results may vary from client to client. Accordingly, we make no promises or representations that our service will work for you but we invite you to try it for yourself.</string>\r\n    <string name=\"Disclaimer\">Disclaimer</string>\r\n    <string name=\"Audio\">Audio</string>\r\n    <string name=\"Playlist\">Playlist</string>\r\n    <string name=\"Help\">Help</string>\r\n    <string name=\"Reminder\">Reminder</string>\r\n    <string name=\"Set_a_Reminder\">Set a Reminder</string>\r\n    <string name=\"Repeat\">Repeat</string>\r\n    <string name=\"Membership\">Membership</string>\r\n    <string name=\"month_free\">Join Now – Get 1 Month Free</string>\r\n    <string name=\"Order_Summary\">Order Summary</string>\r\n    <string name=\"Proceed_to_checkout\">Proceed to checkout</string>\r\n    <string name=\"Checkout\">Checkout</string>\r\n    <string name=\"Next\">Next</string>\r\n    <string name=\"Complete_Payment\">Complete Payment</string>\r\n    <string name=\"Explore\">Explore</string>\r\n    <string name=\"Recently_Played\">Recently Played</string>\r\n    <string name=\"My_Downloads\">My Downloads</string>\r\n    <string name=\"View_all\">View all</string>\r\n    <string name=\"Recommended\">Recommended</string>\r\n    <string name=\"Get_Inspired\">Get Inspired !</string>\r\n    <string name=\"Popular\">Popular</string>\r\n    <string name=\"Top_Categories\">Top Categories</string>\r\n    <string name=\"Appointment\">Appointment</string>\r\n    <string name=\"Next_Session\">Next Session</string>\r\n    <string name=\"Previous_Appointments\">Previous Appointments</string>\r\n    <string name=\"Create_playlist\">Create playlist</string>\r\n    <string name=\"give_playlist_name\">Give your playlist a name.</string>\r\n    <string name=\"Your_Created\">Your Created</string>\r\n    <string name=\"Suggested_Audios\">Suggested Audios</string>\r\n    <string name=\"Recommended_Audios\">Recommended  Audios</string>\r\n    <string name=\"Suggested_Playlist\">Suggested Playlist</string>\r\n    <string name=\"Recommendeds_Playlist\">Recommended Playlist</string>\r\n    <string name=\"View_order_details\">View order details</string>\r\n    <string name=\"Payment_information\">Payment information</string>\r\n    <string name=\"Order_summary\">Order summary</string>\r\n    <string name=\"NOW_PLAYING_FROM\">NOW PLAYING FROM</string>\r\n    <string name=\"Download_audio\">Download audio</string>\r\n    <string name=\"Like\">Like</string>\r\n    <string name=\"Add_to_Playlist\">Add to Playlist</string>\r\n    <string name=\"Add_to_Queue\">Add to Queue</string>\r\n    <string name=\"Shuffle\">Shuffle</string>\r\n    <string name=\"Go_to_queue\">Go to queue</string>\r\n    <string name=\"Directions\">Directions</string>\r\n    <string name=\"Now_Playing\">Now Playing</string>\r\n    <string name=\"Next_in_queue\">Next in queue</string>\r\n    <string name=\"close_queue\">Close queue</string>\r\n    <string name=\"Self_development\">Self-development</string>\r\n    <string name=\"Add_Audio\">Add Audio</string>\r\n    <string name=\"Add_Audios\">Add Audios</string>\r\n    <string name=\"Suggested\">Suggested</string>\r\n    <string name=\"Session\">Session</string>\r\n    <string name=\"Appointment_Details\">Appointment Details</string>\r\n    <string name=\"Complete_the_Booklet\">Complete the Booklet</string>\r\n    <string name=\"Download_PDF\">Download PDF</string>\r\n    <string name=\"Book_Now\">Book Now</string>\r\n    <string name=\"Audios_in_Playlist\">Audios in Playlist</string>\r\n    <string name=\"New_PLaylist\">New PLaylist</string>\r\n    <string name=\"Rename_playlist\">Rename playlist</string>\r\n    <string name=\"Delete_playlist\">Delete playlist</string>\r\n    <string name=\"Download_playlist\">Download playlist</string>\r\n    <string name=\"Add_playlist\">Add to playlist</string>\r\n    <string name=\"Add_playlist1\">Add Playlist</string>\r\n    <string name=\"delete_quotes\">Are you sure you want to delete Self-development playlist?</string>\r\n    <string name=\"Close\">Close</string>\r\n    <string name=\"Description\">Description</string>\r\n    <string name=\"Resource\">Resource</string>\r\n    <string name=\"Resources\">Resources</string>\r\n    <string name=\"Select_reason\">Select reason</string>\r\n    <string name=\"logout_quotes\">Are you sure you want to log out Brain Wellness Spa?</string>\r\n    <string name=\"Discover_More\">Discover More</string>\r\n    <string name=\"error_player\">There was an error initializing the YouTubePlayer (%1$s)</string>\r\n    <string name=\"no_server_found\">You are not currently connected to internet. Please try again.!</string>\r\n    <string name=\"not_valid_number\">Please enter a valid mobile number</string>\r\n    <string name=\"not_valid_mobile_number\">Please use a valid mobile number</string>\r\n    <string name=\"not_valids_mobile_number\">Please enter a valid mobile number</string>\r\n    <string name=\"no_add_digits\">Wait a sec! We need to exchange digits to get started</string>\r\n    <string name=\"Please_enter_your_mobile_number\">Please enter your mobile number</string>\r\n    <string name=\"Australia\">Australia</string>\r\n    <string name=\"code\">+61</string>\r\n    <string name=\"my_download\">MyDownload</string>\r\n    <string name=\"my_like\">MyLike</string>\r\n    <string name=\"recently_played\">Recently Played</string>\r\n    <string name=\"recommended\">Recommended</string>\r\n    <string name=\"Library\">Library</string>\r\n    <string name=\"get_inspired\">Get Inspired</string>\r\n    <string name=\"popular\">Popular</string>\r\n    <string name=\"top_categories\">Top Categories</string>\r\n    <string name=\"Rename\">Rename</string>\r\n    <string name=\"notvalid_number\">It seems your mobile number not exist in our system.</string>\r\n    <string name=\"valid_name\">Please enter name</string>\r\n    <string name=\"takePhoto\">Take photo</string>\r\n    <string name=\"chooseFromGallary\">Choose from gallery</string>\r\n    <string name=\"cancel\">Cancel</string>\r\n    <string name=\"addPhoto\">Add photo!</string>\r\n    <string name=\"removeProfilePicture\">Remove profile picture</string>\r\n    <string name=\"your_created\">Your Created</string>\r\n    <string name=\"MyDownloads\">MyDownloads</string>\r\n    <string name=\"populars\">Popular</string>\r\n    <string name=\"Bundle\">Bundle</string>\r\n    <string name=\"Recommended_Playlist\">Recommended Playlist</string>\r\n    <string name=\"first_card_chars\">XXXX XXXX XXXX </string>\r\n    <string name=\"blank_all_fields\">Hey! I\\'ll need your inputs</string>\r\n    <string name=\"valid_card_no_error\">Hey! Seems like the card number is out of whack. Fancy a retry?</string>\r\n    <string name=\"valid_expiry_error\">Hey! I\\'ll need you to add expiry details</string>\r\n    <string name=\"valid_cvv_error\">Hey! I\\'ll need you to add the CVV</string>\r\n    <string name=\"invalid_expiry_date\">Hey! Seems like the expiry details are out of whack. Fancy a retry?</string>\r\n    <string name=\"invalid_cvv_error\">Hey! Seems like the CVV is out of whack. Fancy a retry?</string>\r\n    <string name=\"blank_card_no_error\">Hey! I\\'ll need you to add card number</string>\r\n    <string name=\"blank_card_holder_name_error\">Hey! I\\'ll need you to add cardholder name</string>\r\n    <string name=\"Audio_Book\">Audio Books</string>\r\n    <string name=\"Podcasts\">Podcasts</string>\r\n    <string name=\"Apps\">Apps</string>\r\n    <string name=\"Website\">Website</string>\r\n    <string name=\"Websites\">Websites</string>\r\n    <string name=\"Documentaries\">Documentaries</string>\r\n    <string name=\"My_Playlist\">My Playlist</string>\r\n    <string name=\"background_image\">Background Image</string>\r\n    <string name=\"Search_for_audio\">Search for audio</string>\r\n    <string name=\"Feeling_better\">Feeling better</string>\r\n    <string name=\"Condition_worse\">Condition worse</string>\r\n    <string name=\"Pricing\">Pricing</string>\r\n    <string name=\"Other_reason\">Other reason</string>\r\n    <string name=\"Appointment_Header\">There are no upcoming appointments scheduled. Would you like to <b>Book a new appointment?</b></string>\r\n    <string name=\"Rename_your_playlist\">Rename your playlist .</string>\r\n    <string name=\"no_data_found\">Try searching again using a diffrent spelling or keyword.</string>\r\n    <string name=\"f_A_Q\">Frequently Asked Questions</string>\r\n    <string name=\"Find_in_playlist\">Find in playlist</string>\r\n    <string name=\"Remove_from_this_playlist\">Remove from this playlist</string>\r\n    <string name=\"Pay_Now\">Pay Now</string>\r\n    <string name=\"Active\">Active</string>\r\n    <string name=\"InActive\">InActive</string>\r\n    <string name=\"Suspended\">Suspended</string>\r\n    <string name=\"Cancelled\">Cancelled</string>\r\n    <string name=\"Proceed_to_plan\">Proceed to plan</string>\r\n    <string name=\"Select_Playlist\">Select Playlist</string>\r\n    <string name=\"Add_New_Reminder\">Add New Reminder</string>\r\n    <string name=\"Delete_Reminder\">Delete Reminder</string>\r\n    <string name=\"Payment\">Payment</string>\r\n\r\n    <string name=\"default_notification_channel_id\">10001</string>\r\n    <string name=\"Delete_payment_card\">Delete payment card</string>\r\n    <string name=\"delete_payment_quotes\">Are you sure you want to delete the payment card ?</string>\r\n    <string name=\"sucess_playlist\">Sucessfully added to playlist</string>\r\n    <string name=\"Guest\">Guest</string>\r\n    <string name=\"membership_title\">Access More Than 65 Audio Programs.</string>\r\n    <string name=\"t_n_cs\"><u>T&amp;Cs</u></string>\r\n    <string name=\"t_n_csm\">T&amp;Cs,</string>\r\n    <string name=\"privacy_policysm\">Privacy Policy </string>\r\n    <string name=\"privacy_policys\">, <u>Privacy Policy</u> </string>\r\n    <string name=\"disclaimers\"><u>Disclaimer</u></string>\r\n    <string name=\"playlist_or_audio_search\">Add or search for audio, playlist</string>\r\n    <string name=\"and\">and</string>\r\n    <string name=\"Disclaimer_text\">The Brain Wellness Spa offers a unique, alternative and drug free method created by our founder Terri Bowman aimed to assist people encountering struggles in their daily lives, to find inner peace and overcome negative thoughts and emotions (the Brain Wellness Spa Method).\\n\\nThe Brain Wellness Spa Method is not a scientific method. \\n\\nThe testimonials of our clients speak for themselves and we are so proud of the incredible results they have achieved – we want to help you and are committed to assisting you find a way to live a better life. However, as with any service, we accept that it may not be right for everyone and that results may vary from client to client. Accordingly, we make no promises or representations that our service will work for you but we invite you to try it for yourself.</string>\r\n    <string name=\"General\">General</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/res/values/strings.xml	(date 1604397265995)
@@ -221,4 +221,5 @@
     <string name="and">and</string>
     <string name="Disclaimer_text">The Brain Wellness Spa offers a unique, alternative and drug free method created by our founder Terri Bowman aimed to assist people encountering struggles in their daily lives, to find inner peace and overcome negative thoughts and emotions (the Brain Wellness Spa Method).\n\nThe Brain Wellness Spa Method is not a scientific method. \n\nThe testimonials of our clients speak for themselves and we are so proud of the incredible results they have achieved – we want to help you and are committed to assisting you find a way to live a better life. However, as with any service, we accept that it may not be right for everyone and that results may vary from client to client. Accordingly, we make no promises or representations that our service will work for you but we invite you to try it for yourself.</string>
     <string name="General">General</string>
+    <string name="Favorites">Favorites</string>
 </resources>
\ No newline at end of file
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecommendedAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.BigBoxLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\n\r\n\r\npublic class RecommendedAdapter extends RecyclerView.Adapter<RecommendedAdapter.MyViewHolder> {\r\n    Context ctx;\r\n    FragmentActivity activity;\r\n    String IsLock;\r\n    private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;\r\n\r\n    public RecommendedAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,\r\n                              String IsLock) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.activity = activity;\r\n        this.IsLock = IsLock;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        BigBoxLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.big_box_layout, parent, false);\r\n        return new MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 16,\r\n                1, 1, 0.44f, 10);\r\n        holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n//       TODO                 Active and cancelled = 0, InActive = 1, Suspeded = 2\r\n            SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            if(queuePlay){\r\n                int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                Gson gson = new Gson();\r\n                String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                    }.getType();\r\n                    addToQueueModelList = gson.fromJson(json1, type1);\r\n                }\r\n                addToQueueModelList.remove(position1);\r\n                SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared2.edit();\r\n                String json = gson.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                editor.commit();\r\n            }\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callTransFrag(position);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    ctx.startActivity(i);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callTransFrag(position);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n                callTransFrag(position);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callTransFrag(int position) {\r\n        try {\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n\r\n\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n            MainAudioModel.ResponseData.Detail  mainPlayModel = new MainAudioModel.ResponseData.Detail();\r\n            mainPlayModel.setID(\"0\");\r\n            mainPlayModel.setName(\"Disclaimer\");\r\n            mainPlayModel.setAudioFile(\"\");\r\n            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n            mainPlayModel.setAudiomastercat(\"\");\r\n            mainPlayModel.setAudioSubCategory(\"\");\r\n            mainPlayModel.setImageFile(\"\");\r\n            mainPlayModel.setLike(\"\");\r\n            mainPlayModel.setDownload(\"\");\r\n            mainPlayModel.setAudioDuration(\"0:48\");\r\n            listModelList2.add(mainPlayModel);\r\n\r\n            listModelList2.add(listModelList.get(position));\r\n            String json = gson.toJson(listModelList2);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"MainAudioList\");\r\n            editor.commit();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (4 > listModelList.size()) {\r\n            return listModelList.size();\r\n        } else {\r\n            return 4;\r\n        }\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        BigBoxLayoutBinding binding;\r\n\r\n        public MyViewHolder(BigBoxLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecommendedAdapter.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecommendedAdapter.java	(date 1604409033614)
@@ -39,8 +39,6 @@
 import static com.brainwellnessspa.Utility.MusicService.isPrepare;
 import static com.brainwellnessspa.Utility.MusicService.stopMedia;
 
-
-
 public class RecommendedAdapter extends RecyclerView.Adapter<RecommendedAdapter.MyViewHolder> {
     Context ctx;
     FragmentActivity activity;
@@ -95,7 +93,7 @@
 //       TODO                 Active and cancelled = 0, InActive = 1, Suspeded = 2
             SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
             boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
-            if(queuePlay){
+            if (queuePlay) {
                 int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);
                 ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();
                 Gson gson = new Gson();
@@ -161,7 +159,7 @@
             SharedPreferences.Editor editor = shared.edit();
             Gson gson = new Gson();
             ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();
-            MainAudioModel.ResponseData.Detail  mainPlayModel = new MainAudioModel.ResponseData.Detail();
+            MainAudioModel.ResponseData.Detail mainPlayModel = new MainAudioModel.ResponseData.Detail();
             mainPlayModel.setID("0");
             mainPlayModel.setName("Disclaimer");
             mainPlayModel.setAudioFile("");
Index: app/src/main/java/com/brainwellnessspa/LoginModule/Activities/CountrySelectActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.LoginModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.EditText;\r\nimport android.widget.Filter;\r\nimport android.widget.Filterable;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.LoginModule.Models.CountryListModel;\r\nimport com.brainwellnessspa.MembershipModule.Activities.CheckoutGetCodeActivity;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityCountrySelectBinding;\r\nimport com.brainwellnessspa.databinding.CountryLayoutBinding;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class CountrySelectActivity extends AppCompatActivity {\r\n    ActivityCountrySelectBinding binding;\r\n    CountrySelectAdapter adapter;\r\n    //    String TrialPeriod;\r\n//    private ArrayList<MembershipPlanListModel.Plan> listModelList;\r\n//    int position;\r\n    Context ctx;\r\n    Activity activity;\r\n    String Name, Code, MobileNo, Check,searchFilter;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_country_select);\r\n        ctx = CountrySelectActivity.this;\r\n        activity = CountrySelectActivity.this;\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            MobileNo = getIntent().getStringExtra(CONSTANTS.MobileNo);\r\n            Name = getIntent().getStringExtra(CONSTANTS.Name);\r\n            Code = getIntent().getStringExtra(CONSTANTS.Code);\r\n            Check = getIntent().getStringExtra(CONSTANTS.Check);\r\n//            TrialPeriod = getIntent().getStringExtra(\"TrialPeriod\");\r\n//            listModelList = getIntent().getParcelableArrayListExtra(\"PlanData\");\r\n//            position = getIntent().getIntExtra(\"position\", 0);\r\n        }\r\n        binding.llBack.setOnClickListener(view -> {\r\n            if (Check.equalsIgnoreCase(\"0\")) {\r\n                Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n                i.putExtra(\"Name\", Name);\r\n                i.putExtra(\"Code\", Code);\r\n                i.putExtra(\"MobileNo\", MobileNo);\r\n                startActivity(i);\r\n                finish();\r\n            } else if (Check.equalsIgnoreCase(\"1\")) {\r\n                Intent i = new Intent(ctx, LoginActivity.class);\r\n                i.putExtra(\"Name\", Name);\r\n                i.putExtra(\"Code\", Code);\r\n                i.putExtra(\"MobileNo\", MobileNo);\r\n                startActivity(i);\r\n                finish();\r\n            }\r\n        });\r\n\r\n        binding.searchView.onActionViewExpanded();\r\n        EditText searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n\r\n        closeButton.setOnClickListener(view -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n        searchEditText.setHint(\"Search for country\");\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                try {\r\n                    adapter.getFilter().filter(search);\r\n                    searchFilter = search;\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getApplicationContext());\r\n        binding.rvCountryList.setLayoutManager(mLayoutManager);\r\n        binding.rvCountryList.setItemAnimator(new DefaultItemAnimator());\r\n        if (BWSApplication.isNetworkConnected(this)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<CountryListModel> listCall = APIClient.getClient().getCountryLists();\r\n            listCall.enqueue(new Callback<CountryListModel>() {\r\n                @Override\r\n                public void onResponse(Call<CountryListModel> call, Response<CountryListModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        CountryListModel listModel = response.body();\r\n                        if (listModel != null) {\r\n                            adapter = new CountrySelectAdapter(listModel.getResponseData());\r\n                        }\r\n                        binding.rvCountryList.setAdapter(adapter);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<CountryListModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), this);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (Check.equalsIgnoreCase(\"0\")) {\r\n            Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            i.putExtra(\"MobileNo\", MobileNo);\r\n            startActivity(i);\r\n            finish();\r\n        } else if (Check.equalsIgnoreCase(\"1\")) {\r\n            Intent i = new Intent(ctx, LoginActivity.class);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            i.putExtra(\"MobileNo\", MobileNo);\r\n            startActivity(i);\r\n            finish();\r\n        }\r\n    }\r\n\r\n    public class CountrySelectAdapter extends RecyclerView.Adapter<CountrySelectAdapter.MyViewHolder> implements Filterable {\r\n        private List<CountryListModel.ResponseData> modelList;\r\n        private List<CountryListModel.ResponseData> listFilterData;\r\n\r\n        public CountrySelectAdapter(List<CountryListModel.ResponseData> modelList) {\r\n            this.modelList = modelList;\r\n            this.listFilterData = modelList;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            CountryLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.country_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            final CountryListModel.ResponseData mData = listFilterData.get(position);\r\n            holder.binding.tvCountryName.setText(mData.getName());\r\n            holder.binding.tvCountryCode.setText(\"+\" + mData.getCode());\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                String conutry = \"+\" + mData.getCode();\r\n                if (Check.equalsIgnoreCase(\"0\")) {\r\n                    Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n                    i.putExtra(\"Name\", mData.getName());\r\n                    i.putExtra(\"Code\", conutry);\r\n                    i.putExtra(\"MobileNo\", MobileNo);\r\n                    ctx.startActivity(i);\r\n                    finish();\r\n                } else if (Check.equalsIgnoreCase(\"1\")) {\r\n                    Intent i = new Intent(ctx, LoginActivity.class);\r\n                    i.putExtra(\"Name\", mData.getName());\r\n                    i.putExtra(\"Code\", conutry);\r\n                    i.putExtra(\"MobileNo\", MobileNo);\r\n                    ctx.startActivity(i);\r\n                    finish();\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listFilterData.size();\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = modelList;\r\n                    } else {\r\n                        List<CountryListModel.ResponseData> filteredList = new ArrayList<>();\r\n                        for (CountryListModel.ResponseData row : modelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.tvFound.setVisibility(View.VISIBLE);\r\n                        binding.tvFound.setText(\"Couldn't find \"+ searchFilter +\". Try searching again\");\r\n                        binding.rvCountryList.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.tvFound.setVisibility(View.GONE);\r\n                        binding.rvCountryList.setVisibility(View.VISIBLE);\r\n                        listFilterData = (List<CountryListModel.ResponseData>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            CountryLayoutBinding binding;\r\n\r\n            public MyViewHolder(CountryLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LoginModule/Activities/CountrySelectActivity.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/LoginModule/Activities/CountrySelectActivity.java	(date 1604409033648)
@@ -40,12 +40,12 @@
 public class CountrySelectActivity extends AppCompatActivity {
     ActivityCountrySelectBinding binding;
     CountrySelectAdapter adapter;
-    //    String TrialPeriod;
+//    String TrialPeriod;
 //    private ArrayList<MembershipPlanListModel.Plan> listModelList;
 //    int position;
     Context ctx;
     Activity activity;
-    String Name, Code, MobileNo, Check,searchFilter;
+    String Name, Code, MobileNo, Check, searchFilter;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -235,7 +235,7 @@
                 protected void publishResults(CharSequence charSequence, FilterResults filterResults) {
                     if (listFilterData.size() == 0) {
                         binding.tvFound.setVisibility(View.VISIBLE);
-                        binding.tvFound.setText("Couldn't find "+ searchFilter +". Try searching again");
+                        binding.tvFound.setText("Couldn't find " + searchFilter + ". Try searching again");
                         binding.rvCountryList.setVisibility(View.GONE);
                     } else {
                         binding.tvFound.setVisibility(View.GONE);
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ .idea/gradle.xml	(date 1604397266039)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments;\r\n\r\nimport android.app.Activity;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.media.AudioAttributes;\r\nimport android.media.AudioManager;\r\nimport android.media.MediaPlayer;\r\nimport android.media.RingtoneManager;\r\nimport android.net.Uri;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.support.v4.media.session.MediaControllerCompat;\r\nimport android.support.v4.media.session.MediaSessionCompat;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.media.MediaSessionManager;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Activities.DashboardActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.Utility.PlaybackStatus;\r\nimport com.brainwellnessspa.databinding.FragmentTransparentPlayerBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPreparing;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isprogressbar;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class TransparentPlayerFragment extends Fragment implements SeekBar.OnSeekBarChangeListener/*, AudioManager.OnAudioFocusChangeListener*/ {\r\n    public static int isDisclaimer = 0;\r\n    public FragmentTransparentPlayerBinding binding;\r\n    String UserID, AudioFlag, IsRepeat, IsShuffle, audioFile, id, name;\r\n    public static String addToRecentPlayId = \"\";\r\n    int position = 0, startTime, listSize, myCount;\r\n    MainPlayModel mainPlayModel;\r\n    Boolean queuePlay, audioPlay;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<AddToQueueModel> addToQueueModelList;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    Activity activity;\r\n    Context ctx;\r\n    long myProgress = 0, diff = 0;\r\n    SharedPreferences shared;\r\n    String json;\r\n    Gson gson;\r\n    private long totalDuration, currentDuration = 0;\r\n    private Handler handler12;\r\n    public static final String ACTION_PLAY = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PLAY\";\r\n    public static final String ACTION_PAUSE = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PAUSE\";\r\n    public static final String ACTION_PREVIOUS = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PREVIOUS\";\r\n    public static final String ACTION_NEXT = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_NEXT\";\r\n    public static final String ACTION_STOP = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_STOP\";\r\n\r\n    //MediaSession\r\n    private MediaSessionManager mediaSessionManager;\r\n    private MediaSessionCompat mediaSession;\r\n    private MediaControllerCompat.TransportControls transportControls;\r\n    PlaybackStatus playbackStatus;\r\n    //AudioPlayer notification ID\r\n    private static final int NOTIFICATION_ID = 101;\r\n    private Runnable UpdateSongTime12 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                startTime = getStartTime();\r\n                binding.simpleSeekbar.setMax(100);\r\n                Time t = Time.valueOf(\"00:00:00\");\r\n                if (queuePlay) {\r\n                    if (listSize != 0) {\r\n                        if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        stopMedia();\r\n                    }\r\n                } else if (audioPlay) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                        }\r\n                    } else {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else\r\n                        totalDuration = t.getTime();\r\n                } else {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else {\r\n                        totalDuration = t.getTime();\r\n                    }\r\n                }\r\n                myProgress = currentDuration;\r\n                currentDuration = getStartTime();\r\n                diff = totalDuration - myProgress;\r\n\r\n//                Log.e(\"myProgress old!!!\",String.valueOf(myProgress));\r\n                if (myProgress == currentDuration && myProgress != 0 && !isPause && audioFile.equalsIgnoreCase(\"\")) {\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                    myCount++;\r\n                    Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                    if (myCount == 5) {\r\n                        Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                        callComplete();\r\n                        Log.e(\"calll complete errr\", \"eee\");\r\n                        myCount = 0;\r\n                    }\r\n                } else if (myProgress == currentDuration && myProgress != 0 && !isPause && diff < 500) {\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                    myCount++;\r\n                    Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                    if (myCount == 20) {\r\n                        Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                        callComplete();\r\n                        Log.e(\"calll complete errr\", \"eee\");\r\n                        myCount = 0;\r\n                    }\r\n                }\r\n                if (currentDuration == totalDuration && currentDuration != 0 && !isStop && !audioFile.equalsIgnoreCase(\"\")) {\r\n                    callComplete();\r\n                    Log.e(\"calll complete trans\", \"trans\");\r\n\r\n                }\r\n                if (currentDuration == totalDuration && currentDuration != 0 && !isStop && audioFile.equalsIgnoreCase(\"\")) {\r\n                    mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                        callComplete();\r\n                    });\r\n                }\r\n                int progress = (int) (getProgressPercentage(currentDuration, totalDuration));\r\n                if (player == 1) {\r\n                    if (currentDuration == 0 && isCompleteStop) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    } else if (currentDuration == 0 && !isPause) {\r\n                        binding.progressBar.setVisibility(View.VISIBLE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.GONE);\r\n                    } else if (currentDuration >= 1 && !isPause) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.VISIBLE);\r\n                        binding.ivPlay.setVisibility(View.GONE);\r\n                    } else if (currentDuration >= 1 && isPause) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    }\r\n                } else {\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.ivPause.setVisibility(View.GONE);\r\n                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n                //Log.d(\"Progress\", \"\"+progress);\r\n                if (isPause) {\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n                } else {\r\n                    binding.simpleSeekbar.setProgress(progress);\r\n                }\r\n                // Running this thread after 100 milliseconds\r\n                handler12.postDelayed(this, 100);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    };\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_transparent_player, container, false);\r\n        View view = binding.getRoot();\r\n        activity = getActivity();\r\n        ctx = getActivity();\r\n        mainPlayModelList = new ArrayList<>();\r\n        addToQueueModelList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        handler12 = new Handler();\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        gson = new Gson();\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n\r\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        params.setMargins(0, 0, 0, 130);\r\n        binding.llLayout.setLayoutParams(params);\r\n\r\n        if (comefromDownload.equalsIgnoreCase(\"1\")) {\r\n            LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            param.setMargins(0, 0, 0, 0);\r\n            binding.llLayout.setLayoutParams(param);\r\n        } else {\r\n            LinearLayout.LayoutParams paramm = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            paramm.setMargins(0, 0, 0, 130);\r\n            binding.llLayout.setLayoutParams(paramm);\r\n\r\n        }\r\n        if (isMediaStart) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete real\", \"real\");\r\n            });\r\n        }\r\n\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        SharedPreferences Status = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n    /*    mAudioManager = (AudioManager) ctx.getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        if (queuePlay) {\r\n            getPrepareShowData();\r\n        } else if (audioPlay) {\r\n            MakeArray();\r\n        }\r\n        if (listSize == 1) {\r\n            IsShuffle = \"\";\r\n        }\r\n        binding.ivPause.setOnClickListener(view1 -> {\r\n            handler12.removeCallbacks(UpdateSongTime12);\r\n            binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n            if (!isMediaStart) {\r\n//                callAsyncTask();\r\n                callMedia();\r\n            } else {\r\n                pauseMedia();\r\n                binding.ivPause.setVisibility(View.GONE);\r\n                binding.ivPlay.setVisibility(View.VISIBLE);\r\n            }\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        });\r\n\r\n        binding.ivPlay.setOnClickListener(view12 -> {\r\n            if (!isMediaStart) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler12.postDelayed(UpdateSongTime12, 500);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                binding.ivPlay.setVisibility(View.GONE);\r\n                binding.ivPause.setVisibility(View.GONE);\r\n                callMedia();\r\n            } else if (isCompleteStop) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler12.postDelayed(UpdateSongTime12, 500);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                binding.ivPlay.setVisibility(View.GONE);\r\n                binding.ivPause.setVisibility(View.GONE);\r\n                callMedia();\r\n            } else {\r\n                resumeMedia();\r\n                binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                binding.ivPlay.setVisibility(View.GONE);\r\n                binding.ivPause.setVisibility(View.VISIBLE);\r\n                isPause = false;\r\n            }\r\n            player = 1;\r\n            handler12.postDelayed(UpdateSongTime12, 100);\r\n        });\r\n\r\n        return view;\r\n    }\r\n\r\n    private void MakeArray() {\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n//            if (isDisclaimer == 0 && disclaimerPlayed == 0) {\r\n//                addDeclaimer();\r\n//            }\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        }\r\n    }\r\n\r\n    private void addToRecentPlay() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n//            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n//                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n//                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public void GetMedia(String url, Context ctx) {\r\n        try {\r\n            downloadAudioDetailsList = new ArrayList<>();\r\n            class GetMedia extends AsyncTask<Void, Void, Void> {\r\n                @Override\r\n                protected Void doInBackground(Void... voids) {\r\n                    downloadAudioDetailsList = DatabaseClient\r\n                            .getInstance(ctx)\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .getLastIdByuId(url);\r\n                    return null;\r\n                }\r\n\r\n                @Override\r\n                protected void onPostExecute(Void aVoid) {\r\n                    try {\r\n                        if (audioPlay) {\r\n                            if (listSize != 0) {\r\n                                binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                                binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                                try {\r\n                                    if (audioFile.equalsIgnoreCase(\"\")) {\r\n                                        Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                                    } else {\r\n                                        Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                                    }\r\n                                } catch (Exception e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (player == 1) {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n//                    binding.llProgress.setVisibility(View.GONE);\r\n                            if (isPause) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.VISIBLE);\r\n                                binding.simpleSeekbar.setProgress(oTime);\r\n                            } else if (isCompleteStop) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.VISIBLE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                            } else if (isMediaStart && !isPause) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                                binding.ivPause.setVisibility(View.VISIBLE);\r\n                                binding.ivPlay.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.progressBar.setVisibility(View.VISIBLE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.GONE);\r\n                                callMedia();\r\n                            }\r\n                        } else {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n\r\n//                    binding.llProgress.setVisibility(View.GONE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    super.onPostExecute(aVoid);\r\n\r\n                }\r\n            }\r\n\r\n            GetMedia st = new GetMedia();\r\n            st.execute();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void getPrepareShowData() {\r\n        handler12.postDelayed(UpdateSongTime12, 100);\r\n        try {\r\n            if (queuePlay) {\r\n                listSize = addToQueueModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (position == listSize) {\r\n                    position = position - 1;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = addToQueueModelList.get(position).getID();\r\n                    name = addToQueueModelList.get(position).getName();\r\n                    audioFile = addToQueueModelList.get(position).getAudioFile();\r\n                    GetMedia(audioFile, ctx);\r\n                    Glide.with(ctx).load(addToQueueModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    binding.tvTitle.setText(addToQueueModelList.get(position).getName());\r\n                    binding.tvSubTitle.setText(addToQueueModelList.get(position).getAudioDirection());\r\n                    handler12.postDelayed(UpdateSongTime12, 100);\r\n                }\r\n            } else if (audioPlay) {\r\n                listSize = mainPlayModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = mainPlayModelList.get(position).getID();\r\n                    name = mainPlayModelList.get(position).getName();\r\n                    audioFile = mainPlayModelList.get(position).getAudioFile();\r\n                    binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                    binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                    if (audioFile.equalsIgnoreCase(\"\")) {\r\n                        Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    } else {\r\n                        Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    }\r\n                    GetMedia(audioFile, ctx);\r\n                    handler12.postDelayed(UpdateSongTime12, 100);\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        isDisclaimer = 1;\r\n                        binding.simpleSeekbar.setClickable(false);\r\n                        binding.simpleSeekbar.setEnabled(false);\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        binding.simpleSeekbar.setClickable(true);\r\n                        binding.simpleSeekbar.setEnabled(true);\r\n                    }\r\n                }\r\n            }\r\n            startTime = getStartTime();\r\n            simple_Notification(playbackStatus, mainPlayModelList);\r\n            if (!audioFile.equalsIgnoreCase(\"\")) {\r\n                if(!id.equalsIgnoreCase(addToRecentPlayId)) {\r\n                    addToRecentPlay();\r\n                    Log.e(\"Api call recent\",id);\r\n                }\r\n            }\r\n            addToRecentPlayId = id;\r\n            Log.e(\"addToRecentPlayID\",addToRecentPlayId);\r\n            Log.e(\"new addToRecentPlayID\",id);\r\n            binding.llPlayearMain.setOnClickListener(view -> {\r\n                handler12.removeCallbacks(UpdateSongTime12);\r\n                if (player == 0) {\r\n                    player = 1;\r\n                }\r\n                if (!isPause && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isPause = false;\r\n                    isprogressbar = false;\r\n                } else if (isPause && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isPause = true;\r\n                    isprogressbar = false;\r\n                } else if (isCompleteStop && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isprogressbar = false;\r\n                } else if (binding.progressBar.getVisibility() == View.VISIBLE && (binding.ivPause.getVisibility() == View.GONE && binding.ivPlay.getVisibility() == View.GONE)) {\r\n                    isprogressbar = true;\r\n                }\r\n                SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(mainPlayModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                String json1 = gson.toJson(addToQueueModelList);\r\n                if (queuePlay) {\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n                }\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                editor.commit();\r\n                handler12.removeCallbacks(UpdateSongTime12);\r\n                Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                ctx.startActivity(i);\r\n\r\n//            simpleNotification();\r\n            });\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if (download.equalsIgnoreCase(\"2\")) {\r\n            mediaPlayer = MediaPlayer.create(getActivity(), R.raw.brain_wellness_spa_declaimer);\r\n            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\r\n//            Uri uri = Uri.parse(\"android.resource://com.brainwellnessspa/\" + R.raw.brain_wellness_spa_declaimer);\r\n//            mediaPlayer.setDataSource(String.valueOf(uri));\r\n            mediaPlayer.start();\r\n            isPrepare = true;\r\n            isMediaStart = true;\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n        } else {\r\n            if (null == mediaPlayer) {\r\n                mediaPlayer = new MediaPlayer();\r\n                Log.e(\"Playinggggg\", \"Playinggggg\");\r\n            }\r\n            try {\r\n                if (mediaPlayer == null)\r\n                    mediaPlayer = new MediaPlayer();\r\n                if (mediaPlayer.isPlaying()) {\r\n                    Log.e(\"Playinggggg\", \"stoppppp\");\r\n                    mediaPlayer.stop();\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                }\r\n                isPreparing = true;\r\n                mediaPlayer = new MediaPlayer();\r\n                if (download.equalsIgnoreCase(\"1\")) {\r\n                    mediaPlayer.setDataSource(fileDescriptor);\r\n                } else {\r\n                    mediaPlayer.setDataSource(audioFile);\r\n                    Log.e(\"Playinggggxxxxx\", \"Startinggg1xxxxx\");\r\n                }\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                    mediaPlayer.setAudioAttributes(\r\n                            new AudioAttributes\r\n                                    .Builder()\r\n                                    .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                    .build());\r\n                    Log.e(\"Playinggggg11111111\", \"Startinggg111111111\");\r\n                }\r\n                mediaPlayer.prepareAsync();\r\n                isPrepare = true;\r\n            } catch (IllegalStateException | IOException e) {\r\n                FileDescriptor fileDescriptor1 = null;\r\n                setMediaPlayer(\"0\", fileDescriptor1);\r\n                e.printStackTrace();\r\n            }\r\n            if (!mediaPlayer.isPlaying()) {\r\n                mediaPlayer.setOnPreparedListener(mp -> {\r\n                    Log.e(\"Playinggggg\", \"Startinggg\");\r\n                    mediaPlayer.start();\r\n                    isMediaStart = true;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callMedia() {\r\n        binding.progressBar.setVisibility(View.VISIBLE);\r\n//        binding.llProgress.setVisibility(View.VISIBLE);\r\n        binding.ivPlay.setVisibility(View.GONE);\r\n        binding.ivPause.setVisibility(View.GONE);\r\n        FileDescriptor fileDescriptor = null;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n//        binding.llProgress.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            DownloadMedia downloadMedia = new DownloadMedia(ctx.getApplicationContext());\r\n            try {\r\n                byte[] decrypt = null;\r\n                decrypt = downloadMedia.decrypt(name);\r\n                if (decrypt != null) {\r\n                    fileDescriptor = FileUtils.getTempFileDescriptor(ctx.getApplicationContext(), decrypt);\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        setMediaPlayer(\"2\", fileDescriptor);\r\n                    } else {\r\n                        setMediaPlayer(\"1\", fileDescriptor);\r\n                    }\r\n                } else {\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        setMediaPlayer(\"2\", fileDescriptor);\r\n                    } else {\r\n                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                            setMediaPlayer(\"0\", fileDescriptor);\r\n//                mediaPlayer.setDataSource(audioFile);\r\n                        } else {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                        }\r\n                    }\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                setMediaPlayer(\"2\", fileDescriptor);\r\n            } else {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    setMediaPlayer(\"0\", fileDescriptor);\r\n//                mediaPlayer.setDataSource(audioFile);\r\n                } else {\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    binding.ivPause.setVisibility(View.GONE);\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getDownloadMedia(DownloadMedia downloadMedia) {\r\n        class getDownloadMedia extends AsyncTask<Void, Void, Void> {\r\n            FileDescriptor fileDescriptor = null;\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                try {\r\n                    byte[] decrypt = null;\r\n                    decrypt = downloadMedia.decrypt(name);\r\n                    if (decrypt != null) {\r\n                        fileDescriptor = FileUtils.getTempFileDescriptor(getActivity(), decrypt);\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (fileDescriptor != null) {\r\n                    setMediaPlayer(\"1\", fileDescriptor);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        setMediaPlayer(\"0\", fileDescriptor);\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getDownloadMedia st = new getDownloadMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callComplete() {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        if (audioPlay && (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty())) {\r\n            isDisclaimer = 0;\r\n            removeArray();\r\n        } else {\r\n            if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                if (position < (listSize - 1)) {\r\n                    position = position + 1;\r\n                } else {\r\n                    position = 0;\r\n                }\r\n                getPrepareShowData();\r\n            } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData();\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    } catch (Exception e) {\r\n                    }\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        position = 0;\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData();\r\n                    }\r\n                } else {\r\n                    if (listSize == 1) {\r\n\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData();\r\n                    }\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    } catch (Exception e) {\r\n                    }\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position < listSize - 1) {\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData();\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (position < (listSize - 1)) {\r\n                        int oldPosition = position;\r\n                        position = position + 1;\r\n                        if (oldPosition == position) {\r\n                            position++;\r\n                        }\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        if (listSize == 1) {\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n    }\r\n\r\n    private void removeArray() {\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        gson = new Gson();\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }\r\n        MakeArray();\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n    /*    handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler12.postDelayed(UpdateSongTime12, 100);\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n\r\n        int totalDuration = getEndTime();\r\n        int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n        // forward or backward to certain seconds\r\n        SeekTo(currentPosition);\r\n\r\n        oTime = binding.simpleSeekbar.getProgress();\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n\r\n        if (ComeScreenAccount == 1) {\r\n            binding.llLayout.setVisibility(View.GONE);\r\n        } else if (ComeScreenAccount == 0) {\r\n            binding.llLayout.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        handler12.postDelayed(UpdateSongTime12, 500);\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            mainPlayModelList = gson.fromJson(json, type);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        try {\r\n            if (queuePlay) {\r\n                position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                listSize = addToQueueModelList.size();\r\n                id = addToQueueModelList.get(position).getID();\r\n                name = addToQueueModelList.get(position).getName();\r\n                audioFile = addToQueueModelList.get(position).getAudioFile();\r\n            } else if (audioPlay) {\r\n                position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                listSize = mainPlayModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = mainPlayModelList.get(position).getID();\r\n                    name = mainPlayModelList.get(position).getName();\r\n                    audioFile = mainPlayModelList.get(position).getAudioFile();\r\n       /*         if (audioFile.equalsIgnoreCase(\"\")) {\r\n                    Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                } else {\r\n                    Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                }\r\n                binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                    isDisclaimer = 1;\r\n                    binding.simpleSeekbar.setClickable(false);\r\n                    binding.flProgress.setClickable(false);\r\n                    binding.flProgress.setEnabled(false);\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    binding.simpleSeekbar.setClickable(true);\r\n                    binding.flProgress.setClickable(true);\r\n                    binding.flProgress.setEnabled(true);\r\n                }*/\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (listSize == 1) {\r\n            position = 0;\r\n        }\r\n        SharedPreferences Status = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n      /*  if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if (isMediaStart && !isPause) {\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n        } else {\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n        }*/\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n        Log.e(\"Stop runnble\", \"stop\");\r\n        super.onPause();\r\n    }\r\n\r\n    private void simple_Notification(PlaybackStatus playbackStatus, ArrayList<MainPlayModel> mainPlayModelList) {\r\n/*//declare an id for your notification\r\n//id is used in many things especially when setting action buttons and their intents\r\n        int notificationId = 0;\r\n//init notification and declare specifications\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(getActivity())\r\n                .setSmallIcon(R.drawable.square_app_icon)\r\n                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.square_app_icon))\r\n                .setContentTitle(\"Android Development Course\")\r\n                .setContentText(\"Become an Android Developer.\")\r\n                .setAutoCancel(true)\r\n                .setDefaults(NotificationCompat.DEFAULT_ALL);\r\n//set a tone when notification appears\r\n        Uri path = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);\r\n        builder.setSound(path);\r\n\r\n//call notification manager so it can build and deliver the notification to the OS\r\n        NotificationManager notificationManager = (NotificationManager) getActivity().getSystemService(Context.NOTIFICATION_SERVICE);\r\n\r\n//Android 8 introduced a new requirement of setting the channelId property by using a NotificationChannel.\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            String channelId = \"YOUR_CHANNEL_ID\";\r\n            NotificationChannel channel = new NotificationChannel(channelId,\r\n                    \"Channel human readable title\",\r\n                    NotificationManager.IMPORTANCE_DEFAULT);\r\n            notificationManager.createNotificationChannel(channel);\r\n            builder.setChannelId(channelId);\r\n        }\r\n\r\n        notificationManager.notify(notificationId, builder.build());*/\r\n\r\n        int notificationAction = android.R.drawable.ic_media_pause;//needs to be initialized\r\n        PendingIntent play_pauseAction = null;\r\n\r\n        //Build a new notification according to the current state of the MediaPlayer\r\n        if (playbackStatus == PlaybackStatus.PLAYING) {\r\n            notificationAction = android.R.drawable.ic_media_pause;\r\n            //create the pause action\r\n            play_pauseAction = playbackAction(1);\r\n        } else if (playbackStatus == PlaybackStatus.PAUSED) {\r\n            notificationAction = android.R.drawable.ic_media_play;\r\n            //create the play action\r\n            play_pauseAction = playbackAction(0);\r\n        }\r\n\r\n        // Create a new Notification\r\n        NotificationCompat.Builder notificationBuilder = (NotificationCompat.Builder) new NotificationCompat.Builder(getActivity())\r\n                .setShowWhen(false)\r\n                // Set the Notification style\r\n//                .setStyle(new NotificationCompat().MediaStyle()\r\n                // Attach our MediaSession token\r\n//                .setMediaSession(mediaSession.getSessionToken())\r\n                // Show our playback controls in the compact notification view.\r\n//                .setShowActionsInCompactView(0, 1, 2))\r\n                .setColor(getResources().getColor(R.color.colorPrimary))\r\n                // Set the large and small icons\r\n                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.square_app_icon))\r\n                .setSmallIcon(android.R.drawable.stat_sys_headset)\r\n                // Set Notification content information\r\n                .setContentText(mainPlayModelList.get(position).getAudioDirection())\r\n                .setContentTitle(mainPlayModelList.get(position).getName())\r\n                .setContentInfo(\"Brain Wellness Spa\")\r\n                .setSound(null)\r\n                // Add playback actions\r\n                .addAction(android.R.drawable.ic_media_previous, \"previous\", playbackAction(3))\r\n                .addAction(notificationAction, \"pause\", play_pauseAction)\r\n                .addAction(android.R.drawable.ic_media_next, \"next\", playbackAction(2));\r\n\r\n        NotificationManager notificationManager = (NotificationManager) getActivity().getSystemService(Context.NOTIFICATION_SERVICE);\r\n\r\n//Android 8 introduced a new requirement of setting the channelId property by using a NotificationChannel.\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            String channelId = \"YOUR_CHANNEL_ID\";\r\n            NotificationChannel channel = new NotificationChannel(channelId,\r\n                    \"Channel human readable title\",\r\n                    NotificationManager.IMPORTANCE_LOW);\r\n            channel.setSound(null,null);\r\n            notificationManager.createNotificationChannel(channel);\r\n            notificationBuilder.setChannelId(channelId);\r\n        }\r\n\r\n        notificationManager.notify(NOTIFICATION_ID, notificationBuilder.build());\r\n    }\r\n\r\n/*    private void skipToNext() {\r\n        if (audioIndex == audioList.size() - 1) {\r\n            //if last in playlist\r\n            audioIndex = 0;\r\n            activeAudio = audioList.get(audioIndex);\r\n        } else {\r\n            //get next in playlist\r\n            activeAudio = audioList.get(++audioIndex);\r\n        }\r\n\r\n        //Update stored index\r\n        new StorageUtil(getApplicationContext()).storeAudioIndex(audioIndex);\r\n\r\n        stopMedia();\r\n        //reset mediaPlayer\r\n        mediaPlayer.reset();\r\n        initMediaPlayer();\r\n    }*/\r\n\r\n   /* private void skipToPrevious() {\r\n\r\n        if (audioIndex == 0) {\r\n            //if first in playlist\r\n            //set index to the last of audioList\r\n            audioIndex = audioList.size() - 1;\r\n            activeAudio = audioList.get(audioIndex);\r\n        } else {\r\n            //get previous in playlist\r\n            activeAudio = audioList.get(--audioIndex);\r\n        }\r\n\r\n        //Update stored index\r\n        new StorageUtil(getApplicationContext()).storeAudioIndex(audioIndex);\r\n\r\n        stopMedia();\r\n        //reset mediaPlayer\r\n        mediaPlayer.reset();\r\n        initMediaPlayer();\r\n    }*/\r\n\r\n    private PendingIntent playbackAction(int actionNumber) {\r\n        Intent playbackAction = new Intent(getActivity(), MusicService.class);\r\n        switch (actionNumber) {\r\n            case 0:\r\n                // Play\r\n                playbackAction.setAction(ACTION_PLAY);\r\n                return PendingIntent.getService(getActivity(), actionNumber, playbackAction, 0);\r\n            case 1:\r\n                // Pause\r\n                playbackAction.setAction(ACTION_PAUSE);\r\n                return PendingIntent.getService(getActivity(), actionNumber, playbackAction, 0);\r\n            case 2:\r\n                // Next track\r\n                playbackAction.setAction(ACTION_NEXT);\r\n                return PendingIntent.getService(getActivity(), actionNumber, playbackAction, 0);\r\n            case 3:\r\n                // Previous track\r\n                playbackAction.setAction(ACTION_PREVIOUS);\r\n                return PendingIntent.getService(getActivity(), actionNumber, playbackAction, 0);\r\n            default:\r\n                break;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private void removeNotification() {\r\n        NotificationManager notificationManager = (NotificationManager) getActivity().getSystemService(Context.NOTIFICATION_SERVICE);\r\n        notificationManager.cancel(NOTIFICATION_ID);\r\n    }\r\n\r\n    private void handleIncomingActions(Intent playbackAction) {\r\n        if (playbackAction == null || playbackAction.getAction() == null) return;\r\n\r\n        String actionString = playbackAction.getAction();\r\n        if (actionString.equalsIgnoreCase(ACTION_PLAY)) {\r\n            transportControls.play();\r\n        } else if (actionString.equalsIgnoreCase(ACTION_PAUSE)) {\r\n            transportControls.pause();\r\n        } else if (actionString.equalsIgnoreCase(ACTION_NEXT)) {\r\n            transportControls.skipToNext();\r\n        } else if (actionString.equalsIgnoreCase(ACTION_PREVIOUS)) {\r\n            transportControls.skipToPrevious();\r\n        } else if (actionString.equalsIgnoreCase(ACTION_STOP)) {\r\n            transportControls.stop();\r\n        }\r\n    }\r\n\r\n   /* TODO Need this code Can't delete\r\n    @Override\r\n    public int onStartCommand(Intent intent, int flags, int startId) {\r\n        try {\r\n            //Load data from SharedPreferences\r\n            StorageUtil storage = new StorageUtil(getApplicationContext());\r\n            audioList = storage.loadAudio();\r\n            audioIndex = storage.loadAudioIndex();\r\n\r\n            if (audioIndex != -1 && audioIndex < audioList.size()) {\r\n                //index is in a valid range\r\n                activeAudio = audioList.get(audioIndex);\r\n            } else {\r\n                stopSelf();\r\n            }\r\n        } catch (NullPointerException e) {\r\n            stopSelf();\r\n        }\r\n\r\n        //Request audio focus\r\n        if (requestAudioFocus() == false) {\r\n            //Could not gain focus\r\n            stopSelf();\r\n        }\r\n\r\n        if (mediaSessionManager == null) {\r\n            try {\r\n                initMediaSession();\r\n                initMediaPlayer();\r\n            } catch (RemoteException e) {\r\n                e.printStackTrace();\r\n                stopSelf();\r\n            }\r\n            buildNotification(PlaybackStatus.PLAYING);\r\n        }\r\n\r\n        //Handle Intent action from MediaSession.TransportControls\r\n        handleIncomingActions(intent);\r\n        return super.onStartCommand(intent, flags, startId);\r\n    }*/\r\n/* @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n                resumeMedia();\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if (isMediaStart) {\r\n                    pauseMedia();\r\n//                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n//                    binding.ivPause.setVisibility(View.GONE);\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java	(revision 2a1bf284a667368934ece8f28e4009b3b2ce1f28)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java	(date 1604397265542)
@@ -794,16 +794,16 @@
                 }
             }
             startTime = getStartTime();
-            simple_Notification(playbackStatus, mainPlayModelList);
+
             if (!audioFile.equalsIgnoreCase("")) {
-                if(!id.equalsIgnoreCase(addToRecentPlayId)) {
+                if (!id.equalsIgnoreCase(addToRecentPlayId)) {
                     addToRecentPlay();
-                    Log.e("Api call recent",id);
+                    Log.e("Api call recent", id);
                 }
             }
             addToRecentPlayId = id;
-            Log.e("addToRecentPlayID",addToRecentPlayId);
-            Log.e("new addToRecentPlayID",id);
+            Log.e("addToRecentPlayID", addToRecentPlayId);
+            Log.e("new addToRecentPlayID", id);
             binding.llPlayearMain.setOnClickListener(view -> {
                 handler12.removeCallbacks(UpdateSongTime12);
                 if (player == 0) {
@@ -835,8 +835,7 @@
                 Intent i = new Intent(ctx, PlayWellnessActivity.class);
                 i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                 ctx.startActivity(i);
-
-//            simpleNotification();
+                BWSApplication.simple_Notification(playbackStatus, mainPlayModelList, getActivity(), position);
             });
         } catch (Exception e) {
             e.printStackTrace();
@@ -1531,235 +1530,4 @@
         Log.e("Stop runnble", "stop");
         super.onPause();
     }
-
-    private void simple_Notification(PlaybackStatus playbackStatus, ArrayList<MainPlayModel> mainPlayModelList) {
-/*//declare an id for your notification
-//id is used in many things especially when setting action buttons and their intents
-        int notificationId = 0;
-//init notification and declare specifications
-        NotificationCompat.Builder builder = new NotificationCompat.Builder(getActivity())
-                .setSmallIcon(R.drawable.square_app_icon)
-                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.square_app_icon))
-                .setContentTitle("Android Development Course")
-                .setContentText("Become an Android Developer.")
-                .setAutoCancel(true)
-                .setDefaults(NotificationCompat.DEFAULT_ALL);
-//set a tone when notification appears
-        Uri path = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
-        builder.setSound(path);
-
-//call notification manager so it can build and deliver the notification to the OS
-        NotificationManager notificationManager = (NotificationManager) getActivity().getSystemService(Context.NOTIFICATION_SERVICE);
-
-//Android 8 introduced a new requirement of setting the channelId property by using a NotificationChannel.
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            String channelId = "YOUR_CHANNEL_ID";
-            NotificationChannel channel = new NotificationChannel(channelId,
-                    "Channel human readable title",
-                    NotificationManager.IMPORTANCE_DEFAULT);
-            notificationManager.createNotificationChannel(channel);
-            builder.setChannelId(channelId);
-        }
-
-        notificationManager.notify(notificationId, builder.build());*/
-
-        int notificationAction = android.R.drawable.ic_media_pause;//needs to be initialized
-        PendingIntent play_pauseAction = null;
-
-        //Build a new notification according to the current state of the MediaPlayer
-        if (playbackStatus == PlaybackStatus.PLAYING) {
-            notificationAction = android.R.drawable.ic_media_pause;
-            //create the pause action
-            play_pauseAction = playbackAction(1);
-        } else if (playbackStatus == PlaybackStatus.PAUSED) {
-            notificationAction = android.R.drawable.ic_media_play;
-            //create the play action
-            play_pauseAction = playbackAction(0);
-        }
-
-        // Create a new Notification
-        NotificationCompat.Builder notificationBuilder = (NotificationCompat.Builder) new NotificationCompat.Builder(getActivity())
-                .setShowWhen(false)
-                // Set the Notification style
-//                .setStyle(new NotificationCompat().MediaStyle()
-                // Attach our MediaSession token
-//                .setMediaSession(mediaSession.getSessionToken())
-                // Show our playback controls in the compact notification view.
-//                .setShowActionsInCompactView(0, 1, 2))
-                .setColor(getResources().getColor(R.color.colorPrimary))
-                // Set the large and small icons
-                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.square_app_icon))
-                .setSmallIcon(android.R.drawable.stat_sys_headset)
-                // Set Notification content information
-                .setContentText(mainPlayModelList.get(position).getAudioDirection())
-                .setContentTitle(mainPlayModelList.get(position).getName())
-                .setContentInfo("Brain Wellness Spa")
-                .setSound(null)
-                // Add playback actions
-                .addAction(android.R.drawable.ic_media_previous, "previous", playbackAction(3))
-                .addAction(notificationAction, "pause", play_pauseAction)
-                .addAction(android.R.drawable.ic_media_next, "next", playbackAction(2));
-
-        NotificationManager notificationManager = (NotificationManager) getActivity().getSystemService(Context.NOTIFICATION_SERVICE);
-
-//Android 8 introduced a new requirement of setting the channelId property by using a NotificationChannel.
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
-            String channelId = "YOUR_CHANNEL_ID";
-            NotificationChannel channel = new NotificationChannel(channelId,
-                    "Channel human readable title",
-                    NotificationManager.IMPORTANCE_LOW);
-            channel.setSound(null,null);
-            notificationManager.createNotificationChannel(channel);
-            notificationBuilder.setChannelId(channelId);
-        }
-
-        notificationManager.notify(NOTIFICATION_ID, notificationBuilder.build());
-    }
-
-/*    private void skipToNext() {
-        if (audioIndex == audioList.size() - 1) {
-            //if last in playlist
-            audioIndex = 0;
-            activeAudio = audioList.get(audioIndex);
-        } else {
-            //get next in playlist
-            activeAudio = audioList.get(++audioIndex);
-        }
-
-        //Update stored index
-        new StorageUtil(getApplicationContext()).storeAudioIndex(audioIndex);
-
-        stopMedia();
-        //reset mediaPlayer
-        mediaPlayer.reset();
-        initMediaPlayer();
-    }*/
-
-   /* private void skipToPrevious() {
-
-        if (audioIndex == 0) {
-            //if first in playlist
-            //set index to the last of audioList
-            audioIndex = audioList.size() - 1;
-            activeAudio = audioList.get(audioIndex);
-        } else {
-            //get previous in playlist
-            activeAudio = audioList.get(--audioIndex);
-        }
-
-        //Update stored index
-        new StorageUtil(getApplicationContext()).storeAudioIndex(audioIndex);
-
-        stopMedia();
-        //reset mediaPlayer
-        mediaPlayer.reset();
-        initMediaPlayer();
-    }*/
-
-    private PendingIntent playbackAction(int actionNumber) {
-        Intent playbackAction = new Intent(getActivity(), MusicService.class);
-        switch (actionNumber) {
-            case 0:
-                // Play
-                playbackAction.setAction(ACTION_PLAY);
-                return PendingIntent.getService(getActivity(), actionNumber, playbackAction, 0);
-            case 1:
-                // Pause
-                playbackAction.setAction(ACTION_PAUSE);
-                return PendingIntent.getService(getActivity(), actionNumber, playbackAction, 0);
-            case 2:
-                // Next track
-                playbackAction.setAction(ACTION_NEXT);
-                return PendingIntent.getService(getActivity(), actionNumber, playbackAction, 0);
-            case 3:
-                // Previous track
-                playbackAction.setAction(ACTION_PREVIOUS);
-                return PendingIntent.getService(getActivity(), actionNumber, playbackAction, 0);
-            default:
-                break;
-        }
-        return null;
-    }
-
-    private void removeNotification() {
-        NotificationManager notificationManager = (NotificationManager) getActivity().getSystemService(Context.NOTIFICATION_SERVICE);
-        notificationManager.cancel(NOTIFICATION_ID);
-    }
-
-    private void handleIncomingActions(Intent playbackAction) {
-        if (playbackAction == null || playbackAction.getAction() == null) return;
-
-        String actionString = playbackAction.getAction();
-        if (actionString.equalsIgnoreCase(ACTION_PLAY)) {
-            transportControls.play();
-        } else if (actionString.equalsIgnoreCase(ACTION_PAUSE)) {
-            transportControls.pause();
-        } else if (actionString.equalsIgnoreCase(ACTION_NEXT)) {
-            transportControls.skipToNext();
-        } else if (actionString.equalsIgnoreCase(ACTION_PREVIOUS)) {
-            transportControls.skipToPrevious();
-        } else if (actionString.equalsIgnoreCase(ACTION_STOP)) {
-            transportControls.stop();
-        }
-    }
-
-   /* TODO Need this code Can't delete
-    @Override
-    public int onStartCommand(Intent intent, int flags, int startId) {
-        try {
-            //Load data from SharedPreferences
-            StorageUtil storage = new StorageUtil(getApplicationContext());
-            audioList = storage.loadAudio();
-            audioIndex = storage.loadAudioIndex();
-
-            if (audioIndex != -1 && audioIndex < audioList.size()) {
-                //index is in a valid range
-                activeAudio = audioList.get(audioIndex);
-            } else {
-                stopSelf();
-            }
-        } catch (NullPointerException e) {
-            stopSelf();
-        }
-
-        //Request audio focus
-        if (requestAudioFocus() == false) {
-            //Could not gain focus
-            stopSelf();
-        }
-
-        if (mediaSessionManager == null) {
-            try {
-                initMediaSession();
-                initMediaPlayer();
-            } catch (RemoteException e) {
-                e.printStackTrace();
-                stopSelf();
-            }
-            buildNotification(PlaybackStatus.PLAYING);
-        }
-
-        //Handle Intent action from MediaSession.TransportControls
-        handleIncomingActions(intent);
-        return super.onStartCommand(intent, flags, startId);
-    }*/
-/* @Override
-    public void onAudioFocusChange(int i) {
-        switch (i) {
-            case AudioManager.AUDIOFOCUS_GAIN:
-            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:
-                // Resume your media player here
-                resumeMedia();
-                break;
-            case AudioManager.AUDIOFOCUS_LOSS:
-            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:
-                if (isMediaStart) {
-                    pauseMedia();
-//                    binding.ivPlay.setVisibility(View.VISIBLE);
-//                    binding.ivPause.setVisibility(View.GONE);
-                }
-//                MusicService.pauseMedia();// Pause your media player here
-                break;
-        }
-    }*/
 }
\ No newline at end of file
