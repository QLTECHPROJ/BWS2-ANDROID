Index: app/src/main/java/com/brainwellnessspa/LikeModule/Activities/LikeActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.LikeModule.Activities;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.fragment.app.FragmentStatePagerAdapter;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\n\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity;\r\nimport com.brainwellnessspa.LikeModule.Fragments.LikeAudiosFragment;\r\nimport com.brainwellnessspa.LikeModule.Fragments.LikePlaylistsFragment;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityLikeBinding;\r\nimport com.google.android.material.tabs.TabLayout;\r\n\r\nimport retrofit2.Callback;\r\n\r\npublic class LikeActivity extends AppCompatActivity {\r\n    ActivityLikeBinding binding;\r\n    Activity activity;\r\n    String AudioFlag, UserID;\r\n    Context ctx;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_like);\r\n        activity = LikeActivity.this;\r\n        ctx = LikeActivity.this;\r\n        SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared2.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        binding.llBack.setOnClickListener(view -> finish());\r\n        prepareData();\r\n        RefreshData();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        RefreshData();\r\n    }\r\n\r\n    public void RefreshData() {\r\n        SharedPreferences shared22 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared22.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n//            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n//            params.setMargins(10, 8, 10, 210);\r\n//            binding.llSpace.setLayoutParams(params);\r\n        }\r\n      /*  else {\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 20);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }*/\r\n    }\r\n\r\n    public void prepareData() {\r\n        binding.viewPager.setOffscreenPageLimit(2);\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(\"Audios\"));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(\"Playlists\"));\r\n        binding.tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);\r\n        TabAdapter adapter = new TabAdapter(getSupportFragmentManager(), ctx, binding.tabLayout.getTabCount());\r\n        binding.viewPager.setAdapter(adapter);\r\n        binding.viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(binding.tabLayout));\r\n\r\n        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                binding.viewPager.setCurrentItem(tab.getPosition());\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n        });\r\n        RefreshData();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        finish();\r\n    }\r\n\r\n    public class TabAdapter extends FragmentStatePagerAdapter {\r\n        int totalTabs;\r\n        private Context myContext;\r\n        Callback<LikesHistoryModel> likesHistoryModelCallback;\r\n\r\n        public TabAdapter(FragmentManager fm, Context myContext, int totalTabs) {\r\n            super(fm);\r\n            this.myContext = myContext;\r\n            this.totalTabs = totalTabs;\r\n        }\r\n\r\n        public TabAdapter(FragmentManager fm, Callback<LikesHistoryModel> likesHistoryModelCallback, int totalTabs) {\r\n            super(fm);\r\n            this.likesHistoryModelCallback = likesHistoryModelCallback;\r\n            this.totalTabs = totalTabs;\r\n        }\r\n\r\n        @Override\r\n        public Fragment getItem(int position) {\r\n            switch (position) {\r\n                case 0:\r\n                    LikeAudiosFragment likeAudiosFragment = new LikeAudiosFragment();\r\n                    Bundle bundle = new Bundle();\r\n                    likeAudiosFragment.setArguments(bundle);\r\n                    return likeAudiosFragment;\r\n                case 1:\r\n                    LikePlaylistsFragment likePlaylistsFragment = new LikePlaylistsFragment();\r\n                    bundle = new Bundle();\r\n                    likePlaylistsFragment.setArguments(bundle);\r\n                    return likePlaylistsFragment;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getCount() {\r\n            return totalTabs;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LikeModule/Activities/LikeActivity.java	(revision 7fbd1dd52cb41e46dcedde2c366f12d3828cee0f)
+++ app/src/main/java/com/brainwellnessspa/LikeModule/Activities/LikeActivity.java	(date 1604667523364)
@@ -26,6 +26,9 @@
 
 import retrofit2.Callback;
 
+import static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;
+import static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;
+
 public class LikeActivity extends AppCompatActivity {
     ActivityLikeBinding binding;
     Activity activity;
@@ -40,7 +43,11 @@
         ctx = LikeActivity.this;
         SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);
         UserID = (shared2.getString(CONSTANTS.PREF_KEY_UserID, ""));
-        binding.llBack.setOnClickListener(view -> finish());
+        binding.llBack.setOnClickListener(view -> {
+            comefromDownload = "0";
+            ComeScreenAccount = 1;
+            finish();
+        });
         prepareData();
         RefreshData();
     }
@@ -55,6 +62,7 @@
         SharedPreferences shared22 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
         AudioFlag = shared22.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
         if (!AudioFlag.equalsIgnoreCase("0")) {
+            comefromDownload = "1";
             Fragment fragment = new TransparentPlayerFragment();
             FragmentManager fragmentManager1 = getSupportFragmentManager();
             fragmentManager1.beginTransaction()
@@ -101,6 +109,8 @@
 
     @Override
     public void onBackPressed() {
+        comefromDownload = "0";
+        ComeScreenAccount = 1;
         finish();
     }
 
Index: app/src/main/java/com/brainwellnessspa/LikeModule/Activities/PlaylistLikeActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.LikeModule.Activities;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Filter;\r\nimport android.widget.Filterable;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Models.PlaylistLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ReminderStatusPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadPlaylistActivity;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.ReminderModule.Activities.ReminderActivity;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityPlaylistLikeBinding;\r\nimport com.brainwellnessspa.databinding.DownloadPlaylistLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenReminder;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.isPlayPlaylist;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class PlaylistLikeActivity extends AppCompatActivity {\r\n    ActivityPlaylistLikeBinding binding;\r\n    String UserID, AudioFlag, PlaylistID, PlaylistName, SearchFlag, PlaylistImage;\r\n    Context ctx;\r\n    PlayListsAdpater adpater;\r\n    Activity activity;\r\n    SubPlayListModel.ResponseData.PlaylistSong addDisclaimer = new SubPlayListModel.ResponseData.PlaylistSong();\r\n    EditText searchEditText;\r\n    public static int RefreshLikePlaylist = 0;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_playlist_like);\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        ctx = PlaylistLikeActivity.this;\r\n        activity = PlaylistLikeActivity.this;\r\n        if (getIntent().getExtras() != null) {\r\n            PlaylistID = getIntent().getStringExtra(\"PlaylistID\");\r\n        }\r\n        addDisclaimer();\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        searchEditText.setHint(\"Search for audios\");\r\n        closeButton.setOnClickListener(v -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n        binding.llBack.setOnClickListener(view -> finish());\r\n        PrepareData();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        PrepareData();\r\n    }\r\n\r\n    public void PrepareData() {\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 210);\r\n            binding.llSpace.setLayoutParams(params);\r\n        } else {\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 20);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n            if (isMediaStart) {\r\n                isPlayPlaylist = 1;\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n            } else {\r\n                isPlayPlaylist = 0;\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n            }\r\n        } else {\r\n            isPlayPlaylist = 0;\r\n            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n        }\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SubPlayListModel> listCall = APIClient.getClient().getSubPlayLists(UserID, PlaylistID);\r\n            listCall.enqueue(new Callback<SubPlayListModel>() {\r\n                @SuppressLint(\"ClickableViewAccessibility\")\r\n                @Override\r\n                public void onResponse(Call<SubPlayListModel> call, Response<SubPlayListModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SubPlayListModel listModel = response.body();\r\n                        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                                5, 3, 1f, 0);\r\n                        binding.ivBanner.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n                        binding.ivBanner.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n                        binding.ivBanner.setScaleType(ImageView.ScaleType.FIT_XY);\r\n                        binding.tvTag.setVisibility(View.VISIBLE);\r\n                        binding.tvTag.setText(\"Audios in Playlist\");\r\n                        binding.tvPlaylist.setText(\"Playlist\");\r\n                        binding.tvLibraryName.setText(listModel.getResponseData().getPlaylistName());\r\n                        if (!listModel.getResponseData().getPlaylistImage().equalsIgnoreCase(\"\")) {\r\n                            try {\r\n                                Glide.with(ctx).load(listModel.getResponseData().getPlaylistImage()).thumbnail(0.05f)\r\n                                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivBanner);\r\n                            } catch (Exception e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        } else {\r\n                            binding.ivBanner.setImageResource(R.drawable.audio_bg);\r\n                        }\r\n\r\n                        if (listModel.getResponseData().getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                                listModel.getResponseData().getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                                        listModel.getResponseData().getTotalhour().equalsIgnoreCase(\"\")\r\n                                        && listModel.getResponseData().getTotalminute().equalsIgnoreCase(\"\")) {\r\n                            binding.tvLibraryDetail.setText(\"0 Audio | 0h 0m\");\r\n                        } else {\r\n                            if (listModel.getResponseData().getTotalminute().equalsIgnoreCase(\"\")) {\r\n                                binding.tvLibraryDetail.setText(listModel.getResponseData().getTotalAudio() + \" Audio | \"\r\n                                        + listModel.getResponseData().getTotalhour() + \"h 0m\");\r\n                            } else {\r\n                                binding.tvLibraryDetail.setText(listModel.getResponseData().getTotalAudio() + \" Audio | \"\r\n                                        + listModel.getResponseData().getTotalhour() + \"h \" +\r\n                                        listModel.getResponseData().getTotalminute() + \"m\");\r\n                            }\r\n                        }\r\n                        binding.rlSearch.setVisibility(View.VISIBLE);\r\n                        binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n                        binding.tvTag.setText(R.string.Audios_in_Playlist);\r\n                        RecyclerView.LayoutManager playList = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n                        binding.rvPlayLists.setLayoutManager(playList);\r\n                        binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());\r\n                        adpater = new PlayListsAdpater(listModel.getResponseData().getPlaylistSongs(), ctx);\r\n                        binding.rvPlayLists.setAdapter(adpater);\r\n\r\n                        binding.llLike.setOnClickListener(new View.OnClickListener() {\r\n                            @Override\r\n                            public void onClick(View v) {\r\n                                Dialog dialog = new Dialog(ctx);\r\n                                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                dialog.setContentView(R.layout.logout_layout);\r\n                                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));\r\n                                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                                final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                                final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n                                final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                                final Button Btn = dialog.findViewById(R.id.Btn);\r\n                                tvTitle.setText(\"Remove from Liked Playlists?\");\r\n                                tvHeader.setText(listModel.getResponseData().getPlaylistName());\r\n                                Btn.setText(\"Remove\");\r\n                                tvGoBack.setText(\"Cancel\");\r\n                                dialog.setOnKeyListener((v1, keyCode, event) -> {\r\n                                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                        dialog.dismiss();\r\n                                    }\r\n                                    return false;\r\n                                });\r\n\r\n                                Btn.setOnClickListener(v2 -> {\r\n                                    callRemoveLike(PlaylistID);\r\n                                    dialog.dismiss();\r\n                                });\r\n                                tvGoBack.setOnClickListener(v3 -> dialog.dismiss());\r\n                                dialog.show();\r\n                                dialog.setCancelable(false);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SubPlayListModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void callRemoveLike(String id) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<PlaylistLikeModel> listCall = APIClient.getClient().getPlaylistLike(id, UserID);\r\n            listCall.enqueue(new Callback<PlaylistLikeModel>() {\r\n                @Override\r\n                public void onResponse(Call<PlaylistLikeModel> call, Response<PlaylistLikeModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        PlaylistLikeModel model = response.body();\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                        PrepareData();\r\n                        finish();\r\n                        RefreshLikePlaylist = 1;\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<PlaylistLikeModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n\r\n    public class PlayListsAdpater extends RecyclerView.Adapter<PlayListsAdpater.MyViewHolders> implements Filterable {\r\n        Context ctx;\r\n        String UserID;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolders onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.download_playlist_layout, parent, false);\r\n            return new MyViewHolders(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolders holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n            holder.binding.tvTitleA.setText(mData.get(position).getName());\r\n            holder.binding.tvTimeA.setText(mData.get(position).getAudioDuration());\r\n            String id = mData.get(position).getID();\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                if (isPlayPlaylist == 1) {\r\n                    pauseMedia();\r\n                    isPlayPlaylist = 2;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                } else if (isPlayPlaylist == 2) {\r\n                    resumeMedia();\r\n                    isPlayPlaylist = 1;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                } else {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        if (isPause) {\r\n                            resumeMedia();\r\n                        } else\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(0, ctx, listModelList, \"\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    listModelList2.add(addDisclaimer);\r\n                    listModelList2.addAll(listModelList);\r\n                    callTransparentFrag(0, ctx, listModelList2, \"\", PlaylistID);\r\n                }\r\n                    isPlayPlaylist = 1;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                }\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(holder.getAdapterPosition(), ctx, listModelList, \"\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    if (position != 0) {\r\n                        listModelList2.addAll(listModelList);\r\n                        listModelList2.add(holder.getAdapterPosition(), addDisclaimer);\r\n                    } else {\r\n                        listModelList2.add(addDisclaimer);\r\n                        listModelList2.addAll(listModelList);\r\n                    }\r\n                    callTransparentFrag(holder.getAdapterPosition(), ctx, listModelList2, \"\", PlaylistID);\r\n                }\r\n                isPlayPlaylist = 1;\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n            });\r\n\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                holder.binding.llMore.setClickable(true);\r\n                holder.binding.llMore.setEnabled(true);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                holder.binding.llMore.setClickable(false);\r\n                holder.binding.llMore.setEnabled(false);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            holder.binding.llMore.setOnClickListener(view -> {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n              /*  if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"You can see details after the disclaimer\", ctx);\r\n                    } else {\r\n                        Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                        i.putExtra(\"play\", \"playlist\");\r\n                        i.putExtra(\"ID\", mData.get(position).getID());\r\n                        i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                        i.putExtra(\"position\", position);\r\n                        i.putParcelableArrayListExtra(\"data\", mData);\r\n                        i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                        startActivity(i);\r\n                    }\r\n                } else {\r\n                    Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                    i.putExtra(\"play\", \"playlist\");\r\n                    i.putExtra(\"ID\", mData.get(position).getID());\r\n                    i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                    i.putExtra(\"position\", position);\r\n                    i.putParcelableArrayListExtra(\"data\", mData);\r\n                    i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                    startActivity(i);\r\n                }*/\r\n            });\r\n\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listFilterData.size();\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.rvPlayLists.setVisibility(View.GONE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        Log.e(\"search\", SearchFlag);\r\n                        binding.tvTag.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.tvTag.setVisibility(View.VISIBLE);\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        public class MyViewHolders extends RecyclerView.ViewHolder {\r\n            DownloadPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolders(DownloadPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void addDisclaimer() {\r\n        addDisclaimer = new SubPlayListModel.ResponseData.PlaylistSong();\r\n        addDisclaimer.setID(\"0\");\r\n        addDisclaimer.setName(\"Disclaimer\");\r\n        addDisclaimer.setAudioFile(\"\");\r\n        addDisclaimer.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n        addDisclaimer.setAudiomastercat(\"\");\r\n        addDisclaimer.setAudioSubCategory(\"\");\r\n        addDisclaimer.setImageFile(\"\");\r\n        addDisclaimer.setLike(\"\");\r\n        addDisclaimer.setDownload(\"\");\r\n        addDisclaimer.setAudioDuration(\"0:48\");\r\n    }\r\n\r\n    private void callTransparentFrag(int position, Context ctx, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, String s, String playlistID) {\r\n        player = 1;\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isPause = false;\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isCompleteStop = false;\r\n\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(listModelList);\r\n        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, playlistID);\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n        editor.commit();\r\n        try {\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LikeModule/Activities/PlaylistLikeActivity.java	(revision 7fbd1dd52cb41e46dcedde2c366f12d3828cee0f)
+++ app/src/main/java/com/brainwellnessspa/LikeModule/Activities/PlaylistLikeActivity.java	(date 1604667499709)
@@ -65,6 +65,7 @@
 import static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;
 import static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.isPlayPlaylist;
 import static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;
+import static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;
 import static com.brainwellnessspa.Utility.MusicService.isCompleteStop;
 import static com.brainwellnessspa.Utility.MusicService.isMediaStart;
 import static com.brainwellnessspa.Utility.MusicService.isPause;
@@ -121,6 +122,7 @@
         SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
         AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
         if (!AudioFlag.equalsIgnoreCase("0")) {
+            comefromDownload = "1";
             Fragment fragment = new TransparentPlayerFragment();
             FragmentManager fragmentManager1 = getSupportFragmentManager();
             fragmentManager1.beginTransaction()
@@ -321,27 +323,27 @@
                     isPlayPlaylist = 1;
                     binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));
                 } else {
-                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
-                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
-                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
-                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, "");
-                if (audioPlay && AudioFlag.equalsIgnoreCase("SubPlayList") && pID.equalsIgnoreCase(PlaylistID)) {
-                    if (isDisclaimer == 1) {
-                        if (isPause) {
-                            resumeMedia();
-                        } else
-                        BWSApplication.showToast("The audio shall start playing after the disclaimer", ctx);
-                    } else {
-                        callTransparentFrag(0, ctx, listModelList, "", PlaylistID);
-                    }
-                } else {
-                    isDisclaimer = 0;
-                    disclaimerPlayed = 0;
-                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();
-                    listModelList2.add(addDisclaimer);
-                    listModelList2.addAll(listModelList);
-                    callTransparentFrag(0, ctx, listModelList2, "", PlaylistID);
-                }
+                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
+                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
+                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
+                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, "");
+                    if (audioPlay && AudioFlag.equalsIgnoreCase("SubPlayList") && pID.equalsIgnoreCase(PlaylistID)) {
+                        if (isDisclaimer == 1) {
+                            if (isPause) {
+                                resumeMedia();
+                            } else
+                                BWSApplication.showToast("The audio shall start playing after the disclaimer", ctx);
+                        } else {
+                            callTransparentFrag(0, ctx, listModelList, "", PlaylistID);
+                        }
+                    } else {
+                        isDisclaimer = 0;
+                        disclaimerPlayed = 0;
+                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();
+                        listModelList2.add(addDisclaimer);
+                        listModelList2.addAll(listModelList);
+                        callTransparentFrag(0, ctx, listModelList2, "", PlaylistID);
+                    }
                     isPlayPlaylist = 1;
                     binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));
                 }
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 7fbd1dd52cb41e46dcedde2c366f12d3828cee0f)
+++ .idea/gradle.xml	(date 1604666789550)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
