Index: app/src/main/java/com/brainwellnessspa/BWSApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa;\r\n\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.app.Application;\r\nimport android.app.Notification;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.provider.Settings;\r\nimport android.support.v4.media.session.MediaControllerCompat;\r\nimport android.support.v4.media.session.MediaSessionCompat;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.Gravity;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.media.MediaSessionManager;\r\nimport androidx.room.migration.Migration;\r\nimport androidx.sqlite.db.SupportSQLiteDatabase;\r\n\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.SplashModule.Models.VersionModel;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.AppSignatureHashHelper;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.CryptLib;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.Utility.PlaybackStatus;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Random;\r\nimport java.util.TimeZone;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\nimport javax.net.ssl.HttpsURLConnection;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static java.sql.DriverManager.println;\r\n\r\npublic class BWSApplication extends Application {\r\n    private static Context mContext;\r\n    private static BWSApplication BWSApplication;\r\n    private static List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    private static final int NOTIFICATION_ID = 101;\r\n    public static final String ACTION_PLAY = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PLAY\";\r\n    public static final String ACTION_PAUSE = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PAUSE\";\r\n    public static final String ACTION_PREVIOUS = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PREVIOUS\";\r\n    public static final String ACTION_NEXT = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_NEXT\";\r\n    public static final String ACTION_STOP = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_STOP\";\r\n    private static Bitmap myBitmap;\r\n\r\n    //MediaSession\r\n    private MediaSessionManager mediaSessionManager;\r\n    private MediaSessionCompat mediaSession;\r\n    private MediaControllerCompat.TransportControls transportControls;\r\n\r\n    public static Context getContext() {\r\n        return mContext;\r\n    }\r\n\r\n    public static MeasureRatio measureRatio(Context context, float outerMargin, float aspectX, float aspectY,\r\n                                            float proportion, float innerMargin) {\r\n\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        try {\r\n            WindowManager windowmanager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\r\n            windowmanager.getDefaultDisplay().getMetrics(displayMetrics);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        float width = displayMetrics.widthPixels / displayMetrics.density;\r\n        float widthImg = ((width - outerMargin) * proportion) - innerMargin;\r\n        float height = widthImg * aspectY / aspectX;\r\n        //Log.e(\"width.........\", \"\" + context.getClass().getSimpleName()+\",\"+width);\r\n//        //Log.e(\"widthImg.........\", \"\" + context.getClass().getSimpleName()+\",\"+widthImg);\r\n//        //Log.e(\"height...........\", \"\" + context.getClass().getSimpleName()+\",\"+height);\r\n//        //Log.e(\"displayMetrics.density...........\", \"\" + context.getClass().getSimpleName()+\",\"+displayMetrics.density);\r\n        return new MeasureRatio(widthImg, height, displayMetrics.density, proportion);\r\n    }\r\n\r\n    public static final Migration MIGRATION_1_2 = new Migration(1, 2) {\r\n        @Override\r\n        public void migrate(SupportSQLiteDatabase database) {\r\n            database.execSQL(\"ALTER TABLE 'playlist_table' ADD COLUMN 'PlaylistImageDetails' TEXT\");\r\n        }\r\n    };\r\n\r\n    public static void simple_Notification(PlaybackStatus playbackStatus, ArrayList<MainPlayModel> mainPlayModelList, Activity activity, int position) {\r\n      /*  Bitmap mCurrTrackCover;\r\n        boolean showWhen = false;\r\n        var notifWhen = 0L*/\r\n\r\n        int notificationAction = android.R.drawable.ic_media_pause;//needs to be initialized\r\n        PendingIntent play_pauseAction = null;\r\n\r\n        //Build a new notification according to the current state of the MediaPlayer\r\n        if (playbackStatus == PlaybackStatus.PLAYING) {\r\n            notificationAction = android.R.drawable.ic_media_pause;\r\n            //create the pause action\r\n            play_pauseAction = playbackAction(1, activity);\r\n        } else if (playbackStatus == PlaybackStatus.PAUSED) {\r\n            notificationAction = android.R.drawable.ic_media_play;\r\n            //create the play action\r\n            play_pauseAction = playbackAction(0, activity);\r\n        }\r\n        /*try {\r\n            URL url = new URL(mainPlayModelList.get(position).getImageFile());\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setDoInput(true);\r\n            connection.connect();\r\n            InputStream input = connection.getInputStream();\r\n            myBitmap = BitmapFactory.decodeStream(input);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n          try {\r\n            URL url = new URL(mainPlayModelList.get(position).getImageFile());\r\n            myBitmap = BitmapFactory.decodeStream(url.openConnection().getInputStream());\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }*/\r\n\r\n\r\n        // Create a new Notification\r\n        NotificationCompat.Builder notificationBuilder = (NotificationCompat.Builder) new NotificationCompat.Builder(activity)\r\n                .setShowWhen(false)\r\n                // Set the Notification style\r\n//                .setStyle(new NotificationCompat().MediaStyle()\r\n                // Attach our MediaSession token\r\n//                .setMediaSession(mediaSession.getSessionToken())\r\n                // Show our playback controls in the compact notification view.\r\n//                .setShowActionsInCompactView(0, 1, 2))\r\n                .setColor(activity.getResources().getColor(R.color.blue))\r\n                // Set the large and small icons\r\n                .setLargeIcon(BitmapFactory.decodeResource(activity.getResources(), R.drawable.square_app_icon))\r\n                .setSmallIcon(android.R.drawable.stat_sys_headset)\r\n                // Set Notification content information\r\n                .setContentText(mainPlayModelList.get(position).getAudioDirection())\r\n                .setContentTitle(mainPlayModelList.get(position).getName())\r\n                .setContentInfo(\"Brain Wellness Spa\")\r\n                .setSound(null)\r\n                // Add playback actions\r\n                .addAction(android.R.drawable.ic_media_previous, \"previous\", playbackAction(3, activity))\r\n                .addAction(notificationAction, \"pause\", play_pauseAction)\r\n                .addAction(android.R.drawable.ic_media_next, \"next\", playbackAction(2, activity));\r\n\r\n        NotificationManager notificationManager = (NotificationManager) activity.getSystemService(Context.NOTIFICATION_SERVICE);\r\n\r\n//Android 8 introduced a new requirement of setting the channelId property by using a NotificationChannel.\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            String channelId = \"YOUR_CHANNEL_ID\";\r\n            NotificationChannel channel = new NotificationChannel(channelId,\r\n                    \"Channel human readable title\",\r\n                    NotificationManager.IMPORTANCE_LOW);\r\n            channel.setSound(null, null);\r\n            notificationManager.createNotificationChannel(channel);\r\n            notificationBuilder.setChannelId(channelId);\r\n        }\r\n\r\n        notificationManager.notify(NOTIFICATION_ID, notificationBuilder.build());\r\n\r\n        /*NotificationCompat.Builder notification = NotificationCompat.Builder(applicationContext, NOTIFICATION_CHANNEL)\r\n                .setContentTitle(mainPlayModelList.get(position).getName())\r\n                .setContentText(mainPlayModelList.get(position).getAudioDirection())\r\n                .setSmallIcon(android.R.drawable.stat_sys_headset)\r\n                .setLargeIcon(mCurrTrackCover)\r\n                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)\r\n                .setPriority(NotificationCompat.PRIORITY_MAX)\r\n                .setWhen(notifWhen)\r\n                .setShowWhen(showWhen)\r\n                .setUsesChronometer(usesChronometer)\r\n                .setContentIntent(getContentIntent())\r\n//                .setOngoing(ongoing)\r\n                .setChannelId(NOTIFICATION_CHANNEL)\r\n                .setCategory(Notification.CATEGORY_SERVICE)\r\n                .setStyle(androidx.media.app.NotificationCompat.MediaStyle()\r\n                        .setShowActionsInCompactView(0, 1, 2)\r\n                        .setMediaSession(mMediaSession ?.sessionToken))\r\n            .setDeleteIntent(notificationDismissedPendingIntent)\r\n                .addAction(android.R.drawable.ic_media_previous, getString(R.string.previous), playbackAction(3, activity))\r\n                .addAction(playPauseIcon, getString(R.string.playpause), play_pauseAction)\r\n                .addAction(android.R.drawable.ic_media_next, getString(R.string.next), playbackAction(2, activity))\r\n\r\n        startForeground(NOTIFICATION_ID, notification.build())*/\r\n    }\r\n\r\n\r\n    public static PendingIntent playbackAction(int actionNumber, Activity activity) {\r\n        Intent playbackAction = new Intent(activity, MusicService.class);\r\n        switch (actionNumber) {\r\n            case 0:\r\n                // Play\r\n                playbackAction.setAction(ACTION_PLAY);\r\n                return PendingIntent.getService(activity, actionNumber, playbackAction, 0);\r\n            case 1:\r\n                // Pause\r\n                playbackAction.setAction(ACTION_PAUSE);\r\n                return PendingIntent.getService(activity, actionNumber, playbackAction, 0);\r\n            case 2:\r\n                // Next track\r\n                playbackAction.setAction(ACTION_NEXT);\r\n                return PendingIntent.getService(activity, actionNumber, playbackAction, 0);\r\n            case 3:\r\n                // Previous track\r\n                playbackAction.setAction(ACTION_PREVIOUS);\r\n                return PendingIntent.getService(activity, actionNumber, playbackAction, 0);\r\n            default:\r\n                break;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private void removeNotification(Activity activity) {\r\n        NotificationManager notificationManager = (NotificationManager) activity.getSystemService(Context.NOTIFICATION_SERVICE);\r\n        notificationManager.cancel(NOTIFICATION_ID);\r\n    }\r\n\r\n    private void handleIncomingActions(Intent playbackAction) {\r\n        if (playbackAction == null || playbackAction.getAction() == null) return;\r\n\r\n        String actionString = playbackAction.getAction();\r\n        if (actionString.equalsIgnoreCase(ACTION_PLAY)) {\r\n            transportControls.play();\r\n        } else if (actionString.equalsIgnoreCase(ACTION_PAUSE)) {\r\n            transportControls.pause();\r\n        } else if (actionString.equalsIgnoreCase(ACTION_NEXT)) {\r\n            transportControls.skipToNext();\r\n        } else if (actionString.equalsIgnoreCase(ACTION_PREVIOUS)) {\r\n            transportControls.skipToPrevious();\r\n        } else if (actionString.equalsIgnoreCase(ACTION_STOP)) {\r\n            transportControls.stop();\r\n        }\r\n    }\r\n/*    private void skipToNext() {\r\n        if (audioIndex == audioList.size() - 1) {\r\n            //if last in playlist\r\n            audioIndex = 0;\r\n            activeAudio = audioList.get(audioIndex);\r\n        } else {\r\n            //get next in playlist\r\n            activeAudio = audioList.get(++audioIndex);\r\n        }\r\n\r\n        //Update stored index\r\n        new StorageUtil(getApplicationContext()).storeAudioIndex(audioIndex);\r\n\r\n        stopMedia();\r\n        //reset mediaPlayer\r\n        mediaPlayer.reset();\r\n        initMediaPlayer();\r\n    }*/\r\n\r\n    /* private void skipToPrevious() {\r\n         if (audioIndex == 0) {\r\n             //if first in playlist\r\n             //set index to the last of audioList\r\n             audioIndex = audioList.size() - 1;\r\n             activeAudio = audioList.get(audioIndex);\r\n         } else {\r\n             //get previous in playlist\r\n             activeAudio = audioList.get(--audioIndex);\r\n         }\r\n\r\n         //Update stored index\r\n         new StorageUtil(getApplicationContext()).storeAudioIndex(audioIndex);\r\n\r\n         stopMedia();\r\n         //reset mediaPlayer\r\n         mediaPlayer.reset();\r\n         initMediaPlayer();\r\n     }*/\r\n\r\n    /* TODO Need this code Can't delete\r\n  @Override\r\n  public int onStartCommand(Intent intent, int flags, int startId) {\r\n      try {\r\n          //Load data from SharedPreferences\r\n          StorageUtil storage = new StorageUtil(getApplicationContext());\r\n          audioList = storage.loadAudio();\r\n          audioIndex = storage.loadAudioIndex();\r\n\r\n          if (audioIndex != -1 && audioIndex < audioList.size()) {\r\n              //index is in a valid range\r\n              activeAudio = audioList.get(audioIndex);\r\n          } else {\r\n              stopSelf();\r\n          }\r\n      } catch (NullPointerException e) {\r\n          stopSelf();\r\n      }\r\n\r\n      //Request audio focus\r\n      if (requestAudioFocus() == false) {\r\n          //Could not gain focus\r\n          stopSelf();\r\n      }\r\n\r\n      if (mediaSessionManager == null) {\r\n          try {\r\n              initMediaSession();\r\n              initMediaPlayer();\r\n          } catch (RemoteException e) {\r\n              e.printStackTrace();\r\n              stopSelf();\r\n          }\r\n          buildNotification(PlaybackStatus.PLAYING);\r\n      }\r\n\r\n      //Handle Intent action from MediaSession.TransportControls\r\n      handleIncomingActions(intent);\r\n      return super.onStartCommand(intent, flags, startId);\r\n  }*/\r\n/* @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n                resumeMedia();\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if (isMediaStart) {\r\n                    pauseMedia();\r\n//                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n//                    binding.ivPause.setVisibility(View.GONE);\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }*/\r\n\r\n  /*  public static Bitmap getBitmapFromURL(String src) {\r\n        try {\r\n            URL url = new URL(src);\r\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n            connection.setDoInput(true);\r\n            connection.connect();\r\n            InputStream input = connection.getInputStream();\r\n            Bitmap myBitmap = BitmapFactory.decodeStream(input);\r\n            return myBitmap;\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }*/\r\n\r\n    public static void getLatasteUpdate(Context context) {\r\n        String appURI = \"https://play.google.com/store/apps/details?id=com.brainwellnessspa\";\r\n        if (BWSApplication.isNetworkConnected(context)) {\r\n            Call<VersionModel> listCall = APIClient.getClient().getVersionDatas(String.valueOf(BuildConfig.VERSION_CODE), CONSTANTS.FLAG_ONE);\r\n            listCall.enqueue(new Callback<VersionModel>() {\r\n                @Override\r\n                public void onResponse(Call<VersionModel> call, Response<VersionModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        VersionModel versionModel = response.body();\r\n//                    if (versionModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                        if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"0\")) {\r\n                            AlertDialog.Builder builder = new AlertDialog.Builder(context);\r\n                            builder.setTitle(\"Update Brain Wellness Spa\");\r\n                            builder.setCancelable(false);\r\n                            builder.setMessage(\"Brain Wellness Spa recommends that you update to the latest version\")\r\n                                    .setPositiveButton(\"UPDATE\", (dialog, id) -> {\r\n                                        context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(appURI)));\r\n                                        dialog.cancel();\r\n                                    })\r\n                                    .setNegativeButton(\"NOT NOW\", (dialog, id) -> dialog.dismiss());\r\n                            builder.create().show();\r\n                        } else if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"1\")) {\r\n                            AlertDialog.Builder builder = new AlertDialog.Builder(context);\r\n                            builder.setTitle(\"Update Required\");\r\n                            builder.setCancelable(false);\r\n                            builder.setMessage(\"To keep using Brain Wellness Spa, download the latest version\")\r\n                                    .setCancelable(false)\r\n                                    .setPositiveButton(\"UPDATE\", (dialog, id) -> context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(appURI))));\r\n                            builder.create().show();\r\n                        } else if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"\")) {\r\n                        }\r\n                    }\r\n                    /*} else {\r\n                    }*/\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<VersionModel> call, Throwable t) {\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(context.getString(R.string.no_server_found), context);\r\n        }\r\n    }\r\n\r\n    public static String getKey(Context context) {\r\n        AppSignatureHashHelper appSignatureHashHelper = new AppSignatureHashHelper(context);\r\n        String key = appSignatureHashHelper.getAppSignatures().get(0);\r\n\r\n        SharedPreferences shared = context.getSharedPreferences(CONSTANTS.PREF_KEY_Splash, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putString(CONSTANTS.PREF_KEY_SplashKey, appSignatureHashHelper.getAppSignatures().get(0));\r\n        editor.commit();\r\n        return key;\r\n    }\r\n\r\n    public static void showToast(String message, Context context) {\r\n        Toast toast = new Toast(context);\r\n        View view = LayoutInflater.from(context).inflate(R.layout.toast_layout, null);\r\n        TextView tvMessage = view.findViewById(R.id.tvMessage);\r\n        tvMessage.setText(message);\r\n        toast.setGravity(Gravity.BOTTOM | Gravity.CENTER, 0, 35);\r\n        toast.setView(view);\r\n        toast.show();\r\n    }\r\n\r\n    public static String getProgressDisplayLine(long currentBytes, long totalBytes) {\r\n        return getBytesToMBString(currentBytes) + \"/\" + getBytesToMBString(totalBytes);\r\n    }\r\n\r\n    private static String getBytesToMBString(long bytes) {\r\n        return String.format(Locale.ENGLISH, \"%.2fMb\", bytes / (1024.00 * 1024.00));\r\n    }\r\n/*    public static List<DownloadAudioDetails> GetAllMedia(Context ctx) {\r\n\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }*/\r\n\r\n    public static synchronized BWSApplication getInstance() {\r\n        return BWSApplication;\r\n    }\r\n\r\n    public static void hideProgressBar(ProgressBar progressBar, FrameLayout progressBarHolder, Activity ctx) {\r\n        try {\r\n            progressBarHolder.setVisibility(View.GONE);\r\n            progressBar.setVisibility(View.GONE);\r\n            ctx.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void showProgressBar(ProgressBar progressBar, FrameLayout progressBarHolder, Activity ctx) {\r\n        try {\r\n            progressBarHolder.setVisibility(View.VISIBLE);\r\n            ctx.getWindow().setFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE, WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);\r\n            progressBar.setVisibility(View.VISIBLE);\r\n            progressBar.invalidate();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static boolean isEmailValid(String email) {\r\n        boolean isValid = false;\r\n        String expression = \"^[\\\\w\\\\.-]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,3}$\";\r\n        CharSequence inputStr = email;\r\n\r\n        Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);\r\n        Matcher matcher = pattern.matcher(inputStr);\r\n        if (matcher.matches()) {\r\n            isValid = true;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        mContext = this;\r\n        BWSApplication = this;\r\n    }\r\n\r\n    public static boolean isNetworkConnected(Context context) {\r\n        try {\r\n            ConnectivityManager mConnectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n            NetworkInfo mNetworkInfo = mConnectivityManager.getActiveNetworkInfo();\r\n            boolean flag = false;\r\n            ConnectivityManager manager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n//For 3G check\r\n            boolean is3g = manager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE)\r\n                    .isConnectedOrConnecting();\r\n//For WiFi Check\r\n            boolean isWifi = manager.getNetworkInfo(ConnectivityManager.TYPE_WIFI)\r\n                    .isConnectedOrConnecting();\r\n\r\n            flag = !(!is3g && !isWifi);\r\n            return flag;\r\n        } catch (NullPointerException e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static String securityKey() {\r\n        String key;\r\n        String DeviceId = Settings.Secure.getString(getContext().getContentResolver(), Settings.Secure.ANDROID_ID);\r\n        String AES = \"OsEUHhecSs4gRGcy2vMQs1s/XajBrLGADR71cKMRNtA=\";\r\n        String RSA = \"KlWxBHfKPGkkeTjkT7IEo32bZW8GlVCPq/nvVFuYfIY=\";\r\n        String TDES = \"1dpra0SZhVPpiUQvikMvkDxEp7qLLJL9pe9G6Apg01g=\";\r\n        String SHA1 = \"Ey8rBCHsqITEbh7KQKRmYObCGBXqFnvtL5GjMFQWHQo=\";\r\n        String MD5 = \"/qc2rO3RB8Z/XA+CmHY0tCaJch9a5BdlQW1xb7db+bg=\";\r\n\r\n        Calendar calendar = Calendar.getInstance();\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n        calendar.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n        calendar.setTime(new Date());\r\n        SimpleDateFormat outputFmt = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n        String dateAsString = outputFmt.format(calendar.getTime());\r\n        //        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n        //2019-11-21 06:45:32\r\n//        String currentDateandTime = sdf.format(new Date());\r\n        String finalKey = \"\";\r\n        HashMap<String, String> hash_map = new HashMap<String, String>();\r\n        hash_map.put(\"AES\", AES);\r\n        hash_map.put(\"RSA\", RSA);\r\n        hash_map.put(\"TDES\", TDES);\r\n        hash_map.put(\"SHA1\", SHA1);\r\n        hash_map.put(\"MD5\", MD5);\r\n\r\n        Random random = new Random();\r\n        List<String> keys = new ArrayList<String>(hash_map.keySet());\r\n        String randomKey = keys.get(random.nextInt(keys.size()));\r\n        String value = hash_map.get(randomKey);\r\n        key = DeviceId + \".\" + dateAsString + \".\" + randomKey + \".\" + value;\r\n\r\n        try {\r\n            finalKey = ProgramForAES(key);\r\n            System.out.println(finalKey);\r\n        } catch (Exception e) {\r\n        }\r\n        return finalKey;\r\n    }\r\n\r\n    public static String ProgramForAES(String baseString) {\r\n        String cipher = \"\";\r\n        try {\r\n            String key = \"5785abf057d4eea9e59151f75a6fadb724768053df2acdfabb68f2b946b972c6\";\r\n            CryptLib cryptLib = new CryptLib();\r\n            cipher = cryptLib.encryptPlainTextWithRandomIV(baseString, key);\r\n            println(\"cipherText\" + cipher);\r\n            String decryptedString = cryptLib.decryptCipherTextWithRandomIV(cipher, key);\r\n            println(\"decryptedString\" + decryptedString);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return cipher;\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/BWSApplication.java	(revision 9981b5927e9fd353e8664f4bfef4a31901c414bb)
+++ app/src/main/java/com/brainwellnessspa/BWSApplication.java	(date 1604643174358)
@@ -7,6 +7,7 @@
 import android.app.NotificationChannel;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
+import android.app.Service;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
@@ -44,6 +45,7 @@
 import com.brainwellnessspa.Utility.MeasureRatio;
 import com.brainwellnessspa.R;
 import com.brainwellnessspa.Utility.MusicService;
+import com.brainwellnessspa.Utility.NotificationDismissedReceiver;
 import com.brainwellnessspa.Utility.PlaybackStatus;
 
 import java.io.IOException;
@@ -76,17 +78,27 @@
     private static BWSApplication BWSApplication;
     private static List<DownloadAudioDetails> downloadAudioDetailsList;
     private static final int NOTIFICATION_ID = 101;
-    public static final String ACTION_PLAY = "com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PLAY";
-    public static final String ACTION_PAUSE = "com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PAUSE";
-    public static final String ACTION_PREVIOUS = "com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PREVIOUS";
-    public static final String ACTION_NEXT = "com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_NEXT";
-    public static final String ACTION_STOP = "com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_STOP";
+    public static final String ACTION_PLAY = "com.brainwellnessspa.ACTION_PLAY";
+    public static final String ACTION_PAUSE = "com.brainwellnessspa.ACTION_PAUSE";
+    public static final String ACTION_PREVIOUS = "com.brainwellnessspa.ACTION_PREVIOUS";
+    public static final String ACTION_NEXT = "com.brainwellnessspa.ACTION_NEXT";
+    public static final String ACTION_STOP = "com.brainwellnessspa.ACTION_STOP";
+    public static final String NOTIFICATION_DISMISSED = "com.brainwellnessspa.NOTIFICATION_DISMISSED";
+    public static final String NOTIFICATION_CHANNEL = "music_player_channel";
     private static Bitmap myBitmap;
+    private static Service service;
+    private static Bitmap mCurrTrackCover;
+    public static MediaSessionCompat mMediaSession = null;
+    public static PendingIntent play_pauseAction = null;
+    public static boolean usesChronometer = false;
+    public static boolean showWhen = false;
+    public static Long notifWhen = 0L;
+//    playPauseIcon = if (getIsPlaying()) R.drawable.ic_pause_vector else R.drawable.ic_play_vector
 
     //MediaSession
-    private MediaSessionManager mediaSessionManager;
-    private MediaSessionCompat mediaSession;
-    private MediaControllerCompat.TransportControls transportControls;
+    public static MediaSessionManager mediaSessionManager;
+    public static MediaSessionCompat mediaSession;
+    public static MediaControllerCompat.TransportControls transportControls;
 
     public static Context getContext() {
         return mContext;
@@ -119,8 +131,8 @@
         }
     };
 
-    public static void simple_Notification(PlaybackStatus playbackStatus, ArrayList<MainPlayModel> mainPlayModelList, Activity activity, int position) {
-      /*  Bitmap mCurrTrackCover;
+    public static void simple_Notification(PlaybackStatus playbackStatus, ArrayList<MainPlayModel> mainPlayModelList, Activity activity, int position, Context ctx) {
+        /*  Bitmap mCurrTrackCover;
         boolean showWhen = false;
         var notifWhen = 0L*/
 
@@ -193,30 +205,6 @@
         }
 
         notificationManager.notify(NOTIFICATION_ID, notificationBuilder.build());
-
-        /*NotificationCompat.Builder notification = NotificationCompat.Builder(applicationContext, NOTIFICATION_CHANNEL)
-                .setContentTitle(mainPlayModelList.get(position).getName())
-                .setContentText(mainPlayModelList.get(position).getAudioDirection())
-                .setSmallIcon(android.R.drawable.stat_sys_headset)
-                .setLargeIcon(mCurrTrackCover)
-                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
-                .setPriority(NotificationCompat.PRIORITY_MAX)
-                .setWhen(notifWhen)
-                .setShowWhen(showWhen)
-                .setUsesChronometer(usesChronometer)
-                .setContentIntent(getContentIntent())
-//                .setOngoing(ongoing)
-                .setChannelId(NOTIFICATION_CHANNEL)
-                .setCategory(Notification.CATEGORY_SERVICE)
-                .setStyle(androidx.media.app.NotificationCompat.MediaStyle()
-                        .setShowActionsInCompactView(0, 1, 2)
-                        .setMediaSession(mMediaSession ?.sessionToken))
-            .setDeleteIntent(notificationDismissedPendingIntent)
-                .addAction(android.R.drawable.ic_media_previous, getString(R.string.previous), playbackAction(3, activity))
-                .addAction(playPauseIcon, getString(R.string.playpause), play_pauseAction)
-                .addAction(android.R.drawable.ic_media_next, getString(R.string.next), playbackAction(2, activity))
-
-        startForeground(NOTIFICATION_ID, notification.build())*/
     }
 
 
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.media.AudioAttributes;\r\nimport android.media.AudioManager;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.SystemClock;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.PlaybackStatus;\r\nimport com.brainwellnessspa.databinding.ActivityPlayWellnessBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.downloader.PRDownloader;\r\nimport com.downloader.Status;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity.comeFromAddToQueue;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.addToRecentPlayId;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.ToBackward;\r\nimport static com.brainwellnessspa.Utility.MusicService.ToForward;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isprogressbar;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class PlayWellnessActivity extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener/*, AudioManager.OnAudioFocusChangeListener, OnProgressListener*/ {\r\n    ActivityPlayWellnessBinding binding;\r\n    String IsRepeat = \"\", IsShuffle = \"\", UserID, PlaylistId = \"\", AudioFlag, id, name, url;\r\n    int startTime = 0, endTime = 0, position, listSize, myCount, progress, downloadPercentage;\r\n    Context ctx;\r\n    Activity activity;\r\n    Boolean queuePlay, audioPlay;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<AddToQueueModel> addToQueueModelList;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList1;\r\n    long myProgress = 0,diff = 0;\r\n    private long mLastClickTime = 0, totalDuration, currentDuration = 0;\r\n    private Handler handler;\r\n    PlaybackStatus playbackStatus;\r\n    //    private Handler handler1;\r\n    //        private AudioManager mAudioManager;\r\n    private Runnable UpdateSongTime = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            Time t = Time.valueOf(\"00:00:00\");\r\n            String endtimetext = \"\";\r\n            if (queuePlay) {\r\n                if (listSize != 0) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (downloadAudioDetailsList.size() != 0) {\r\n                            endtimetext = downloadAudioDetailsList.get(0).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                } else {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    stopMedia();\r\n                }\r\n            } else if (audioPlay) {\r\n                if (listSize != 0) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (downloadAudioDetailsList.size() != 0) {\r\n                            endtimetext = downloadAudioDetailsList.get(0).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else\r\n                    totalDuration = t.getTime();\r\n            } else {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else\r\n                    totalDuration = t.getTime();\r\n            }\r\n            myProgress = currentDuration;\r\n            currentDuration = getStartTime();\r\n            diff = totalDuration - myProgress;\r\n//            Log.e(\"myProgress old!!!\", String.valueOf(myProgress));\r\n            if (myProgress == currentDuration && myProgress != 0 && !isPause && url.equalsIgnoreCase(\"\")) {\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                myCount++;\r\n                Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                if (myCount == 5) {\r\n                    Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                    callComplete();\r\n                    myCount = 0;\r\n                }\r\n            } else if (myProgress == currentDuration && myProgress != 0 && !isPause && diff < 500) {\r\n//                Log.e(\"myProgress\", String.valueOf(myProgress));\r\n                myCount++;\r\n                Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                if (myCount == 10) {\r\n                    Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                    callComplete();\r\n                    myCount = 0;\r\n                }\r\n            }\r\n            if (currentDuration == totalDuration && currentDuration != 0 && !isStop && !url.equalsIgnoreCase(\"\")) {\r\n                callComplete();\r\n            }\r\n            if (currentDuration == totalDuration && currentDuration != 0 && !isStop &&isMediaStart && url.equalsIgnoreCase(\"\")) {\r\n                mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                    callComplete();\r\n                    Log.e(\"calll complete real\",\"real\");\r\n                });\r\n            }\r\n            progress = getProgressPercentage(currentDuration, totalDuration);\r\n            if (currentDuration == 0 && isCompleteStop) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n            }else if (currentDuration == 0 && isprogressbar) {\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n            }else if (currentDuration >= 1 && !isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                isprogressbar = false;\r\n            } else if (currentDuration >= 1 && isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                isprogressbar = false;\r\n            }\r\n            //Log.d(\"Progress\", \"\"+progress);\r\n            startTime = getStartTime();\r\n            if (currentDuration == totalDuration && currentDuration != 0 && !isStop) {\r\n                binding.tvStartTime.setText(endtimetext);\r\n            } else if (isPause) {\r\n                binding.simpleSeekbar.setProgress(oTime);\r\n                int timeeee = progressToTimer(oTime, (int) (totalDuration));\r\n                binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                        TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n            } else {\r\n                binding.simpleSeekbar.setProgress(progress);\r\n                binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(startTime),\r\n                        TimeUnit.MILLISECONDS.toSeconds(startTime) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(startTime))));\r\n            }\r\n            binding.simpleSeekbar.setMax(100);\r\n\r\n            // Running this thread after 100 milliseconds\r\n            handler.postDelayed(this, 100);\r\n        }\r\n    };\r\n/*    private Runnable UpdateSongTime1 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n                if (downloadProgress <= 100) {\r\n                    binding.pbProgress.setProgress(downloadProgress);\r\n                    binding.pbProgress.setVisibility(View.VISIBLE);\r\n                    binding.ivDownloads.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.pbProgress.setVisibility(View.GONE);\r\n                    binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                    handler1.removeCallbacks(UpdateSongTime1);\r\n                }\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }\r\n            handler1.postDelayed(this, 500);\r\n        }\r\n    };*/\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n//        overridePendingTransition(R.anim.enter, R.anim.exit);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_play_wellness);\r\n        handler = new Handler();\r\n//        handler1 = new Handler();\r\n        ctx = PlayWellnessActivity.this;\r\n        activity = PlayWellnessActivity.this;\r\n        addToQueueModelList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        downloadAudioDetailsList1 = new ArrayList<>();\r\n        mainPlayModelList = new ArrayList<>();\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences Status = getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = gson.fromJson(json, type);\r\n        BWSApplication.simple_Notification(playbackStatus, mainPlayModelList, PlayWellnessActivity.this, position);\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                1, 1, 0.92f, 0);\r\n        binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n/*        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        callLLMoreViewQClicks();\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        getPrepareShowData(position);\r\n        /*if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }*/\r\n        callRepeatShuffle();\r\n        if(isMediaStart /*&& !audioFile.equalsIgnoreCase(\"\")*/){\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete real\",\"real\");\r\n            });\r\n        }\r\n        binding.llBack.setOnClickListener(view -> {\r\n            callBack();\r\n        });\r\n\r\n        binding.llLike.setOnClickListener(view -> {\r\n            callLike();\r\n        });\r\n\r\n        binding.llRepeat.setOnClickListener(view -> callRepeat());\r\n\r\n        binding.llShuffle.setOnClickListener(view -> callShuffle());\r\n\r\n        binding.llDownload.setOnClickListener(view -> {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                callDownload();\r\n            }else{\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        });\r\n\r\n        binding.llMore.setOnClickListener(view -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            Intent i = new Intent(ctx, AddQueueActivity.class);\r\n            if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                i.putExtra(\"play\", \"TopCategories\");\r\n            } else\r\n                i.putExtra(\"play\", \"play\");\r\n            i.putExtra(\"ID\", id);\r\n            i.putExtra(\"position\", position);\r\n            i.putExtra(\"PlaylistAudioId\", \"\");\r\n            startActivity(i);\r\n//            finish();\r\n        });\r\n\r\n        binding.llViewQueue.setOnClickListener(view -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n//            pauseMedia();\r\n            if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n                isPause = false;\r\n            }\r\n            SharedPreferences ViewQueue = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = ViewQueue.edit();\r\n            Gson gsonx = new Gson();\r\n            String jsonx = gsonx.toJson(addToQueueModelList);\r\n            if (queuePlay) {\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, jsonx);\r\n            }\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, ViewQueueActivity.class);\r\n            i.putExtra(\"ComeFromQueue\", \"0\");\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.llPlay.setOnClickListener(v -> {\r\n            if (!isMediaStart) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler.postDelayed(UpdateSongTime,500);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                callMedia();\r\n            }else if(isCompleteStop){\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler.postDelayed(UpdateSongTime,500);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                callMedia();\r\n            } else {\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                resumeMedia();\r\n                isPause = false;\r\n            }\r\n            handler.postDelayed(UpdateSongTime, 100);\r\n        });\r\n\r\n        binding.llPause.setOnClickListener(view -> {\r\n            handler.removeCallbacks(UpdateSongTime);\r\n            binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n            pauseMedia();\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        });\r\n\r\n        binding.llForwardSec.setOnClickListener(v -> {\r\n            ToForward(ctx);\r\n            setProgressBar();\r\n            if (!binding.llPlay.isEnabled()) {\r\n                binding.llPlay.setEnabled(true);\r\n            }\r\n        });\r\n\r\n        binding.llBackWordSec.setOnClickListener(v -> {\r\n            ToBackward(ctx);\r\n            setProgressBar();\r\n            if (!binding.llPlay.isEnabled()) {\r\n                binding.llPlay.setEnabled(true);\r\n            }\r\n        });\r\n\r\n        binding.llnext.setOnClickListener(view -> {\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isPause = false;\r\n            isCompleteStop = false;\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n            if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                // repeat is on play same song again\r\n                if (position < listSize - 1) {\r\n                    position = position + 1;\r\n                } else {\r\n                    position = 0;\r\n                }\r\n                getPrepareShowData(position);\r\n            }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (listSize == 0) {\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else if (listSize == 1) {\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            Random random = new Random();\r\n                            position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (position < listSize - 1) {\r\n                            getPrepareShowData(position);\r\n                        } else {\r\n                            if (listSize == 0) {\r\n                                savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                                stopMedia();\r\n                            } else {\r\n                                position = 0;\r\n                                getPrepareShowData(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    if (position < listSize - 1) {\r\n                        position = position + 1;\r\n                        getPrepareShowData(position);\r\n                    } else if (listSize != 1) {\r\n                        position = 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        binding.llprev.setOnClickListener(view -> {\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isPause = false;\r\n            isCompleteStop = false;\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n            if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                // repeat is on play same song again\r\n                if (position > 0) {\r\n                    position = position - 1;\r\n                    getPrepareShowData(position);\r\n                } else if (listSize != 1) {\r\n                    position = listSize - 1;\r\n                    getPrepareShowData(position);\r\n                }\r\n            }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (listSize == 0) {\r\n                            stopMedia();\r\n                        } else if (listSize == 1) {\r\n                            stopMedia();\r\n                        } else {\r\n                            Random random = new Random();\r\n                            position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (position > 0) {\r\n                            getPrepareShowData(position - 1);\r\n                        } else {\r\n                            if (listSize == 0) {\r\n                                savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                                binding.llPlay.setVisibility(View.VISIBLE);\r\n                                binding.llPause.setVisibility(View.GONE);\r\n                                stopMedia();\r\n                            } else {\r\n                                position = 0;\r\n                                getPrepareShowData(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    if (position > 0) {\r\n                        position = position - 1;\r\n\r\n                        getPrepareShowData(position);\r\n                    } else if (listSize != 1) {\r\n                        position = listSize - 1;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callRepeatShuffle() {\r\n        if (url.equalsIgnoreCase(\"\")){\r\n            binding.llShuffle.setClickable(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setClickable(false);\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }else {\r\n            if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n                if (listSize == 1) {\r\n                    binding.llShuffle.setClickable(false);\r\n                    binding.llShuffle.setEnabled(false);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    binding.llShuffle.setClickable(true);\r\n                    binding.llShuffle.setEnabled(true);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                if (listSize == 1) {\r\n                    binding.llShuffle.setClickable(false);\r\n                    binding.llShuffle.setEnabled(false);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    binding.llShuffle.setClickable(true);\r\n                    binding.llShuffle.setEnabled(true);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            }\r\n            if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n                if (queuePlay) {\r\n                    binding.llRepeat.setEnabled(false);\r\n                    binding.llRepeat.setClickable(false);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    binding.llRepeat.setClickable(true);\r\n                    binding.llRepeat.setEnabled(true);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                if (queuePlay) {\r\n                    binding.llRepeat.setEnabled(false);\r\n                    binding.llRepeat.setClickable(false);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    IsRepeat = \"0\";\r\n                    binding.llRepeat.setClickable(true);\r\n                    binding.llRepeat.setEnabled(true);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                if (queuePlay) {\r\n                    binding.llRepeat.setEnabled(false);\r\n                    binding.llRepeat.setClickable(false);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    if (listSize == 1) {\r\n                        binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                    } else {\r\n                        binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                    }\r\n                    binding.llRepeat.setClickable(true);\r\n                    binding.llRepeat.setEnabled(true);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void setProgressBar() {\r\n        Time t = Time.valueOf(\"00:00:00\");\r\n        String endtimetext = \"\";\r\n        if (queuePlay) {\r\n            if (listSize != 0) {\r\n                endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n            } else {\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                stopMedia();\r\n            }\r\n        } else if (audioPlay) {\r\n            endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n        }\r\n        totalDuration = t.getTime();\r\n        currentDuration = getStartTime();\r\n\r\n        int progress = getProgressPercentage(currentDuration, totalDuration);\r\n        //Log.d(\"Progress\", \"\"+progress);\r\n        startTime = getStartTime();\r\n        if (currentDuration == totalDuration) {\r\n            binding.tvStartTime.setText(endtimetext);\r\n        } else if (isPause) {\r\n            binding.simpleSeekbar.setProgress(progress);\r\n            int timeeee = progressToTimer(progress, (int) (totalDuration));\r\n            binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                    TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        } else {\r\n            binding.simpleSeekbar.setProgress(progress);\r\n            binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(startTime),\r\n                    TimeUnit.MILLISECONDS.toSeconds(startTime) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(startTime))));\r\n        }\r\n    }\r\n\r\n    private void callDownload() {\r\n        if (!url.equalsIgnoreCase(\"\")) {\r\n            disableDownload();\r\n            byte[] EncodeBytes = new byte[1024];\r\n            List<String> url1 = new ArrayList<>();\r\n            List<String> name1 = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url1.addAll(audioFile1);\r\n                    name1.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            url1.add(url);\r\n            name1.add(name);\r\n            downloadPlaylistId.add(\"\");\r\n            if (url1.size() != 0) {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url1);\r\n                String nameJson = gson.toJson(name1);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n            }\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n            downloadMedia.encrypt1(url1, name1, downloadPlaylistId);\r\n\r\n          /*  if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n                handler1.postDelayed(UpdateSongTime1, 500);\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }*/\r\n            binding.pbProgress.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setVisibility(View.GONE);\r\n            SaveMedia(EncodeBytes, FileUtils.getFilePath(getApplicationContext(), name));\r\n   /*     if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<DownloadPlaylistModel> listCall = APIClient.getClient().getDownloadlistPlaylist(UserID, id, PlaylistId);\r\n            listCall.enqueue(new Callback<DownloadPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<DownloadPlaylistModel> call, Response<DownloadPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        DownloadPlaylistModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")\r\n                                || model.getResponseData().getFlag().equalsIgnoreCase(\"\")) {\r\n                            binding.llDownloads.setClickable(true);\r\n                            binding.llDownloads.setEnabled(true);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                            binding.llDownloads.setClickable(false);\r\n                            binding.llDownloads.setEnabled(false);\r\n                        }\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<DownloadPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }*/\r\n        }\r\n    }\r\n\r\n    private void getMediaByPer() {\r\n        class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPercentage = DatabaseClient.getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getDownloadProgress(url, \"\");\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n\r\n                if (downloadAudioDetailsList1.size() != 0) {\r\n                    if (downloadPercentage <= 100) {\r\n                        if (downloadPercentage == 100) {\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        } else {\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            binding.pbProgress.setIndeterminate(false);\r\n                            binding.pbProgress.setProgress(downloadPercentage);\r\n                            getMediaByPer();\r\n//                             handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        getMediaByPer st = new getMediaByPer();\r\n        st.execute();\r\n    }\r\n\r\n    private void SaveMedia(byte[] EncodeBytes, String dirPath) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                if (queuePlay) {\r\n                    downloadAudioDetails.setID(addToQueueModelList.get(position).getID());\r\n                    downloadAudioDetails.setName(addToQueueModelList.get(position).getName());\r\n                    downloadAudioDetails.setAudioFile(addToQueueModelList.get(position).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(addToQueueModelList.get(position).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(addToQueueModelList.get(position).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(addToQueueModelList.get(position).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(addToQueueModelList.get(position).getImageFile());\r\n                    downloadAudioDetails.setLike(addToQueueModelList.get(position).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(addToQueueModelList.get(position).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                } else if (audioPlay) {\r\n                    downloadAudioDetails.setID(mainPlayModelList.get(position).getID());\r\n                    downloadAudioDetails.setName(mainPlayModelList.get(position).getName());\r\n                    downloadAudioDetails.setAudioFile(mainPlayModelList.get(position).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(mainPlayModelList.get(position).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(mainPlayModelList.get(position).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(mainPlayModelList.get(position).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(mainPlayModelList.get(position).getImageFile());\r\n                    downloadAudioDetails.setLike(mainPlayModelList.get(position).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(mainPlayModelList.get(position).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                }\r\n\r\n                DatabaseClient.getInstance(getApplicationContext())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                disableDownload();\r\n                GetMedia2();\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void disableDownload() {\r\n        binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        binding.llDownload.setClickable(false);\r\n        binding.llDownload.setEnabled(false);\r\n    }\r\n\r\n    private void callShuffle() {\r\n        if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                IsShuffle = \"1\";\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"1\");\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                editor.commit();\r\n                IsRepeat = \"\";\r\n                if (queuePlay) {\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n//                BWSApplication.showToast(\"Shuffle mode has been turned on\", ctx);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n//            BWSApplication.showToast(\"Shuffle mode has been turned off\", ctx);\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n    }\r\n\r\n    private void callRepeat() {\r\n\r\n        if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"0\");\r\n            if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            }\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            IsRepeat = \"0\";\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n//            BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"1\");\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            IsRepeat = \"1\";\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                IsRepeat = \"\";\r\n//                BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n//                BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            editor.commit();\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n        } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n            IsRepeat = \"\";\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            editor.commit();\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n//            BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n        }\r\n    }\r\n\r\n    private void callLike() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(id, UserID);\r\n            listCall.enqueue(new Callback<AudioLikeModel>() {\r\n                @Override\r\n                public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        AudioLikeModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                        }\r\n                        SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = sharedx.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        AudioFlag = sharedx.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n                            if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n\r\n                            } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            }\r\n                        }\r\n\r\n                        if (queuePlay) {\r\n                            addToQueueModelList.get(position).setLike(model.getResponseData().getFlag());\r\n                        } else\r\n                            mainPlayModelList.get(position).setLike(model.getResponseData().getFlag());\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(mainPlayModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                        String json1 = gson.toJson(addToQueueModelList);\r\n                        if (queuePlay) {\r\n                            editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n                        }\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                        editor.commit();\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AudioLikeModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void addToRecentPlay() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public void GetMedia() {\r\n\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(url);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (isPause) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n                    int timeeee = progressToTimer(oTime, (int) (totalDuration));\r\n                    binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                            TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n//                    resumeMedia();\r\n                } else if (isCompleteStop) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                } else if (isMediaStart && !isPause) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                    binding.progressBar.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    callMedia();\r\n                }\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n    public void GetMedia2() {\r\n\r\n        downloadAudioDetailsList1 = new ArrayList<>();\r\n\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList1 = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getaudioByPlaylist(url, \"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (!url.equalsIgnoreCase(\"\")) {\r\n                    if (downloadAudioDetailsList1.size() != 0) {\r\n                        if (downloadAudioDetailsList1.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                            binding.llDownload.setClickable(false);\r\n                            binding.llDownload.setEnabled(false);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                        } else/* if (!mainPlayModelList.get(position).getDownload().equalsIgnoreCase(\"\")) */ {\r\n                            binding.llDownload.setClickable(true);\r\n                            binding.llDownload.setEnabled(true);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                        }\r\n                    } else/* if (!mainPlayModelList.get(position).getDownload().equalsIgnoreCase(\"\")) */ {\r\n                        binding.llDownload.setClickable(true);\r\n                        binding.llDownload.setEnabled(true);\r\n                        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n                        binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                    }\r\n                }\r\n\r\n                getMediaByPer();\r\n\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void getPrepareShowData(int position) {\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        if (queuePlay) {\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setClickable(false);\r\n        }\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n        } else if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n        }\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.llShuffle.setClickable(false);\r\n            IsShuffle = \"\";\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }*/ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llShuffle.setEnabled(true);\r\n            binding.llnext.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.llShuffle.setClickable(true);\r\n            if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n            if (listSize == 1) {\r\n                position = 0;\r\n            }\r\n            if(listSize!=0) {\r\n                id = addToQueueModelList.get(position).getID();\r\n                name = addToQueueModelList.get(position).getName();\r\n                url = addToQueueModelList.get(position).getAudioFile();\r\n                binding.tvName.setText(addToQueueModelList.get(position).getName());\r\n                binding.tvDireName.setText(R.string.Directions);\r\n                binding.tvDireName.setText(R.string.Directions);\r\n                if (addToQueueModelList.get(position).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                    binding.llDirection.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.llDirection.setVisibility(View.VISIBLE);\r\n                    binding.tvDireDesc.setText(addToQueueModelList.get(position).getAudioDirection());\r\n                }\r\n                binding.tvTitle.setText(addToQueueModelList.get(position).getAudiomastercat());\r\n                binding.tvDesc.setText(addToQueueModelList.get(position).getAudioSubCategory());\r\n                if (addToQueueModelList.get(position).getPlaylistID() == null) {\r\n                    addToQueueModelList.get(position).setPlaylistID(\"\");\r\n                }\r\n                Glide.with(getApplicationContext()).load(addToQueueModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                } else if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                }\r\n                binding.tvSongTime.setText(addToQueueModelList.get(position).getAudioDuration());\r\n                GetMedia();\r\n                GetMedia2();\r\n            }\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            startTime = getStartTime();\r\n\r\n        } else if (audioPlay) {\r\n            try {\r\n                listSize = mainPlayModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if(listSize!=0) {\r\n                    id = mainPlayModelList.get(position).getID();\r\n                    name = mainPlayModelList.get(position).getName();\r\n                    url = mainPlayModelList.get(position).getAudioFile();\r\n                    if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n                        isDisclaimer = 1;\r\n                        callAllDisable(false);\r\n\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        callAllDisable(true);\r\n                    }\r\n                    if (mainPlayModelList.get(position).getPlaylistID() == null) {\r\n                        mainPlayModelList.get(position).setPlaylistID(\"\");\r\n                    }\r\n                    binding.tvName.setText(mainPlayModelList.get(position).getName());\r\n                    if (mainPlayModelList.get(position).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                        binding.llDirection.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llDirection.setVisibility(View.VISIBLE);\r\n                        binding.tvDireDesc.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                    }\r\n                    binding.tvTitle.setText(mainPlayModelList.get(position).getAudiomastercat());\r\n                    binding.tvDesc.setText(mainPlayModelList.get(position).getAudioSubCategory());\r\n                    if (url.equalsIgnoreCase(\"\")) {\r\n                        Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    } else {\r\n                        /*TODO */\r\n                        Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    }\r\n                    if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                        binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                    } else if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                        binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                    }\r\n                    binding.tvSongTime.setText(mainPlayModelList.get(position).getAudioDuration());\r\n                    GetMedia();\r\n                    GetMedia2();\r\n                }\r\n                startTime = getStartTime();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n/*        if (isMediaStart && url.equalsIgnoreCase(\"\")) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete real\",\"real\");\r\n            });\r\n        }*/\r\n     /*   if (isMediaStart && !url.equalsIgnoreCase(\"\")) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete trans\",\"trans\");\r\n            });\r\n        }*/\r\n        getMediaByPer();\r\n        if (!url.equalsIgnoreCase(\"\")) {\r\n            if(!id.equalsIgnoreCase(addToRecentPlayId)) {\r\n                addToRecentPlay();\r\n                Log.e(\"Api call recent\",id);\r\n            }\r\n        }\r\n        addToRecentPlayId = id;\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n    }\r\n\r\n    private void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if (download.equalsIgnoreCase(\"2\")) {\r\n            mediaPlayer = MediaPlayer.create(ctx, R.raw.brain_wellness_spa_declaimer);\r\n            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\r\n//            Uri uri = Uri.parse(\"android.resource://com.brainwellnessspa/\" + R.raw.brain_wellness_spa_declaimer);\r\n//            mediaPlayer.setDataSource(String.valueOf(uri));\r\n            mediaPlayer.start();\r\n            isPrepare = true;\r\n            isMediaStart = true;\r\n        } else {\r\n            if (null == mediaPlayer) {\r\n                mediaPlayer = new MediaPlayer();\r\n                Log.e(\"Playinggggg\", \"Playinggggg\");\r\n            }\r\n            try {\r\n                if (mediaPlayer == null)\r\n                    mediaPlayer = new MediaPlayer();\r\n                if (mediaPlayer.isPlaying()) {\r\n                    Log.e(\"Playinggggg\", \"stoppppp\");\r\n                    mediaPlayer.stop();\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                    isPause = false;\r\n                }\r\n                mediaPlayer = new MediaPlayer();\r\n                if (download.equalsIgnoreCase(\"1\")) {\r\n                    mediaPlayer.setDataSource(fileDescriptor);\r\n                } else {\r\n                    mediaPlayer.setDataSource(url);\r\n                }\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                    mediaPlayer.setAudioAttributes(\r\n                            new AudioAttributes\r\n                                    .Builder()\r\n                                    .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                    .build());\r\n                }\r\n                mediaPlayer.prepareAsync();\r\n                isPause = false;\r\n                isPrepare = true;\r\n            } catch (IllegalStateException | IOException e) {\r\n                FileDescriptor fileDescriptor1 = null;\r\n                setMediaPlayer(\"0\", fileDescriptor1);\r\n                e.printStackTrace();\r\n            }\r\n            if (!mediaPlayer.isPlaying()) {\r\n                mediaPlayer.setOnPreparedListener(mp -> {\r\n                    Log.e(\"Playinggggg\", \"Startinggg\");\r\n                    mediaPlayer.start();\r\n                    isMediaStart = true;\r\n                    isprogressbar = false;\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callMedia() {\r\n        FileDescriptor fileDescriptor = null;\r\n        if(url.equalsIgnoreCase(\"\")){\r\n            setMediaPlayer(\"2\", fileDescriptor);\r\n\r\n        }else {\r\n            if (downloadAudioDetailsList.size() != 0) {\r\n                isprogressbar = true;\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                isPause = false;\r\n                DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n                getDownloadMedia(downloadMedia);\r\n\r\n            } else {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    isprogressbar = true;\r\n                    binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                    binding.progressBar.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    setMediaPlayer(\"0\", fileDescriptor);\r\n                } else {\r\n                    isprogressbar = false;\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getDownloadMedia(DownloadMedia downloadMedia) {\r\n        class getDownloadMedia extends AsyncTask<Void, Void, Void> {\r\n            FileDescriptor fileDescriptor = null;\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                try {\r\n                    byte[] decrypt = null;\r\n                    decrypt = downloadMedia.decrypt(name);\r\n                    if (decrypt != null) {\r\n                        fileDescriptor = FileUtils.getTempFileDescriptor(getApplicationContext(), decrypt);\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (fileDescriptor != null) {\r\n                    setMediaPlayer(\"1\", fileDescriptor);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        setMediaPlayer(\"0\", fileDescriptor);\r\n                    } else {\r\n                        isprogressbar = false;\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getDownloadMedia st = new getDownloadMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callComplete() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        isPause = false;\r\n        if (audioPlay && (url.equalsIgnoreCase(\"\") || url.isEmpty())) {\r\n            isDisclaimer = 0;\r\n            removeArray();\r\n        } else {\r\n            if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                if (position < (listSize - 1)) {\r\n                    position = position + 1;\r\n                } else {\r\n                    position = 0;\r\n                }\r\n                getPrepareShowData(position);\r\n            } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    }catch (Exception e){}\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        binding.pbProgressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        binding.pbProgressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    if (listSize == 1) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    }catch (Exception e){}\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position < listSize - 1) {\r\n                        getPrepareShowData(position);\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            binding.llProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (position < (listSize - 1)) {\r\n                        int oldPosition = position;\r\n                        position = position + 1;\r\n                        if (oldPosition == position) {\r\n                            position++;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    } else {\r\n                        if (listSize == 1) {\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            binding.llProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            binding.llProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llnext.setEnabled(false);\r\n                binding.llnext.setClickable(false);\r\n                binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llprev.setEnabled(false);\r\n                binding.llprev.setClickable(false);\r\n                binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }*/ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llnext.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        callRepeatShuffle();\r\n    }\r\n\r\n    private void removeArray() {\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        MainPlayModel mainPlayModel;\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json1, type);\r\n\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikePlayList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikePlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json1, type);\r\n            if(arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }\r\n        getPrepareShowData(position);\r\n    }\r\n\r\n  /*  private void MakeArray2() {\r\n        Gson gson = new Gson();\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        mainPlayModelList = new ArrayList<>();\r\n        MainPlayModel mainPlayModel;\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }\r\n    }*/\r\n\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callBack();\r\n    }\r\n\r\n    private void callBack() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n//        handler1.removeCallbacks(UpdateSongTime1);\r\n        player = 1;\r\n        if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n            isPause = false;\r\n        }\r\n//        pauseMedia();\r\n        SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared2.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(addToQueueModelList);\r\n        if (queuePlay) {\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n        }\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        finish();\r\n//        overridePendingTransition(R.anim.enter, R.anim.exit);\r\n    }\r\n\r\n    private void addDeclaimer() {\r\n        MainPlayModel mainPlayModel = new MainPlayModel();\r\n        mainPlayModel.setID(\"0\");\r\n        mainPlayModel.setName(\"Disclaimer\");\r\n        mainPlayModel.setAudioFile(\"\");\r\n        mainPlayModel.setPlaylistID(\"\");\r\n        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n        mainPlayModel.setAudiomastercat(\"\");\r\n        mainPlayModel.setAudioSubCategory(\"\");\r\n        mainPlayModel.setImageFile(\"\");\r\n        mainPlayModel.setLike(\"\");\r\n        mainPlayModel.setDownload(\"\");\r\n        mainPlayModel.setAudioDuration(\"0:48\");\r\n        mainPlayModelList.add(mainPlayModel);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n//        releasePlayer();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = gson.fromJson(json, type);\r\n        callLLMoreViewQClicks();\r\n\r\n        /*if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }*/\r\n        GetMedia2();\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (queuePlay) {\r\n            position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            listSize = addToQueueModelList.size();\r\n            if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n            } else if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n            }\r\n        } else if (audioPlay) {\r\n            position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            listSize = mainPlayModelList.size();\r\n            if(listSize!=0) {\r\n                if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                } else if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                }\r\n                url = mainPlayModelList.get(position).getAudioFile();\r\n            }\r\n            if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n                isDisclaimer = 1;\r\n                callAllDisable(false);\r\n\r\n            } else {\r\n                isDisclaimer = 0;\r\n                callAllDisable(true);\r\n            }\r\n        }\r\n        if (comeFromAddToQueue) {\r\n            getPrepareShowData(position);\r\n            comeFromAddToQueue = false;\r\n        }\r\n        if (listSize == 1) {\r\n            position = 0;\r\n        }\r\n       /* if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if ((isMediaStart && isPlaying()) && !isPause) {\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.VISIBLE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        } else {\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        }*/\r\n        super.onResume();\r\n    }\r\n\r\n    private void callLLMoreViewQClicks() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llMore.setClickable(true);\r\n                binding.llMore.setEnabled(true);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llViewQueue.setClickable(true);\r\n                binding.llViewQueue.setEnabled(true);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n    }\r\n\r\n\r\n    private void callAllDisable(boolean b) {\r\n        if (b) {\r\n            binding.llnext.setClickable(true);\r\n            binding.llnext.setEnabled(true);\r\n            binding.llnext.setAlpha(1f);\r\n            binding.llprev.setClickable(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llprev.setAlpha(1f);\r\n            binding.llForwardSec.setClickable(true);\r\n            binding.llForwardSec.setEnabled(true);\r\n            binding.llForwardSec.setAlpha(1f);\r\n            binding.llBackWordSec.setClickable(true);\r\n            binding.llBackWordSec.setEnabled(true);\r\n            binding.llBackWordSec.setAlpha(1f);\r\n            binding.llDownload.setClickable(true);\r\n            binding.llDownload.setEnabled(true);\r\n            binding.llDownload.setAlpha(1f);\r\n            binding.llRepeat.setClickable(true);\r\n            binding.llRepeat.setEnabled(true);\r\n            binding.llRepeat.setAlpha(1f);\r\n            binding.llShuffle.setClickable(true);\r\n            binding.llShuffle.setEnabled(true);\r\n            binding.llShuffle.setAlpha(1f);\r\n            binding.llLike.setClickable(true);\r\n            binding.llLike.setEnabled(true);\r\n            binding.llLike.setAlpha(1f);\r\n            binding.rlSeekbar.setClickable(true);\r\n            binding.rlSeekbar.setEnabled(true);\r\n            binding.simpleSeekbar.setClickable(true);\r\n            binding.simpleSeekbar.setEnabled(true);\r\n            callLLMoreViewQClicks();\r\n//            binding.simpleSeekbar.set\r\n        } else {\r\n            binding.llnext.setClickable(false);\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setAlpha(0.6f);\r\n            binding.llprev.setClickable(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setAlpha(0.6f);\r\n            binding.llForwardSec.setClickable(false);\r\n            binding.llForwardSec.setEnabled(false);\r\n            binding.llForwardSec.setAlpha(0.6f);\r\n            binding.llBackWordSec.setClickable(false);\r\n            binding.llBackWordSec.setEnabled(false);\r\n            binding.llBackWordSec.setAlpha(0.6f);\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.llMore.setAlpha(0.6f);\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.llViewQueue.setAlpha(0.6f);\r\n            binding.llDownload.setClickable(false);\r\n            binding.llDownload.setEnabled(false);\r\n            binding.llDownload.setAlpha(0.6f);\r\n            binding.llRepeat.setClickable(false);\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setAlpha(0.6f);\r\n            binding.llShuffle.setClickable(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.llShuffle.setAlpha(0.6f);\r\n            binding.llLike.setClickable(false);\r\n            binding.llLike.setEnabled(false);\r\n            binding.llLike.setAlpha(0.6f);\r\n            binding.rlSeekbar.setClickable(false);\r\n            binding.rlSeekbar.setEnabled(false);\r\n            binding.simpleSeekbar.setClickable(false);\r\n            binding.simpleSeekbar.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n     /*   handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void onPointerCaptureChanged(boolean hasCapture) {\r\n\r\n    }\r\n /*   @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n                resumeMedia();\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if (isMediaStart) {\r\n                    pauseMedia();\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }*/\r\n\r\n/*    @Override\r\n    public void onProgress(Progress progress) {\r\n        if(!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)){\r\n            handler.postDelayed(UpdateSongTime1, 10);\r\n        }else{\r\n            handler.removeCallbacks(UpdateSongTime1);\r\n        }\r\n    }*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java	(revision 9981b5927e9fd353e8664f4bfef4a31901c414bb)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java	(date 1604640902430)
@@ -309,7 +309,7 @@
         Type type = new TypeToken<ArrayList<MainPlayModel>>() {
         }.getType();
         mainPlayModelList = gson.fromJson(json, type);
-        BWSApplication.simple_Notification(playbackStatus, mainPlayModelList, PlayWellnessActivity.this, position);
+        BWSApplication.simple_Notification(playbackStatus, mainPlayModelList, PlayWellnessActivity.this, position, PlayWellnessActivity.this);
         String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));
         if (!json1.equalsIgnoreCase(String.valueOf(gson))) {
             Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {
Index: app/src/main/java/com/brainwellnessspa/Utility/NotificationDismissedReceiver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/Utility/NotificationDismissedReceiver.java	(date 1604642529880)
+++ app/src/main/java/com/brainwellnessspa/Utility/NotificationDismissedReceiver.java	(date 1604642529880)
@@ -0,0 +1,13 @@
+package com.brainwellnessspa.Utility;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+
+public class NotificationDismissedReceiver extends BroadcastReceiver {
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        new Intent(context, MusicService.class);
+//        context.stopService(context);
+    }
+}
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments;\r\n\r\nimport android.app.Activity;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.media.AudioAttributes;\r\nimport android.media.AudioManager;\r\nimport android.media.MediaPlayer;\r\nimport android.media.RingtoneManager;\r\nimport android.net.Uri;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.support.v4.media.session.MediaControllerCompat;\r\nimport android.support.v4.media.session.MediaSessionCompat;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.media.MediaSessionManager;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Activities.DashboardActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.Utility.PlaybackStatus;\r\nimport com.brainwellnessspa.databinding.FragmentTransparentPlayerBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPreparing;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isprogressbar;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class TransparentPlayerFragment extends Fragment implements SeekBar.OnSeekBarChangeListener/*, AudioManager.OnAudioFocusChangeListener*/ {\r\n    public static int isDisclaimer = 0;\r\n    public FragmentTransparentPlayerBinding binding;\r\n    String UserID, AudioFlag, IsRepeat, IsShuffle, audioFile, id, name;\r\n    public static String addToRecentPlayId = \"\";\r\n    int position = 0, startTime, listSize, myCount;\r\n    MainPlayModel mainPlayModel;\r\n    Boolean queuePlay, audioPlay;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<AddToQueueModel> addToQueueModelList;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    Activity activity;\r\n    Context ctx;\r\n    long myProgress = 0, diff = 0;\r\n    SharedPreferences shared;\r\n    String json;\r\n    Gson gson;\r\n    private long totalDuration, currentDuration = 0;\r\n    private Handler handler12;\r\n    public static final String ACTION_PLAY = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PLAY\";\r\n    public static final String ACTION_PAUSE = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PAUSE\";\r\n    public static final String ACTION_PREVIOUS = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_PREVIOUS\";\r\n    public static final String ACTION_NEXT = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_NEXT\";\r\n    public static final String ACTION_STOP = \"com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.ACTION_STOP\";\r\n\r\n    //MediaSession\r\n    private MediaSessionManager mediaSessionManager;\r\n    private MediaSessionCompat mediaSession;\r\n    private MediaControllerCompat.TransportControls transportControls;\r\n    PlaybackStatus playbackStatus;\r\n    //AudioPlayer notification ID\r\n    private static final int NOTIFICATION_ID = 101;\r\n    private Runnable UpdateSongTime12 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                startTime = getStartTime();\r\n                binding.simpleSeekbar.setMax(100);\r\n                Time t = Time.valueOf(\"00:00:00\");\r\n                if (queuePlay) {\r\n                    if (listSize != 0) {\r\n                        if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        stopMedia();\r\n                    }\r\n                } else if (audioPlay) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                        }\r\n                    } else {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else\r\n                        totalDuration = t.getTime();\r\n                } else {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else {\r\n                        totalDuration = t.getTime();\r\n                    }\r\n                }\r\n                myProgress = currentDuration;\r\n                currentDuration = getStartTime();\r\n                diff = totalDuration - myProgress;\r\n\r\n//                Log.e(\"myProgress old!!!\",String.valueOf(myProgress));\r\n                if (myProgress == currentDuration && myProgress != 0 && !isPause && audioFile.equalsIgnoreCase(\"\")) {\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                    myCount++;\r\n                    Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                    if (myCount == 5) {\r\n                        Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                        callComplete();\r\n                        Log.e(\"calll complete errr\", \"eee\");\r\n                        myCount = 0;\r\n                    }\r\n                } else if (myProgress == currentDuration && myProgress != 0 && !isPause && diff < 500) {\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                    myCount++;\r\n                    Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                    if (myCount == 20) {\r\n                        Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                        callComplete();\r\n                        Log.e(\"calll complete errr\", \"eee\");\r\n                        myCount = 0;\r\n                    }\r\n                }\r\n                if (currentDuration == totalDuration && currentDuration != 0 && !isStop && !audioFile.equalsIgnoreCase(\"\")) {\r\n                    callComplete();\r\n                    Log.e(\"calll complete trans\", \"trans\");\r\n\r\n                }\r\n                if (currentDuration == totalDuration && currentDuration != 0 && !isStop && audioFile.equalsIgnoreCase(\"\")) {\r\n                    mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                        callComplete();\r\n                    });\r\n                }\r\n                int progress = (int) (getProgressPercentage(currentDuration, totalDuration));\r\n                if (player == 1) {\r\n                    if (currentDuration == 0 && isCompleteStop) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    } else if (currentDuration == 0 && !isPause) {\r\n                        binding.progressBar.setVisibility(View.VISIBLE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.GONE);\r\n                    } else if (currentDuration >= 1 && !isPause) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.VISIBLE);\r\n                        binding.ivPlay.setVisibility(View.GONE);\r\n                    } else if (currentDuration >= 1 && isPause) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    }\r\n                } else {\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.ivPause.setVisibility(View.GONE);\r\n                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n                //Log.d(\"Progress\", \"\"+progress);\r\n                if (isPause) {\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n                } else {\r\n                    binding.simpleSeekbar.setProgress(progress);\r\n                }\r\n                // Running this thread after 100 milliseconds\r\n                handler12.postDelayed(this, 100);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    };\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_transparent_player, container, false);\r\n        View view = binding.getRoot();\r\n        activity = getActivity();\r\n        ctx = getActivity();\r\n        mainPlayModelList = new ArrayList<>();\r\n        addToQueueModelList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        handler12 = new Handler();\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        gson = new Gson();\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n\r\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        params.setMargins(0, 0, 0, 130);\r\n        binding.llLayout.setLayoutParams(params);\r\n\r\n        if (comefromDownload.equalsIgnoreCase(\"1\")) {\r\n            LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            param.setMargins(0, 0, 0, 0);\r\n            binding.llLayout.setLayoutParams(param);\r\n        } else {\r\n            LinearLayout.LayoutParams paramm = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            paramm.setMargins(0, 0, 0, 130);\r\n            binding.llLayout.setLayoutParams(paramm);\r\n\r\n        }\r\n        if (isMediaStart) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete real\", \"real\");\r\n            });\r\n        }\r\n\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        SharedPreferences Status = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n    /*    mAudioManager = (AudioManager) ctx.getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        if (queuePlay) {\r\n            getPrepareShowData();\r\n        } else if (audioPlay) {\r\n            MakeArray();\r\n        }\r\n        if (listSize == 1) {\r\n            IsShuffle = \"\";\r\n        }\r\n        binding.ivPause.setOnClickListener(view1 -> {\r\n            handler12.removeCallbacks(UpdateSongTime12);\r\n            binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n            if (!isMediaStart) {\r\n//                callAsyncTask();\r\n                callMedia();\r\n            } else {\r\n                pauseMedia();\r\n                binding.ivPause.setVisibility(View.GONE);\r\n                binding.ivPlay.setVisibility(View.VISIBLE);\r\n            }\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        });\r\n\r\n        binding.ivPlay.setOnClickListener(view12 -> {\r\n            if (!isMediaStart) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler12.postDelayed(UpdateSongTime12, 500);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                binding.ivPlay.setVisibility(View.GONE);\r\n                binding.ivPause.setVisibility(View.GONE);\r\n                callMedia();\r\n            } else if (isCompleteStop) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler12.postDelayed(UpdateSongTime12, 500);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                binding.ivPlay.setVisibility(View.GONE);\r\n                binding.ivPause.setVisibility(View.GONE);\r\n                callMedia();\r\n            } else {\r\n                resumeMedia();\r\n                binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                binding.ivPlay.setVisibility(View.GONE);\r\n                binding.ivPause.setVisibility(View.VISIBLE);\r\n                isPause = false;\r\n            }\r\n            player = 1;\r\n            handler12.postDelayed(UpdateSongTime12, 100);\r\n        });\r\n\r\n        return view;\r\n    }\r\n\r\n    private void MakeArray() {\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n//            if (isDisclaimer == 0 && disclaimerPlayed == 0) {\r\n//                addDeclaimer();\r\n//            }\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        }else if (AudioFlag.equalsIgnoreCase(\"LikePlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n//            if (isDisclaimer == 0 && disclaimerPlayed == 0) {\r\n//                addDeclaimer();\r\n//            }\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        }\r\n    }\r\n\r\n    private void addToRecentPlay() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n//            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n//                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n//                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public void GetMedia(String url, Context ctx) {\r\n        try {\r\n            downloadAudioDetailsList = new ArrayList<>();\r\n            class GetMedia extends AsyncTask<Void, Void, Void> {\r\n                @Override\r\n                protected Void doInBackground(Void... voids) {\r\n                    downloadAudioDetailsList = DatabaseClient\r\n                            .getInstance(ctx)\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .getLastIdByuId(url);\r\n                    return null;\r\n                }\r\n\r\n                @Override\r\n                protected void onPostExecute(Void aVoid) {\r\n                    try {\r\n                        if (audioPlay) {\r\n                            if (listSize != 0) {\r\n                                binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                                binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                                try {\r\n                                    if (audioFile.equalsIgnoreCase(\"\")) {\r\n                                        Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                                    } else {\r\n                                        Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                                    }\r\n                                } catch (Exception e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (player == 1) {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n//                    binding.llProgress.setVisibility(View.GONE);\r\n                            if (isPause) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.VISIBLE);\r\n                                binding.simpleSeekbar.setProgress(oTime);\r\n                            } else if (isCompleteStop) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.VISIBLE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                            } else if (isMediaStart && !isPause) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                                binding.ivPause.setVisibility(View.VISIBLE);\r\n                                binding.ivPlay.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.progressBar.setVisibility(View.VISIBLE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.GONE);\r\n                                callMedia();\r\n                            }\r\n                        } else {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n\r\n//                    binding.llProgress.setVisibility(View.GONE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    super.onPostExecute(aVoid);\r\n\r\n                }\r\n            }\r\n\r\n            GetMedia st = new GetMedia();\r\n            st.execute();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void getPrepareShowData() {\r\n        handler12.postDelayed(UpdateSongTime12, 100);\r\n        try {\r\n            if (queuePlay) {\r\n                listSize = addToQueueModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (position == listSize) {\r\n                    position = position - 1;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = addToQueueModelList.get(position).getID();\r\n                    name = addToQueueModelList.get(position).getName();\r\n                    audioFile = addToQueueModelList.get(position).getAudioFile();\r\n                    GetMedia(audioFile, ctx);\r\n                    Glide.with(ctx).load(addToQueueModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    binding.tvTitle.setText(addToQueueModelList.get(position).getName());\r\n                    binding.tvSubTitle.setText(addToQueueModelList.get(position).getAudioDirection());\r\n                    handler12.postDelayed(UpdateSongTime12, 100);\r\n                }\r\n            } else if (audioPlay) {\r\n                listSize = mainPlayModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = mainPlayModelList.get(position).getID();\r\n                    name = mainPlayModelList.get(position).getName();\r\n                    audioFile = mainPlayModelList.get(position).getAudioFile();\r\n                    binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                    binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                    if (audioFile.equalsIgnoreCase(\"\")) {\r\n                        Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    } else {\r\n                        Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    }\r\n                    GetMedia(audioFile, ctx);\r\n                    handler12.postDelayed(UpdateSongTime12, 100);\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        isDisclaimer = 1;\r\n                        binding.simpleSeekbar.setClickable(false);\r\n                        binding.simpleSeekbar.setEnabled(false);\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        binding.simpleSeekbar.setClickable(true);\r\n                        binding.simpleSeekbar.setEnabled(true);\r\n                    }\r\n                }\r\n            }\r\n            startTime = getStartTime();\r\n\r\n            if (!audioFile.equalsIgnoreCase(\"\")) {\r\n                if (!id.equalsIgnoreCase(addToRecentPlayId)) {\r\n                    addToRecentPlay();\r\n                    Log.e(\"Api call recent\", id);\r\n                }\r\n            }\r\n            addToRecentPlayId = id;\r\n            Log.e(\"addToRecentPlayID\", addToRecentPlayId);\r\n            Log.e(\"new addToRecentPlayID\", id);\r\n            binding.llPlayearMain.setOnClickListener(view -> {\r\n                handler12.removeCallbacks(UpdateSongTime12);\r\n                if (player == 0) {\r\n                    player = 1;\r\n                }\r\n                if (!isPause && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isPause = false;\r\n                    isprogressbar = false;\r\n                } else if (isPause && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isPause = true;\r\n                    isprogressbar = false;\r\n                } else if (isCompleteStop && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isprogressbar = false;\r\n                } else if (binding.progressBar.getVisibility() == View.VISIBLE && (binding.ivPause.getVisibility() == View.GONE && binding.ivPlay.getVisibility() == View.GONE)) {\r\n                    isprogressbar = true;\r\n                }\r\n                SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(mainPlayModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                String json1 = gson.toJson(addToQueueModelList);\r\n                if (queuePlay) {\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n                }\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                editor.commit();\r\n                handler12.removeCallbacks(UpdateSongTime12);\r\n                Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                ctx.startActivity(i);\r\n                BWSApplication.simple_Notification(playbackStatus, mainPlayModelList, getActivity(), position);\r\n            });\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if (download.equalsIgnoreCase(\"2\")) {\r\n            mediaPlayer = MediaPlayer.create(getActivity(), R.raw.brain_wellness_spa_declaimer);\r\n            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\r\n//            Uri uri = Uri.parse(\"android.resource://com.brainwellnessspa/\" + R.raw.brain_wellness_spa_declaimer);\r\n//            mediaPlayer.setDataSource(String.valueOf(uri));\r\n            mediaPlayer.start();\r\n            isPrepare = true;\r\n            isMediaStart = true;\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n        } else {\r\n            if (null == mediaPlayer) {\r\n                mediaPlayer = new MediaPlayer();\r\n                Log.e(\"Playinggggg\", \"Playinggggg\");\r\n            }\r\n            try {\r\n                if (mediaPlayer == null)\r\n                    mediaPlayer = new MediaPlayer();\r\n                if (mediaPlayer.isPlaying()) {\r\n                    Log.e(\"Playinggggg\", \"stoppppp\");\r\n                    mediaPlayer.stop();\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                }\r\n                isPreparing = true;\r\n                mediaPlayer = new MediaPlayer();\r\n                if (download.equalsIgnoreCase(\"1\")) {\r\n                    mediaPlayer.setDataSource(fileDescriptor);\r\n                } else {\r\n                    mediaPlayer.setDataSource(audioFile);\r\n                    Log.e(\"Playinggggxxxxx\", \"Startinggg1xxxxx\");\r\n                }\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                    mediaPlayer.setAudioAttributes(\r\n                            new AudioAttributes\r\n                                    .Builder()\r\n                                    .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                    .build());\r\n                    Log.e(\"Playinggggg11111111\", \"Startinggg111111111\");\r\n                }\r\n                mediaPlayer.prepareAsync();\r\n                isPrepare = true;\r\n            } catch (IllegalStateException | IOException e) {\r\n                FileDescriptor fileDescriptor1 = null;\r\n                setMediaPlayer(\"0\", fileDescriptor1);\r\n                e.printStackTrace();\r\n            }\r\n            if (!mediaPlayer.isPlaying()) {\r\n                mediaPlayer.setOnPreparedListener(mp -> {\r\n                    Log.e(\"Playinggggg\", \"Startinggg\");\r\n                    mediaPlayer.start();\r\n                    isMediaStart = true;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callMedia() {\r\n        binding.progressBar.setVisibility(View.VISIBLE);\r\n//        binding.llProgress.setVisibility(View.VISIBLE);\r\n        binding.ivPlay.setVisibility(View.GONE);\r\n        binding.ivPause.setVisibility(View.GONE);\r\n        FileDescriptor fileDescriptor = null;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n//        binding.llProgress.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            DownloadMedia downloadMedia = new DownloadMedia(ctx.getApplicationContext());\r\n            try {\r\n                byte[] decrypt = null;\r\n                decrypt = downloadMedia.decrypt(name);\r\n                if (decrypt != null) {\r\n                    fileDescriptor = FileUtils.getTempFileDescriptor(ctx.getApplicationContext(), decrypt);\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        setMediaPlayer(\"2\", fileDescriptor);\r\n                    } else {\r\n                        setMediaPlayer(\"1\", fileDescriptor);\r\n                    }\r\n                } else {\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        setMediaPlayer(\"2\", fileDescriptor);\r\n                    } else {\r\n                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                            setMediaPlayer(\"0\", fileDescriptor);\r\n//                mediaPlayer.setDataSource(audioFile);\r\n                        } else {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                        }\r\n                    }\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                setMediaPlayer(\"2\", fileDescriptor);\r\n            } else {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    setMediaPlayer(\"0\", fileDescriptor);\r\n//                mediaPlayer.setDataSource(audioFile);\r\n                } else {\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    binding.ivPause.setVisibility(View.GONE);\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getDownloadMedia(DownloadMedia downloadMedia) {\r\n        class getDownloadMedia extends AsyncTask<Void, Void, Void> {\r\n            FileDescriptor fileDescriptor = null;\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                try {\r\n                    byte[] decrypt = null;\r\n                    decrypt = downloadMedia.decrypt(name);\r\n                    if (decrypt != null) {\r\n                        fileDescriptor = FileUtils.getTempFileDescriptor(getActivity(), decrypt);\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (fileDescriptor != null) {\r\n                    setMediaPlayer(\"1\", fileDescriptor);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        setMediaPlayer(\"0\", fileDescriptor);\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getDownloadMedia st = new getDownloadMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callComplete() {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        if (audioPlay && (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty())) {\r\n            isDisclaimer = 0;\r\n            removeArray();\r\n        } else {\r\n            if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                if (position < (listSize - 1)) {\r\n                    position = position + 1;\r\n                } else {\r\n                    position = 0;\r\n                }\r\n                getPrepareShowData();\r\n            } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData();\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    } catch (Exception e) {\r\n                    }\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        position = 0;\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData();\r\n                    }\r\n                } else {\r\n                    if (listSize == 1) {\r\n\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData();\r\n                    }\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    } catch (Exception e) {\r\n                    }\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position < listSize - 1) {\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData();\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (position < (listSize - 1)) {\r\n                        int oldPosition = position;\r\n                        position = position + 1;\r\n                        if (oldPosition == position) {\r\n                            position++;\r\n                        }\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        if (listSize == 1) {\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n    }\r\n\r\n    private void removeArray() {\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        gson = new Gson();\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json, type);\r\n            if(arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")){\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikePlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }\r\n        MakeArray();\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n    /*    handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler12.postDelayed(UpdateSongTime12, 100);\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n\r\n        int totalDuration = getEndTime();\r\n        int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n        // forward or backward to certain seconds\r\n        SeekTo(currentPosition);\r\n\r\n        oTime = binding.simpleSeekbar.getProgress();\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n\r\n        if (ComeScreenAccount == 1) {\r\n            binding.llLayout.setVisibility(View.GONE);\r\n        } else if (ComeScreenAccount == 0) {\r\n            binding.llLayout.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        handler12.postDelayed(UpdateSongTime12, 500);\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            mainPlayModelList = gson.fromJson(json, type);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        try {\r\n            if (queuePlay) {\r\n                position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                listSize = addToQueueModelList.size();\r\n                id = addToQueueModelList.get(position).getID();\r\n                name = addToQueueModelList.get(position).getName();\r\n                audioFile = addToQueueModelList.get(position).getAudioFile();\r\n            } else if (audioPlay) {\r\n                position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                listSize = mainPlayModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = mainPlayModelList.get(position).getID();\r\n                    name = mainPlayModelList.get(position).getName();\r\n                    audioFile = mainPlayModelList.get(position).getAudioFile();\r\n       /*         if (audioFile.equalsIgnoreCase(\"\")) {\r\n                    Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                } else {\r\n                    Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                }\r\n                binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                    isDisclaimer = 1;\r\n                    binding.simpleSeekbar.setClickable(false);\r\n                    binding.flProgress.setClickable(false);\r\n                    binding.flProgress.setEnabled(false);\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    binding.simpleSeekbar.setClickable(true);\r\n                    binding.flProgress.setClickable(true);\r\n                    binding.flProgress.setEnabled(true);\r\n                }*/\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (listSize == 1) {\r\n            position = 0;\r\n        }\r\n        SharedPreferences Status = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n      /*  if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if (isMediaStart && !isPause) {\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n        } else {\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n        }*/\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n        Log.e(\"Stop runnble\", \"stop\");\r\n        super.onPause();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java	(revision 9981b5927e9fd353e8664f4bfef4a31901c414bb)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java	(date 1604640902411)
@@ -661,7 +661,7 @@
             editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);
             editor.commit();
             getPrepareShowData();
-        }else if (AudioFlag.equalsIgnoreCase("LikePlayList")) {
+        } else if (AudioFlag.equalsIgnoreCase("LikePlayList")) {
             Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {
             }.getType();
             ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);
@@ -896,7 +896,7 @@
                 Intent i = new Intent(ctx, PlayWellnessActivity.class);
                 i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                 ctx.startActivity(i);
-                BWSApplication.simple_Notification(playbackStatus, mainPlayModelList, getActivity(), position);
+                BWSApplication.simple_Notification(playbackStatus, mainPlayModelList, getActivity(), position, getActivity());
             });
         } catch (Exception e) {
             e.printStackTrace();
@@ -1331,11 +1331,11 @@
             String jsonz = gsonz.toJson(mainPlayModelList);
             editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);
             editor.commit();
-        }else if (AudioFlag.equalsIgnoreCase("LikeAudioList")) {
+        } else if (AudioFlag.equalsIgnoreCase("LikeAudioList")) {
             Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {
             }.getType();
             ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json, type);
-            if(arrayList.get(0).getAudioFile().equalsIgnoreCase("")){
+            if (arrayList.get(0).getAudioFile().equalsIgnoreCase("")) {
                 arrayList.remove(0);
             }
             for (int i = 0; i < arrayList.size(); i++) {
