Index: app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadPlaylistActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DownloadModule.Activities;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Filter;\r\nimport android.widget.Filterable;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityDownloadPlaylistBinding;\r\nimport com.brainwellnessspa.databinding.DownloadPlaylistLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class DownloadPlaylistActivity extends AppCompatActivity {\r\n    ActivityDownloadPlaylistBinding binding;\r\n    PlayListsAdpater adpater;\r\n    String UserID, SearchFlag, AudioFlag, PlaylistID, PlaylistName, PlaylistImage, TotalAudio, Totalhour, Totalminute;\r\n    EditText searchEditText;\r\n    Context ctx;\r\n    private List<DownloadPlaylistDetails> listModelList;\r\n    List<DownloadAudioDetails> playlistWiseAudiosDetails;\r\n    List<DownloadAudioDetails> playlistWiseAudioDetails = new ArrayList<>();\r\n    DownloadAudioDetails addDisclaimer = new DownloadAudioDetails();\r\n    List<DownloadAudioDetails> oneAudioDetailsList;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_download_playlist);\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        ctx = DownloadPlaylistActivity.this;\r\n        addDisclaimer();\r\n        if (getIntent() != null) {\r\n            PlaylistID = getIntent().getStringExtra(\"PlaylistID\");\r\n            PlaylistName = getIntent().getStringExtra(\"PlaylistName\");\r\n            PlaylistImage = getIntent().getStringExtra(\"PlaylistImage\");\r\n            TotalAudio = getIntent().getStringExtra(\"TotalAudio\");\r\n            Totalhour = getIntent().getStringExtra(\"Totalhour\");\r\n            Totalminute = getIntent().getStringExtra(\"Totalminute\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                finish();\r\n            }\r\n        });\r\n        PrepareData();\r\n    }\r\n\r\n    public void PrepareData() {\r\n        try {\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioFile = \"\";\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioFile = arrayList.get(0).getName();\r\n\r\n                if (audioFile.equalsIgnoreCase(\"Hope\") || audioFile.equalsIgnoreCase(\"Mindfulness\")) {\r\n\r\n                } else {\r\n                    SharedPreferences sharedm = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if (isMediaStart) {\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if (isMediaStart) {\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                comefromDownload = \"1\";\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n        binding.tvLibraryName.setText(PlaylistName);\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                5, 3, 1f, 0);\r\n        binding.ivBanner.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivBanner.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivBanner.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        if (!PlaylistImage.equalsIgnoreCase(\"\")) {\r\n            try {\r\n                Glide.with(ctx).load(PlaylistImage).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivBanner);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            binding.ivBanner.setImageResource(R.drawable.audio_bg);\r\n        }\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        searchEditText.setHint(\"Search for audios\");\r\n        closeButton.setOnClickListener(v -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n\r\n        binding.llDelete.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                final Dialog dialog = new Dialog(ctx);\r\n                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                dialog.setContentView(R.layout.logout_layout);\r\n                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));\r\n                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n                final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                final Button Btn = dialog.findViewById(R.id.Btn);\r\n                tvTitle.setText(\"Remove playlist\");\r\n                tvHeader.setText(\"Are you sure you want to remove the \" + PlaylistName + \" from downloads??\");\r\n                Btn.setText(\"Confirm\");\r\n                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                        dialog.dismiss();\r\n                    }\r\n                    return false;\r\n                });\r\n\r\n                Btn.setOnClickListener(v -> {\r\n                    playlistWiseAudiosDetails = GetPlaylistMedia(PlaylistID);\r\n                    finish();\r\n                    dialog.dismiss();\r\n                });\r\n\r\n                tvGoBack.setOnClickListener(v -> dialog.dismiss());\r\n                dialog.show();\r\n                dialog.setCancelable(false);\r\n\r\n            }\r\n        });\r\n\r\n        if (TotalAudio.equalsIgnoreCase(\"\") ||\r\n                TotalAudio.equalsIgnoreCase(\"0\") &&\r\n                        Totalhour.equalsIgnoreCase(\"\")\r\n                        && Totalminute.equalsIgnoreCase(\"\")) {\r\n            binding.tvLibraryDetail.setText(\"0 Audio | 0h 0m\");\r\n        } else {\r\n            if (Totalminute.equalsIgnoreCase(\"\")) {\r\n                binding.tvLibraryDetail.setText(TotalAudio + \" Audio | \"\r\n                        + Totalhour + \"h 0m\");\r\n            } else {\r\n                binding.tvLibraryDetail.setText(TotalAudio + \" Audio | \"\r\n                        + Totalhour + \"h \" + Totalminute + \"m\");\r\n            }\r\n        }\r\n        RecyclerView.LayoutManager playList = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists.setLayoutManager(playList);\r\n        binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());\r\n        getMedia(PlaylistID);\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                binding.searchView.clearFocus();\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                try {\r\n                    if (adpater != null) {\r\n                        adpater.getFilter().filter(search);\r\n                        SearchFlag = search;\r\n                        Log.e(\"searchsearch\", \"\" + search);\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        binding.tvTag.setVisibility(View.VISIBLE);\r\n        binding.tvTag.setText(\"Audios in Playlist\");\r\n        binding.tvPlaylist.setText(\"Playlist\");\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        finish();\r\n    }\r\n\r\n    private void getMedia(String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                adpater = new PlayListsAdpater(playlistWiseAudioDetails,ctx);\r\n                binding.rvPlayLists.setAdapter(adpater);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetPlaylistMedia(String playlistID) {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                deleteDownloadFile(getApplicationContext(), playlistID);\r\n                for (int i = 0; i < playlistWiseAudioDetails.size(); i++) {\r\n                    GetSingleMedia(playlistWiseAudioDetails.get(i).getAudioFile(), ctx.getApplicationContext(), playlistID);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    private void deleteDownloadFile(Context applicationContext, String PlaylistId) {\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(applicationContext)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deleteByPlaylistId(PlaylistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                notifyItemRemoved(position);\r\n                deletePlaylist(PlaylistID);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public void GetSingleMedia(String AudioFile, Context ctx, String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(AudioFile);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.size() == 1) {\r\n                        FileUtils.deleteDownloadedFile(ctx, oneAudioDetailsList.get(0).getName());\r\n                    }\r\n                }\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia sts = new GetMedia();\r\n        sts.execute();\r\n    }\r\n\r\n    private void deletePlaylist(String playlistId) {\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deletePlaylist(playlistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n\r\n\r\n    public class PlayListsAdpater extends RecyclerView.Adapter<PlayListsAdpater.MyViewHolders> implements Filterable {\r\n        Context ctx;\r\n        String UserID;\r\n        private List<DownloadAudioDetails> listModelList;\r\n        private List<DownloadAudioDetails> listFilterData;\r\n\r\n        public PlayListsAdpater(List<DownloadAudioDetails> listModelList, Context ctx) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolders onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.download_playlist_layout, parent, false);\r\n            return new MyViewHolders(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolders holder, int position) {\r\n            final List<DownloadAudioDetails> mData = listFilterData;\r\n            holder.binding.tvTitleA.setText(mData.get(position).getName());\r\n//            holder.binding.tvTitleB.setText(mData.get(position).getName());\r\n            holder.binding.tvTimeA.setText(mData.get(position).getAudioDuration());\r\n//            holder.binding.tvTimeB.setText(mData.get(position).getAudioDuration());\r\n            String id = mData.get(position).getID();\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n//            GetMedia(id, activity, mData.get(position).getDownload(), holder.binding.llDownload, holder.binding.ivDownloads);\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(0, ctx, listModelList, \"\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    List<DownloadAudioDetails> listModelList2 = new ArrayList<>();\r\n                    listModelList2.addAll(listModelList);\r\n                    callTransparentFrag(0, ctx, listModelList2, \"\", PlaylistID);\r\n                }\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(position, ctx, listModelList, \"\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    List<DownloadAudioDetails> listModelList2 = new ArrayList<>();\r\n                    if (position != 0) {\r\n                        listModelList2.addAll(listModelList);\r\n                        listModelList2.add(position, addDisclaimer);\r\n                    } else {\r\n                        listModelList2.add(addDisclaimer);\r\n                        listModelList2.addAll(listModelList);\r\n                    }\r\n                    callTransparentFrag(position, ctx, listModelList2, \"\", PlaylistID);\r\n                }\r\n            });\r\n\r\n          /*  if (Created.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.llMore.setVisibility(View.GONE);\r\n                holder.binding.llCenterLayoutA.setVisibility(View.GONE);\r\n                holder.binding.llCenterLayoutB.setVisibility(View.VISIBLE);\r\n                holder.binding.llDownload.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemove.setVisibility(View.VISIBLE);\r\n                holder.binding.llSort.setVisibility(View.VISIBLE);\r\n                binding.tvSearch.setVisibility(View.VISIBLE);\r\n                binding.searchView.setVisibility(View.GONE);\r\n            } else if (Created.equalsIgnoreCase(\"0\")) {\r\n                holder.binding.llMore.setVisibility(View.VISIBLE);\r\n                holder.binding.llCenterLayoutA.setVisibility(View.VISIBLE);\r\n                holder.binding.llCenterLayoutB.setVisibility(View.GONE);\r\n                holder.binding.llDownload.setVisibility(View.GONE);\r\n                holder.binding.llRemove.setVisibility(View.GONE);\r\n                holder.binding.llSort.setVisibility(View.GONE);\r\n                binding.tvSearch.setVisibility(View.GONE);\r\n                binding.searchView.setVisibility(View.VISIBLE);\r\n            }*/\r\n\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                holder.binding.llMore.setClickable(true);\r\n                holder.binding.llMore.setEnabled(true);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                holder.binding.llMore.setClickable(false);\r\n                holder.binding.llMore.setEnabled(false);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            holder.binding.llMore.setOnClickListener(view -> {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n              /*  if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"You can see details after the disclaimer\", ctx);\r\n                    } else {\r\n                        Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                        i.putExtra(\"play\", \"playlist\");\r\n                        i.putExtra(\"ID\", mData.get(position).getID());\r\n                        i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                        i.putExtra(\"position\", position);\r\n                        i.putParcelableArrayListExtra(\"data\", mData);\r\n                        i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                        startActivity(i);\r\n                    }\r\n                } else {\r\n                    Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                    i.putExtra(\"play\", \"playlist\");\r\n                    i.putExtra(\"ID\", mData.get(position).getID());\r\n                    i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                    i.putExtra(\"position\", position);\r\n                    i.putParcelableArrayListExtra(\"data\", mData);\r\n                    i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                    startActivity(i);\r\n                }*/\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listFilterData.size();\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        List<DownloadAudioDetails> filteredList = new ArrayList<>();\r\n                        for (DownloadAudioDetails row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.rvPlayLists.setVisibility(View.GONE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        Log.e(\"search\", SearchFlag);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists.setVisibility(View.VISIBLE);\r\n                        listFilterData = (List<DownloadAudioDetails>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        public class MyViewHolders extends RecyclerView.ViewHolder {\r\n            DownloadPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolders(DownloadPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void addDisclaimer() {\r\n        addDisclaimer = new DownloadAudioDetails();\r\n        addDisclaimer.setID(\"0\");\r\n        addDisclaimer.setName(\"Disclaimer\");\r\n        addDisclaimer.setAudioFile(\"\");\r\n        addDisclaimer.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n        addDisclaimer.setAudiomastercat(\"\");\r\n        addDisclaimer.setAudioSubCategory(\"\");\r\n        addDisclaimer.setImageFile(\"\");\r\n        addDisclaimer.setLike(\"\");\r\n        addDisclaimer.setDownload(\"\");\r\n        addDisclaimer.setAudioDuration(\"0:48\");\r\n    }\r\n\r\n    private void callTransparentFrag(int position, Context ctx, List<DownloadAudioDetails> listModelList, String s, String playlistID) {\r\n        player = 1;\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isPause = false;\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isCompleteStop = false;\r\n\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(listModelList);\r\n        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"Downloadlist\");\r\n        editor.commit();\r\n        try {\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadPlaylistActivity.java	(revision c8a9de6c67006f1525bb0abbc88a40644fd920fc)
+++ app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadPlaylistActivity.java	(date 1603276164713)
@@ -303,7 +303,7 @@
 
             @Override
             protected void onPostExecute(Void aVoid) {
-                adpater = new PlayListsAdpater(playlistWiseAudioDetails,ctx);
+                adpater = new PlayListsAdpater(playlistWiseAudioDetails, ctx);
                 binding.rvPlayLists.setAdapter(adpater);
                 super.onPostExecute(aVoid);
             }
@@ -585,7 +585,9 @@
                         binding.rvPlayLists.setVisibility(View.GONE);
                         binding.tvFound.setText("Couldn't find '" + SearchFlag + "'. Try searching again");
                         Log.e("search", SearchFlag);
+                        binding.tvTag.setVisibility(View.GONE);
                     } else {
+                        binding.tvTag.setVisibility(View.VISIBLE);
                         binding.llError.setVisibility(View.GONE);
                         binding.rvPlayLists.setVisibility(View.VISIBLE);
                         listFilterData = (List<DownloadAudioDetails>) filterResults.values;
Index: app/src/main/java/com/brainwellnessspa/DownloadModule/Adapters/PlaylistsDownloadsAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DownloadModule.Adapters;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Handler;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadPlaylistActivity;\r\nimport com.brainwellnessspa.databinding.AudioDownloadsLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.DownloadsLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\n\r\npublic class PlaylistsDownloadsAdapter extends RecyclerView.Adapter<PlaylistsDownloadsAdapter.MyViewHolder> {\r\n    FragmentActivity ctx;\r\n    String UserID;\r\n    FrameLayout progressBarHolder;\r\n    ProgressBar ImgV;\r\n    List<DownloadAudioDetails> playlistWiseAudioDetails;\r\n    List<DownloadAudioDetails> oneAudioDetailsList;\r\n    List<DownloadPlaylistDetails> playlistList;\r\n    LinearLayout llError;\r\n    TextView tvFound;\r\n    int count;\r\n    RecyclerView rvDownloadsList;\r\n    Runnable UpdateSongTime1;\r\n    Handler handler1;\r\n    List<String> fileNameList = new ArrayList<>(), playlistDownloadId = new ArrayList<>(), remainAudio = new ArrayList<>();\r\n    private List<DownloadPlaylistDetails> listModelList;\r\n\r\n    public PlaylistsDownloadsAdapter(List<DownloadPlaylistDetails> listModelList, FragmentActivity ctx, String UserID,\r\n                                     FrameLayout progressBarHolder, ProgressBar ImgV, LinearLayout llError, TextView tvFound, RecyclerView rvDownloadsList) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.UserID = UserID;\r\n        this.progressBarHolder = progressBarHolder;\r\n        this.ImgV = ImgV;\r\n        this.llError = llError;\r\n        this.tvFound = tvFound;\r\n        this.rvDownloadsList = rvDownloadsList;\r\n        handler1 = new Handler();\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        oneAudioDetailsList = new ArrayList<>();\r\n//        getDownloadData();\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        AudioDownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.audio_downloads_layout, parent, false);\r\n        return new MyViewHolder(v);\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\")\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getPlaylistName());\r\n        UpdateSongTime1 = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                for (int i = 0; i < listModelList.size(); i++) {\r\n                    getMediaByPer(listModelList.get(i).getPlaylistID(), listModelList.get(i).getTotalAudio(), holder.binding.pbProgress);\r\n                }\r\n\r\n            }\r\n        };\r\n     /*   if(fileNameList.size()!=0){\r\n            if(playlistDownloadId.contains(listModelList.get(position).getPlaylistID())){\r\n                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                handler1.postDelayed(UpdateSongTime1,500);\r\n            }else{\r\n                holder.binding.pbProgress.setVisibility(View.GONE);\r\n            }\r\n        }*/\r\n        getMediaByPer(listModelList.get(position).getPlaylistID(), listModelList.get(position).getTotalAudio(), holder.binding.pbProgress);\r\n        if (listModelList.get(position).getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                listModelList.get(position).getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                        listModelList.get(position).getTotalhour().equalsIgnoreCase(\"\")\r\n                        && listModelList.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n            holder.binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n        } else {\r\n            if (listModelList.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                holder.binding.tvTime.setText(listModelList.get(position).getTotalAudio() + \" Audio | \"\r\n                        + listModelList.get(position).getTotalhour() + \"h 0m\");\r\n            } else {\r\n                holder.binding.tvTime.setText(listModelList.get(position).getTotalAudio() +\r\n                        \" Audios | \" + listModelList.get(position).getTotalhour() + \"h \" + listModelList.get(position).getTotalminute() + \"m\");\r\n            }\r\n        }\r\n\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                1, 1, 0.12f, 0);\r\n        holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        Glide.with(ctx).load(listModelList.get(position).getPlaylistImage()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n        holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                i.putExtra(\"ComeFrom\", \"Plan\");\r\n                ctx.startActivity(i);\r\n            }\r\n            if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n            } else if (IsLock.equalsIgnoreCase(\"0\")\r\n                    || IsLock.equalsIgnoreCase(\"\")) {\r\n                comefromDownload = \"1\";\r\n                playlistWiseAudioDetails = GetMedia(listModelList.get(position).getPlaylistID());\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n                Intent i = new Intent(ctx, DownloadPlaylistActivity.class);\r\n                i.putExtra(\"New\", \"0\");\r\n                i.putExtra(\"PlaylistID\", listModelList.get(position).getPlaylistID());\r\n                i.putExtra(\"PlaylistName\", listModelList.get(position).getPlaylistName());\r\n                i.putExtra(\"PlaylistImage\", listModelList.get(position).getPlaylistImage());\r\n                i.putExtra(\"TotalAudio\", listModelList.get(position).getTotalAudio());\r\n                i.putExtra(\"Totalhour\", listModelList.get(position).getTotalhour());\r\n                i.putExtra(\"Totalminute\", listModelList.get(position).getTotalminute());\r\n                i.putExtra(\"MyDownloads\", \"1\");\r\n                ctx.startActivity(i);\r\n        /*        Intent i = new Intent(ctx, DownloadedPlaylist.class);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                i.putExtra(\"PlaylistID\", listModelList.get(position).getPlaylistID());\r\n                i.putExtra(\"PlaylistName\", listModelList.get(position).getPlaylistName());\r\n                i.putExtra(\"PlaylistImage\", listModelList.get(position).getPlaylistImage());\r\n                i.putExtra(\"PlaylistImage\", listModelList.get(position).getPlaylistImage());\r\n                ctx.startActivity(i);\r\n                ctx.finish();*/\r\n            }\r\n        });\r\n\r\n        holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n            final Dialog dialog = new Dialog(ctx);\r\n            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n            dialog.setContentView(R.layout.logout_layout);\r\n            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));\r\n            dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n            final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n            final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n            final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n            final Button Btn = dialog.findViewById(R.id.Btn);\r\n            tvTitle.setText(\"Remove playlist\");\r\n            tvHeader.setText(\"Are you sure you want to remove the \" + listModelList.get(position).getPlaylistName() + \" from downloads??\");\r\n            Btn.setText(\"Confirm\");\r\n            dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                    dialog.dismiss();\r\n                }\r\n                return false;\r\n            });\r\n\r\n            Btn.setOnClickListener(v -> {\r\n                playlistWiseAudioDetails = GetPlaylistMedia(listModelList.get(position).getPlaylistID());\r\n                dialog.dismiss();\r\n            });\r\n\r\n            tvGoBack.setOnClickListener(v -> dialog.dismiss());\r\n            dialog.show();\r\n            dialog.setCancelable(false);\r\n        });\r\n    }\r\n\r\n    private void getMediaByPer(String playlistID, String totalAudio, ProgressBar pbProgress) {\r\n        class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                count = DatabaseClient.getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getCountDownloadProgress(\"Complete\", playlistID);\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (count < Integer.parseInt(totalAudio)) {\r\n                    long progressPercent = count * 100 / Integer.parseInt(totalAudio);\r\n                    int downloadProgress1 = (int) progressPercent;\r\n                    pbProgress.setVisibility(View.VISIBLE);\r\n                    pbProgress.setProgress(downloadProgress1);\r\n                    handler1.postDelayed(UpdateSongTime1, 500);\r\n                } else {\r\n                    pbProgress.setVisibility(View.GONE);\r\n                    handler1.removeCallbacks(UpdateSongTime1);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getMediaByPer st = new getMediaByPer();\r\n        st.execute();\r\n    }\r\n\r\n  /*  void getDownloadData() {\r\n        SharedPreferences sharedx = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            fileNameList = gson.fromJson(json, type);\r\n            for (int i = 0; i < fileNameList.size(); i++) {\r\n                if (playlistDownloadId.get(i).equalsIgnoreCase(listModelList.get(i).getPlaylistID())) {\r\n                    remainAudio.add(playlistDownloadId.get(i));\r\n                }\r\n            }\r\n        } else {\r\n            fileNameList = new ArrayList<>();\r\n            playlistDownloadId = new ArrayList<>();\r\n            remainAudio = new ArrayList<>();\r\n        }\r\n    }*/\r\n\r\n    public void GetSingleMedia(String AudioFile, Context ctx, String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(AudioFile);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.size() == 1) {\r\n                        FileUtils.deleteDownloadedFile(ctx, oneAudioDetailsList.get(0).getName());\r\n                    }\r\n                }\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia sts = new GetMedia();\r\n        sts.execute();\r\n    }\r\n\r\n    private void deleteDownloadFile(Context applicationContext, String PlaylistId) {\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(applicationContext)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deleteByPlaylistId(PlaylistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                notifyItemRemoved(position);\r\n                deletePlaylist(PlaylistId);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void deletePlaylist(String playlistId) {\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deletePlaylist(playlistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                playlistList = new ArrayList<>();\r\n                GetAllMedia(ctx);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void GetAllMedia(FragmentActivity activity) {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllPlaylist();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (playlistList.size() != 0) {\r\n                    llError.setVisibility(View.GONE);\r\n                    tvFound.setVisibility(View.GONE);\r\n                    PlaylistsDownloadsAdapter adapter = new PlaylistsDownloadsAdapter(playlistList, ctx, UserID, progressBarHolder, ImgV, llError, tvFound, rvDownloadsList);\r\n                    rvDownloadsList.setAdapter(adapter);\r\n                } else {\r\n                    llError.setVisibility(View.VISIBLE);\r\n                    tvFound.setVisibility(View.VISIBLE);\r\n                    rvDownloadsList.setVisibility(View.GONE);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetTask getTask = new GetTask();\r\n        getTask.execute();\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetMedia(String playlistID) {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                if (queuePlay) {\r\n                    int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                    Gson gson = new Gson();\r\n                    String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                    if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                        Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                        }.getType();\r\n                        addToQueueModelList = gson.fromJson(json1, type1);\r\n                    }\r\n                    addToQueueModelList.remove(position1);\r\n                    SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared2.edit();\r\n                    String json = gson.toJson(addToQueueModelList);\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                    editor.commit();\r\n\r\n                }\r\n                player = 1;\r\n                if (isPrepare || isMediaStart || isPause) {\r\n                    stopMedia();\r\n                }\r\n                isPause = false;\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n\r\n                isCompleteStop = false;\r\n\r\n                SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                List<DownloadAudioDetails> listModelList2 = new ArrayList<>();\r\n                DownloadAudioDetails mainPlayModel = new DownloadAudioDetails();\r\n                mainPlayModel.setID(\"0\");\r\n                mainPlayModel.setName(\"Disclaimer\");\r\n                mainPlayModel.setAudioFile(\"\");\r\n                mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                mainPlayModel.setAudiomastercat(\"\");\r\n                mainPlayModel.setAudioSubCategory(\"\");\r\n                mainPlayModel.setImageFile(\"\");\r\n                mainPlayModel.setLike(\"\");\r\n                mainPlayModel.setDownload(\"\");\r\n                mainPlayModel.setAudioDuration(\"0:48\");\r\n                listModelList2.add(mainPlayModel);\r\n                listModelList2.addAll(playlistWiseAudioDetails);\r\n                String json = gson.toJson(listModelList2);\r\n                editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"Downloadlist\");\r\n                editor.commit();\r\n                try {\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = ctx.getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetPlaylistMedia(String playlistID) {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                deleteDownloadFile(ctx.getApplicationContext(), playlistID);\r\n                for (int i = 0; i < playlistWiseAudioDetails.size(); i++) {\r\n                    GetSingleMedia(playlistWiseAudioDetails.get(i).getAudioFile(), ctx.getApplicationContext(), playlistID);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return listModelList.size();\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        AudioDownloadsLayoutBinding binding;\r\n\r\n        public MyViewHolder(AudioDownloadsLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DownloadModule/Adapters/PlaylistsDownloadsAdapter.java	(revision c8a9de6c67006f1525bb0abbc88a40644fd920fc)
+++ app/src/main/java/com/brainwellnessspa/DownloadModule/Adapters/PlaylistsDownloadsAdapter.java	(date 1603275832781)
@@ -170,7 +170,7 @@
             } else if (IsLock.equalsIgnoreCase("0")
                     || IsLock.equalsIgnoreCase("")) {
                 comefromDownload = "1";
-                playlistWiseAudioDetails = GetMedia(listModelList.get(position).getPlaylistID());
+//                playlistWiseAudioDetails = GetMedia(listModelList.get(position).getPlaylistID());
                 holder.binding.ivBackgroundImage.setVisibility(View.GONE);
                 holder.binding.ivLock.setVisibility(View.GONE);
                 Intent i = new Intent(ctx, DownloadPlaylistActivity.class);
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision c8a9de6c67006f1525bb0abbc88a40644fd920fc)
+++ .idea/gradle.xml	(date 1603275541500)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
