Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecentlyPlayedAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.databinding.SmallBoxLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\n\r\n\r\npublic class RecentlyPlayedAdapter extends RecyclerView.Adapter<RecentlyPlayedAdapter.MyViewHolder> {\r\n    Context ctx;\r\n    FragmentActivity activity;\r\n    String IsLock;\r\n    int index = -1;\r\n    private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;\r\n    String HomeView;\r\n\r\n    public RecentlyPlayedAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,\r\n                                 String IsLock, String HomeView) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.activity = activity;\r\n        this.IsLock = IsLock;\r\n        this.HomeView = HomeView;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        SmallBoxLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.small_box_layout, parent, false);\r\n        return new MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 16,\r\n                1, 1, 0.28f, 10);\r\n        holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        holder.binding.tvAddToPlaylist.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.tvAddToPlaylist.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n        if(index == position){\r\n            holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n        }else\r\n            holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n        holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n        holder.binding.llMainLayout.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View v) {\r\n                holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n                index = position;\r\n                notifyDataSetChanged();\r\n                return true;\r\n            }\r\n        });\r\n        holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                i.putExtra(\"AudioId\", listModelList.get(position).getID());\r\n                i.putExtra(\"PlaylistID\", \"\");\r\n                ctx.startActivity(i);\r\n            }\r\n        });\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n//       TODO                 Active and cancelled = 0, InActive = 1, Suspeded = 2\r\n            SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            if (queuePlay) {\r\n                int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                Gson gson = new Gson();\r\n                String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                    }.getType();\r\n                    addToQueueModelList = gson.fromJson(json1, type1);\r\n                }\r\n                addToQueueModelList.remove(position1);\r\n                SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared2.edit();\r\n                String json = gson.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                editor.commit();\r\n            }\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n\r\n                    callnewTrans(position);\r\n\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    ctx.startActivity(i);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callnewTrans(position);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n                callnewTrans(position);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callnewTrans(int position) {\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        String MyPlaylist = shared.getString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        if (audioPlay && AudioFlag.equalsIgnoreCase(\"MainAudioList\") && MyPlaylist.equalsIgnoreCase(HomeView)) {\r\n            if (isDisclaimer == 1) {\r\n                BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n            } else {\r\n                callTransFrag(position, listModelList);\r\n            }\r\n        } else {\r\n            isDisclaimer = 0;\r\n            disclaimerPlayed = 0;\r\n            ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n            MainAudioModel.ResponseData.Detail mainPlayModel = new MainAudioModel.ResponseData.Detail();\r\n            mainPlayModel.setID(\"0\");\r\n            mainPlayModel.setName(\"Disclaimer\");\r\n            mainPlayModel.setAudioFile(\"\");\r\n            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n            mainPlayModel.setAudiomastercat(\"\");\r\n            mainPlayModel.setAudioSubCategory(\"\");\r\n            mainPlayModel.setImageFile(\"\");\r\n            mainPlayModel.setLike(\"\");\r\n            mainPlayModel.setDownload(\"\");\r\n            mainPlayModel.setAudioDuration(\"0:48\");\r\n            listModelList2.addAll(listModelList);\r\n            listModelList2.add(position, mainPlayModel);\r\n            callTransFrag(position, listModelList2);\r\n        }\r\n    }\r\n\r\n    private void callTransFrag(int position, ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {\r\n        try {\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                MusicService.stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n            /*Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();*/\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, HomeView);\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"MainAudioList\");\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            ctx.startActivity(i);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (6 > listModelList.size()) {\r\n            return listModelList.size();\r\n        } else {\r\n            return 6;\r\n        }\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        SmallBoxLayoutBinding binding;\r\n\r\n        public MyViewHolder(SmallBoxLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecentlyPlayedAdapter.java	(revision d0cefdc463a16463694b167a71535edcc6bedfb3)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecentlyPlayedAdapter.java	(date 1605078915267)
@@ -99,9 +99,9 @@
         } else if (IsLock.equalsIgnoreCase("0") || IsLock.equalsIgnoreCase("")) {
             holder.binding.ivLock.setVisibility(View.GONE);
         }
-        if(index == position){
+        if (index == position) {
             holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);
-        }else
+        } else
             holder.binding.tvAddToPlaylist.setVisibility(View.GONE);
         holder.binding.tvAddToPlaylist.setText("Add To Playlist");
         holder.binding.llMainLayout.setOnLongClickListener(new View.OnLongClickListener() {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/ViewAllPlaylistFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Playlist;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadPlaylistActivity;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.FragmentViewAllPlaylistBinding;\r\nimport com.brainwellnessspa.databinding.PlaylistCustomLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\n\r\npublic class ViewAllPlaylistFragment extends Fragment {\r\n    FragmentViewAllPlaylistBinding binding;\r\n    String GetLibraryID, Name, UserID, AudioFlag, MyDownloads;\r\n    public static String GetPlaylistLibraryID = \"\";\r\n    List<DownloadPlaylistDetails> playlistList;\r\n    List<DownloadAudioDetails> playlistWiseAudioDetails = new ArrayList<>();\r\n    View view;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_view_all_playlist, container, false);\r\n        view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (getArguments() != null) {\r\n            GetLibraryID = getArguments().getString(\"GetLibraryID\");\r\n            Name = getArguments().getString(\"Name\");\r\n            MyDownloads = getArguments().getString(\"MyDownloads\");\r\n        }\r\n\r\n        view.setFocusableInTouchMode(true);\r\n        view.requestFocus();\r\n        view.setOnKeyListener((v, keyCode, event) -> {\r\n            if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {\r\n                callBack();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        binding.llBack.setOnClickListener(view1 -> {\r\n            callBack();\r\n        });\r\n\r\n        GridLayoutManager manager = new GridLayoutManager(getActivity(), 2);\r\n        binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n        binding.rvMainAudio.setLayoutManager(manager);\r\n        if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n            playlistList = new ArrayList<>();\r\n            GetAllMedia();\r\n        } else {\r\n            prepareData();\r\n        }\r\n        return view;\r\n    }\r\n\r\n    private void GetAllMedia() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistList = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllPlaylist();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                binding.tvTitle.setText(\"My Downloads\");\r\n\r\n                ArrayList<ViewAllPlayListModel.ResponseData.Detail> listModelList = new ArrayList<>();\r\n                for (int i = 0; i < playlistList.size(); i++) {\r\n                    ViewAllPlayListModel.ResponseData.Detail detail = new ViewAllPlayListModel.ResponseData.Detail();\r\n                    detail.setTotalAudio(playlistList.get(i).getTotalAudio());\r\n                    detail.setTotalhour(playlistList.get(i).getTotalhour());\r\n                    detail.setTotalminute(playlistList.get(i).getTotalminute());\r\n                    detail.setPlaylistID(playlistList.get(i).getPlaylistID());\r\n                    detail.setPlaylistDesc(playlistList.get(i).getPlaylistDesc());\r\n                    detail.setPlaylistMastercat(playlistList.get(i).getPlaylistMastercat());\r\n                    detail.setPlaylistSubcat(playlistList.get(i).getPlaylistSubcat());\r\n                    detail.setPlaylistName(playlistList.get(i).getPlaylistName());\r\n                    detail.setPlaylistImage(playlistList.get(i).getPlaylistImage());\r\n                    detail.setPlaylistImageDetails(playlistList.get(i).getPlaylistImageDetails());\r\n                    listModelList.add(detail);\r\n                }\r\n                PlaylistAdapter adapter = new PlaylistAdapter(listModelList, IsLock);\r\n                binding.rvMainAudio.setAdapter(adapter);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetTask getTask = new GetTask();\r\n        getTask.execute();\r\n    }\r\n\r\n    private void callBack() {\r\n        Fragment audioFragment = new PlaylistFragment();\r\n        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n        fragmentManager1.beginTransaction()\r\n                .replace(R.id.flContainer, audioFragment)\r\n                .commit();\r\n        Bundle bundle = new Bundle();\r\n        audioFragment.setArguments(bundle);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n//        prepareData();\r\n    }\r\n\r\n    private void prepareData() {\r\n        try {\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n                } else {\r\n                    SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if(isMediaStart){\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if(isMediaStart){\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(4, 6, 4, 280);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(4, 6, 4, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            try {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                Call<ViewAllPlayListModel> listCall = APIClient.getClient().getViewAllPlayLists(UserID, GetLibraryID);\r\n                listCall.enqueue(new Callback<ViewAllPlayListModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<ViewAllPlayListModel> call, Response<ViewAllPlayListModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                            ViewAllPlayListModel listModel = response.body();\r\n                            binding.tvTitle.setText(listModel.getResponseData().getView());\r\n                            PlaylistAdapter adapter = new PlaylistAdapter(listModel.getResponseData().getDetails(), listModel.getResponseData().getIsLock());\r\n                            binding.rvMainAudio.setAdapter(adapter);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ViewAllPlayListModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                });\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    public class PlaylistAdapter extends RecyclerView.Adapter<PlaylistAdapter.MyViewHolder> {\r\n        private List<ViewAllPlayListModel.ResponseData.Detail> listModelList;\r\n        String IsLock;\r\n        int index = -1;\r\n\r\n        public PlaylistAdapter(List<ViewAllPlayListModel.ResponseData.Detail> listModelList, String IsLock) {\r\n            this.listModelList = listModelList;\r\n            this.IsLock = IsLock;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            PlaylistCustomLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.playlist_custom_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                    1, 1, 0.46f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            holder.binding.tvAddToPlaylist.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.tvAddToPlaylist.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.tvPlaylistName.setText(listModelList.get(position).getPlaylistName());\r\n            Glide.with(getActivity()).load(listModelList.get(position).getPlaylistImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n            if (index == position) {\r\n                holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n            } else\r\n                holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n            holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n            holder.binding.rlMainLayout.setOnLongClickListener(new View.OnLongClickListener() {\r\n                @Override\r\n                public boolean onLongClick(View v) {\r\n                    holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n                    index = position;\r\n                    notifyDataSetChanged();\r\n                    return true;\r\n                }\r\n            });\r\n            holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    Intent i = new Intent(getActivity(), AddPlaylistActivity.class);\r\n                    i.putExtra(\"AudioId\", \"\");\r\n                    i.putExtra(\"PlaylistID\", listModelList.get(position).getPlaylistID());\r\n                    startActivity(i);\r\n                }\r\n            });\r\n            holder.binding.rlMainLayout.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                    } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        /*if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n//                            getMedia(listModelList.get(position).getPlaylistID());\r\n                            Intent i = new Intent(getActivity(), DownloadPlaylistActivity.class);\r\n                            i.putExtra(\"New\", \"0\");\r\n                            i.putExtra(\"PlaylistID\", listModelList.get(position).getPlaylistID());\r\n                            i.putExtra(\"PlaylistName\", listModelList.get(position).getPlaylistName());\r\n                            i.putExtra(\"PlaylistImage\", listModelList.get(position).getPlaylistImage());\r\n                            i.putExtra(\"PlaylistImageDetails\", listModelList.get(position).getPlaylistImageDetails());\r\n                            i.putExtra(\"TotalAudio\", listModelList.get(position).getTotalAudio());\r\n                            i.putExtra(\"Totalhour\", listModelList.get(position).getTotalhour());\r\n                            i.putExtra(\"Totalminute\", listModelList.get(position).getTotalminute());\r\n                            i.putExtra(\"MyDownloads\", \"1\");\r\n                            getActivity().startActivity(i);\r\n                        } else {*/\r\n                            Bundle bundle = new Bundle();\r\n                            comefrom_search = 2;\r\n                            GetPlaylistLibraryID = GetLibraryID;\r\n                            Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                            bundle.putString(\"New\", \"0\");\r\n                            bundle.putString(\"PlaylistID\", listModelList.get(position).getPlaylistID());\r\n                            bundle.putString(\"PlaylistName\", listModelList.get(position).getPlaylistName());\r\n                            bundle.putString(\"PlaylistImage\", listModelList.get(position).getPlaylistImage());\r\n                            bundle.putString(\"MyDownloads\", MyDownloads);\r\n                            myPlaylistsFragment.setArguments(bundle);\r\n                            fragmentManager1.beginTransaction()\r\n                                    .replace(R.id.flContainer, myPlaylistsFragment)\r\n                                    .commit();\r\n//                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            PlaylistCustomLayoutBinding binding;\r\n\r\n            public MyViewHolder(PlaylistCustomLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getMedia(String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                if(queuePlay){\r\n                    int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                    Gson gson = new Gson();\r\n                    String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                    if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                        Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                        }.getType();\r\n                        addToQueueModelList = gson.fromJson(json1, type1);\r\n                    }\r\n                    addToQueueModelList.remove(position1);\r\n                    SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared2.edit();\r\n                    String json = gson.toJson(addToQueueModelList);\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                    editor.commit();\r\n\r\n                }\r\n                player = 1;\r\n                if (isPrepare || isMediaStart || isPause) {\r\n                    stopMedia();\r\n                }\r\n                isPause = false;\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n\r\n                isCompleteStop = false;\r\n\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(playlistWiseAudioDetails);\r\n                editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, playlistID);\r\n                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                editor.commit();\r\n                try {\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/ViewAllPlaylistFragment.java	(revision d0cefdc463a16463694b167a71535edcc6bedfb3)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/ViewAllPlaylistFragment.java	(date 1605079125662)
@@ -206,7 +206,7 @@
                     editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);
                     editorr.clear();
                     editorr.commit();
-                    if(isMediaStart){
+                    if (isMediaStart) {
                         stopMedia();
                         releasePlayer();
                     }
@@ -225,7 +225,7 @@
                 editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);
                 editorr.clear();
                 editorr.commit();
-                if(isMediaStart){
+                if (isMediaStart) {
                     stopMedia();
                     releasePlayer();
                 }
@@ -368,20 +368,20 @@
                             i.putExtra("MyDownloads", "1");
                             getActivity().startActivity(i);
                         } else {*/
-                            Bundle bundle = new Bundle();
-                            comefrom_search = 2;
-                            GetPlaylistLibraryID = GetLibraryID;
-                            Fragment myPlaylistsFragment = new MyPlaylistsFragment();
-                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();
-                            bundle.putString("New", "0");
-                            bundle.putString("PlaylistID", listModelList.get(position).getPlaylistID());
-                            bundle.putString("PlaylistName", listModelList.get(position).getPlaylistName());
-                            bundle.putString("PlaylistImage", listModelList.get(position).getPlaylistImage());
-                            bundle.putString("MyDownloads", MyDownloads);
-                            myPlaylistsFragment.setArguments(bundle);
-                            fragmentManager1.beginTransaction()
-                                    .replace(R.id.flContainer, myPlaylistsFragment)
-                                    .commit();
+                        Bundle bundle = new Bundle();
+                        comefrom_search = 2;
+                        GetPlaylistLibraryID = GetLibraryID;
+                        Fragment myPlaylistsFragment = new MyPlaylistsFragment();
+                        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();
+                        bundle.putString("New", "0");
+                        bundle.putString("PlaylistID", listModelList.get(position).getPlaylistID());
+                        bundle.putString("PlaylistName", listModelList.get(position).getPlaylistName());
+                        bundle.putString("PlaylistImage", listModelList.get(position).getPlaylistImage());
+                        bundle.putString("MyDownloads", MyDownloads);
+                        myPlaylistsFragment.setArguments(bundle);
+                        fragmentManager1.beginTransaction()
+                                .replace(R.id.flContainer, myPlaylistsFragment)
+                                .commit();
 //                        }
                     }
                 }
@@ -419,7 +419,7 @@
             protected void onPostExecute(Void aVoid) {
                 SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
                 boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
-                if(queuePlay){
+                if (queuePlay) {
                     int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);
                     ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();
                     Gson gson = new Gson();
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/DownloadAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.JsonSyntaxException;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.BigBoxLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\n\r\npublic class DownloadAdapter extends RecyclerView.Adapter<DownloadAdapter.MyViewHolder> {\r\n    Context ctx;\r\n    FragmentActivity activity;\r\n    String IsLock;\r\n    int index = -1;\r\n    private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;\r\n\r\n    public DownloadAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,\r\n                           String IsLock) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.activity = activity;\r\n        this.IsLock = IsLock;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public DownloadAdapter.MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        BigBoxLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.big_box_layout, parent, false);\r\n        return new DownloadAdapter.MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull DownloadAdapter.MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 20,\r\n                1, 1, 0.48f, 20);\r\n        holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n        if(index == position){\r\n            holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n        }else\r\n            holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n        holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n        holder.binding.llMainLayout.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View v) {\r\n                holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n                index = position;\r\n                notifyDataSetChanged();\r\n                return true;\r\n            }\r\n        });\r\n        holder.binding.tvAddToPlaylist.setOnClickListener(view -> {\r\n            Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n            i.putExtra(\"AudioId\", listModelList.get(position).getID());\r\n            i.putExtra(\"PlaylistID\", \"\");\r\n            ctx.startActivity(i);\r\n        });\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n            try {\r\n                SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                if (queuePlay) {\r\n                    int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                    Gson gson = new Gson();\r\n                    String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                    if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                        Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                        }.getType();\r\n                        addToQueueModelList = gson.fromJson(json1, type1);\r\n                    }\r\n                    addToQueueModelList.remove(position1);\r\n                    SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared2.edit();\r\n                    String json = gson.toJson(addToQueueModelList);\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                    editor.commit();\r\n\r\n                }\r\n                if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    ctx.startActivity(i);\r\n                } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransFrag(position, listModelList);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n                        MainAudioModel.ResponseData.Detail mainPlayModel = new MainAudioModel.ResponseData.Detail();\r\n                        mainPlayModel.setID(\"0\");\r\n                        mainPlayModel.setName(\"Disclaimer\");\r\n                        mainPlayModel.setAudioFile(\"\");\r\n                        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                        mainPlayModel.setAudiomastercat(\"\");\r\n                        mainPlayModel.setAudioSubCategory(\"\");\r\n                        mainPlayModel.setImageFile(\"\");\r\n                        mainPlayModel.setLike(\"\");\r\n                        mainPlayModel.setDownload(\"\");\r\n                        mainPlayModel.setAudioDuration(\"0:48\");\r\n                        listModelList2.addAll(listModelList);\r\n                        listModelList2.add(position, mainPlayModel);\r\n                        callTransFrag(position, listModelList2);\r\n                    }\r\n                }\r\n            } catch (JsonSyntaxException e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callTransFrag(int position, ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {\r\n        try {\r\n            SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            if (queuePlay) {\r\n                int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                Gson gson = new Gson();\r\n                String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                    }.getType();\r\n                    addToQueueModelList = gson.fromJson(json1, type1);\r\n                }\r\n                addToQueueModelList.remove(position1);\r\n                SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared2.edit();\r\n                String json = gson.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                editor.commit();\r\n\r\n            }\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n           /* Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();*/\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            ArrayList<DownloadAudioDetails> downloadAudioDetails = new ArrayList<>();\r\n            for (int i = 0; i < listModelList.size(); i++) {\r\n                DownloadAudioDetails mainPlayModel = new DownloadAudioDetails();\r\n                mainPlayModel.setID(listModelList.get(i).getID());\r\n                mainPlayModel.setName(listModelList.get(i).getName());\r\n                mainPlayModel.setAudioFile(listModelList.get(i).getAudioFile());\r\n                mainPlayModel.setAudioDirection(listModelList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(listModelList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(listModelList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(listModelList.get(i).getImageFile());\r\n                mainPlayModel.setLike(listModelList.get(i).getLike());\r\n                mainPlayModel.setDownload(listModelList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(listModelList.get(i).getAudioDuration());\r\n                downloadAudioDetails.add(mainPlayModel);\r\n            }\r\n            String json = gson.toJson(downloadAudioDetails);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"DownloadListAudio\");\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            ctx.startActivity(i);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (4 > listModelList.size()) {\r\n            return listModelList.size();\r\n        } else {\r\n            return 4;\r\n        }\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        BigBoxLayoutBinding binding;\r\n\r\n        public MyViewHolder(BigBoxLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/DownloadAdapter.java	(revision d0cefdc463a16463694b167a71535edcc6bedfb3)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/DownloadAdapter.java	(date 1605079125616)
@@ -89,9 +89,9 @@
         } else if (IsLock.equalsIgnoreCase("0") || IsLock.equalsIgnoreCase("")) {
             holder.binding.ivLock.setVisibility(View.GONE);
         }
-        if(index == position){
+        if (index == position) {
             holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);
-        }else
+        } else
             holder.binding.tvAddToPlaylist.setVisibility(View.GONE);
         holder.binding.tvAddToPlaylist.setText("Add To Playlist");
         holder.binding.llMainLayout.setOnLongClickListener(new View.OnLongClickListener() {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecommendedAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.BigBoxLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class RecommendedAdapter extends RecyclerView.Adapter<RecommendedAdapter.MyViewHolder> {\r\n    Context ctx;\r\n    FragmentActivity activity;\r\n    String IsLock, HomeView;\r\n    int index = -1;\r\n    private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;\r\n\r\n    public RecommendedAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,\r\n                              String IsLock, String HomeView) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.activity = activity;\r\n        this.IsLock = IsLock;\r\n        this.HomeView = HomeView;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        BigBoxLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.big_box_layout, parent, false);\r\n        return new MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 16,\r\n                1, 1, 0.44f, 10);\r\n        holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        holder.binding.tvAddToPlaylist.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.tvAddToPlaylist.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n\r\n        if(index == position){\r\n            holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n        }else\r\n            holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n        holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n        holder.binding.llMainLayout.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View v) {\r\n                holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n                index = position;\r\n                notifyDataSetChanged();\r\n                return true;\r\n            }\r\n        });\r\n        holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                i.putExtra(\"AudioId\", listModelList.get(position).getID());\r\n                i.putExtra(\"PlaylistID\", \"\");\r\n                ctx.startActivity(i);\r\n            }\r\n        });\r\n\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n//       TODO                 Active and cancelled = 0, InActive = 1, Suspeded = 2\r\n            SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            if (queuePlay) {\r\n                int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                Gson gson = new Gson();\r\n                String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                    }.getType();\r\n                    addToQueueModelList = gson.fromJson(json1, type1);\r\n                }\r\n                addToQueueModelList.remove(position1);\r\n                SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared2.edit();\r\n                String json = gson.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                editor.commit();\r\n            }\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callnewTrans(position);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    ctx.startActivity(i);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callnewTrans(position);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n                callnewTrans(position);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callnewTrans(int position) {\r\n\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        String MyPlaylist = shared.getString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        if (audioPlay && AudioFlag.equalsIgnoreCase(\"MainAudioList\") && MyPlaylist.equalsIgnoreCase(HomeView)) {\r\n            if (isDisclaimer == 1) {\r\n                BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n            } else {\r\n                callTransFrag(position, listModelList);\r\n            }\r\n        } else {\r\n            isDisclaimer = 0;\r\n            disclaimerPlayed = 0;\r\n            ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n            MainAudioModel.ResponseData.Detail mainPlayModel = new MainAudioModel.ResponseData.Detail();\r\n            mainPlayModel.setID(\"0\");\r\n            mainPlayModel.setName(\"Disclaimer\");\r\n            mainPlayModel.setAudioFile(\"\");\r\n            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n            mainPlayModel.setAudiomastercat(\"\");\r\n            mainPlayModel.setAudioSubCategory(\"\");\r\n            mainPlayModel.setImageFile(\"\");\r\n            mainPlayModel.setLike(\"\");\r\n            mainPlayModel.setDownload(\"\");\r\n            mainPlayModel.setAudioDuration(\"0:48\");\r\n            listModelList2.addAll(listModelList);\r\n            listModelList2.add(position, mainPlayModel);\r\n            callTransFrag(position, listModelList2);\r\n        }\r\n    }\r\n\r\n    private void callTransFrag(int position, ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {\r\n        try {\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n\r\n\r\n            /*Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();*/\r\n\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, HomeView);\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"MainAudioList\");\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            ctx.startActivity(i);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (4 > listModelList.size()) {\r\n            return listModelList.size();\r\n        } else {\r\n            return 4;\r\n        }\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        BigBoxLayoutBinding binding;\r\n\r\n        public MyViewHolder(BigBoxLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecommendedAdapter.java	(revision d0cefdc463a16463694b167a71535edcc6bedfb3)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecommendedAdapter.java	(date 1605079125685)
@@ -98,9 +98,9 @@
             holder.binding.ivLock.setVisibility(View.GONE);
         }
 
-        if(index == position){
+        if (index == position) {
             holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);
-        }else
+        } else
             holder.binding.tvAddToPlaylist.setVisibility(View.GONE);
         holder.binding.tvAddToPlaylist.setText("Add To Playlist");
         holder.binding.llMainLayout.setOnLongClickListener(new View.OnLongClickListener() {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/AudioFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio;\r\n\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.DownloadAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.LibraryAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.PopularPlayedAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.RecentlyPlayedAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.RecommendedAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.TopCategoriesAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.UnlockAudioList;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.SplashModule.SplashScreenActivity;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.FragmentAudioBinding;\r\nimport com.brainwellnessspa.databinding.MainAudioLayoutBinding;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.TimeZone;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.ViewAllAudioFragment.viewallAudio;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.isDownloading;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class AudioFragment extends Fragment {\r\n    public static boolean exit = false;\r\n    public static String IsLock = \"0\";\r\n    FragmentAudioBinding binding;\r\n    String UserID, AudioFlag, expDate;\r\n    List<String> fileNameList;\r\n    List<String> audioFile, playlistDownloadId;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_audio, container, false);\r\n        View view = binding.getRoot();\r\n        viewallAudio = false;\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        ComeScreenAccount = 0;\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n        if (!isDownloading) {\r\n            if(BWSApplication.isNetworkConnected(getActivity())) {\r\n                SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n                String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n                String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type = new TypeToken<List<String>>() {\r\n                    }.getType();\r\n                    fileNameList = gson.fromJson(json, type);\r\n                    audioFile = gson.fromJson(json1, type);\r\n            /*if(json2.equalsIgnoreCase(String.valueOf(gson))){\r\n                playlistDownloadId = new ArrayList<>();\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                String playlistIdJson = gson.toJson(playlistDownloadId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                SharedPreferences sharedy = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n                json2 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            }*/\r\n                    playlistDownloadId = gson.fromJson(json2, type);\r\n                    if (fileNameList.size() != 0) {\r\n                        DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                        downloadMedia.encrypt1(audioFile, fileNameList, playlistDownloadId/*, playlistSongs*/);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        prepareData();\r\n        return view;\r\n    }\r\n\r\n    public void GetAllMedia(FragmentActivity ctx, List<MainAudioModel.ResponseData> listModel) {\r\n        ArrayList<MainAudioModel.ResponseData.Detail> details = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData(\"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadAudioDetailsList.size() != 0) {\r\n                    for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                        MainAudioModel.ResponseData.Detail detail = new MainAudioModel.ResponseData.Detail();\r\n                        detail.setID(downloadAudioDetailsList.get(i).getID());\r\n                        detail.setName(downloadAudioDetailsList.get(i).getName());\r\n                        detail.setAudioFile(downloadAudioDetailsList.get(i).getAudioFile());\r\n                        detail.setAudioDirection(downloadAudioDetailsList.get(i).getAudioDirection());\r\n                        detail.setAudiomastercat(downloadAudioDetailsList.get(i).getAudiomastercat());\r\n                        detail.setAudioSubCategory(downloadAudioDetailsList.get(i).getAudioSubCategory());\r\n                        detail.setImageFile(downloadAudioDetailsList.get(i).getImageFile());\r\n                        detail.setLike(downloadAudioDetailsList.get(i).getLike());\r\n                        detail.setDownload(downloadAudioDetailsList.get(i).getDownload());\r\n                        detail.setAudioDuration(downloadAudioDetailsList.get(i).getAudioDuration());\r\n                        details.add(detail);\r\n                    }\r\n                    for (int i = 0; i < listModel.size(); i++) {\r\n                        if (listModel.get(i).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                            listModel.get(i).setDetails(details);\r\n                        }\r\n                    }\r\n                    MainAudioListAdapter adapter = new MainAudioListAdapter(listModel, getActivity());\r\n                    RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n                    binding.rvMainAudioList.setLayoutManager(manager);\r\n                    binding.rvMainAudioList.setItemAnimator(new DefaultItemAnimator());\r\n                    binding.rvMainAudioList.setAdapter(adapter);\r\n                } else {\r\n                    MainAudioListAdapter adapter = new MainAudioListAdapter(listModel, getActivity());\r\n                    RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n                    binding.rvMainAudioList.setLayoutManager(manager);\r\n                    binding.rvMainAudioList.setItemAnimator(new DefaultItemAnimator());\r\n                    binding.rvMainAudioList.setAdapter(adapter);\r\n                }\r\n                /*if (downloadAudioDetailsList.size() != 0) {\r\n                    MainAudioListAdapter1 adapter1 = new MainAudioListAdapter1(getActivity(),listModel);\r\n                    RecyclerView.LayoutManager manager1 = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    binding.rvMainAudioList.setLayoutManager(manager1);\r\n                    binding.rvMainAudioList.setItemAnimator(new DefaultItemAnimator());\r\n                    binding.rvMainAudioList.setAdapter(adapter1);\r\n                } else {\r\n                    binding.rvMainAudioList.setVisibility(View.GONE);\r\n                }*/\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n    }\r\n\r\n    private void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<MainAudioModel> listCall = APIClient.getClient().getMainAudioLists(UserID);\r\n            listCall.enqueue(new Callback<MainAudioModel>() {\r\n                @Override\r\n                public void onResponse(Call<MainAudioModel> call, Response<MainAudioModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        MainAudioModel listModel = response.body();\r\n                        try {\r\n                            IsLock = listModel.getResponseData().get(0).getIsLock();\r\n                            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n                            SharedPreferences.Editor editor = shared.edit();\r\n                            editor.putString(CONSTANTS.PREF_KEY_ExpDate, listModel.getResponseData().get(0).getExpireDate());\r\n                            editor.putString(CONSTANTS.PREF_KEY_IsLock, listModel.getResponseData().get(0).getIsLock());\r\n                            editor.commit();\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n                        GetAllMedia(getActivity(), listModel.getResponseData());\r\n                    } else {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<MainAudioModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Call<UnlockAudioList> listCall1 = APIClient.getClient().getUnLockAudioList(UserID);\r\n                listCall1.enqueue(new Callback<UnlockAudioList>() {\r\n                    @Override\r\n                    public void onResponse(Call<UnlockAudioList> call, Response<UnlockAudioList> response) {\r\n                        if (response.isSuccessful()) {\r\n                            UnlockAudioList listModel = response.body();\r\n                            try {\r\n                                IsLock = listModel.getResponseData().getIsLock();\r\n                                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n                                SharedPreferences.Editor editor = shared.edit(); ;\r\n                                editor.putString(CONSTANTS.PREF_KEY_IsLock, listModel.getResponseData().getIsLock());\r\n                                Gson gson = new Gson();\r\n                                editor.putString(CONSTANTS.PREF_KEY_UnLockAudiList, gson.toJson(listModel.getResponseData().getID()));\r\n                                editor.commit();\r\n                            } catch (Exception e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                         }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<UnlockAudioList> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            expDate = (shared1.getString(CONSTANTS.PREF_KEY_ExpDate, \"\"));\r\n//            expDate = \"2020-09-29 06:34:10\";\r\n            Log.e(\"Exp Date !!!!\", expDate);\r\n            SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n            Date Expdate = new Date();\r\n            try {\r\n                Expdate = format.parse(expDate);\r\n                Log.e(\"Exp Date Expdate!!!!\", String.valueOf(Expdate));\r\n            } catch (ParseException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n            simpleDateFormat1.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n            Date currdate = Calendar.getInstance().getTime();\r\n            Date currdate1 = new Date();\r\n            String currantDateTime = simpleDateFormat1.format(currdate);\r\n            try {\r\n                currdate1 = format.parse(currantDateTime);\r\n                Log.e(\"currant currdate !!!!\", String.valueOf(currdate1));\r\n            } catch (ParseException e) {\r\n                e.printStackTrace();\r\n            }\r\n            Log.e(\"currant Date !!!!\", currantDateTime);\r\n            if (Expdate.before(currdate1)) {\r\n                Log.e(\"app\", \"Date1 is before Date2\");\r\n                IsLock = \"1\";\r\n            } else if (Expdate.after(currdate1)) {\r\n                Log.e(\"app\", \"Date1 is after Date2\");\r\n                IsLock = \"0\";\r\n            } else if (Expdate == currdate1) {\r\n                Log.e(\"app\", \"Date1 is equal Date2\");\r\n                IsLock = \"1\";\r\n            }\r\n            ArrayList<MainAudioModel.ResponseData> responseData = new ArrayList<>();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> details = new ArrayList<>();\r\n            MainAudioModel.ResponseData listModel = new MainAudioModel.ResponseData();\r\n            listModel.setHomeID(\"1\");\r\n            listModel.setDetails(details);/*\r\n            \"UserID\": \"2\",\r\n            \"IsLock\": \"0\",*/\r\n            listModel.setView(\"My Downloads\");\r\n            listModel.setHomeID(\"1\");\r\n            listModel.setUserID(UserID);\r\n            listModel.setIsLock(IsLock);\r\n            responseData.add(listModel);\r\n            GetAllMedia(getActivity(), responseData);\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n        try {\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n            SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n\r\n                } else {\r\n                    SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if(isMediaStart){\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if(isMediaStart){\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(0, 6, 0, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(0, 6, 0, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        prepareData();\r\n//        BWSApplication.getLatasteUpdate(getActivity());\r\n    }\r\n\r\n    public class MainAudioListAdapter extends RecyclerView.Adapter<MainAudioListAdapter.MyViewHolder> {\r\n        FragmentActivity activity;\r\n        private List<MainAudioModel.ResponseData> listModelList;\r\n\r\n        public MainAudioListAdapter(List<MainAudioModel.ResponseData> listModelList, FragmentActivity activity) {\r\n            this.listModelList = listModelList;\r\n            this.activity = activity;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MainAudioLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.main_audio_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvViewAll.setOnClickListener(view -> {\r\n                Fragment viewAllAudioFragment = new ViewAllAudioFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, viewAllAudioFragment)\r\n                        .commit();\r\n                Bundle bundle = new Bundle();\r\n                bundle.putString(\"ID\", listModelList.get(position).getHomeID());\r\n                bundle.putString(\"Name\", listModelList.get(position).getView());\r\n                bundle.putString(\"Category\", \"\");\r\n                viewAllAudioFragment.setArguments(bundle);\r\n            });\r\n\r\n            if (listModelList.get(position).getDetails().size() == 0) {\r\n                holder.binding.llMainLayout.setVisibility(View.GONE);\r\n            } else {\r\n                holder.binding.llMainLayout.setVisibility(View.VISIBLE);\r\n                holder.binding.tvTitle.setText(listModelList.get(position).getView());\r\n                if (listModelList.get(position).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                    DownloadAdapter myDownloadsAdapter = new DownloadAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock());\r\n                    IsLock = listModelList.get(position).getIsLock();\r\n                    RecyclerView.LayoutManager myDownloads = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(myDownloads);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(myDownloadsAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 4) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.Library))) {\r\n                    LibraryAdapter recommendedAdapter = new LibraryAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock(),listModelList.get(position).getView());\r\n                    IsLock = listModelList.get(position).getIsLock();\r\n                    RecyclerView.LayoutManager recommended = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(recommended);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(recommendedAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 4) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.my_like))) {\r\n                    holder.binding.llMainLayout.setVisibility(View.GONE);\r\n                    /*RecentlyPlayedAdapter recentlyPlayedAdapter = new RecentlyPlayedAdapter(listModelList.get(position).getDetails(), getActivity());\r\n                    RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(recentlyPlayed);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(recentlyPlayedAdapter);*/\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.recently_played))) {\r\n                    RecentlyPlayedAdapter recentlyPlayedAdapter = new RecentlyPlayedAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock(),listModelList.get(position).getView());\r\n                    RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(recentlyPlayed);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(recentlyPlayedAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 6) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.get_inspired))) {\r\n                    RecommendedAdapter inspiredAdapter = new RecommendedAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock(),listModelList.get(position).getView());\r\n                    RecyclerView.LayoutManager inspired = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(inspired);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(inspiredAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 4) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.popular))) {\r\n                    PopularPlayedAdapter popularPlayedAdapter = new PopularPlayedAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock(),listModelList.get(position).getView());\r\n                    RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(recentlyPlayed);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(popularPlayedAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 6) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.top_categories))) {\r\n                    holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    TopCategoriesAdapter topCategoriesAdapter = new TopCategoriesAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getHomeID(), listModelList.get(position).getView());\r\n                    RecyclerView.LayoutManager topCategories = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(topCategories);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(topCategoriesAdapter);\r\n                }\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MainAudioLayoutBinding binding;\r\n\r\n            public MyViewHolder(MainAudioLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/AudioFragment.java	(revision d0cefdc463a16463694b167a71535edcc6bedfb3)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/AudioFragment.java	(date 1605078915238)
@@ -83,7 +83,7 @@
         AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
 
         if (!isDownloading) {
-            if(BWSApplication.isNetworkConnected(getActivity())) {
+            if (BWSApplication.isNetworkConnected(getActivity())) {
                 SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);
                 Gson gson = new Gson();
                 String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));
@@ -224,7 +224,8 @@
                             try {
                                 IsLock = listModel.getResponseData().getIsLock();
                                 SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);
-                                SharedPreferences.Editor editor = shared.edit(); ;
+                                SharedPreferences.Editor editor = shared.edit();
+                                ;
                                 editor.putString(CONSTANTS.PREF_KEY_IsLock, listModel.getResponseData().getIsLock());
                                 Gson gson = new Gson();
                                 editor.putString(CONSTANTS.PREF_KEY_UnLockAudiList, gson.toJson(listModel.getResponseData().getID()));
@@ -232,7 +233,7 @@
                             } catch (Exception e) {
                                 e.printStackTrace();
                             }
-                         }
+                        }
                     }
 
                     @Override
@@ -332,7 +333,7 @@
                     editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);
                     editorr.clear();
                     editorr.commit();
-                    if(isMediaStart){
+                    if (isMediaStart) {
                         stopMedia();
                         releasePlayer();
                     }
@@ -351,7 +352,7 @@
                 editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);
                 editorr.clear();
                 editorr.commit();
-                if(isMediaStart){
+                if (isMediaStart) {
                     stopMedia();
                     releasePlayer();
                 }
@@ -439,7 +440,7 @@
                     }
                 } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.Library))) {
                     LibraryAdapter recommendedAdapter = new LibraryAdapter(listModelList.get(position).getDetails(), getActivity(), activity,
-                            listModelList.get(position).getIsLock(),listModelList.get(position).getView());
+                            listModelList.get(position).getIsLock(), listModelList.get(position).getView());
                     IsLock = listModelList.get(position).getIsLock();
                     RecyclerView.LayoutManager recommended = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);
                     holder.binding.rvMainAudio.setLayoutManager(recommended);
@@ -460,7 +461,7 @@
                     holder.binding.rvMainAudio.setAdapter(recentlyPlayedAdapter);*/
                 } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.recently_played))) {
                     RecentlyPlayedAdapter recentlyPlayedAdapter = new RecentlyPlayedAdapter(listModelList.get(position).getDetails(), getActivity(), activity,
-                            listModelList.get(position).getIsLock(),listModelList.get(position).getView());
+                            listModelList.get(position).getIsLock(), listModelList.get(position).getView());
                     RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);
                     holder.binding.rvMainAudio.setLayoutManager(recentlyPlayed);
                     holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());
@@ -473,7 +474,7 @@
                     }
                 } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.get_inspired))) {
                     RecommendedAdapter inspiredAdapter = new RecommendedAdapter(listModelList.get(position).getDetails(), getActivity(), activity,
-                            listModelList.get(position).getIsLock(),listModelList.get(position).getView());
+                            listModelList.get(position).getIsLock(), listModelList.get(position).getView());
                     RecyclerView.LayoutManager inspired = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);
                     holder.binding.rvMainAudio.setLayoutManager(inspired);
                     holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());
@@ -486,7 +487,7 @@
                     }
                 } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.popular))) {
                     PopularPlayedAdapter popularPlayedAdapter = new PopularPlayedAdapter(listModelList.get(position).getDetails(), getActivity(), activity,
-                            listModelList.get(position).getIsLock(),listModelList.get(position).getView());
+                            listModelList.get(position).getIsLock(), listModelList.get(position).getView());
                     RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);
                     holder.binding.rvMainAudio.setLayoutManager(recentlyPlayed);
                     holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Search/SearchFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Search;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Activities.DashboardActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.DownloadsLayoutBinding;\r\nimport com.brainwellnessspa.databinding.FragmentSearchBinding;\r\nimport com.brainwellnessspa.databinding.GlobalSearchLayoutBinding;\r\nimport com.brainwellnessspa.databinding.PlaylistCustomLayoutBinding;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class SearchFragment extends Fragment {\r\n    FragmentSearchBinding binding;\r\n    String UserID;\r\n    EditText searchEditText;\r\n    SerachListAdpater adpater;\r\n    public static int comefrom_search = 0;\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_search, container, false);\r\n        View view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        ComeScreenAccount = 0;\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        closeButton.setOnClickListener(v -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.rvSerachList.setAdapter(null);\r\n            binding.rvSerachList.setVisibility(View.GONE);\r\n            binding.llError.setVisibility(View.GONE);\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n\r\n                } else {\r\n                    prepareSearchData(search, searchEditText);\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvSerachList.setLayoutManager(recentlyPlayed);\r\n        binding.rvSerachList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvDownloadsList.setLayoutManager(layoutManager);\r\n        binding.rvDownloadsList.setItemAnimator(new DefaultItemAnimator());\r\n        RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n        binding.rvPlayList.setItemAnimator(new DefaultItemAnimator());\r\n        binding.rvPlayList.setLayoutManager(manager);\r\n        prepareSuggestedData();\r\n\r\n        return view;\r\n    }\r\n\r\n    private void prepareSearchData(String search, EditText searchEditText) {\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SearchBothModel> listCall = APIClient.getClient().getSearchBoth(UserID, search);\r\n            listCall.enqueue(new Callback<SearchBothModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchBothModel> call, Response<SearchBothModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SearchBothModel listModel = response.body();\r\n                        if (!searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            if (listModel.getResponseData().size() == 0) {\r\n                                binding.rvSerachList.setVisibility(View.GONE);\r\n                                binding.llError.setVisibility(View.VISIBLE);\r\n                                binding.tvFound.setText(\"Couldn't find '\" + search + \"'. Try searching again\");\r\n                            } else {\r\n                                binding.llError.setVisibility(View.GONE);\r\n                                binding.rvSerachList.setVisibility(View.VISIBLE);\r\n                                adpater = new SerachListAdpater(listModel.getResponseData(), getActivity(), binding.rvSerachList, UserID);\r\n                                binding.rvSerachList.setAdapter(adpater);\r\n                            }\r\n                        } else if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            binding.rvSerachList.setAdapter(null);\r\n                            binding.rvSerachList.setVisibility(View.GONE);\r\n                            binding.llError.setVisibility(View.GONE);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchBothModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        prepareSuggestedData();\r\n    }\r\n\r\n    private void prepareSuggestedData() {\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n        try {\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences shared11 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared11.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n                } else {\r\n                    SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if (isMediaStart) {\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if (isMediaStart) {\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shareda = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shareda.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(0, 6, 0, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(0, 6, 0, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SuggestedModel> listCall = APIClient.getClient().getSuggestedLists(UserID);\r\n            listCall.enqueue(new Callback<SuggestedModel>() {\r\n                @Override\r\n                public void onResponse(Call<SuggestedModel> call, Response<SuggestedModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SuggestedModel listModel = response.body();\r\n                        binding.tvSuggestedAudios.setText(R.string.Recommended_Audios);\r\n                        binding.tvSAViewAll.setVisibility(View.VISIBLE);\r\n                        SuggestionAudiosAdpater suggestedAdpater = new SuggestionAudiosAdpater(listModel.getResponseData(), getActivity());\r\n                        binding.rvDownloadsList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSAViewAll.setOnClickListener(view -> {\r\n                            Fragment fragment = new ViewAllSearchFragment();\r\n                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .replace(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                            Bundle bundle = new Bundle();\r\n                            bundle.putString(\"Name\", \"Recommended  Audios\");\r\n                            bundle.putParcelableArrayList(\"AudiolistModel\", listModel.getResponseData());\r\n                            fragment.setArguments(bundle);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SuggestedModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SearchPlaylistModel> listCall = APIClient.getClient().getSuggestedPlayLists(UserID);\r\n            listCall.enqueue(new Callback<SearchPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchPlaylistModel> call, Response<SearchPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SearchPlaylistModel listModel = response.body();\r\n                        binding.tvSuggestedPlaylist.setText(R.string.Recommendeds_Playlist);\r\n                        binding.tvSPViewAll.setVisibility(View.VISIBLE);\r\n\r\n                        SearchPlaylistAdapter suggestedAdpater = new SearchPlaylistAdapter(listModel.getResponseData());\r\n                        binding.rvPlayList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSPViewAll.setOnClickListener(view -> {\r\n                            Fragment fragment = new ViewAllSearchFragment();\r\n                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .replace(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                            Bundle bundle = new Bundle();\r\n                            bundle.putString(\"Name\", \"Recommended Playlist\");\r\n                            bundle.putParcelableArrayList(\"PlaylistModel\", listModel.getResponseData());\r\n                            fragment.setArguments(bundle);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    public class SerachListAdpater extends RecyclerView.Adapter<SerachListAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        String UserID;\r\n        RecyclerView rvSerachList;\r\n        private List<SearchBothModel.ResponseData> modelList;\r\n\r\n        public SerachListAdpater(List<SearchBothModel.ResponseData> modelList, Context ctx,\r\n                                 RecyclerView rvSerachList, String UserID) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n            this.rvSerachList = rvSerachList;\r\n            this.UserID = UserID;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            GlobalSearchLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.global_search_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(modelList.get(position).getName());\r\n\r\n            if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            if (modelList.get(position).getIscategory().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.tvPart.setText(R.string.Audio);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                        i.putExtra(\"AudioId\", modelList.get(position).getID());\r\n                        i.putExtra(\"PlaylistID\", \"\");\r\n                        startActivity(i);\r\n                    }\r\n                });\r\n\r\n                holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        try {\r\n                            player = 1;\r\n                            if (isPrepare || isMediaStart || isPause) {\r\n                                MusicService.stopMedia();\r\n                            }\r\n                            isPause = false;\r\n                            isMediaStart = false;\r\n                            isPrepare = false;\r\n                            isCompleteStop = false;\r\n                            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                            SharedPreferences.Editor editor = shared.edit();\r\n                            Gson gson = new Gson();\r\n                            ArrayList<SearchBothModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                            SearchBothModel.ResponseData mainPlayModel = new SearchBothModel.ResponseData();\r\n                            mainPlayModel.setID(\"0\");\r\n                            mainPlayModel.setName(\"Disclaimer\");\r\n                            mainPlayModel.setAudioFile(\"\");\r\n                            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                            mainPlayModel.setAudiomastercat(\"\");\r\n                            mainPlayModel.setAudioSubCategory(\"\");\r\n                            mainPlayModel.setImageFile(\"\");\r\n                            mainPlayModel.setLike(\"\");\r\n                            mainPlayModel.setDownload(\"\");\r\n                            mainPlayModel.setAudioDuration(\"0:48\");\r\n                            listModelList2.add(mainPlayModel);\r\n\r\n                            listModelList2.add(modelList.get(position));\r\n                            String json = gson.toJson(listModelList2);\r\n                            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                            editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchModelAudio\");\r\n                            editor.commit();\r\n                            Fragment fragment = new TransparentPlayerFragment();\r\n                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .add(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                            /*Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n                            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                            ctx.startActivity(i);*/\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                });\r\n            } else if (modelList.get(position).getIscategory().equalsIgnoreCase(\"0\")) {\r\n                holder.binding.tvPart.setText(R.string.Playlist);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                        i.putExtra(\"AudioId\", \"\");\r\n                        i.putExtra(\"PlaylistID\", modelList.get(position).getID());\r\n                        startActivity(i);\r\n                    }\r\n                });\r\n\r\n                holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        comefrom_search = 1;\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putString(\"New\", \"0\");\r\n                        bundle.putString(\"PlaylistID\", modelList.get(position).getID());\r\n                        bundle.putString(\"PlaylistName\", modelList.get(position).getName());\r\n                        bundle.putString(\"MyDownloads\", \"0\");\r\n                        myPlaylistsFragment.setArguments(bundle);\r\n                        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                        fragmentManager1.beginTransaction()\r\n                                .replace(R.id.flContainer, myPlaylistsFragment)\r\n                                .commit();\r\n                    }\r\n                });\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(getActivity()).load(modelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return modelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            GlobalSearchLayoutBinding binding;\r\n\r\n            public MyViewHolder(GlobalSearchLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SuggestionAudiosAdpater extends RecyclerView.Adapter<SuggestionAudiosAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        private List<SuggestedModel.ResponseData> modelList;\r\n\r\n        public SuggestionAudiosAdpater(List<SuggestedModel.ResponseData> modelList, Context ctx) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(modelList.get(position).getName());\r\n            holder.binding.tvTime.setText(modelList.get(position).getAudioDuration());\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(getActivity()).load(modelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n                try {\r\n                    player = 1;\r\n                    if (isPrepare || isMediaStart || isPause) {\r\n                        MusicService.stopMedia();\r\n                    }\r\n                    isPause = false;\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                    isCompleteStop = false;\r\n                    SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared.edit();\r\n                    Gson gson = new Gson();\r\n                    ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                    SuggestedModel.ResponseData mainPlayModel = new SuggestedModel.ResponseData();\r\n                    mainPlayModel.setID(\"0\");\r\n                    mainPlayModel.setName(\"Disclaimer\");\r\n                    mainPlayModel.setAudioFile(\"\");\r\n                    mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                    mainPlayModel.setAudiomastercat(\"\");\r\n                    mainPlayModel.setAudioSubCategory(\"\");\r\n                    mainPlayModel.setImageFile(\"\");\r\n                    mainPlayModel.setLike(\"\");\r\n                    mainPlayModel.setDownload(\"\");\r\n                    mainPlayModel.setAudioDuration(\"0:48\");\r\n                    listModelList2.add(mainPlayModel);\r\n\r\n                    listModelList2.add(modelList.get(position));\r\n                    String json = gson.toJson(listModelList2);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchAudio\");\r\n                    editor.commit();\r\n                    /*Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n                    i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                    ctx.startActivity(i);*/\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            });\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                    i.putExtra(\"AudioId\", modelList.get(position).getID());\r\n                    i.putExtra(\"PlaylistID\", \"\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (10 > modelList.size()) {\r\n                return modelList.size();\r\n            } else {\r\n                return 10;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SearchPlaylistAdapter extends RecyclerView.Adapter<SearchPlaylistAdapter.MyViewHolder> {\r\n        private List<SearchPlaylistModel.ResponseData> modelList;\r\n\r\n        public SearchPlaylistAdapter(List<SearchPlaylistModel.ResponseData> listModelList) {\r\n            this.modelList = listModelList;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            PlaylistCustomLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.playlist_custom_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                    1, 1, 0.38f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n\r\n            MeasureRatio measureRatio1 = BWSApplication.measureRatio(getActivity(), 0,\r\n                    1, 1, 0.38f, 0);\r\n            holder.binding.rlMainLayout.getLayoutParams().height = (int) (measureRatio1.getHeight() * measureRatio1.getRatio());\r\n            holder.binding.rlMainLayout.getLayoutParams().width = (int) (measureRatio1.getWidthImg() * measureRatio1.getRatio());\r\n\r\n            holder.binding.tvPlaylistName.setText(modelList.get(position).getName());\r\n            Glide.with(getActivity()).load(modelList.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                    || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.rlMainLayout.setOnClickListener(view -> {\r\n                if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    comefrom_search = 1;\r\n                    Bundle bundle = new Bundle();\r\n                    Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    bundle.putString(\"New\", \"0\");\r\n                    bundle.putString(\"ComeFrom\", \"Search\");\r\n                    bundle.putString(\"PlaylistID\", modelList.get(position).getID());\r\n                    bundle.putString(\"PlaylistName\", modelList.get(position).getName());\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();\r\n                    /*Intent intent = new Intent(getActivity(), DashboardActivity.class);\r\n                    intent.putExtra(\"Goplaylist\",\"1\");\r\n                    intent.putExtra(\"PlaylistID\", modelList.get(position).getID());\r\n                    intent.putExtra(\"PlaylistName\", modelList.get(position).getName());\r\n                    intent.putExtra(\"PlaylistImage\",\"\");\r\n                    startActivity(intent);\r\n                    getActivity().finish();*/\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (6 > modelList.size()) {\r\n                return modelList.size();\r\n            } else {\r\n                return 6;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            PlaylistCustomLayoutBinding binding;\r\n\r\n            public MyViewHolder(PlaylistCustomLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Search/SearchFragment.java	(revision d0cefdc463a16463694b167a71535edcc6bedfb3)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Search/SearchFragment.java	(date 1605097099006)
@@ -671,6 +671,7 @@
 
     public class SearchPlaylistAdapter extends RecyclerView.Adapter<SearchPlaylistAdapter.MyViewHolder> {
         private List<SearchPlaylistModel.ResponseData> modelList;
+        int index = -1;
 
         public SearchPlaylistAdapter(List<SearchPlaylistModel.ResponseData> listModelList) {
             this.modelList = listModelList;
@@ -691,7 +692,8 @@
             holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());
             holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());
             holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);
-
+            holder.binding.tvAddToPlaylist.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());
+            holder.binding.tvAddToPlaylist.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());
             MeasureRatio measureRatio1 = BWSApplication.measureRatio(getActivity(), 0,
                     1, 1, 0.38f, 0);
             holder.binding.rlMainLayout.getLayoutParams().height = (int) (measureRatio1.getHeight() * measureRatio1.getRatio());
@@ -710,6 +712,29 @@
                 holder.binding.ivLock.setVisibility(View.GONE);
             }
 
+            if (index == position) {
+                holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);
+            } else
+                holder.binding.tvAddToPlaylist.setVisibility(View.GONE);
+            holder.binding.tvAddToPlaylist.setText("Add To Playlist");
+            holder.binding.rlMainLayout.setOnLongClickListener(new View.OnLongClickListener() {
+                @Override
+                public boolean onLongClick(View v) {
+                    holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);
+                    index = position;
+                    notifyDataSetChanged();
+                    return true;
+                }
+            });
+            holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    Intent i = new Intent(getActivity(), AddPlaylistActivity.class);
+                    i.putExtra("AudioId", "");
+                    i.putExtra("PlaylistID", modelList.get(position).getID());
+                    startActivity(i);
+                }
+            });
             holder.binding.rlMainLayout.setOnClickListener(view -> {
                 if (modelList.get(position).getIsLock().equalsIgnoreCase("1")) {
                     holder.binding.ivLock.setVisibility(View.VISIBLE);
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.media.AudioAttributes;\r\nimport android.media.AudioManager;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.SystemClock;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Services.OnClearFromRecentService;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.Playable;\r\nimport com.brainwellnessspa.Utility.PlaybackStatus;\r\nimport com.brainwellnessspa.databinding.ActivityPlayWellnessBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity.comeFromAddToQueue;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.addToRecentPlayId;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.ToBackward;\r\nimport static com.brainwellnessspa.Utility.MusicService.ToForward;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isprogressbar;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class PlayWellnessActivity extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener, Playable/*, AudioManager.OnAudioFocusChangeListener, OnProgressListener*/ {\r\n    ActivityPlayWellnessBinding binding;\r\n    String IsRepeat = \"\", IsShuffle = \"\", UserID, PlaylistId = \"\", AudioFlag, id, name, url;\r\n    int startTime = 0, endTime = 0, position, listSize, myCount, progress, downloadPercentage;\r\n    Context ctx;\r\n    Activity activity;\r\n    Boolean queuePlay, audioPlay;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<AddToQueueModel> addToQueueModelList;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList1;\r\n    long myProgress = 0, diff = 0;\r\n    PlaybackStatus playbackStatus;\r\n    BroadcastReceiver broadcastReceiver;\r\n    boolean isPlaying = false;\r\n    private long mLastClickTime = 0, totalDuration, currentDuration = 0;\r\n    private Handler handler;\r\n    //    private Handler handler1;\r\n    //        private AudioManager mAudioManager;\r\n    private Runnable UpdateSongTime = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            Time t = Time.valueOf(\"00:00:00\");\r\n            String endtimetext = \"\";\r\n            if (queuePlay) {\r\n                if (listSize != 0) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (downloadAudioDetailsList.size() != 0) {\r\n                            endtimetext = downloadAudioDetailsList.get(0).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                } else {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    stopMedia();\r\n                }\r\n            } else if (audioPlay) {\r\n                if (listSize != 0) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (downloadAudioDetailsList.size() != 0) {\r\n                            endtimetext = downloadAudioDetailsList.get(0).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else\r\n                    totalDuration = t.getTime();\r\n            } else {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else\r\n                    totalDuration = t.getTime();\r\n            }\r\n            myProgress = currentDuration;\r\n            currentDuration = getStartTime();\r\n            diff = totalDuration - myProgress;\r\n//            Log.e(\"myProgress old!!!\", String.valueOf(myProgress));\r\n            if (myProgress == currentDuration && myProgress != 0 && !isPause && url.equalsIgnoreCase(\"\")) {\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                myCount++;\r\n                Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                if (myCount == 5) {\r\n                    Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                    callComplete();\r\n                    myCount = 0;\r\n                }\r\n            } else if (myProgress == currentDuration && myProgress != 0 && !isPause && diff < 500) {\r\n//                Log.e(\"myProgress\", String.valueOf(myProgress));\r\n                myCount++;\r\n                Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                if (myCount == 10) {\r\n                    Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                    callComplete();\r\n                    myCount = 0;\r\n                }\r\n            }\r\n            if (currentDuration == totalDuration && currentDuration != 0 && !isStop && !url.equalsIgnoreCase(\"\")) {\r\n                callComplete();\r\n            }\r\n            if (currentDuration == totalDuration && currentDuration != 0 && !isStop && isMediaStart && url.equalsIgnoreCase(\"\")) {\r\n                mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                    callComplete();\r\n                    Log.e(\"calll complete real\", \"real\");\r\n                });\r\n            }\r\n            progress = getProgressPercentage(currentDuration, totalDuration);\r\n            if (currentDuration == 0 && isCompleteStop) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n            } else if (currentDuration == 0 && isprogressbar) {\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n            } else if (currentDuration >= 1 && !isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                isprogressbar = false;\r\n            } else if (currentDuration >= 1 && isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                isprogressbar = false;\r\n            }\r\n            //Log.d(\"Progress\", \"\"+progress);\r\n            startTime = getStartTime();\r\n            if (currentDuration == totalDuration && currentDuration != 0 && !isStop) {\r\n                binding.tvStartTime.setText(endtimetext);\r\n            } else if (isPause) {\r\n                binding.simpleSeekbar.setProgress(oTime);\r\n                int timeeee = progressToTimer(oTime, (int) (totalDuration));\r\n                binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                        TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n            } else {\r\n                binding.simpleSeekbar.setProgress(progress);\r\n                binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(startTime),\r\n                        TimeUnit.MILLISECONDS.toSeconds(startTime) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(startTime))));\r\n            }\r\n            binding.simpleSeekbar.setMax(100);\r\n\r\n            // Running this thread after 100 milliseconds\r\n            handler.postDelayed(this, 100);\r\n        }\r\n    };\r\n/*    private Runnable UpdateSongTime1 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n                if (downloadProgress <= 100) {\r\n                    binding.pbProgress.setProgress(downloadProgress);\r\n                    binding.pbProgress.setVisibility(View.VISIBLE);\r\n                    binding.ivDownloads.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.pbProgress.setVisibility(View.GONE);\r\n                    binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                    handler1.removeCallbacks(UpdateSongTime1);\r\n                }\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }\r\n            handler1.postDelayed(this, 500);\r\n        }\r\n    };*/\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n//        overridePendingTransition(R.anim.enter, R.anim.exit);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_play_wellness);\r\n        handler = new Handler();\r\n//        handler1 = new Handler();\r\n        ctx = PlayWellnessActivity.this;\r\n        activity = PlayWellnessActivity.this;\r\n        addToQueueModelList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        downloadAudioDetailsList1 = new ArrayList<>();\r\n        mainPlayModelList = new ArrayList<>();\r\n        MakeArray();\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences Status = getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                1, 1, 0.92f, 0);\r\n        binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n/*        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        callLLMoreViewQClicks();\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        getPrepareShowData(position);\r\n        /*if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }*/\r\n        callRepeatShuffle();\r\n\r\n        broadcastReceiver = new BroadcastReceiver() {\r\n            @Override\r\n            public void onReceive(Context context, Intent intent) {\r\n                String action = intent.getExtras().getString(\"actionname\");\r\n                switch (action) {\r\n                    case BWSApplication.ACTION_PREVIUOS:\r\n                        onTrackPrevious();\r\n                        if (isPlaying) {\r\n                            onTrackPause();\r\n                        } else {\r\n                            onTrackPlay();\r\n                        }\r\n                        break;\r\n                    case BWSApplication.ACTION_PLAY:\r\n                        if (isPlaying) {\r\n                            onTrackPause();\r\n                        } else {\r\n                            onTrackPlay();\r\n                        }\r\n                        break;\r\n                    case BWSApplication.ACTION_NEXT:\r\n                        onTrackNext();\r\n                        if (isPlaying) {\r\n                            onTrackPause();\r\n                        } else {\r\n                            onTrackPlay();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n        BWSApplication.createChannel(ctx);\r\n        registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        startService(new Intent(getBaseContext(), OnClearFromRecentService.class));\r\n\r\n        if (isMediaStart /*&& !audioFile.equalsIgnoreCase(\"\")*/) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete real\", \"real\");\r\n            });\r\n        }\r\n        binding.llBack.setOnClickListener(view -> {\r\n            callBack();\r\n        });\r\n\r\n        binding.llLike.setOnClickListener(view -> {\r\n            callLike();\r\n        });\r\n\r\n        binding.llRepeat.setOnClickListener(view -> callRepeat());\r\n\r\n        binding.llShuffle.setOnClickListener(view -> callShuffle());\r\n\r\n        binding.llDownload.setOnClickListener(view -> {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                callDownload();\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        });\r\n\r\n        binding.llMore.setOnClickListener(view -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            Intent i = new Intent(ctx, AddQueueActivity.class);\r\n            if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                i.putExtra(\"play\", \"TopCategories\");\r\n            } else\r\n                i.putExtra(\"play\", \"play\");\r\n            i.putExtra(\"ID\", id);\r\n            i.putExtra(\"position\", position);\r\n            i.putExtra(\"PlaylistAudioId\", \"\");\r\n            startActivity(i);\r\n//            finish();\r\n        });\r\n\r\n        binding.llViewQueue.setOnClickListener(view -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n//            pauseMedia();\r\n            if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n                isPause = false;\r\n            }\r\n            SharedPreferences ViewQueue = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = ViewQueue.edit();\r\n            Gson gsonx = new Gson();\r\n            String jsonx = gsonx.toJson(addToQueueModelList);\r\n            if (queuePlay) {\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, jsonx);\r\n            }\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, ViewQueueActivity.class);\r\n            i.putExtra(\"ComeFromQueue\", \"0\");\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.llPlay.setOnClickListener(v -> {\r\n            if (isPlaying) {\r\n                onTrackPause();\r\n            } else {\r\n                onTrackPlay();\r\n            }\r\n            if (!isMediaStart) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler.postDelayed(UpdateSongTime, 500);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                callMedia();\r\n            } else if (isCompleteStop) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler.postDelayed(UpdateSongTime, 500);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                callMedia();\r\n            } else {\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                resumeMedia();\r\n                isPause = false;\r\n            }\r\n            handler.postDelayed(UpdateSongTime, 100);\r\n        });\r\n\r\n        binding.llPause.setOnClickListener(view -> {\r\n            if (isPlaying) {\r\n                onTrackPause();\r\n            } else {\r\n                onTrackPlay();\r\n            }\r\n        });\r\n\r\n        binding.llForwardSec.setOnClickListener(v -> {\r\n            ToForward(ctx);\r\n            setProgressBar();\r\n            if (!binding.llPlay.isEnabled()) {\r\n                binding.llPlay.setEnabled(true);\r\n            }\r\n        });\r\n\r\n        binding.llBackWordSec.setOnClickListener(v -> {\r\n            ToBackward(ctx);\r\n            setProgressBar();\r\n            if (!binding.llPlay.isEnabled()) {\r\n                binding.llPlay.setEnabled(true);\r\n            }\r\n        });\r\n\r\n        binding.llnext.setOnClickListener(view -> {\r\n            callNext();\r\n        });\r\n\r\n        binding.llprev.setOnClickListener(view -> {\r\n            callPrevious();\r\n        });\r\n    }\r\n\r\n    private void callPrevious() {\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isPause = false;\r\n        isCompleteStop = false;\r\n        binding.pbProgress.setVisibility(View.GONE);\r\n        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n        if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            // repeat is on play same song again\r\n            if (position > 0) {\r\n                position = position - 1;\r\n                getPrepareShowData(position);\r\n            } else if (listSize != 1) {\r\n                position = listSize - 1;\r\n                getPrepareShowData(position);\r\n            }\r\n        }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            // shuffle is on - play a random song\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        stopMedia();\r\n                    } else {\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                Random random = new Random();\r\n                position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                getPrepareShowData(position);\r\n            }\r\n        } else {\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position > 0) {\r\n                        getPrepareShowData(position - 1);\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                if (position > 0) {\r\n                    position = position - 1;\r\n\r\n                    getPrepareShowData(position);\r\n                } else if (listSize != 1) {\r\n                    position = listSize - 1;\r\n                    getPrepareShowData(position);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callNext() {\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isPause = false;\r\n        isCompleteStop = false;\r\n        binding.pbProgress.setVisibility(View.GONE);\r\n        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n        if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            // repeat is on play same song again\r\n            if (position < listSize - 1) {\r\n                position = position + 1;\r\n            } else {\r\n                position = 0;\r\n            }\r\n            getPrepareShowData(position);\r\n        }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            // shuffle is on - play a random song\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else {\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                Random random = new Random();\r\n                position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                getPrepareShowData(position);\r\n            }\r\n        } else {\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position < listSize - 1) {\r\n                        getPrepareShowData(position);\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                if (position < listSize - 1) {\r\n                    position = position + 1;\r\n                    getPrepareShowData(position);\r\n                } else if (listSize != 1) {\r\n                    position = 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callRepeatShuffle() {\r\n        if (url.equalsIgnoreCase(\"\")) {\r\n            binding.llShuffle.setClickable(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setClickable(false);\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n                if (listSize == 1) {\r\n                    binding.llShuffle.setClickable(false);\r\n                    binding.llShuffle.setEnabled(false);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    binding.llShuffle.setClickable(true);\r\n                    binding.llShuffle.setEnabled(true);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                if (listSize == 1) {\r\n                    binding.llShuffle.setClickable(false);\r\n                    binding.llShuffle.setEnabled(false);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    binding.llShuffle.setClickable(true);\r\n                    binding.llShuffle.setEnabled(true);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            }\r\n            if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n                if (queuePlay) {\r\n                    binding.llRepeat.setEnabled(false);\r\n                    binding.llRepeat.setClickable(false);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    binding.llRepeat.setClickable(true);\r\n                    binding.llRepeat.setEnabled(true);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                if (queuePlay) {\r\n                    binding.llRepeat.setEnabled(false);\r\n                    binding.llRepeat.setClickable(false);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    IsRepeat = \"0\";\r\n                    binding.llRepeat.setClickable(true);\r\n                    binding.llRepeat.setEnabled(true);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                if (queuePlay) {\r\n                    binding.llRepeat.setEnabled(false);\r\n                    binding.llRepeat.setClickable(false);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    if (listSize == 1) {\r\n                        binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                    } else {\r\n                        binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                    }\r\n                    binding.llRepeat.setClickable(true);\r\n                    binding.llRepeat.setEnabled(true);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void setProgressBar() {\r\n        Time t = Time.valueOf(\"00:00:00\");\r\n        String endtimetext = \"\";\r\n        if (queuePlay) {\r\n            if (listSize != 0) {\r\n                endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n            } else {\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                stopMedia();\r\n            }\r\n        } else if (audioPlay) {\r\n            endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n        }\r\n        totalDuration = t.getTime();\r\n        currentDuration = getStartTime();\r\n\r\n        int progress = getProgressPercentage(currentDuration, totalDuration);\r\n        //Log.d(\"Progress\", \"\"+progress);\r\n        startTime = getStartTime();\r\n        if (currentDuration == totalDuration) {\r\n            binding.tvStartTime.setText(endtimetext);\r\n        } else if (isPause) {\r\n            binding.simpleSeekbar.setProgress(progress);\r\n            int timeeee = progressToTimer(progress, (int) (totalDuration));\r\n            binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                    TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        } else {\r\n            binding.simpleSeekbar.setProgress(progress);\r\n            binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(startTime),\r\n                    TimeUnit.MILLISECONDS.toSeconds(startTime) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(startTime))));\r\n        }\r\n    }\r\n\r\n    private void callDownload() {\r\n        if (!url.equalsIgnoreCase(\"\")) {\r\n            disableDownload();\r\n            byte[] EncodeBytes = new byte[1024];\r\n            List<String> url1 = new ArrayList<>();\r\n            List<String> name1 = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url1.addAll(audioFile1);\r\n                    name1.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            url1.add(url);\r\n            name1.add(name);\r\n            downloadPlaylistId.add(\"\");\r\n            if (url1.size() != 0) {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url1);\r\n                String nameJson = gson.toJson(name1);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n            }\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n            downloadMedia.encrypt1(url1, name1, downloadPlaylistId);\r\n\r\n          /*  if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n                handler1.postDelayed(UpdateSongTime1, 500);\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }*/\r\n            binding.pbProgress.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setVisibility(View.GONE);\r\n            SaveMedia(EncodeBytes, FileUtils.getFilePath(getApplicationContext(), name));\r\n   /*     if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<DownloadPlaylistModel> listCall = APIClient.getClient().getDownloadlistPlaylist(UserID, id, PlaylistId);\r\n            listCall.enqueue(new Callback<DownloadPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<DownloadPlaylistModel> call, Response<DownloadPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        DownloadPlaylistModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")\r\n                                || model.getResponseData().getFlag().equalsIgnoreCase(\"\")) {\r\n                            binding.llDownloads.setClickable(true);\r\n                            binding.llDownloads.setEnabled(true);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                            binding.llDownloads.setClickable(false);\r\n                            binding.llDownloads.setEnabled(false);\r\n                        }\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<DownloadPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }*/\r\n        }\r\n    }\r\n\r\n    private void getMediaByPer() {\r\n        class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPercentage = DatabaseClient.getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getDownloadProgress(url, \"\");\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n\r\n                if (downloadAudioDetailsList1.size() != 0) {\r\n                    if (downloadPercentage <= 100) {\r\n                        if (downloadPercentage == 100) {\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        } else {\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            binding.pbProgress.setIndeterminate(false);\r\n                            binding.pbProgress.setProgress(downloadPercentage);\r\n                            getMediaByPer();\r\n//                             handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        getMediaByPer st = new getMediaByPer();\r\n        st.execute();\r\n    }\r\n\r\n    private void SaveMedia(byte[] EncodeBytes, String dirPath) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                if (queuePlay) {\r\n                    downloadAudioDetails.setID(addToQueueModelList.get(position).getID());\r\n                    downloadAudioDetails.setName(addToQueueModelList.get(position).getName());\r\n                    downloadAudioDetails.setAudioFile(addToQueueModelList.get(position).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(addToQueueModelList.get(position).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(addToQueueModelList.get(position).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(addToQueueModelList.get(position).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(addToQueueModelList.get(position).getImageFile());\r\n                    downloadAudioDetails.setLike(addToQueueModelList.get(position).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(addToQueueModelList.get(position).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                } else if (audioPlay) {\r\n                    downloadAudioDetails.setID(mainPlayModelList.get(position).getID());\r\n                    downloadAudioDetails.setName(mainPlayModelList.get(position).getName());\r\n                    downloadAudioDetails.setAudioFile(mainPlayModelList.get(position).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(mainPlayModelList.get(position).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(mainPlayModelList.get(position).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(mainPlayModelList.get(position).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(mainPlayModelList.get(position).getImageFile());\r\n                    downloadAudioDetails.setLike(mainPlayModelList.get(position).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(mainPlayModelList.get(position).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                }\r\n                DatabaseClient.getInstance(getApplicationContext())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                disableDownload();\r\n                GetMedia2();\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void disableDownload() {\r\n        binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        binding.llDownload.setClickable(false);\r\n        binding.llDownload.setEnabled(false);\r\n    }\r\n\r\n    private void callShuffle() {\r\n        if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                IsShuffle = \"1\";\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"1\");\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                editor.commit();\r\n                IsRepeat = \"\";\r\n                if (queuePlay) {\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n//                BWSApplication.showToast(\"Shuffle mode has been turned on\", ctx);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n//            BWSApplication.showToast(\"Shuffle mode has been turned off\", ctx);\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n    }\r\n\r\n    private void callRepeat() {\r\n\r\n        if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"0\");\r\n            if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            }\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            IsRepeat = \"0\";\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n//            BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"1\");\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            IsRepeat = \"1\";\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                IsRepeat = \"\";\r\n//                BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n//                BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            editor.commit();\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n        } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n            IsRepeat = \"\";\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            editor.commit();\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n//            BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n        }\r\n    }\r\n\r\n    private void callLike() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(id, UserID);\r\n            listCall.enqueue(new Callback<AudioLikeModel>() {\r\n                @Override\r\n                public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        AudioLikeModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                        }\r\n                        SharedPreferences sharedxx = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = sharedxx.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        int pos = sharedxx.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        AudioFlag = sharedxx.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        /*if (audioPlay && AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n                            if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n                                SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                 AudioFlag = sharedx.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                Gson gsonx = new Gson();\r\n                                String json = sharedx.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                                Type type1 = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n                                }.getType();\r\n                                Gson gson1 = new Gson();\r\n                                ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson1.fromJson(json, type1);\r\n\r\n                                mainPlayModelList.add(mainPlayModelList.get(position));\r\n\r\n                                SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                SharedPreferences.Editor editor = sharedd.edit();\r\n                                Gson gson = new Gson();\r\n                                String jsonx = gson.toJson(mainPlayModelList);\r\n                                String json1 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"LikeAudioList\");\r\n                                editor.commit();\r\n\r\n                            } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                                SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                AudioFlag = sharedx.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                Gson gsonx = new Gson();\r\n                                String json = sharedx.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                                }.getType();\r\n                                ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();\r\n                                mainPlayModelListold = gsonx.fromJson(json, type);\r\n                                String id = mainPlayModelListold.get(pos).getID();\r\n                                Type type1 = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n                                }.getType();\r\n                                Gson gson1 = new Gson();\r\n                                ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson1.fromJson(json, type1);\r\n                                int x = 0;\r\n                                for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                    if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {\r\n                                        x++;\r\n                                    }if(x== 0) {\r\n                                        if (audioPlay) {\r\n                                            LikesHistoryModel.ResponseData.Audio mainPlayModel = new LikesHistoryModel.ResponseData.Audio();\r\n                                            mainPlayModel.setID(mainPlayModelList.get(position).getID());\r\n                                            mainPlayModel.setName(mainPlayModelList.get(position).getName());\r\n                                            mainPlayModel.setAudioFile(mainPlayModelList.get(position).getAudioFile());\r\n                                            mainPlayModel.setAudioDirection(mainPlayModelList.get(position).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(mainPlayModelList.get(position).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(mainPlayModelList.get(position).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(mainPlayModelList.get(position).getImageFile());\r\n                                            mainPlayModel.setLike(mainPlayModelList.get(position).getLike());\r\n                                            mainPlayModel.setDownload(mainPlayModelList.get(position).getDownload());\r\n                                            mainPlayModel.setAudioDuration(mainPlayModelList.get(position).getAudioDuration());\r\n                                            arrayList.add(mainPlayModel);\r\n                                        } else if (queuePlay) {\r\n                                            LikesHistoryModel.ResponseData.Audio mainPlayModel = new LikesHistoryModel.ResponseData.Audio();\r\n                                            mainPlayModel.setID(addToQueueModelList.get(position).getID());\r\n                                            mainPlayModel.setName(addToQueueModelList.get(position).getName());\r\n                                            mainPlayModel.setAudioFile(addToQueueModelList.get(position).getAudioFile());\r\n                                            mainPlayModel.setAudioDirection(addToQueueModelList.get(position).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(addToQueueModelList.get(position).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(addToQueueModelList.get(position).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(addToQueueModelList.get(position).getImageFile());\r\n                                            mainPlayModel.setLike(addToQueueModelList.get(position).getLike());\r\n                                            mainPlayModel.setDownload(addToQueueModelList.get(position).getDownload());\r\n                                            mainPlayModel.setAudioDuration(addToQueueModelList.get(position).getAudioDuration());\r\n                                            arrayList.add(mainPlayModel);\r\n                                        }\r\n                                        mainPlayModelList.add(mainPlayModelList.get(position));\r\n                                    }\r\n                                }\r\n                                SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                SharedPreferences.Editor editor = sharedd.edit();\r\n                                Gson gson = new Gson();\r\n                                String jsonx = gson.toJson(mainPlayModelList);\r\n                                String json1 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"LikeAudioList\");\r\n                                editor.commit();\r\n                            }\r\n                        }*/\r\n                        SharedPreferences sharedq = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        AudioFlag = sharedq.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        Gson gsonq = new Gson();\r\n                        String jsonq = sharedq.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gsonq));\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        if (audioPlay) {\r\n                            if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n                                Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n                                }.getType();\r\n                                ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n                                Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n                                }.getType();\r\n                                ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n                                Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n                                }.getType();\r\n                                ArrayList<SearchBothModel.ResponseData> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n                                Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n                                }.getType();\r\n                                ArrayList<SuggestedModel.ResponseData> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                                Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n                                }.getType();\r\n                                ArrayList<AppointmentDetailModel.Audio> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n                                Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n                                }.getType();\r\n                                ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n                                Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n                                }.getType();\r\n                                ArrayList<DownloadAudioDetails> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n                                Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n                                }.getType();\r\n                                ArrayList<DownloadAudioDetails> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                                Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n                                }.getType();\r\n                                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                                Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n                                }.getType();\r\n                                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            }\r\n                        }\r\n                        if (queuePlay) {\r\n                            addToQueueModelList.get(position).setLike(model.getResponseData().getFlag());\r\n                        } else\r\n                            mainPlayModelList.get(position).setLike(model.getResponseData().getFlag());\r\n\r\n                        String json = gson.toJson(mainPlayModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                        if (queuePlay) {\r\n                            String json1 = gson.toJson(addToQueueModelList);\r\n                            editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n                        }\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                        editor.commit();\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AudioLikeModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void addToRecentPlay() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public void GetMedia() {\r\n\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(url);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (isPause) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n                    int timeeee = progressToTimer(oTime, (int) (totalDuration));\r\n                    binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                            TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n//                    resumeMedia();\r\n                } else if (isCompleteStop) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                } else if (isMediaStart && !isPause) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                    binding.progressBar.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    callMedia();\r\n                }\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public void GetMedia2() {\r\n\r\n        downloadAudioDetailsList1 = new ArrayList<>();\r\n\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList1 = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getaudioByPlaylist(url, \"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (!url.equalsIgnoreCase(\"\")) {\r\n                    if (downloadAudioDetailsList1.size() != 0) {\r\n                        if (downloadAudioDetailsList1.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                            binding.llDownload.setClickable(false);\r\n                            binding.llDownload.setEnabled(false);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                        } else/* if (!mainPlayModelList.get(position).getDownload().equalsIgnoreCase(\"\")) */ {\r\n                            binding.llDownload.setClickable(true);\r\n                            binding.llDownload.setEnabled(true);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                        }\r\n                    } else/* if (!mainPlayModelList.get(position).getDownload().equalsIgnoreCase(\"\")) */ {\r\n                        binding.llDownload.setClickable(true);\r\n                        binding.llDownload.setEnabled(true);\r\n                        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n                        binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                    }\r\n                }\r\n\r\n                getMediaByPer();\r\n\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void getPrepareShowData(int position) {\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        if (queuePlay) {\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setClickable(false);\r\n        }\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n        } else if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n        }\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.llShuffle.setClickable(false);\r\n            IsShuffle = \"\";\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }*/ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llShuffle.setEnabled(true);\r\n            binding.llnext.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.llShuffle.setClickable(true);\r\n            if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n            if (listSize == 1) {\r\n                position = 0;\r\n            }\r\n            if (listSize != 0) {\r\n                id = addToQueueModelList.get(position).getID();\r\n                name = addToQueueModelList.get(position).getName();\r\n                url = addToQueueModelList.get(position).getAudioFile();\r\n                binding.tvName.setText(addToQueueModelList.get(position).getName());\r\n                binding.tvDireName.setText(R.string.Directions);\r\n                binding.tvDireName.setText(R.string.Directions);\r\n                if (addToQueueModelList.get(position).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                    binding.llDirection.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.llDirection.setVisibility(View.VISIBLE);\r\n                    binding.tvDireDesc.setText(addToQueueModelList.get(position).getAudioDirection());\r\n                }\r\n                binding.tvTitle.setText(addToQueueModelList.get(position).getAudiomastercat());\r\n                binding.tvDesc.setText(addToQueueModelList.get(position).getAudioSubCategory());\r\n                if (addToQueueModelList.get(position).getPlaylistID() == null) {\r\n                    addToQueueModelList.get(position).setPlaylistID(\"\");\r\n                }\r\n                Glide.with(getApplicationContext()).load(addToQueueModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                } else if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                }\r\n                binding.tvSongTime.setText(addToQueueModelList.get(position).getAudioDuration());\r\n                GetMedia();\r\n                GetMedia2();\r\n            }\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            startTime = getStartTime();\r\n\r\n        } else if (audioPlay) {\r\n            try {\r\n                listSize = mainPlayModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = mainPlayModelList.get(position).getID();\r\n                    name = mainPlayModelList.get(position).getName();\r\n                    url = mainPlayModelList.get(position).getAudioFile();\r\n                    if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n                        isDisclaimer = 1;\r\n                        callAllDisable(false);\r\n                        binding.tvNowPlaying.setText(\"\");\r\n                    } else {\r\n                        binding.tvNowPlaying.setText(R.string.NOW_PLAYING_FROM);\r\n                        isDisclaimer = 0;\r\n                        callAllDisable(true);\r\n                    }\r\n                    if (mainPlayModelList.get(position).getPlaylistID() == null) {\r\n                        mainPlayModelList.get(position).setPlaylistID(\"\");\r\n                    }\r\n                    binding.tvName.setText(mainPlayModelList.get(position).getName());\r\n                    if (mainPlayModelList.get(position).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                        binding.llDirection.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llDirection.setVisibility(View.VISIBLE);\r\n                        binding.tvDireDesc.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                    }\r\n                    binding.tvTitle.setText(mainPlayModelList.get(position).getAudiomastercat());\r\n                    binding.tvDesc.setText(mainPlayModelList.get(position).getAudioSubCategory());\r\n                    if (url.equalsIgnoreCase(\"\")) {\r\n                        Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    } else {\r\n                        /*TODO */\r\n                        Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    }\r\n                    if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                        binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                    } else if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                        binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                    }\r\n                    binding.tvSongTime.setText(mainPlayModelList.get(position).getAudioDuration());\r\n                    GetMedia();\r\n                    GetMedia2();\r\n                }\r\n//                BWSApplication.simple_Notification(playbackStatus, mainPlayModelList, PlayWellnessActivity.this, position, PlayWellnessActivity.this);\r\n                startTime = getStartTime();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n/*        if (isMediaStart && url.equalsIgnoreCase(\"\")) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete real\",\"real\");\r\n            });\r\n        }*/\r\n     /*   if (isMediaStart && !url.equalsIgnoreCase(\"\")) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete trans\",\"trans\");\r\n            });\r\n        }*/\r\n        getMediaByPer();\r\n        if (!url.equalsIgnoreCase(\"\")) {\r\n            if (!id.equalsIgnoreCase(addToRecentPlayId)) {\r\n                addToRecentPlay();\r\n                Log.e(\"Api call recent\", id);\r\n            }\r\n        }\r\n        addToRecentPlayId = id;\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n\r\n        BWSApplication.createChannel(ctx);\r\n        registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        startService(new Intent(getBaseContext(), OnClearFromRecentService.class));\r\n    }\r\n\r\n    private void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if (download.equalsIgnoreCase(\"2\")) {\r\n            mediaPlayer = MediaPlayer.create(ctx, R.raw.brain_wellness_spa_declaimer);\r\n            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\r\n//            Uri uri = Uri.parse(\"android.resource://com.brainwellnessspa/\" + R.raw.brain_wellness_spa_declaimer);\r\n//            mediaPlayer.setDataSource(String.valueOf(uri));\r\n            mediaPlayer.start();\r\n            isPrepare = true;\r\n            isMediaStart = true;\r\n        } else {\r\n            if (null == mediaPlayer) {\r\n                mediaPlayer = new MediaPlayer();\r\n                Log.e(\"Playinggggg\", \"Playinggggg\");\r\n            }\r\n            try {\r\n                if (mediaPlayer == null)\r\n                    mediaPlayer = new MediaPlayer();\r\n                if (mediaPlayer.isPlaying()) {\r\n                    Log.e(\"Playinggggg\", \"stoppppp\");\r\n                    mediaPlayer.stop();\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                    isPause = false;\r\n                }\r\n                mediaPlayer = new MediaPlayer();\r\n                if (download.equalsIgnoreCase(\"1\")) {\r\n                    mediaPlayer.setDataSource(fileDescriptor);\r\n                } else {\r\n                    mediaPlayer.setDataSource(url);\r\n                }\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                    mediaPlayer.setAudioAttributes(\r\n                            new AudioAttributes\r\n                                    .Builder()\r\n                                    .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                    .build());\r\n                }\r\n                mediaPlayer.prepareAsync();\r\n                isPause = false;\r\n                isPrepare = true;\r\n            } catch (IllegalStateException | IOException e) {\r\n                FileDescriptor fileDescriptor1 = null;\r\n                setMediaPlayer(\"0\", fileDescriptor1);\r\n                e.printStackTrace();\r\n            }\r\n            if (!mediaPlayer.isPlaying()) {\r\n                mediaPlayer.setOnPreparedListener(mp -> {\r\n                    Log.e(\"Playinggggg\", \"Startinggg\");\r\n                    mediaPlayer.start();\r\n                    isMediaStart = true;\r\n                    isprogressbar = false;\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callMedia() {\r\n        FileDescriptor fileDescriptor = null;\r\n        if (url.equalsIgnoreCase(\"\")) {\r\n            setMediaPlayer(\"2\", fileDescriptor);\r\n\r\n        } else {\r\n            if (downloadAudioDetailsList.size() != 0) {\r\n                isprogressbar = true;\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                isPause = false;\r\n                DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n                getDownloadMedia(downloadMedia);\r\n\r\n            } else {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    isprogressbar = true;\r\n                    binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                    binding.progressBar.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    setMediaPlayer(\"0\", fileDescriptor);\r\n                } else {\r\n                    isprogressbar = false;\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getDownloadMedia(DownloadMedia downloadMedia) {\r\n        class getDownloadMedia extends AsyncTask<Void, Void, Void> {\r\n            FileDescriptor fileDescriptor = null;\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                try {\r\n                    byte[] decrypt = null;\r\n                    decrypt = downloadMedia.decrypt(name);\r\n                    if (decrypt != null) {\r\n                        fileDescriptor = FileUtils.getTempFileDescriptor(getApplicationContext(), decrypt);\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (fileDescriptor != null) {\r\n                    setMediaPlayer(\"1\", fileDescriptor);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        setMediaPlayer(\"0\", fileDescriptor);\r\n                    } else {\r\n                        isprogressbar = false;\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getDownloadMedia st = new getDownloadMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callComplete() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        isPause = false;\r\n        if (audioPlay && (url.equalsIgnoreCase(\"\") || url.isEmpty())) {\r\n            isDisclaimer = 0;\r\n            binding.tvNowPlaying.setText(\"\");\r\n            removeArray();\r\n        } else {\r\n            binding.tvNowPlaying.setText(R.string.NOW_PLAYING_FROM);\r\n            if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                if (position < (listSize - 1)) {\r\n                    position = position + 1;\r\n                } else {\r\n                    position = 0;\r\n                }\r\n                getPrepareShowData(position);\r\n            } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    } catch (Exception e) {\r\n                    }\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        binding.pbProgressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        binding.pbProgressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    if (listSize == 1) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    } catch (Exception e) {\r\n                    }\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position < listSize - 1) {\r\n                        getPrepareShowData(position);\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            binding.llProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (position < (listSize - 1)) {\r\n                        int oldPosition = position;\r\n                        position = position + 1;\r\n                        if (oldPosition == position) {\r\n                            position++;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    } else {\r\n                        if (listSize == 1) {\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            binding.llProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            binding.llProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llnext.setEnabled(false);\r\n                binding.llnext.setClickable(false);\r\n                binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llprev.setEnabled(false);\r\n                binding.llprev.setClickable(false);\r\n                binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }*/ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llnext.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        callRepeatShuffle();\r\n        BWSApplication.createChannel(ctx);\r\n        registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        startService(new Intent(getBaseContext(), OnClearFromRecentService.class));\r\n    }\r\n\r\n    private void removeArray() {\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        MainPlayModel mainPlayModel;\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json1, type);\r\n\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }\r\n        MakeArray();\r\n    }\r\n\r\n    private void MakeArray() {\r\n        Gson gson = new Gson();\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        MainPlayModel mainPlayModel;\r\n        mainPlayModelList = new ArrayList<>();\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        String json2 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json2.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json2, type1);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n//            if (isDisclaimer == 0 && disclaimerPlayed == 0) {\r\n//                addDeclaimer();\r\n//            }\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json1 = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        }\r\n    }\r\n\r\n  /*  private void MakeArray2() {\r\n        Gson gson = new Gson();\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        mainPlayModelList = new ArrayList<>();\r\n        MainPlayModel mainPlayModel;\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }\r\n    }*/\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callBack();\r\n    }\r\n\r\n    private void callBack() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n//        handler1.removeCallbacks(UpdateSongTime1);\r\n        player = 1;\r\n        if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n            isPause = false;\r\n        }\r\n//        pauseMedia();\r\n        SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared2.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(addToQueueModelList);\r\n        if (queuePlay) {\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n        }\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        finish();\r\n//        overridePendingTransition(R.anim.enter, R.anim.exit);\r\n    }\r\n\r\n    private void addDeclaimer() {\r\n        MainPlayModel mainPlayModel = new MainPlayModel();\r\n        mainPlayModel.setID(\"0\");\r\n        mainPlayModel.setName(\"Disclaimer\");\r\n        mainPlayModel.setAudioFile(\"\");\r\n        mainPlayModel.setPlaylistID(\"\");\r\n        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n        mainPlayModel.setAudiomastercat(\"\");\r\n        mainPlayModel.setAudioSubCategory(\"\");\r\n        mainPlayModel.setImageFile(\"\");\r\n        mainPlayModel.setLike(\"\");\r\n        mainPlayModel.setDownload(\"\");\r\n        mainPlayModel.setAudioDuration(\"0:48\");\r\n        mainPlayModelList.add(mainPlayModel);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n//        BWSApplication.notificationManager.cancelAll();\r\n//        unregisterReceiver(broadcastReceiver);\r\n//        releasePlayer();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = gson.fromJson(json, type);\r\n        callLLMoreViewQClicks();\r\n\r\n        /*if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }*/\r\n        GetMedia2();\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (queuePlay) {\r\n            position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            listSize = addToQueueModelList.size();\r\n            if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n            } else if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n            }\r\n        } else if (audioPlay) {\r\n            position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            listSize = mainPlayModelList.size();\r\n            if (listSize != 0) {\r\n                if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                } else if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                }\r\n                url = mainPlayModelList.get(position).getAudioFile();\r\n            }\r\n            if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n                isDisclaimer = 1;\r\n                callAllDisable(false);\r\n                binding.tvNowPlaying.setText(\"\");\r\n            } else {\r\n                binding.tvNowPlaying.setText(R.string.NOW_PLAYING_FROM);\r\n                isDisclaimer = 0;\r\n                callAllDisable(true);\r\n            }\r\n        }\r\n        if (comeFromAddToQueue) {\r\n            getPrepareShowData(position);\r\n            comeFromAddToQueue = false;\r\n        }\r\n        if (listSize == 1) {\r\n            position = 0;\r\n        }\r\n        SharedPreferences Status = getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n        callRepeatShuffle();\r\n       /* if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if ((isMediaStart && isPlaying()) && !isPause) {\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.VISIBLE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        } else {\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        }*/\r\n        super.onResume();\r\n    }\r\n\r\n    private void callLLMoreViewQClicks() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llMore.setClickable(true);\r\n                binding.llMore.setEnabled(true);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llViewQueue.setClickable(true);\r\n                binding.llViewQueue.setEnabled(true);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n    }\r\n\r\n\r\n    private void callAllDisable(boolean b) {\r\n        if (b) {\r\n            binding.llnext.setClickable(true);\r\n            binding.llnext.setEnabled(true);\r\n            binding.llnext.setAlpha(1f);\r\n            binding.llprev.setClickable(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llprev.setAlpha(1f);\r\n            binding.llForwardSec.setClickable(true);\r\n            binding.llForwardSec.setEnabled(true);\r\n            binding.llForwardSec.setAlpha(1f);\r\n            binding.llBackWordSec.setClickable(true);\r\n            binding.llBackWordSec.setEnabled(true);\r\n            binding.llBackWordSec.setAlpha(1f);\r\n            binding.llDownload.setClickable(true);\r\n            binding.llDownload.setEnabled(true);\r\n            binding.llDownload.setAlpha(1f);\r\n            binding.llRepeat.setClickable(true);\r\n            binding.llRepeat.setEnabled(true);\r\n            binding.llRepeat.setAlpha(1f);\r\n            binding.llShuffle.setClickable(true);\r\n            binding.llShuffle.setEnabled(true);\r\n            binding.llShuffle.setAlpha(1f);\r\n            binding.llLike.setClickable(true);\r\n            binding.llLike.setEnabled(true);\r\n            binding.llLike.setAlpha(1f);\r\n            binding.rlSeekbar.setClickable(true);\r\n            binding.rlSeekbar.setEnabled(true);\r\n            binding.simpleSeekbar.setClickable(true);\r\n            binding.simpleSeekbar.setEnabled(true);\r\n            callLLMoreViewQClicks();\r\n//            binding.simpleSeekbar.set\r\n        } else {\r\n            binding.llnext.setClickable(false);\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setAlpha(0.6f);\r\n            binding.llprev.setClickable(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setAlpha(0.6f);\r\n            binding.llForwardSec.setClickable(false);\r\n            binding.llForwardSec.setEnabled(false);\r\n            binding.llForwardSec.setAlpha(0.6f);\r\n            binding.llBackWordSec.setClickable(false);\r\n            binding.llBackWordSec.setEnabled(false);\r\n            binding.llBackWordSec.setAlpha(0.6f);\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.llMore.setAlpha(0.6f);\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.llViewQueue.setAlpha(0.6f);\r\n            binding.llDownload.setClickable(false);\r\n            binding.llDownload.setEnabled(false);\r\n            binding.llDownload.setAlpha(0.6f);\r\n            binding.llRepeat.setClickable(false);\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setAlpha(0.6f);\r\n            binding.llShuffle.setClickable(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.llShuffle.setAlpha(0.6f);\r\n            binding.llLike.setClickable(false);\r\n            binding.llLike.setEnabled(false);\r\n            binding.llLike.setAlpha(0.6f);\r\n            binding.rlSeekbar.setClickable(false);\r\n            binding.rlSeekbar.setEnabled(false);\r\n            binding.simpleSeekbar.setClickable(false);\r\n            binding.simpleSeekbar.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n     /*   handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void onPointerCaptureChanged(boolean hasCapture) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPrevious() {\r\n        if (!url.equalsIgnoreCase(\"\")) {\r\n            isPlaying = false;\r\n            callPrevious();\r\n        }\r\n\r\n        BWSApplication.createChannel(ctx);\r\n        registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        startService(new Intent(getBaseContext(), OnClearFromRecentService.class));\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPlay() {\r\n        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n        if (!isMediaStart) {\r\n            isCompleteStop = false;\r\n            isprogressbar = true;\r\n            handler.postDelayed(UpdateSongTime, 500);\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.VISIBLE);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            callMedia();\r\n        } else if (isCompleteStop) {\r\n            isCompleteStop = false;\r\n            isprogressbar = true;\r\n            handler.postDelayed(UpdateSongTime, 500);\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.VISIBLE);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            callMedia();\r\n        } else {\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.VISIBLE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            resumeMedia();\r\n            isPause = false;\r\n        }\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n        isPlaying = true;\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPause() {\r\n        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n                R.drawable.ic_play_arrow_black_24dp, position, mainPlayModelList.size() - 1);\r\n        isPlaying = false;\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n        pauseMedia();\r\n        binding.llProgressBar.setVisibility(View.GONE);\r\n        binding.progressBar.setVisibility(View.GONE);\r\n        binding.llPlay.setVisibility(View.VISIBLE);\r\n        binding.llPause.setVisibility(View.GONE);\r\n        oTime = binding.simpleSeekbar.getProgress();\r\n    }\r\n\r\n    @Override\r\n    public void onTrackNext() {\r\n        if (!url.equalsIgnoreCase(\"\")) {\r\n            isPlaying = false;\r\n            callNext();\r\n        }\r\n        BWSApplication.createChannel(ctx);\r\n        registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        startService(new Intent(getBaseContext(), OnClearFromRecentService.class));\r\n    }\r\n\r\n /*   @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n                resumeMedia();\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if (isMediaStart) {\r\n                    pauseMedia();\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }*/\r\n\r\n/*    @Override\r\n    public void onProgress(Progress progress) {\r\n        if(!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)){\r\n            handler.postDelayed(UpdateSongTime1, 10);\r\n        }else{\r\n            handler.removeCallbacks(UpdateSongTime1);\r\n        }\r\n    }*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java	(revision d0cefdc463a16463694b167a71535edcc6bedfb3)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java	(date 1605098298720)
@@ -1291,14 +1291,10 @@
     }
 
     public void GetMedia() {
-
         downloadAudioDetailsList = new ArrayList<>();
-
         class GetMedia extends AsyncTask<Void, Void, Void> {
-
             @Override
             protected Void doInBackground(Void... voids) {
-
                 downloadAudioDetailsList = DatabaseClient
                         .getInstance(ctx)
                         .getaudioDatabase()
@@ -1345,14 +1341,10 @@
     }
 
     public void GetMedia2() {
-
         downloadAudioDetailsList1 = new ArrayList<>();
-
         class GetMedia extends AsyncTask<Void, Void, Void> {
-
             @Override
             protected Void doInBackground(Void... voids) {
-
                 downloadAudioDetailsList1 = DatabaseClient
                         .getInstance(ctx)
                         .getaudioDatabase()
@@ -1383,11 +1375,8 @@
                         binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);
                     }
                 }
-
                 getMediaByPer();
-
                 super.onPostExecute(aVoid);
-
             }
         }
         GetMedia st = new GetMedia();
@@ -1631,6 +1620,8 @@
     }
 
     private void callMedia() {
+        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),
+                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);
         FileDescriptor fileDescriptor = null;
         if (url.equalsIgnoreCase("")) {
             setMediaPlayer("2", fileDescriptor);
@@ -3002,7 +2993,8 @@
             isPause = false;
         }
         handler.postDelayed(UpdateSongTime, 100);
-        binding.tvTitle.setText(mainPlayModelList.get(position).getName());
+        binding.tvTitle.setText(mainPlayModelList.get(position).getAudiomastercat());
+        binding.tvName.setText(mainPlayModelList.get(position).getName());
         isPlaying = true;
     }
 
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/LibraryAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.BigBoxLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class LibraryAdapter extends RecyclerView.Adapter<LibraryAdapter.MyViewHolder> {\r\n    Context ctx;\r\n    int index = -1;\r\n    FragmentActivity activity;\r\n    String IsLock, HomeView;\r\n    private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;\r\n\r\n    public LibraryAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,\r\n                          String IsLock, String HomeView) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.activity = activity;\r\n        this.IsLock = IsLock;\r\n        this.HomeView = HomeView;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        BigBoxLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.big_box_layout, parent, false);\r\n        return new MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 16,\r\n                1, 1, 0.44f, 10);\r\n        holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        holder.binding.tvAddToPlaylist.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.tvAddToPlaylist.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n\r\n        if(index == position){\r\n            holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n        }else\r\n        holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n        holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n        holder.binding.llMainLayout.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View v) {\r\n                holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n                index = position;\r\n                notifyDataSetChanged();\r\n                return true;\r\n            }\r\n        });\r\n        holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                i.putExtra(\"AudioId\", listModelList.get(position).getID());\r\n                i.putExtra(\"PlaylistID\", \"\");\r\n                ctx.startActivity(i);\r\n            }\r\n        });\r\n\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n//       TODO                 Active and cancelled = 0, InActive = 1, Suspeded = 2\r\n            SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            if (queuePlay) {\r\n                int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                Gson gson = new Gson();\r\n                String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                    }.getType();\r\n                    addToQueueModelList = gson.fromJson(json1, type1);\r\n                }\r\n                addToQueueModelList.remove(position1);\r\n                SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared2.edit();\r\n                String json = gson.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                editor.commit();\r\n            }\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callnewTrans(position);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    ctx.startActivity(i);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callnewTrans(position);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n                callnewTrans(position);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callnewTrans(int position) {\r\n\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        String MyPlaylist = shared.getString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        if (audioPlay && AudioFlag.equalsIgnoreCase(\"MainAudioList\") && MyPlaylist.equalsIgnoreCase(HomeView)) {\r\n            if (isDisclaimer == 1) {\r\n                BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n            } else {\r\n                callTransFrag(position, listModelList);\r\n            }\r\n        } else {\r\n            isDisclaimer = 0;\r\n            disclaimerPlayed = 0;\r\n            ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n            MainAudioModel.ResponseData.Detail mainPlayModel = new MainAudioModel.ResponseData.Detail();\r\n            mainPlayModel.setID(\"0\");\r\n            mainPlayModel.setName(\"Disclaimer\");\r\n            mainPlayModel.setAudioFile(\"\");\r\n            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n            mainPlayModel.setAudiomastercat(\"\");\r\n            mainPlayModel.setAudioSubCategory(\"\");\r\n            mainPlayModel.setImageFile(\"\");\r\n            mainPlayModel.setLike(\"\");\r\n            mainPlayModel.setDownload(\"\");\r\n            mainPlayModel.setAudioDuration(\"0:48\");\r\n            listModelList2.addAll(listModelList);\r\n            listModelList2.add(position, mainPlayModel);\r\n            callTransFrag(position, listModelList2);\r\n        }\r\n    }\r\n\r\n    private void callTransFrag(int position, ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {\r\n        try {\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n\r\n\r\n            /*Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();*/\r\n\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, HomeView);\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"MainAudioList\");\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            ctx.startActivity(i);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (4 > listModelList.size()) {\r\n            return listModelList.size();\r\n        } else {\r\n            return 4;\r\n        }\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        BigBoxLayoutBinding binding;\r\n\r\n        public MyViewHolder(BigBoxLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/LibraryAdapter.java	(revision d0cefdc463a16463694b167a71535edcc6bedfb3)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/LibraryAdapter.java	(date 1605078915253)
@@ -95,10 +95,10 @@
             holder.binding.ivLock.setVisibility(View.GONE);
         }
 
-        if(index == position){
+        if (index == position) {
             holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);
-        }else
-        holder.binding.tvAddToPlaylist.setVisibility(View.GONE);
+        } else
+            holder.binding.tvAddToPlaylist.setVisibility(View.GONE);
         holder.binding.tvAddToPlaylist.setText("Add To Playlist");
         holder.binding.llMainLayout.setOnLongClickListener(new View.OnLongClickListener() {
             @Override
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/PopularPlayedAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.databinding.SmallBoxLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\n\r\n\r\npublic class PopularPlayedAdapter extends RecyclerView.Adapter<PopularPlayedAdapter.MyViewHolder> {\r\n    Context ctx;\r\n    FragmentActivity activity;\r\n    String IsLock,HomeView;\r\n    int index = -1;\r\n    private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;\r\n\r\n    public PopularPlayedAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,\r\n                                String IsLock,String HomeView) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.activity = activity;\r\n        this.IsLock = IsLock;\r\n        this.HomeView = HomeView;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        SmallBoxLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.small_box_layout, parent, false);\r\n        return new MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 16,\r\n                1, 1, 0.28f, 10);\r\n        holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        holder.binding.tvAddToPlaylist.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.tvAddToPlaylist.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n\r\n        if(index == position){\r\n            holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n        }else\r\n            holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n        holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n        holder.binding.llMainLayout.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View v) {\r\n                holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n                index = position;\r\n                notifyDataSetChanged();\r\n                return true;\r\n            }\r\n        });\r\n        holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                i.putExtra(\"AudioId\", listModelList.get(position).getID());\r\n                i.putExtra(\"PlaylistID\", \"\");\r\n                ctx.startActivity(i);\r\n            }\r\n        });\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n//       TODO                 Active and cancelled = 0, InActive = 1, Suspeded = 2\r\n            SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            if (queuePlay) {\r\n                int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                Gson gson = new Gson();\r\n                String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                    }.getType();\r\n                    addToQueueModelList = gson.fromJson(json1, type1);\r\n                }\r\n                addToQueueModelList.remove(position1);\r\n                SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared2.edit();\r\n                String json = gson.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                editor.commit();\r\n            }\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n\r\n                    callnewTrans(position);\r\n\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    ctx.startActivity(i);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callnewTrans(position);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callnewTrans(position);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callnewTrans(int position) {\r\n\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        String MyPlaylist = shared.getString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        if (audioPlay && AudioFlag.equalsIgnoreCase(\"MainAudioList\") && MyPlaylist.equalsIgnoreCase(HomeView)) {\r\n            if (isDisclaimer == 1) {\r\n                BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n            } else {\r\n                callTransFrag(position, listModelList);\r\n            }\r\n        } else {\r\n            isDisclaimer = 0;\r\n            disclaimerPlayed = 0;\r\n            ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n            MainAudioModel.ResponseData.Detail mainPlayModel = new MainAudioModel.ResponseData.Detail();\r\n            mainPlayModel.setID(\"0\");\r\n            mainPlayModel.setName(\"Disclaimer\");\r\n            mainPlayModel.setAudioFile(\"\");\r\n            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n            mainPlayModel.setAudiomastercat(\"\");\r\n            mainPlayModel.setAudioSubCategory(\"\");\r\n            mainPlayModel.setImageFile(\"\");\r\n            mainPlayModel.setLike(\"\");\r\n            mainPlayModel.setDownload(\"\");\r\n            mainPlayModel.setAudioDuration(\"0:48\");\r\n            listModelList2.addAll(listModelList);\r\n            listModelList2.add(position, mainPlayModel);\r\n            callTransFrag(position, listModelList2);\r\n        }\r\n    }\r\n\r\n    private void callTransFrag(int position,ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {\r\n        try {\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                MusicService.stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n            /*Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();*/\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, HomeView);\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"MainAudioList\");\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            ctx.startActivity(i);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (6 > listModelList.size()) {\r\n            return listModelList.size();\r\n        } else {\r\n            return 6;\r\n        }\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        SmallBoxLayoutBinding binding;\r\n\r\n        public MyViewHolder(SmallBoxLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/PopularPlayedAdapter.java	(revision d0cefdc463a16463694b167a71535edcc6bedfb3)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/PopularPlayedAdapter.java	(date 1605079125694)
@@ -45,12 +45,12 @@
 public class PopularPlayedAdapter extends RecyclerView.Adapter<PopularPlayedAdapter.MyViewHolder> {
     Context ctx;
     FragmentActivity activity;
-    String IsLock,HomeView;
+    String IsLock, HomeView;
     int index = -1;
     private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;
 
     public PopularPlayedAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,
-                                String IsLock,String HomeView) {
+                                String IsLock, String HomeView) {
         this.listModelList = listModelList;
         this.ctx = ctx;
         this.activity = activity;
@@ -97,9 +97,9 @@
             holder.binding.ivLock.setVisibility(View.GONE);
         }
 
-        if(index == position){
+        if (index == position) {
             holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);
-        }else
+        } else
             holder.binding.tvAddToPlaylist.setVisibility(View.GONE);
         holder.binding.tvAddToPlaylist.setText("Add To Playlist");
         holder.binding.llMainLayout.setOnLongClickListener(new View.OnLongClickListener() {
@@ -165,7 +165,7 @@
                 }
             } else if (IsLock.equalsIgnoreCase("0") || IsLock.equalsIgnoreCase("")) {
                 holder.binding.ivLock.setVisibility(View.GONE);
-                    callnewTrans(position);
+                callnewTrans(position);
             }
         });
     }
@@ -203,7 +203,7 @@
         }
     }
 
-    private void callTransFrag(int position,ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {
+    private void callTransFrag(int position, ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {
         try {
             player = 1;
             if (isPrepare || isMediaStart || isPause) {
diff --git app/release/output-metadata.json app/release/output-metadata.json
