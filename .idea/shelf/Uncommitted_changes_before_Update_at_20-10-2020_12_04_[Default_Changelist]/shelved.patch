Index: app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutPaymentActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.MembershipModule.Activities;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Paint;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.Spannable;\r\nimport android.text.TextWatcher;\r\nimport android.text.style.ReplacementSpan;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.ImageView;\r\nimport android.widget.NumberPicker;\r\nimport android.widget.TextView;\r\n\r\nimport com.brainwellnessspa.AddPayment.AddPaymentActivity;\r\nimport com.brainwellnessspa.AddPayment.Model.AddCardModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityCheckoutPaymentBinding;\r\nimport com.brainwellnessspa.databinding.YeardialogBinding;\r\nimport com.stripe.android.Stripe;\r\nimport com.stripe.android.TokenCallback;\r\nimport com.stripe.android.model.Card;\r\nimport com.stripe.android.model.Token;\r\n\r\nimport java.util.Calendar;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.MembershipModule.Adapters.MembershipPlanAdapter.planFlag;\r\nimport static com.brainwellnessspa.MembershipModule.Adapters.MembershipPlanAdapter.planId;\r\nimport static com.brainwellnessspa.MembershipModule.Adapters.MembershipPlanAdapter.price;\r\n\r\npublic class CheckoutPaymentActivity extends AppCompatActivity {\r\n    ActivityCheckoutPaymentBinding binding;\r\n    String MobileNo;\r\n    Context context;\r\n    Activity activity;\r\n    Dialog d;\r\n    int a = 0;\r\n    int year, month;\r\n    YeardialogBinding binding1;\r\n    String strToken;\r\n    private long mLastClickTime = 0;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_checkout_payment);\r\n        context = CheckoutPaymentActivity.this;\r\n        activity = CheckoutPaymentActivity.this;\r\n        if (getIntent() != null) {\r\n            MobileNo = getIntent().getStringExtra(\"MobileNo\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                finish();\r\n            }\r\n        });\r\n\r\n        year = Calendar.getInstance().get(Calendar.YEAR);\r\n        month = Calendar.getInstance().get(Calendar.MONTH);\r\n        month = month + 1;\r\n        d = new Dialog(context);\r\n        d.setTitle(\"Year Picker\");\r\n        binding1 = DataBindingUtil.inflate(LayoutInflater.from(context),\r\n                R.layout.yeardialog, null, false);\r\n        d.setContentView(binding1.getRoot());\r\n       /* binding.etNumber.addTextChangedListener(addCardTextWatcher);\r\n        binding.etName.addTextChangedListener(addCardTextWatcher);\r\n        binding.textMonth.addTextChangedListener(addCardTextWatcher);\r\n        binding.etCvv.addTextChangedListener(addCardTextWatcher);*/\r\n\r\n//        DecimalFormat precision = new DecimalFormat(\"#.##\");\r\n        binding.tvDoller.setText(\"$\" + price);\r\n//        binding.tvDoller.setText(\"$\" + precision.format(price));\r\n        binding.etNumber.addTextChangedListener(new TextWatcher() {\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                if (binding.etNumber.getText().toString().length() == 16) {\r\n                    binding.etName.requestFocus();\r\n                }\r\n            }\r\n\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            }\r\n\r\n            public void afterTextChanged(Editable s) {\r\n            }\r\n        });\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(CheckoutPaymentActivity.this, 0,\r\n                5, 3, 1f, 0);\r\n        binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        binding.ivRestaurantImage.setImageResource(R.drawable.ic_checkout_card_logo);\r\n        binding.opendilog.setOnClickListener(v -> {\r\n            a = 1;\r\n            showYearDialog();\r\n        });\r\n\r\n        AddPaymentActivity.CreditCardFormatTextWatcher tv = new AddPaymentActivity.CreditCardFormatTextWatcher(binding.etNumber);\r\n        binding.etNumber.addTextChangedListener(tv);\r\n        binding.etName.addTextChangedListener(addCardTextWatcher);\r\n        binding.etNumber.addTextChangedListener(addCardTextWatcher);\r\n        binding.etCvv.addTextChangedListener(addCardTextWatcher);\r\n        binding.textMonth.addTextChangedListener(addCardTextWatcher);\r\n        binding.btnPayment.setOnClickListener(view -> {\r\n           if (binding.etNumber.getText().toString().equalsIgnoreCase(\"\")) {\r\n                binding.tlNumber.setError(\"Card number is required.\");\r\n                binding.txtError.setText(\"\");\r\n                binding.tlName.setError(\"\");\r\n            } else if (binding.etNumber.getText().toString().length() <= 15 || binding.etNumber.getText().toString().length() > 16) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"Please enter a valid card number\");\r\n                binding.txtError.setText(\"\");\r\n            } else if (binding.etName.getText().toString().equalsIgnoreCase(\"\")) {\r\n                binding.tlName.setError(\"Card name is required\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"\");\r\n            } else if (binding1.MonthPicker.getValue() < month && binding1.YearPicker.getValue() == year) {\r\n                binding.txtError.setText(\"Please enter a valid expiry mm/yyyy\");\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n            } else if (binding.textMonth.getText().toString().equalsIgnoreCase(\"Expiry Date\") || a == 0) {\r\n                binding.txtError.setText(\"Expiry month is required\");\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n            } else if (binding.etCvv.getText().toString().matches(\"\")) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"CVV is required\");\r\n            } else if (binding.etCvv.getText().toString().length() < 3) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"Please enter a valid CVV number\");\r\n            } else {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"\");\r\n                final String strCardNo = binding.etNumber.getText().toString().trim().replaceAll(\"\\\\s+\", \"\");\r\n                int months = binding1.MonthPicker.getValue();\r\n                int Years = binding1.YearPicker.getValue();\r\n                Card card = new Card(strCardNo, months, Years, binding.etCvv.getText().toString());\r\n\r\n                new Stripe().createToken(card, getString(R.string.stipe_test_key), new TokenCallback() {\r\n                    @Override\r\n                    public void onError(Exception error) {\r\n                        Log.e(\"error.........\", \"\" + error.toString());\r\n                        BWSApplication.showToast(\"Please enter valid card details\", getApplicationContext());\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onSuccess(Token token) {\r\n                        strToken = token.getId();\r\n                        Log.e(\"strToken.............\", \"\" + strToken);\r\n                        if (!strToken.equalsIgnoreCase(\"\")) {\r\n                            if (BWSApplication.isNetworkConnected(context)) {\r\n                                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                Call<AddCardModel> listCall = APIClient.getClient().getMembershipPayment(planId, planFlag, strToken, MobileNo);\r\n                                listCall.enqueue(new Callback<AddCardModel>() {\r\n                                    @Override\r\n                                    public void onResponse(Call<AddCardModel> call, Response<AddCardModel> response) {\r\n                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        if (response.isSuccessful()) {\r\n                                            AddCardModel cardModel = response.body();\r\n                                            if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n                                                keyboard.hideSoftInputFromWindow(view.getWindowToken(), 0);\r\n                                                if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);\r\n                                                    SharedPreferences.Editor editor = shared.edit();\r\n                                                    editor.putString(CONSTANTS.PREF_KEY_UserID, cardModel.getResponseData().getUserId());\r\n                                                    editor.putString(CONSTANTS.PREF_KEY_MobileNo, MobileNo);\r\n                                                    editor.commit();\r\n                                                    Intent i = new Intent(CheckoutPaymentActivity.this, ThankYouMpActivity.class);\r\n                                                    startActivity(i);\r\n                                                    finish();\r\n                                                } else if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                                } else {\r\n                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                                }\r\n                                            } else {\r\n                                                BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onFailure(Call<AddCardModel> call, Throwable t) {\r\n                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                BWSApplication.showToast(getString(R.string.no_server_found), context);\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        finish();\r\n    }\r\n\r\n      private TextWatcher addCardTextWatcher = new TextWatcher() {\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            String CardNo = binding.etNumber.getText().toString().trim();\r\n            String CardName = binding.etName.getText().toString().trim();\r\n            String Month = binding.textMonth.getText().toString().trim();\r\n            String CVV = binding.etCvv.getText().toString().trim();\r\n            if (!CardNo.isEmpty() || !CardName.isEmpty() || !Month.isEmpty() || !CVV.isEmpty()) {\r\n                binding.btnPayment.setEnabled(true);\r\n                binding.btnPayment.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnPayment.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnPayment.setEnabled(false);\r\n                binding.btnPayment.setTextColor(getResources().getColor(R.color.light_gray));\r\n                binding.btnPayment.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n        }\r\n    };\r\n\r\n    public void showYearDialog() {\r\n        binding1.MonthPicker.setMaxValue(12);\r\n        binding1.MonthPicker.setMinValue(1);\r\n        binding1.MonthPicker.setWrapSelectorWheel(false);\r\n        binding1.MonthPicker.setValue(month);\r\n        binding1.MonthPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);\r\n        binding1.YearPicker.setMaxValue(year + 80);\r\n        binding1.YearPicker.setMinValue(year);\r\n        binding1.YearPicker.setWrapSelectorWheel(false);\r\n        binding1.YearPicker.setValue(year);\r\n        binding1.YearPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);\r\n\r\n        binding1.set.setOnClickListener(v -> {\r\n            if (binding1.MonthPicker.getValue() < month && binding1.YearPicker.getValue() == year) {\r\n                binding.txtError.setText(\"Please Select Valid Month And Year\");\r\n                d.dismiss();\r\n            } else {\r\n                binding.textMonth.setText(\" \" + binding1.MonthPicker.getValue() + \" / \" + binding1.YearPicker.getValue());\r\n                binding.txtError.setText(\"\");\r\n                d.dismiss();\r\n            }\r\n        });\r\n        binding1.cancle.setOnClickListener(v -> {\r\n            d.dismiss();\r\n        });\r\n        d.show();\r\n    }\r\n\r\n    public static class CreditCardFormatTextWatcher implements TextWatcher {\r\n        public static final int NO_MAX_LENGTH = -1;\r\n        private int maxLength = NO_MAX_LENGTH;\r\n        private int paddingPx;\r\n        private boolean internalStopFormatFlag;\r\n\r\n        public CreditCardFormatTextWatcher(@NonNull TextView textView) {\r\n            setPaddingEm(textView, 1f);\r\n        }\r\n\r\n        public static void formatCardNumber(@NonNull Editable ccNumber, int paddingPx, int maxLength) {\r\n            int textLength = ccNumber.length();\r\n            // first remove any previous span\r\n            AddPaymentActivity.CreditCardFormatTextWatcher.PaddingRightSpan[] spans = ccNumber.getSpans(0, ccNumber.length(), AddPaymentActivity.CreditCardFormatTextWatcher.PaddingRightSpan.class);\r\n            for (int i = 0; i < spans.length; i++) {\r\n                ccNumber.removeSpan(spans[i]);\r\n            }\r\n            // then truncate to max length\r\n            if (maxLength > 0 && textLength > maxLength - 1) {\r\n                ccNumber.replace(maxLength, textLength, \"\");\r\n            }\r\n            // finally add margin spans\r\n            for (int i = 1; i <= ((textLength - 1) / 4); i++) {\r\n                int end = i * 4;\r\n                int start = end - 1;\r\n                AddPaymentActivity.CreditCardFormatTextWatcher.PaddingRightSpan marginSPan = new AddPaymentActivity.CreditCardFormatTextWatcher.PaddingRightSpan(paddingPx);\r\n                ccNumber.setSpan(marginSPan, start, end, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n            }\r\n        }\r\n\r\n\r\n        public void setPaddingPx(int paddingPx) {\r\n            this.paddingPx = paddingPx;\r\n        }\r\n\r\n\r\n        public void setPaddingEm(@NonNull TextView textView, float em) {\r\n            float emSize = textView.getPaint().measureText(\"x\");\r\n            setPaddingPx((int) (em * emSize));\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            if (internalStopFormatFlag) {\r\n                return;\r\n            }\r\n            internalStopFormatFlag = true;\r\n            formatCardNumber(s, paddingPx, maxLength);\r\n            internalStopFormatFlag = false;\r\n        }\r\n\r\n        public static class PaddingRightSpan extends ReplacementSpan {\r\n\r\n            private int mPadding;\r\n\r\n            public PaddingRightSpan(int padding) {\r\n                mPadding = padding;\r\n            }\r\n\r\n            @Override\r\n            public int getSize(@NonNull Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {\r\n                float[] widths = new float[end - start];\r\n                paint.getTextWidths(text, start, end, widths);\r\n                int sum = mPadding;\r\n                for (int i = 0; i < widths.length; i++) {\r\n                    sum += widths[i];\r\n                }\r\n                return sum;\r\n            }\r\n\r\n            @Override\r\n            public void draw(@NonNull Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, @NonNull Paint paint) {\r\n                canvas.drawText(text, start, end, x, y, paint);\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutPaymentActivity.java	(revision 9a6e5bfec706db245c24510ff6284b94503bcce0)
+++ app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutPaymentActivity.java	(date 1603173114107)
@@ -50,7 +50,7 @@
 
 public class CheckoutPaymentActivity extends AppCompatActivity {
     ActivityCheckoutPaymentBinding binding;
-    String MobileNo;
+    String MobileNo, Code;
     Context context;
     Activity activity;
     Dialog d;
@@ -68,6 +68,7 @@
         activity = CheckoutPaymentActivity.this;
         if (getIntent() != null) {
             MobileNo = getIntent().getStringExtra("MobileNo");
+            Code = getIntent().getStringExtra("Code");
         }
 
         binding.llBack.setOnClickListener(new View.OnClickListener() {
@@ -176,7 +177,7 @@
                         if (!strToken.equalsIgnoreCase("")) {
                             if (BWSApplication.isNetworkConnected(context)) {
                                 BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                                Call<AddCardModel> listCall = APIClient.getClient().getMembershipPayment(planId, planFlag, strToken, MobileNo);
+                                Call<AddCardModel> listCall = APIClient.getClient().getMembershipPayment(planId, planFlag, strToken, MobileNo, Code);
                                 listCall.enqueue(new Callback<AddCardModel>() {
                                     @Override
                                     public void onResponse(Call<AddCardModel> call, Response<AddCardModel> response) {
Index: app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutOtpActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.MembershipModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.SystemClock;\r\nimport android.provider.Settings;\r\nimport android.text.Editable;\r\nimport android.text.Html;\r\nimport android.text.TextUtils;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.EditText;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.brainwellnessspa.Utility.SmsReceiver;\r\nimport com.facebook.appevents.AppEventsLogger;\r\nimport com.google.android.gms.auth.api.phone.SmsRetriever;\r\nimport com.google.android.gms.auth.api.phone.SmsRetrieverClient;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.iid.FirebaseInstanceId;\r\nimport com.google.firebase.iid.InstanceIdResult;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.LoginModule.Models.OtpModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.MembershipPlanListModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.SignUpModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.SplashModule.SplashScreenActivity;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityCheckoutOtpBinding;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class CheckoutOtpActivity extends AppCompatActivity implements\r\n        SmsReceiver.OTPReceiveListener {\r\n    String Name, Code, MobileNo;\r\n    private EditText[] editTexts;\r\n    boolean tvSendOTPbool = true;\r\n    Activity activity;\r\n    Context ctx;\r\n    String TrialPeriod;\r\n    private ArrayList<MembershipPlanListModel.Plan> listModelList;\r\n    int position;\r\n    ActivityCheckoutOtpBinding binding;\r\n    CountDownTimer countDownTimer;\r\n    private long mLastClickTime = 0;\r\n    public static int comeRegister = 0;\r\n    private SmsReceiver smsReceiver;\r\n    private BroadcastReceiver receiver;\r\n//    AppEventsLogger logger;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_checkout_otp);\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            MobileNo = getIntent().getStringExtra(CONSTANTS.MobileNo);\r\n            Name = getIntent().getStringExtra(CONSTANTS.Name);\r\n            Code = getIntent().getStringExtra(CONSTANTS.Code);\r\n//            TrialPeriod = getIntent().getStringExtra(\"TrialPeriod\");\r\n//            listModelList = getIntent().getParcelableArrayListExtra(\"PlanData\");\r\n//            position = getIntent().getIntExtra(\"position\", 0);\r\n        }\r\n        activity = CheckoutOtpActivity.this;\r\n        ctx = CheckoutOtpActivity.this;\r\n//        logger = AppEventsLogger.newLogger(this);\r\n        binding.tvSendCodeText.setText(\"We sent an SMS with a 4-digit code to \" + Code + MobileNo);\r\n        editTexts = new EditText[]{binding.edtOTP1, binding.edtOTP2, binding.edtOTP3, binding.edtOTP4};\r\n        binding.edtOTP1.addTextChangedListener(new PinTextWatcher(0));\r\n        binding.edtOTP2.addTextChangedListener(new PinTextWatcher(1));\r\n        binding.edtOTP3.addTextChangedListener(new PinTextWatcher(2));\r\n        binding.edtOTP4.addTextChangedListener(new PinTextWatcher(3));\r\n        binding.edtOTP1.setOnKeyListener(new PinOnKeyListener(0));\r\n        binding.edtOTP2.setOnKeyListener(new PinOnKeyListener(1));\r\n        binding.edtOTP3.setOnKeyListener(new PinOnKeyListener(2));\r\n        binding.edtOTP4.setOnKeyListener(new PinOnKeyListener(3));\r\n        startSMSListener();\r\n        binding.txtError.setText(\"\");\r\n        binding.txtError.setVisibility(View.GONE);\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            comeRegister = 0;\r\n            Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n            i.putExtra(\"MobileNo\", MobileNo);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.llEditNumber.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            comeRegister = 1;\r\n            Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n            i.putExtra(\"MobileNo\", MobileNo);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.btnSendCode.setOnClickListener(view -> {\r\n            SharedPreferences sharedPreferences2 = getSharedPreferences(CONSTANTS.Token, MODE_PRIVATE);\r\n            String fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n            if (TextUtils.isEmpty(fcm_id)) {\r\n                FirebaseInstanceId.getInstance().getInstanceId().addOnSuccessListener(activity, new OnSuccessListener<InstanceIdResult>() {\r\n                    @Override\r\n                    public void onSuccess(InstanceIdResult instanceIdResult) {\r\n                        String newToken = instanceIdResult.getToken();\r\n                        Log.e(\"newToken\", newToken);\r\n                        SharedPreferences.Editor editor = getSharedPreferences(CONSTANTS.Token, MODE_PRIVATE).edit();\r\n                        editor.putString(CONSTANTS.Token, newToken); //Friend\r\n                        editor.apply();\r\n                        editor.commit();\r\n                    }\r\n                });\r\n                fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n            }\r\n            if (BWSApplication.isNetworkConnected(CheckoutOtpActivity.this)) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                String deviceid = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);\r\n                Call<OtpModel> listCall = APIClient.getClient().getAuthOtps1(\r\n                        binding.edtOTP1.getText().toString() + \"\" +\r\n                                binding.edtOTP2.getText().toString() + \"\" +\r\n                                binding.edtOTP3.getText().toString() + \"\" +\r\n                                binding.edtOTP4.getText().toString(), fcm_id, CONSTANTS.FLAG_ONE, deviceid\r\n                        , MobileNo, CONSTANTS.FLAG_ONE);\r\n                listCall.enqueue(new Callback<OtpModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<OtpModel> call, Response<OtpModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            OtpModel otpModel = response.body();\r\n                            if (otpModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                Intent i = new Intent(CheckoutOtpActivity.this, CheckoutPaymentActivity.class);\r\n                                i.putExtra(\"MobileNo\", MobileNo);\r\n                                startActivity(i);\r\n                                finish();\r\n                            } else if (otpModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                binding.txtError.setText(otpModel.getResponseMessage());\r\n                                binding.txtError.setVisibility(View.VISIBLE);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<OtpModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n\r\n                    }\r\n                });\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getApplicationContext());\r\n            }\r\n        });\r\n\r\n        binding.llResendSms.setOnClickListener(view -> prepareData());\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        comeRegister = 0;\r\n        Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n        i.putExtra(\"MobileNo\", MobileNo);\r\n        i.putExtra(\"Name\", Name);\r\n        i.putExtra(\"Code\", Code);\r\n        startActivity(i);\r\n        finish();\r\n    }\r\n\r\n    private void startSMSListener() {\r\n        try {\r\n            smsReceiver = new SmsReceiver();\r\n            smsReceiver.setOTPListener(this);\r\n\r\n            IntentFilter intentFilter = new IntentFilter();\r\n            intentFilter.addAction(SmsRetriever.SMS_RETRIEVED_ACTION);\r\n            this.registerReceiver(smsReceiver, intentFilter);\r\n\r\n            SmsRetrieverClient client = SmsRetriever.getClient(this);\r\n\r\n            Task<Void> task = client.startSmsRetriever();\r\n            task.addOnSuccessListener(aVoid -> {\r\n                // API successfully started\r\n            });\r\n\r\n            task.addOnFailureListener(e -> {\r\n                /* Fail to start API */\r\n            });\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onOTPReceived(String otp) {\r\n        String[] splited = new String[0];\r\n        if (otp.startsWith(\"[#] Your OTP is\")) {\r\n            splited = otp.split(\" \");\r\n        } else if (otp.startsWith(\"(#) Your OTP is\")) {\r\n            splited = otp.split(\" \");\r\n        } else if (otp.startsWith(\"<#> Your OTP is\")) {\r\n            splited = otp.split(\" \");\r\n        } else if (otp.startsWith(\"?<#?> Your OTP is\")) {\r\n            splited = otp.split(\" \");\r\n        } else {\r\n            splited = otp.split(\" \");\r\n        }\r\n        String message = splited[4];\r\n        binding.edtOTP1.setText(String.valueOf(message.charAt(0)));\r\n        binding.edtOTP2.setText(String.valueOf(message.charAt(1)));\r\n        binding.edtOTP3.setText(String.valueOf(message.charAt(2)));\r\n        binding.edtOTP4.setText(String.valueOf(message.charAt(3)));\r\n\r\n        if (smsReceiver != null) {\r\n            unregisterReceiver(smsReceiver);\r\n            smsReceiver = null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onOTPTimeOut() {\r\n//        showToast(\"OTP Time out\");\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onOTPReceivedError(String error) {\r\n//        showToast(error);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        if (smsReceiver != null) {\r\n            unregisterReceiver(smsReceiver);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        LocalBroadcastManager.getInstance(this).registerReceiver(receiver, new IntentFilter(\"otp\"));\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        LocalBroadcastManager.getInstance(this).unregisterReceiver(receiver);\r\n    }\r\n\r\n    void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            tvSendOTPbool = false;\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SignUpModel> listCall = APIClient.getClient().getSignUpDatas(MobileNo, Code, CONSTANTS.FLAG_ONE, CONSTANTS.FLAG_ONE, SplashScreenActivity.key);\r\n            listCall.enqueue(new Callback<SignUpModel>() {\r\n                @Override\r\n                public void onResponse(Call<SignUpModel> call, Response<SignUpModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SignUpModel loginModel = response.body();\r\n                        if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                            countDownTimer = new CountDownTimer(30000, 1000) {\r\n                                public void onTick(long millisUntilFinished) {\r\n                                    binding.llResendSms.setEnabled(false);\r\n                                    binding.tvResendOTP.setText(Html.fromHtml(millisUntilFinished / 1000 + \"<font color=\\\"#999999\\\">\" + \" Resent SMS\" + \"</font>\"));\r\n                                }\r\n\r\n                                public void onFinish() {\r\n                                    binding.llResendSms.setEnabled(true);\r\n                                    binding.tvResendOTP.setText(getString(R.string.resent_sms));\r\n                                    binding.tvResendOTP.setTextColor(getResources().getColor(R.color.dark_blue_gray));\r\n                                    binding.tvResendOTP.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\r\n                                    binding.tvResendOTP.getPaint().setMaskFilter(null);\r\n                                }\r\n                            }.start();\r\n                            binding.edtOTP1.requestFocus();\r\n                            binding.edtOTP1.setText(\"\");\r\n                            binding.edtOTP2.setText(\"\");\r\n                            binding.edtOTP3.setText(\"\");\r\n                            binding.edtOTP4.setText(\"\");\r\n                            tvSendOTPbool = true;\r\n                            BWSApplication.showToast(loginModel.getResponseMessage(), getApplicationContext());\r\n                        } else if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                            binding.txtError.setVisibility(View.VISIBLE);\r\n                            binding.txtError.setText(loginModel.getResponseMessage());\r\n                        } else {\r\n                            binding.txtError.setVisibility(View.VISIBLE);\r\n                            binding.txtError.setText(loginModel.getResponseMessage());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SignUpModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    BWSApplication.showToast(t.getMessage(), getApplicationContext());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getApplicationContext());\r\n        }\r\n    }\r\n\r\n    public class PinTextWatcher implements TextWatcher {\r\n        private int currentIndex;\r\n        private boolean isFirst = false, isLast = false;\r\n        private String newTypedString = \"\";\r\n\r\n        PinTextWatcher(int currentIndex) {\r\n            this.currentIndex = currentIndex;\r\n\r\n            if (currentIndex == 0)\r\n                this.isFirst = true;\r\n            else if (currentIndex == editTexts.length - 1)\r\n                this.isLast = true;\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            newTypedString = s.subSequence(start, start + count).toString().trim();\r\n            String OTP1 = binding.edtOTP1.getText().toString().trim();\r\n            String OTP2 = binding.edtOTP2.getText().toString().trim();\r\n            String OTP3 = binding.edtOTP3.getText().toString().trim();\r\n            String OTP4 = binding.edtOTP4.getText().toString().trim();\r\n            if (!OTP1.isEmpty() && !OTP2.isEmpty() && !OTP3.isEmpty() && !OTP4.isEmpty()) {\r\n                binding.btnSendCode.setEnabled(true);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnSendCode.setEnabled(false);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            String text = newTypedString;\r\n            Log.e(\"OTP VERIFICATION\", \"\" + text);\r\n\r\n            /* Detect paste event and set first char */\r\n            if (text.length() > 1)\r\n                text = String.valueOf(text.charAt(0)); // TODO: We can fill out other EditTexts\r\n            editTexts[currentIndex].removeTextChangedListener(this);\r\n            editTexts[currentIndex].setText(text);\r\n            editTexts[currentIndex].setSelection(text.length());\r\n            editTexts[currentIndex].addTextChangedListener(this);\r\n\r\n            if (text.length() == 1) {\r\n                moveToNext();\r\n            } else if (text.length() == 0) {\r\n                if (!tvSendOTPbool) {\r\n                    editTexts[0].requestFocus();\r\n                } else {\r\n                    moveToPrevious();\r\n                }\r\n            }\r\n        }\r\n\r\n        private void moveToNext() {\r\n            if (!isLast)\r\n                editTexts[currentIndex + 1].requestFocus();\r\n\r\n            if (isAllEditTextsFilled() && isLast) { // isLast is optional\r\n                editTexts[currentIndex].clearFocus();\r\n                hideKeyboard();\r\n            }\r\n        }\r\n\r\n        private void moveToPrevious() {\r\n            if (!isFirst)\r\n                editTexts[currentIndex - 1].requestFocus();\r\n        }\r\n\r\n        private boolean isAllEditTextsFilled() {\r\n            for (EditText editText : editTexts)\r\n                if (editText.getText().toString().trim().length() == 0)\r\n                    return false;\r\n            return true;\r\n        }\r\n\r\n        private void hideKeyboard() {\r\n            if (getCurrentFocus() != null) {\r\n                InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);\r\n                inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PinOnKeyListener implements View.OnKeyListener {\r\n        private int currentIndex;\r\n\r\n        PinOnKeyListener(int currentIndex) {\r\n            this.currentIndex = currentIndex;\r\n        }\r\n\r\n        @Override\r\n        public boolean onKey(View v, int keyCode, KeyEvent event) {\r\n            if (keyCode == KeyEvent.KEYCODE_DEL && event.getAction() == KeyEvent.ACTION_DOWN) {\r\n                if (editTexts[currentIndex].getText().toString().isEmpty() && currentIndex != 0)\r\n                    editTexts[currentIndex - 1].requestFocus();\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutOtpActivity.java	(revision 9a6e5bfec706db245c24510ff6284b94503bcce0)
+++ app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutOtpActivity.java	(date 1603173114099)
@@ -159,6 +159,7 @@
                             if (otpModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {
                                 Intent i = new Intent(CheckoutOtpActivity.this, CheckoutPaymentActivity.class);
                                 i.putExtra("MobileNo", MobileNo);
+                                i.putExtra("Code",Code);
                                 startActivity(i);
                                 finish();
                             } else if (otpModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {
Index: app/src/main/java/com/brainwellnessspa/Utility/APIInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.Utility;\r\n\r\nimport com.brainwellnessspa.AddPayment.Model.AddCardModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.BillingAddressSaveModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.BillingAddressViewModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CancelPlanModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardListModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CurrentPlanVieViewModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.PayNowDetailsModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.PlanListBillingModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.CreatePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.DirectionModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.DownloadPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.LogoutModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.NextSessionViewModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.PlaylistingModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.PreviousAppointmentsModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ReminderStatusPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.RenamePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SessionListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestionAudiosModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllPlayListModel;\r\nimport com.brainwellnessspa.DownloadModule.Models.DownloadlistModel;\r\nimport com.brainwellnessspa.FaqModule.Models.FaqListModel;\r\nimport com.brainwellnessspa.InvoiceModule.Models.InvoiceDetailModel;\r\nimport com.brainwellnessspa.InvoiceModule.Models.InvoiceListModel;\r\nimport com.brainwellnessspa.LoginModule.Models.CountryListModel;\r\nimport com.brainwellnessspa.LoginModule.Models.LoginModel;\r\nimport com.brainwellnessspa.LoginModule.Models.OtpModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.MembershipPlanListModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.SignUpModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.DeleteRemiderModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.RemiderDetailsModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.ReminderStatusModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.SelectPlaylistModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.SetReminderModel;\r\nimport com.brainwellnessspa.ResourceModule.Models.ResourceFilterModel;\r\nimport com.brainwellnessspa.ResourceModule.Models.ResourceListModel;\r\nimport com.brainwellnessspa.SplashModule.Models.VersionModel;\r\nimport com.brainwellnessspa.UserModule.Models.AddProfileModel;\r\nimport com.brainwellnessspa.UserModule.Models.ProfileUpdateModel;\r\nimport com.brainwellnessspa.UserModule.Models.ProfileViewModel;\r\nimport com.brainwellnessspa.UserModule.Models.RemoveProfileModel;\r\n\r\nimport retrofit.mime.TypedFile;\r\nimport retrofit2.Call;\r\nimport retrofit2.http.Field;\r\nimport retrofit2.http.FormUrlEncoded;\r\nimport retrofit2.http.GET;\r\nimport retrofit2.http.Multipart;\r\nimport retrofit2.http.POST;\r\nimport retrofit2.http.Part;\r\n\r\npublic interface APIInterface {\r\n\r\n  /*  @Multipart\r\n    @POST(\"/addprofileimage\")\r\n    void getAddProfile(@Part(\"UserID\") String UserID,\r\n                       @Part(\"ProfileImage\") TypedFile Avtar,\r\n                       Callback<AddProfileModel> addProfileModelCallback);*/\r\n\r\n    /*TODO UserProfileActivity */\r\n\r\n    @Multipart\r\n    @POST(\"addprofileimage\")\r\n    Call<AddProfileModel> getAddProfile(@Part(\"UserID\") String userID,\r\n                                        @Part(\"ProfileImage\") TypedFile profileImage);\r\n\r\n    /*TODO App Version*/\r\n    @POST(\"appversion\")\r\n    @FormUrlEncoded\r\n    Call<VersionModel> getVersionDatas(@Field(\"Version\") String version,\r\n                                       @Field(\"AppType\") String appType);\r\n\r\n    /* TODO LoginActivtiy & OtpActivity */\r\n    @POST(\"sendotp\")\r\n    @FormUrlEncoded\r\n    Call<LoginModel> getLoginDatas(@Field(\"MobileNo\") String mobileNo,\r\n                                   @Field(\"CountryCode\") String countryCode,\r\n                                   @Field(\"DeviceType\") String deviceType,\r\n                                   @Field(\"Resend\") String resend,\r\n                                   @Field(\"key\") String key);\r\n\r\n    /* TODO Registration */\r\n    @POST(\"signupcheckout\")\r\n    @FormUrlEncoded\r\n    Call<LoginModel> getRegData(@Field(\"MobileNo\") String mobileNo,\r\n                                @Field(\"CountryCode\") String countryCode);\r\n\r\n    /* TODO Membership Payment */\r\n    @POST(\"payment\")\r\n    @FormUrlEncoded\r\n    Call<AddCardModel> getMembershipPayment(\r\n            @Field(\"PlanId\") String planId,\r\n            @Field(\"PlanFlag\") String planFlag,\r\n            @Field(\"TokenId\") String CardId,\r\n            @Field(\"MobileNo\") String UserId);\r\n\r\n    /* TODO CheckoutGetCodeActivity */\r\n    @POST(\"signupcheckout\")\r\n    @FormUrlEncoded\r\n    Call<SignUpModel> getSignUpDatas(@Field(\"MobileNo\") String mobileNo,\r\n                                     @Field(\"CountryCode\") String countryCode,\r\n                                     @Field(\"DeviceType\") String deviceType,\r\n                                     @Field(\"Resend\") String resend,\r\n                                     @Field(\"key\") String key);\r\n\r\n    /* TODO OtpActivity */\r\n    @POST(\"authotp\")\r\n    @FormUrlEncoded\r\n    Call<OtpModel> getAuthOtps(@Field(\"OTP\") String otp,\r\n                               @Field(\"Token\") String token,\r\n                               @Field(\"DeviceType\") String deviceType,\r\n                               @Field(\"DeviceID\") String deviceID,\r\n                               @Field(\"MobileNo\") String mobileNo,\r\n                               @Field(\"SignupFlag\") String signupFlag);\r\n\r\n    /* TODO OtpActivity */\r\n    @POST(\"authotp\")\r\n    @FormUrlEncoded\r\n    Call<OtpModel> getAuthOtps1(@Field(\"OTP\") String otp,\r\n                                @Field(\"Token\") String token,\r\n                                @Field(\"DeviceType\") String deviceType,\r\n                                @Field(\"DeviceID\") String deviceID,\r\n                                @Field(\"MobileNo\") String mobileNo,\r\n                                @Field(\"SignupFlag\") String signupFlag);\r\n\r\n    /* TODO AccountFragment */\r\n    @POST(\"logout\")\r\n    @FormUrlEncoded\r\n    Call<LogoutModel> getLogout(@Field(\"UserID\") String otp,\r\n                                @Field(\"Token\") String token,\r\n                                @Field(\"Type\") String type);\r\n\r\n    /* TODO CountryActivity */\r\n    @GET(\"countrylist\")\r\n    Call<CountryListModel> getCountryLists();\r\n\r\n    /* TODO AudioFaqActivity */\r\n    @GET(\"faqlist\")\r\n    Call<FaqListModel> getFaqLists();\r\n\r\n    /* TODO AudioFaqActivity */\r\n    @GET(\"faqlistmembership\")\r\n    Call<FaqListModel> getFaqListings();\r\n\r\n    /* TODO UserProfileActivity */\r\n    @POST(\"profiledetail\")\r\n    @FormUrlEncoded\r\n    Call<ProfileViewModel> getProfileView(@Field(\"UserID\") String userID);\r\n\r\n    /*TODO UserProfileActivity */\r\n    @POST(\"profileupdate\")\r\n    @FormUrlEncoded\r\n    Call<ProfileUpdateModel> getProfileUpdate(@Field(\"UserID\") String userID,\r\n                                              @Field(\"Name\") String name,\r\n                                              @Field(\"Dob\") String dob,\r\n                                              @Field(\"MobileNo\") String mobileNo,\r\n                                              @Field(\"EmailId\") String emailId,\r\n                                              @Field(\"IsVerify\") String isVerify);\r\n\r\n    /* TODO Membership Plan List */\r\n    @GET(\"planlist\")\r\n    Call<MembershipPlanListModel> getMembershipPlanList();\r\n\r\n    /*TODO UserProfileActivity */\r\n    @POST(\"removeprofileimage\")\r\n    @FormUrlEncoded\r\n    Call<RemoveProfileModel> getRemoveProfile(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AudioFragment */\r\n    @POST(\"homeaudioscreen\")\r\n    @FormUrlEncoded\r\n    Call<MainAudioModel> getMainAudioLists(@Field(\"UserID\") String userID);\r\n\r\n\r\n    /* TODO PlaylistFragment */\r\n    @POST(\"getlibrary\")\r\n    @FormUrlEncoded\r\n    Call<MainPlayListModel> getMainPlayLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO ViewAllPlaylistFragment */\r\n    @POST(\"playlistongetlibrary\")\r\n    @FormUrlEncoded\r\n    Call<ViewAllPlayListModel> getViewAllPlayLists(@Field(\"UserID\") String userID,\r\n                                                   @Field(\"GetLibraryId\") String getLibraryId);\r\n\r\n    /* TODO ViewAllAudioFragment */\r\n    @POST(\"gethomeallaudio\")\r\n    @FormUrlEncoded\r\n    Call<ViewAllAudioListModel> getViewAllAudioLists(@Field(\"UserID\") String userID,\r\n                                                     @Field(\"GetHomeId\") String HomeId,\r\n                                                     @Field(\"CategoryName\") String CategoryName);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"playlistdetails\")\r\n    @FormUrlEncoded\r\n    Call<SubPlayListModel> getSubPlayLists(@Field(\"UserID\") String userID,\r\n                                           @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"addaudiosearch\")\r\n    @FormUrlEncoded\r\n    Call<SuggestionAudiosModel> getAddSearchAudio(@Field(\"AudioName\") String audioName,\r\n                                                  @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO AddAudioActivity & SearchFragment */\r\n    @POST(\"suggestedaudio\")\r\n    @FormUrlEncoded\r\n    Call<SuggestedModel> getSuggestedLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO SearchFragment */\r\n    @POST(\"suggestedplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SearchPlaylistModel> getSuggestedPlayLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO SearchFragment */\r\n    @POST(\"searchonsuggestedlist\")\r\n    @FormUrlEncoded\r\n    Call<SearchBothModel> getSearchBoth(@Field(\"UserID\") String userID,\r\n                                        @Field(\"SuggestedName\") String suggestedName);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"addaudiotoplaylist\")\r\n    @FormUrlEncoded\r\n    Call<AddToPlaylist> getAddSearchAudioFromPlaylist(@Field(\"UserID\") String userID,\r\n                                                      @Field(\"AudioId\") String audioId,\r\n                                                      @Field(\"PlaylistId\") String playlistId,\r\n                                                      @Field(\"FromPlaylistId\") String fromPlaylistId);\r\n\r\n    /* TODO BillingAddressFragment */\r\n    @POST(\"billingaddress\")\r\n    @FormUrlEncoded\r\n    Call<BillingAddressViewModel> getBillingAddressView(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO BillingAddressFragment */\r\n    @POST(\"payonbillingorder\")\r\n    @FormUrlEncoded\r\n    Call<PayNowDetailsModel> getPayNowDetails(@Field(\"UserID\") String userID,\r\n                                              @Field(\"CardId\") String cardId,\r\n                                              @Field(\"PlanId\") String planId,\r\n                                              @Field(\"PlanType\") String planType,\r\n                                              @Field(\"invoicePayId\") String invoicePayId,\r\n                                              @Field(\"PlanStatus\") String planStatus);\r\n\r\n    /* TODO BillingAddressFragment */\r\n    @POST(\"billingdetailsave\")\r\n    @FormUrlEncoded\r\n    Call<BillingAddressSaveModel> getBillingAddressSave(@Field(\"UserID\") String userID,\r\n                                                        @Field(\"Name\") String name,\r\n                                                        @Field(\"Email\") String email,\r\n                                                        @Field(\"Country\") String country,\r\n                                                        @Field(\"AddressLine1\") String addressLine1,\r\n                                                        @Field(\"AddressLine2\") String addressLine2,\r\n                                                        @Field(\"Suburb\") String suburb,\r\n                                                        @Field(\"State\") String state,\r\n                                                        @Field(\"Postcode\") String postcode);\r\n\r\n    /* TODO CurrentPlanFragment */\r\n    @POST(\"billingorder\")\r\n    @FormUrlEncoded\r\n    Call<CurrentPlanVieViewModel> getCurrentPlanView(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO CancelMembershipActivity */\r\n    @POST(\"cancelplan\")\r\n    @FormUrlEncoded\r\n    Call<CancelPlanModel> getCancelPlan(@Field(\"UserID\") String userID,\r\n                                        @Field(\"CancelId\") String cancelId,\r\n                                        @Field(\"CancelReason\") String cancelReason);\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"nextsessionview\")\r\n    @FormUrlEncoded\r\n    Call<NextSessionViewModel> getNextSessionVIew(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"appointmentcategorylist\")\r\n    @FormUrlEncoded\r\n    Call<PreviousAppointmentsModel> getAppointmentVIew(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"appointmentsession\")\r\n    @FormUrlEncoded\r\n    Call<SessionListModel> getAppointmentSession(@Field(\"UserID\") String userID,\r\n                                                 @Field(\"AppointmentName\") String appointmentName\r\n    );\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"appointmentdetail\")\r\n    @FormUrlEncoded\r\n    Call<AppointmentDetailModel> getAppointmentDetails(@Field(\"UserID\") String userID,\r\n                                                       @Field(\"AppointmentTypeId\") String appointmentTypeId);\r\n\r\n    /* TODO ReminderActivity */\r\n    @POST(\"setreminder\")\r\n    @FormUrlEncoded\r\n    Call<SetReminderModel> SetReminder(@Field(\"PlaylistId\") String PlaylistId,\r\n                                       @Field(\"UserID\") String userID,\r\n                                       @Field(\"IsSingle\") String IsSingle,\r\n                                       @Field(\"ReminderTime\") String ReminderTime,\r\n                                       @Field(\"ReminderDay\") String ReminderDay\r\n    );\r\n\r\n    /* TODO PlayWellnessActivity */\r\n    @POST(\"recentlyplayed\")\r\n    @FormUrlEncoded\r\n    Call<SucessModel> getRecentlyplayed(@Field(\"AudioId\") String audioId,\r\n                                        @Field(\"UserID\") String userID);\r\n\r\n    /* TODO AddQueueActivity */\r\n    @POST(\"audiodetail\")\r\n    @FormUrlEncoded\r\n    Call<DirectionModel> getAudioDetailLists(@Field(\"UserID\") String userID,\r\n                                             @Field(\"AudioId\") String audioId);\r\n\r\n    /* TODO AddPaymentActivity */\r\n    @POST(\"cardadd\")\r\n    @FormUrlEncoded\r\n    Call<AddCardModel> getAddCard(@Field(\"UserID\") String userID,\r\n                                  @Field(\"TokenId\") String tokenId);\r\n\r\n    /* TODO MembershipChangeActivity */\r\n    @POST(\"planlistonbilling\")\r\n    @FormUrlEncoded\r\n    Call<PlanListBillingModel> getPlanListBilling(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO PaymentFragment & AllCardAdapter*/\r\n    @POST(\"cardlist\")\r\n    @FormUrlEncoded\r\n    Call<CardListModel> getCardLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AllCardAdapter */\r\n    @POST(\"carddefault\")\r\n    @FormUrlEncoded\r\n    Call<CardListModel> getChangeCard(@Field(\"UserID\") String userID,\r\n                                      @Field(\"CardId\") String cardId);\r\n\r\n    /* TODO AllCardAdapter */\r\n    @POST(\"cardremove\")\r\n    @FormUrlEncoded\r\n    Call<CardModel> getRemoveCard(@Field(\"UserID\") String userID,\r\n                                  @Field(\"CardId\") String cardId);\r\n\r\n    /* TODO AddQueueActivity */\r\n    @POST(\"audiolike\")\r\n    @FormUrlEncoded\r\n    Call<AudioLikeModel> getAudioLike(@Field(\"AudioId\") String audioId,\r\n                                      @Field(\"UserID\") String userID);\r\n\r\n    /* TODO PlaylistFragment & AddPlaylistActivity*/\r\n    @POST(\"createplaylist\")\r\n    @FormUrlEncoded\r\n    Call<CreatePlaylistModel> getCreatePlaylist(@Field(\"UserID\") String userID,\r\n                                                @Field(\"PlaylistName\") String playlistName);\r\n\r\n    /* TODO MyPlaylistActivity */\r\n    @POST(\"renameplaylist\")\r\n    @FormUrlEncoded\r\n    Call<RenamePlaylistModel> getRenamePlaylist(@Field(\"UserID\") String userID,\r\n                                                @Field(\"PlaylistId\") String playlistId,\r\n                                                @Field(\"PlaylistNewName\") String playlistNewName);\r\n\r\n    /* TODO MyPlaylistActivity */\r\n    @POST(\"removeaudiofromplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SucessModel> getRemoveAudioFromPlaylist(@Field(\"UserID\") String userID,\r\n                                                 @Field(\"AudioId\") String audioId,\r\n                                                 @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"deleteplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SucessModel> getDeletePlaylist(@Field(\"UserID\") String userID,\r\n                                        @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO AddPlaylistActivity */\r\n    @POST(\"playlist\")\r\n    @FormUrlEncoded\r\n    Call<PlaylistingModel> getPlaylisting(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO set Shorted Audio from created Playlist */\r\n    @POST(\"sortingplaylistaudio\")\r\n    @FormUrlEncoded\r\n    Call<CardModel> setShortedAudio(@Field(\"UserID\") String userID,\r\n                                    @Field(\"PlaylistId\") String playListId,\r\n                                    @Field(\"PlaylistAudioId\") String audioId);\r\n\r\n    /* TODO AddQueueActivity & PlayWellnessActivity */\r\n    @POST(\"downloads\")\r\n    @FormUrlEncoded\r\n    Call<DownloadPlaylistModel> getDownloadlistPlaylist(@Field(\"UserID\") String userID,\r\n                                                        @Field(\"AudioId\") String audioId,\r\n                                                        @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO InvoiceActivity */\r\n    @POST(\"invoicelist\")\r\n    @FormUrlEncoded\r\n    Call<InvoiceListModel> getInvoicelistPlaylist(@Field(\"UserID\") String userID,\r\n                                                  @Field(\"Flag\") String flag);\r\n\r\n    /* TODO InvoiceReceiptFragment */\r\n    @POST(\"invoicedetaildownload\")\r\n    @FormUrlEncoded\r\n    Call<InvoiceDetailModel> getInvoiceDetailPlaylist(@Field(\"UserID\") String userID,\r\n                                                      @Field(\"InvoiceId\") String invoiceId,\r\n                                                      @Field(\"Flag\") String flag);\r\n\r\n    /* TODO DownloadsActivity */\r\n    @POST(\"downloadlist\")\r\n    @FormUrlEncoded\r\n    Call<DownloadlistModel> getDownloadlistPlaylist(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AppsFragment & AudioBooksFragment & DocumentariesFragment & PodcastsFragment & WebsiteFragment */\r\n    @POST(\"resourcelist\")\r\n    @FormUrlEncoded\r\n    Call<ResourceListModel> getResourcLists(@Field(\"UserID\") String userID,\r\n                                            @Field(\"ResourceTypeId\") String resourceTypeId,\r\n                                            @Field(\"Category\") String category);\r\n\r\n    /* TODO ResourceActivity */\r\n    @POST(\"resourcecategorylist\")\r\n    @FormUrlEncoded\r\n    Call<ResourceFilterModel> getResourcFilterLists(@Field(\"UserID\") String userID);\r\n\r\n\r\n    /* TODO ReminderDetailsActivity */\r\n    @POST(\"getreminder\")\r\n    @FormUrlEncoded\r\n    Call<RemiderDetailsModel> getGetReminderStatus(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO ReminderDetailsActivity */\r\n    @POST(\"deletereminder\")\r\n    @FormUrlEncoded\r\n    Call<DeleteRemiderModel> getDeleteRemiderStatus(@Field(\"UserID\") String userID,\r\n                                                    @Field(\"ReminderId\") String reminderId);\r\n\r\n    /* TODO ReminderActivity */\r\n    @POST(\"reminderstatus\")\r\n    @FormUrlEncoded\r\n    Call<ReminderStatusModel> getReminderStatus(@Field(\"UserID\") String userID,\r\n                                                @Field(\"PlaylistId\") String playlistId,\r\n                                                @Field(\"ReminderStatus\") String reminderStatus);\r\n\r\n    /* TODO ReminderActivity */\r\n    @POST(\"reminderstatus\")\r\n    @FormUrlEncoded\r\n    Call<ReminderStatusPlaylistModel> getReminderStatusPlaylist(@Field(\"UserID\") String userID,\r\n                                                                @Field(\"PlaylistId\") String playlistId,\r\n                                                                @Field(\"ReminderStatus\") String reminderStatus);\r\n\r\n    /* TODO SelectPlaylistActivity */\r\n    @POST(\"allplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SelectPlaylistModel> getAllPlayListing(@Field(\"UserID\") String userID);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/Utility/APIInterface.java	(revision 9a6e5bfec706db245c24510ff6284b94503bcce0)
+++ app/src/main/java/com/brainwellnessspa/Utility/APIInterface.java	(date 1603173174529)
@@ -106,7 +106,8 @@
             @Field("PlanId") String planId,
             @Field("PlanFlag") String planFlag,
             @Field("TokenId") String CardId,
-            @Field("MobileNo") String UserId);
+            @Field("MobileNo") String MobileNo,
+            @Field("CountryCode") String CountryCode);
 
     /* TODO CheckoutGetCodeActivity */
     @POST("signupcheckout")
Index: app/src/main/java/com/brainwellnessspa/DownloadModule/Fragments/PlaylistsDownlaodsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DownloadModule.Fragments;\r\n\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ProgressBar;\r\n\r\nimport com.brainwellnessspa.DownloadModule.Adapters.PlaylistsDownloadsAdapter;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.databinding.FragmentDownloadsBinding;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class PlaylistsDownlaodsFragment extends Fragment {\r\n    FragmentDownloadsBinding binding;\r\n    List<DownloadPlaylistDetails> playlistList;\r\n    String UserID;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_downloads, container, false);\r\n        View view = binding.getRoot();\r\n        if (getArguments() != null) {\r\n            UserID = getArguments().getString(\"UserID\");\r\n//            playlistList = getArguments().getParcelableArrayList(\"playlistsDownlaodsFragment\");\r\n        }\r\n//        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n//        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n//        binding.tvFound.setText(\"Audio you are searching for is not available in the list\");\r\n        playlistList = new ArrayList<>();\r\n        binding.tvFound.setText(\"Your downloaded playlists will appear here\");\r\n        GetAllMedia(getActivity());\r\n\r\n        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getActivity());\r\n        binding.rvDownloadsList.setLayoutManager(mLayoutManager);\r\n        binding.rvDownloadsList.setItemAnimator(new DefaultItemAnimator());\r\n        return view;\r\n    }\r\n\r\n    private void GetAllMedia(FragmentActivity activity) {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistList = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllPlaylist();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (playlistList.size() != 0) {\r\n                    getDataList(playlistList, UserID, binding.progressBarHolder, binding.progressBar);\r\n                    binding.llError.setVisibility(View.GONE);\r\n                    binding.rvDownloadsList.setVisibility(View.VISIBLE);\r\n                } else {\r\n                    binding.llError.setVisibility(View.VISIBLE);\r\n                    binding.rvDownloadsList.setVisibility(View.GONE);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetTask getTask = new GetTask();\r\n        getTask.execute();\r\n    }\r\n\r\n    private void getDataList(List<DownloadPlaylistDetails> historyList, String UserID, FrameLayout progressBarHolder, ProgressBar ImgV) {\r\n        if (historyList.size() == 0) {\r\n            binding.tvFound.setVisibility(View.VISIBLE);\r\n            binding.llError.setVisibility(View.VISIBLE);\r\n        } else {\r\n            binding.llError.setVisibility(View.GONE);\r\n            PlaylistsDownloadsAdapter adapter = new PlaylistsDownloadsAdapter(historyList, getActivity(), UserID, progressBarHolder, ImgV, binding.llError, binding.tvFound, binding.rvDownloadsList);\r\n            binding.rvDownloadsList.setAdapter(adapter);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DownloadModule/Fragments/PlaylistsDownlaodsFragment.java	(revision 9a6e5bfec706db245c24510ff6284b94503bcce0)
+++ app/src/main/java/com/brainwellnessspa/DownloadModule/Fragments/PlaylistsDownlaodsFragment.java	(date 1603174542149)
@@ -52,6 +52,12 @@
         return view;
     }
 
+    @Override
+    public void onResume() {
+        super.onResume();
+        GetAllMedia(getActivity());
+    }
+
     private void GetAllMedia(FragmentActivity activity) {
         class GetTask extends AsyncTask<Void, Void, Void> {
             @Override
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 9a6e5bfec706db245c24510ff6284b94503bcce0)
+++ .idea/gradle.xml	(date 1603167936325)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/java/com/brainwellnessspa/DownloadModule/Fragments/AudioDownloadsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DownloadModule.Fragments;\r\n\r\nimport android.content.Context;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ProgressBar;\r\n\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.databinding.FragmentDownloadsBinding;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class AudioDownloadsFragment extends Fragment {\r\n    FragmentDownloadsBinding binding;\r\n    //    ArrayList<DownloadlistModel.Audio> audioList;\r\n    List<DownloadAudioDetails> audioList;\r\n    String UserID;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_downloads, container, false);\r\n        View view = binding.getRoot();\r\n        if (getArguments() != null) {\r\n            UserID = getArguments().getString(\"UserID\");\r\n//            audioList = getArguments().getParcelableArrayList(\"audioDownloadsFragment\");\r\n        }\r\n//        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n//        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n        audioList = new ArrayList<>();\r\n        audioList = GetAllMedia(getActivity());\r\n        binding.tvFound.setText(\"Your downloaded audios will appear here\");\r\n\r\n        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getActivity());\r\n        binding.rvDownloadsList.setLayoutManager(mLayoutManager);\r\n        binding.rvDownloadsList.setItemAnimator(new DefaultItemAnimator());\r\n        return view;\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetAllMedia(Context ctx) {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                audioList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData(\"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (audioList != null) {\r\n                    if (audioList.size() != 0) {\r\n                        getDataList(audioList, UserID, binding.progressBarHolder, binding.progressBar, binding.llError, binding.rvDownloadsList);\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvDownloadsList.setVisibility(View.VISIBLE);\r\n                    }\r\n                } else {\r\n                    binding.llError.setVisibility(View.VISIBLE);\r\n                    binding.rvDownloadsList.setVisibility(View.GONE);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return audioList;\r\n    }\r\n\r\n\r\n    private void getDataList(List<DownloadAudioDetails> historyList, String UserID, FrameLayout progressBarHolder, ProgressBar ImgV, LinearLayout llError, RecyclerView rvDownloadsList) {\r\n        if (historyList.size() == 0) {\r\n            binding.tvFound.setVisibility(View.VISIBLE);\r\n            binding.llError.setVisibility(View.VISIBLE);\r\n        } else {\r\n            binding.llError.setVisibility(View.GONE);\r\n            AudioDownlaodsAdapter adapter = new AudioDownlaodsAdapter(historyList, getActivity(), UserID, progressBarHolder, ImgV, llError, rvDownloadsList, binding.tvFound);\r\n            binding.rvDownloadsList.setAdapter(adapter);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DownloadModule/Fragments/AudioDownloadsFragment.java	(revision 9a6e5bfec706db245c24510ff6284b94503bcce0)
+++ app/src/main/java/com/brainwellnessspa/DownloadModule/Fragments/AudioDownloadsFragment.java	(date 1603174973356)
@@ -53,6 +53,12 @@
         return view;
     }
 
+    @Override
+    public void onResume() {
+        super.onResume();
+        audioList = GetAllMedia(getActivity());
+    }
+
     public List<DownloadAudioDetails> GetAllMedia(Context ctx) {
         class GetTask extends AsyncTask<Void, Void, Void> {
             @Override
@@ -85,7 +91,6 @@
         return audioList;
     }
 
-
     private void getDataList(List<DownloadAudioDetails> historyList, String UserID, FrameLayout progressBarHolder, ProgressBar ImgV, LinearLayout llError, RecyclerView rvDownloadsList) {
         if (historyList.size() == 0) {
             binding.tvFound.setVisibility(View.VISIBLE);
