Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/MyPlaylistActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.SystemClock;\r\nimport android.text.Editable;\r\nimport android.text.Selection;\r\nimport android.text.TextWatcher;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Adapters.DirectionAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Models.RenamePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Playlist.PlaylistFragment;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityMyPlaylistBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.RefreshIconData;\r\n\r\npublic class MyPlaylistActivity extends AppCompatActivity {\r\n    public static int deleteFrg = 0;\r\n    public static int ComeFindAudio = 0;\r\n    ActivityMyPlaylistBinding binding;\r\n    String UserID, PlaylistID, Download = \"\";\r\n    Context ctx;\r\n    Activity activity;\r\n    public static int comeAddPlaylist = 0;\r\n    public static int comeRename = 0;\r\n    private long mLastClickTime = 0;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    List<DownloadAudioDetails> playlistWiseAudioDetails;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    DownloadPlaylistDetails downloadPlaylistDetails;\r\n    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongsList;\r\n    List<String> fileNameList, playlistDownloadId, remainAudio;\r\n    int SongListSize = 0, count;\r\n  /*  private Handler handler1;\r\n    private Runnable UpdateSongTime1 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n*//*            if (fileNameList.size() != 0) {\r\n                if (remainAudio.size() <= SongListSize) {\r\n                    int total = SongListSize;\r\n                    int remain = remainAudio.size();\r\n                    int complate = total - remain;\r\n                    long progressPercent = complate * 100 / total;\r\n                    int downloadProgress1 = (int) progressPercent;\r\n                    if (SongListSize == 1) {\r\n                        if (downloadProgress <= 100) {\r\n                            binding.pbProgress.setProgress(downloadProgress);\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            if(downloadProgress == 100){\r\n                                getDownloadData();\r\n                            }\r\n                        }\r\n                    } else if (downloadProgress1 <= 100) {\r\n                        if(downloadProgress1 == 100){\r\n                            getDownloadData();\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        }else{\r\n                            binding.pbProgress.setProgress(downloadProgress1);\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                getDownloadData();\r\n                handler1.postDelayed(this, 500);\r\n            }else{\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n                getDownloadData();\r\n            }*//*\r\n//            getMediaByPer(PlaylistID,SongListSize);\r\n        }\r\n    };*/\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_my_playlist);\r\n        ctx = MyPlaylistActivity.this;\r\n        activity = MyPlaylistActivity.this;\r\n//        handler1 = new Handler();\r\n        fileNameList = new ArrayList<>();\r\n        playlistDownloadId = new ArrayList<>();\r\n        remainAudio = new ArrayList<>();\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        playlistSongsList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        if (getIntent().getExtras() != null) {\r\n            PlaylistID = getIntent().getStringExtra(CONSTANTS.PlaylistID);\r\n        }\r\n        getPrepareData();\r\n        downloadAudioDetailsList = GetAllMedia();\r\n        downloadPlaylistDetailsList = GetPlaylistDetail();\r\n        binding.llBack.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                ComeFindAudio = 1;\r\n//                handler1.removeCallbacks(UpdateSongTime1);\r\n                finish();\r\n            }\r\n        });\r\n        binding.llDownload.setOnClickListener(view -> callDownload());\r\n    }\r\n\r\n    /*  private void getMediaByPer(String playlistID, int totalAudio) {\r\n          class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n\r\n              @Override\r\n              protected Void doInBackground(Void... voids) {\r\n                  count= DatabaseClient.getInstance(ctx)\r\n                          .getaudioDatabase()\r\n                          .taskDao()\r\n                          .getCountDownloadProgress(\"Complete\",playlistID);\r\n\r\n                  return null;\r\n              }\r\n\r\n              @Override\r\n              protected void onPostExecute(Void aVoid) {\r\n                  downloadPlaylistDetailsList = GetPlaylistDetail();\r\n                  if(downloadPlaylistDetailsList.size()!=0) {\r\n                      if (count < totalAudio) {\r\n                          long progressPercent = count * 100 / totalAudio;\r\n                          int downloadProgress1 = (int) progressPercent;\r\n                          binding.pbProgress.setVisibility(View.VISIBLE);\r\n                          binding.ivDownloads.setVisibility(View.GONE);\r\n                          binding.pbProgress.setProgress(downloadProgress1);\r\n                          handler1.postDelayed(UpdateSongTime1, 300);\r\n                      } else {\r\n                          binding.pbProgress.setVisibility(View.GONE);\r\n                          binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                          handler1.removeCallbacks(UpdateSongTime1);\r\n                      }\r\n                  }\r\n                  super.onPostExecute(aVoid);\r\n              }\r\n          }\r\n\r\n          getMediaByPer st = new getMediaByPer();\r\n          st.execute();\r\n      }*/\r\n/*\r\n    private void getDownloadData() {\r\n        try {\r\n            SharedPreferences sharedy = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n                remainAudio = new ArrayList<>();\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 0; i < fileNameList.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            remainAudio.add(playlistDownloadId.get(i));\r\n                        }\r\n                    }\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        if (remainAudio.size() < SongListSize) {\r\n                            handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    }\r\n                    //\r\n                }else {\r\n                    fileNameList = new ArrayList<>();\r\n                    playlistDownloadId = new ArrayList<>();\r\n                    remainAudio = new ArrayList<>();\r\n                }\r\n            } else {\r\n                fileNameList = new ArrayList<>();\r\n                playlistDownloadId = new ArrayList<>();\r\n                remainAudio = new ArrayList<>();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n*/\r\n    public List<DownloadAudioDetails> GetAllMedia() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData1();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }\r\n\r\n    private void callDownload() {\r\n        List<String> url = new ArrayList<>();\r\n        List<String> name = new ArrayList<>();\r\n        List<String> downloadPlaylistId = new ArrayList<>();\r\n        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs2 = new ArrayList<>();\r\n        playlistSongs2 = playlistSongsList;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                if (playlistSongs2.size() == 0) {\r\n                    break;\r\n                } else {\r\n                    for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                        if (playlistSongs2.size() != 0) {\r\n                            if (playlistSongs2.get(x).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                playlistSongs2.remove(x);\r\n                            }\r\n                            if (playlistSongs2.size() == 0) {\r\n                                break;\r\n                            }\r\n                        } else break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (int x = 0; x < playlistSongs2.size(); x++) {\r\n            name.add(playlistSongs2.get(x).getName());\r\n            url.add(playlistSongs2.get(x).getAudioFile());\r\n            downloadPlaylistId.add(playlistSongs2.get(x).getPlaylistID());\r\n        }\r\n        enableDisableDownload(false, \"orange\");\r\n        byte[] encodedBytes = new byte[1024];\r\n\r\n        SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n        Gson gson1 = new Gson();\r\n        String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n        String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n        String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n            Type type = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> fileNameList = gson1.fromJson(json, type);\r\n            List<String> audioFile = gson1.fromJson(json1, type);\r\n            List<String> playlistId1 = gson1.fromJson(json2, type);\r\n            if (fileNameList.size() != 0) {\r\n                url.addAll(audioFile);\r\n                name.addAll(fileNameList);\r\n                downloadPlaylistId.addAll(playlistId1);\r\n            }\r\n        }\r\n\r\n        if (url.size() != 0) {\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n            downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String urlJson = gson.toJson(url);\r\n            String nameJson = gson.toJson(name);\r\n            String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n            fileNameList = name;\r\n            playlistDownloadId = downloadPlaylistId;\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n            editor.commit();\r\n        }\r\n        SongListSize = playlistSongsList.size();\r\n        savePlaylist();\r\n        saveAllMedia(playlistSongsList, encodedBytes);\r\n\r\n    }\r\n\r\n    private void savePlaylist() {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertPlaylist(downloadPlaylistDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n//                getMediaByPer(PlaylistID,SongListSize);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void saveAllMedia(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, byte[] encodedBytes) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                for (int i = 0; i < playlistSongs.size(); i++) {\r\n                    downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                    downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"0\");\r\n                    downloadAudioDetails.setPlaylistId(playlistSongs.get(i).getPlaylistID());\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                    DatabaseClient.getInstance(ctx)\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .insertMedia(downloadAudioDetails);\r\n                }\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n                enableDisableDownload(false, \"orange\");\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        ComeFindAudio = 1;\r\n//        handler1.removeCallbacks(UpdateSongTime1);\r\n        finish();\r\n    }\r\n\r\n    private void getPrepareData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SubPlayListModel> listCall = APIClient.getClient().getSubPlayLists(UserID, PlaylistID);\r\n            listCall.enqueue(new Callback<SubPlayListModel>() {\r\n                @Override\r\n                public void onResponse(Call<SubPlayListModel> call, Response<SubPlayListModel> response) {\r\n                    try {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            SubPlayListModel model = response.body();\r\n                            playlistSongsList = model.getResponseData().getPlaylistSongs();\r\n                            downloadPlaylistDetails = new DownloadPlaylistDetails();\r\n                            downloadPlaylistDetails.setPlaylistID(model.getResponseData().getPlaylistID());\r\n                            downloadPlaylistDetails.setPlaylistName(model.getResponseData().getPlaylistName());\r\n                            downloadPlaylistDetails.setPlaylistDesc(model.getResponseData().getPlaylistDesc());\r\n                            downloadPlaylistDetails.setIsReminder(model.getResponseData().getIsReminder());\r\n                            downloadPlaylistDetails.setPlaylistMastercat(model.getResponseData().getPlaylistMastercat());\r\n                            downloadPlaylistDetails.setPlaylistSubcat(model.getResponseData().getPlaylistSubcat());\r\n                            downloadPlaylistDetails.setPlaylistImage(model.getResponseData().getPlaylistImage());\r\n                            downloadPlaylistDetails.setPlaylistImageDetails(model.getResponseData().getPlaylistImageDetail());\r\n                            downloadPlaylistDetails.setTotalAudio(model.getResponseData().getTotalAudio());\r\n                            downloadPlaylistDetails.setTotalDuration(model.getResponseData().getTotalDuration());\r\n                            downloadPlaylistDetails.setTotalhour(model.getResponseData().getTotalhour());\r\n                            downloadPlaylistDetails.setTotalminute(model.getResponseData().getTotalminute());\r\n                            downloadPlaylistDetails.setCreated(model.getResponseData().getCreated());\r\n                            downloadPlaylistDetails.setDownload(model.getResponseData().getDownload());\r\n                            downloadPlaylistDetails.setLike(model.getResponseData().getLike());\r\n                            binding.tvName.setText(model.getResponseData().getPlaylistName());\r\n                            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 20,\r\n                                    1, 1, 0.54f, 20);\r\n                            binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n                            binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n                            binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n                            if (!model.getResponseData().getPlaylistImage().equalsIgnoreCase(\"\")) {\r\n                                Glide.with(ctx).load(model.getResponseData().getPlaylistImage())\r\n                                        .thumbnail(0.05f)\r\n                                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                            } else {\r\n                                binding.ivRestaurantImage.setImageResource(R.drawable.ic_playlist_bg);\r\n                            }\r\n//                            getDownloadData();\r\n                            SongListSize = model.getResponseData().getPlaylistSongs().size();\r\n//                            getMediaByPer(PlaylistID,SongListSize);\r\n//                            SongListSize = model.getResponseData().getPlaylistSongs().size();\r\n                            Download = model.getResponseData().getDownload();\r\n                            binding.llAddPlaylist.setVisibility(View.VISIBLE);\r\n//                            getDownloadData();\r\n                            binding.llAddPlaylist.setOnClickListener(view -> {\r\n                                comeAddPlaylist = 1;\r\n                                if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                                    return;\r\n                                }\r\n                                mLastClickTime = SystemClock.elapsedRealtime();\r\n                                Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                                i.putExtra(\"AudioId\", \"\");\r\n                                i.putExtra(\"PlaylistID\", model.getResponseData().getPlaylistID());\r\n                                startActivity(i);\r\n                                finish();\r\n                            });\r\n                            if (model.getResponseData().getCreated().equalsIgnoreCase(\"1\")) {\r\n                                binding.llOptions.setVisibility(View.GONE);\r\n                                binding.llRename.setVisibility(View.VISIBLE);\r\n                                binding.llDelete.setVisibility(View.VISIBLE);\r\n                                binding.llFind.setVisibility(View.GONE);\r\n                                binding.llLikes.setVisibility(View.GONE);\r\n                            } else if (model.getResponseData().getCreated().equalsIgnoreCase(\"0\")) {\r\n                                binding.llOptions.setVisibility(View.VISIBLE);\r\n                                binding.llRename.setVisibility(View.GONE);\r\n                                binding.llDelete.setVisibility(View.GONE);\r\n                                binding.llFind.setVisibility(View.VISIBLE);\r\n                                binding.llLikes.setVisibility(View.GONE);\r\n                            }\r\n\r\n                          /*  binding.llLikes.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View v) {\r\n                                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                        BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(AudioId, UserID);\r\n                                        listCall.enqueue(new Callback<AudioLikeModel>() {\r\n                                            @Override\r\n                                            public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {\r\n                                                if (response.isSuccessful()) {\r\n                                                    try {\r\n                                                        binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                        AudioLikeModel model = response.body();\r\n                                                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n                                                            binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);\r\n                                                            Like = \"0\";\r\n                                                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                                                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                                                            Like = \"1\";\r\n                                                        }\r\n                                                }\r\n                                            }\r\n\r\n                                            @Override\r\n                                            public void onFailure(Call<AudioLikeModel> call, Throwable t) {\r\n                                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                                    }\r\n                                }\r\n                            });*/\r\n\r\n                            binding.llFind.setOnClickListener(view -> {\r\n                                ComeFindAudio = 2;\r\n                                finish();\r\n                            });\r\n                            if (model.getResponseData().getPlaylistMastercat().equalsIgnoreCase(\"\")) {\r\n                                binding.tvDesc.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.tvDesc.setVisibility(View.VISIBLE);\r\n                                binding.tvDesc.setText(model.getResponseData().getPlaylistMastercat());\r\n                            }\r\n\r\n                            if (model.getResponseData().getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                                    model.getResponseData().getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                                            model.getResponseData().getTotalhour().equalsIgnoreCase(\"\")\r\n                                            && model.getResponseData().getTotalminute().equalsIgnoreCase(\"\")) {\r\n                                binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n                            } else {\r\n                                if (model.getResponseData().getTotalminute().equalsIgnoreCase(\"\")) {\r\n                                    binding.tvTime.setText(model.getResponseData().getTotalAudio() + \" Audio | \"\r\n                                            + model.getResponseData().getTotalhour() + \"h 0m\");\r\n                                } else {\r\n                                    binding.tvTime.setText(model.getResponseData().getTotalAudio() + \" Audio | \"\r\n                                            + model.getResponseData().getTotalhour() + \"h \" + model.getResponseData().getTotalminute() + \"m\");\r\n                                }\r\n                            }\r\n\r\n                            if (model.getResponseData().getPlaylistDesc().equalsIgnoreCase(\"\")) {\r\n                                binding.tvTitleDec.setVisibility(View.GONE);\r\n                                binding.tvSubDec.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.tvTitleDec.setVisibility(View.VISIBLE);\r\n                                binding.tvSubDec.setVisibility(View.VISIBLE);\r\n                            }\r\n\r\n                            binding.tvSubDec.setText(model.getResponseData().getPlaylistDesc());\r\n                            int linecount = binding.tvSubDec.getLineCount();\r\n                            if (linecount >= 4) {\r\n                                binding.tvReadMore.setVisibility(View.VISIBLE);\r\n                            } else {\r\n                                binding.tvReadMore.setVisibility(View.GONE);\r\n                            }\r\n\r\n                            binding.tvReadMore.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View view) {\r\n                                    final Dialog dialog = new Dialog(ctx);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.full_desc_layout);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvDesc = dialog.findViewById(R.id.tvDesc);\r\n                                    final RelativeLayout tvClose = dialog.findViewById(R.id.tvClose);\r\n                                    tvDesc.setText(model.getResponseData().getPlaylistDesc());\r\n\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n\r\n                                    tvClose.setOnClickListener(v -> dialog.dismiss());\r\n\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n                                }\r\n                            });\r\n\r\n                    /*    if (model.getResponseData().getDownload().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                            binding.tvDownload.setTextColor(getResources().getColor(R.color.light_gray));\r\n                            binding.llDownload.setClickable(false);\r\n                            binding.llDownload.setEnabled(false);\r\n                        } else if (!model.getResponseData().getDownload().equalsIgnoreCase(\"\")) {\r\n                            binding.llDownload.setClickable(true);\r\n                            binding.llDownload.setEnabled(true);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n                            binding.tvDownload.setTextColor(getResources().getColor(R.color.white));\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                        }*/\r\n\r\n                            binding.llDownload.setVisibility(View.VISIBLE);\r\n\r\n/*\r\n                            binding.llDownload.setOnClickListener(view -> {\r\n                                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                    BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    Call<DownloadPlaylistModel> listCall13 = null;\r\n                                    listCall13 = APIClient.getClient().getDownloadlistPlaylist(UserID, \"\", PlaylistID);\r\n                                    listCall13.enqueue(new Callback<DownloadPlaylistModel>() {\r\n                                        @Override\r\n                                        public void onResponse(Call<DownloadPlaylistModel> call13, Response<DownloadPlaylistModel> response13) {\r\n                                            if (response13.isSuccessful()) {\r\n                                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                DownloadPlaylistModel model1 = response13.body();\r\n                                                BWSApplication.showToast(model1.getResponseMessage(), ctx);\r\n                                            }\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void onFailure(Call<DownloadPlaylistModel> call13, Throwable t) {\r\n                                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        }\r\n                                    });\r\n\r\n                                } else {\r\n                                    Toast.makeText(getApplicationContext(), getString(R.string.no_server_found), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            });\r\n*/\r\n\r\n                            String[] elements = model.getResponseData().getPlaylistSubcat().split(\",\");\r\n                            List<String> direction = Arrays.asList(elements);\r\n\r\n                            DirectionAdapter directionAdapter = new DirectionAdapter(direction, ctx);\r\n                            RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(ctx, LinearLayoutManager.HORIZONTAL, false);\r\n                            binding.rvDirlist.setLayoutManager(recentlyPlayed);\r\n                            binding.rvDirlist.setItemAnimator(new DefaultItemAnimator());\r\n                            binding.rvDirlist.setAdapter(directionAdapter);\r\n                            String PlaylistID = model.getResponseData().getPlaylistID();\r\n                            binding.llRename.setOnClickListener(view -> {\r\n                                final Dialog dialog = new Dialog(ctx);\r\n                                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                dialog.setContentView(R.layout.create_palylist);\r\n                                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                final EditText edtCreate = dialog.findViewById(R.id.edtCreate);\r\n                                final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                                final TextView tvHeading = dialog.findViewById(R.id.tvHeading);\r\n                                final Button btnSendCode = dialog.findViewById(R.id.btnSendCode);\r\n                                tvHeading.setText(R.string.Rename_your_playlist);\r\n                                btnSendCode.setText(R.string.Save);\r\n                                edtCreate.requestFocus();\r\n                                edtCreate.setText(model.getResponseData().getPlaylistName());\r\n                                int position1 = edtCreate.getText().length();\r\n                                Editable editObj = edtCreate.getText();\r\n                                Selection.setSelection(editObj, position1);\r\n                                btnSendCode.setEnabled(true);\r\n                                btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                        dialog.dismiss();\r\n                                        return true;\r\n                                    }\r\n                                    return false;\r\n                                });\r\n\r\n                                TextWatcher popupTextWatcher = new TextWatcher() {\r\n                                    @Override\r\n                                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                                        String number = edtCreate.getText().toString().trim();\r\n                                        if (!number.isEmpty()) {\r\n                                            btnSendCode.setEnabled(true);\r\n                                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                            btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                                        } else {\r\n                                            btnSendCode.setEnabled(false);\r\n                                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                            btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n                                        }\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void afterTextChanged(Editable s) {\r\n                                    }\r\n                                };\r\n\r\n\r\n                                edtCreate.addTextChangedListener(popupTextWatcher);\r\n\r\n                                btnSendCode.setOnClickListener(view1 -> {\r\n                                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                        BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        Call<RenamePlaylistModel> listCall1 = APIClient.getClient().getRenamePlaylist(UserID, PlaylistID, edtCreate.getText().toString());\r\n                                        listCall1.enqueue(new Callback<RenamePlaylistModel>() {\r\n                                            @Override\r\n                                            public void onResponse(Call<RenamePlaylistModel> call1, Response<RenamePlaylistModel> response1) {\r\n                                                if (response1.isSuccessful()) {\r\n                                                    comeRename = 1;\r\n                                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                    RenamePlaylistModel listModel = response1.body();\r\n                                                    BWSApplication.showToast(listModel.getResponseMessage(), ctx);\r\n                                                    dialog.dismiss();\r\n                                                    finish();\r\n                                                }\r\n                                            }\r\n\r\n                                            @Override\r\n                                            public void onFailure(Call<RenamePlaylistModel> call1, Throwable t) {\r\n                                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                                    }\r\n\r\n                                });\r\n                                tvCancel.setOnClickListener(v -> dialog.dismiss());\r\n                                dialog.show();\r\n                                dialog.setCancelable(false);\r\n                            });\r\n\r\n                            binding.llDelete.setOnClickListener(view -> {\r\n                                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                    BWSApplication.showToast(\"Currently this playlist is in player,so you can't delete this playlist as of now\", ctx);\r\n                                } else {\r\n                                    final Dialog dialog = new Dialog(ctx);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.delete_playlist);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                                    final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n                                    final RelativeLayout tvconfirm = dialog.findViewById(R.id.tvconfirm);\r\n                                    tvHeader.setText(\"Are you sure you want to delete \" + model.getResponseData().getPlaylistName() + \"  playlist?\");\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            Fragment playlistFragment = new PlaylistFragment();\r\n                                            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                                            fragmentManager1.beginTransaction()\r\n                                                    .add(R.id.flContainer, playlistFragment)\r\n                                                    .commit();\r\n                                            Bundle bundle = new Bundle();\r\n                                            playlistFragment.setArguments(bundle);\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n\r\n                                    tvconfirm.setOnClickListener(v -> {\r\n                                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                            Call<SucessModel> listCall12 = APIClient.getClient().getDeletePlaylist(UserID, PlaylistID);\r\n                                            listCall12.enqueue(new Callback<SucessModel>() {\r\n                                                @Override\r\n                                                public void onResponse(Call<SucessModel> call12, Response<SucessModel> response12) {\r\n                                                    if (response12.isSuccessful()) {\r\n                                                        deleteFrg = 1;\r\n                                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                        SucessModel listModel = response12.body();\r\n                                                        dialog.dismiss();\r\n                                                        BWSApplication.showToast(listModel.getResponseMessage(), ctx);\r\n                                                        finish();\r\n                                                    }\r\n                                                }\r\n\r\n                                                @Override\r\n                                                public void onFailure(Call<SucessModel> call12, Throwable t) {\r\n                                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                }\r\n                                            });\r\n                                        } else {\r\n                                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                                        }\r\n                                    });\r\n\r\n                                    tvGoBack.setOnClickListener(v -> dialog.dismiss());\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n                                }\r\n                            });\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SubPlayListModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (RefreshIconData == 0) {\r\n                    enableDisableDownload(false, \"gray\");\r\n                } else if (Download.equalsIgnoreCase(\"1\")) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (Download.equalsIgnoreCase(\"0\") || Download.equalsIgnoreCase(\"\") ||\r\n                        RefreshIconData != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                } else if (downloadPlaylistDetailsList.size() == 0 && RefreshIconData != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                }\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private void enableDisableDownload(boolean b, String color) {\r\n        if (b) {\r\n            binding.llDownload.setClickable(true);\r\n            binding.llDownload.setEnabled(true);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.tvDownload.setTextColor(getResources().getColor(R.color.white));\r\n        } else {\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.llDownload.setClickable(false);\r\n            binding.llDownload.setEnabled(false);\r\n            if (color.equalsIgnoreCase(\"gray\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            } else if (color.equalsIgnoreCase(\"orange\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n            }\r\n            binding.tvDownload.setTextColor(getResources().getColor(R.color.white));\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/MyPlaylistActivity.java	(revision bef12230fb63eeb22fc36a24a9f011f88ef343b3)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/MyPlaylistActivity.java	(date 1604467540650)
@@ -32,6 +32,7 @@
 import androidx.recyclerview.widget.RecyclerView;
 
 import com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;
+import com.brainwellnessspa.DashboardModule.Models.PlaylistLikeModel;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.google.gson.Gson;
@@ -472,55 +473,28 @@
                                 binding.llRename.setVisibility(View.VISIBLE);
                                 binding.llDelete.setVisibility(View.VISIBLE);
                                 binding.llFind.setVisibility(View.GONE);
-                                binding.llLikes.setVisibility(View.GONE);
+                                binding.llLikes.setVisibility(View.VISIBLE);
                             } else if (model.getResponseData().getCreated().equalsIgnoreCase("0")) {
                                 binding.llOptions.setVisibility(View.VISIBLE);
                                 binding.llRename.setVisibility(View.GONE);
                                 binding.llDelete.setVisibility(View.GONE);
                                 binding.llFind.setVisibility(View.VISIBLE);
-                                binding.llLikes.setVisibility(View.GONE);
+                                binding.llLikes.setVisibility(View.VISIBLE);
                             }
 
-                          /*  binding.llLikes.setOnClickListener(new View.OnClickListener() {
+                            binding.llLikes.setOnClickListener(new View.OnClickListener() {
                                 @Override
                                 public void onClick(View v) {
-                                    if (BWSApplication.isNetworkConnected(ctx)) {
-                                        BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                                        Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(AudioId, UserID);
-                                        listCall.enqueue(new Callback<AudioLikeModel>() {
-                                            @Override
-                                            public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {
-                                                if (response.isSuccessful()) {
-                                                    try {
-                                                        binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);
-                                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                                                        AudioLikeModel model = response.body();
-                                                        if (model.getResponseData().getFlag().equalsIgnoreCase("0")) {
-                                                            binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);
-                                                            Like = "0";
-                                                        } else if (model.getResponseData().getFlag().equalsIgnoreCase("1")) {
-                                                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);
-                                                            Like = "1";
-                                                        }
-                                                }
-                                            }
-
-                                            @Override
-                                            public void onFailure(Call<AudioLikeModel> call, Throwable t) {
-                                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                                            }
-                                        });
-                                    } else {
-                                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);
-                                    }
-                                }
-                            });*/
-
+                                    CallPlaylistLike(PlaylistID);
+                                }
+                            });
                             binding.llFind.setOnClickListener(view -> {
                                 ComeFindAudio = 2;
                                 finish();
                             });
-                            if (model.getResponseData().getPlaylistMastercat().equalsIgnoreCase("")) {
+                            if (model.getResponseData().
+                                    getPlaylistMastercat().
+                                    equalsIgnoreCase("")) {
                                 binding.tvDesc.setVisibility(View.GONE);
                             } else {
                                 binding.tvDesc.setVisibility(View.VISIBLE);
@@ -550,7 +524,9 @@
                                 binding.tvSubDec.setVisibility(View.VISIBLE);
                             }
 
-                            binding.tvSubDec.setText(model.getResponseData().getPlaylistDesc());
+                            binding.tvSubDec.setText(model.getResponseData().
+
+                                    getPlaylistDesc());
                             int linecount = binding.tvSubDec.getLineCount();
                             if (linecount >= 4) {
                                 binding.tvReadMore.setVisibility(View.VISIBLE);
@@ -579,7 +555,6 @@
                                     });
 
                                     tvClose.setOnClickListener(v -> dialog.dismiss());
-
                                     dialog.show();
                                     dialog.setCancelable(false);
                                 }
@@ -600,9 +575,7 @@
                         }*/
 
                             binding.llDownload.setVisibility(View.VISIBLE);
-
-/*
-                            binding.llDownload.setOnClickListener(view -> {
+/*                          binding.llDownload.setOnClickListener(view -> {
                                 if (BWSApplication.isNetworkConnected(ctx)) {
                                     BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
                                     Call<DownloadPlaylistModel> listCall13 = null;
@@ -631,11 +604,11 @@
 
                             String[] elements = model.getResponseData().getPlaylistSubcat().split(",");
                             List<String> direction = Arrays.asList(elements);
-
                             DirectionAdapter directionAdapter = new DirectionAdapter(direction, ctx);
                             RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(ctx, LinearLayoutManager.HORIZONTAL, false);
                             binding.rvDirlist.setLayoutManager(recentlyPlayed);
-                            binding.rvDirlist.setItemAnimator(new DefaultItemAnimator());
+                            binding.rvDirlist.setItemAnimator(new
+                                    DefaultItemAnimator());
                             binding.rvDirlist.setAdapter(directionAdapter);
                             String PlaylistID = model.getResponseData().getPlaylistID();
                             binding.llRename.setOnClickListener(view -> {
@@ -806,6 +779,40 @@
             BWSApplication.showToast(getString(R.string.no_server_found), ctx);
         }
     }
+
+    public void CallPlaylistLike(String PlaylistID) {
+        if (BWSApplication.isNetworkConnected(ctx)) {
+            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+            Call<PlaylistLikeModel> listCall = APIClient.getClient().getPlaylistLike(PlaylistID, UserID);
+            listCall.enqueue(new Callback<PlaylistLikeModel>() {
+                @Override
+                public void onResponse(Call<PlaylistLikeModel> call, Response<PlaylistLikeModel> response) {
+                    if (response.isSuccessful()) {
+                        try {
+                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);
+                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                            PlaylistLikeModel model = response.body();
+                            if (model.getResponseData().getFlag().equalsIgnoreCase("0")) {
+                                binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);
+                            } else if (model.getResponseData().getFlag().equalsIgnoreCase("1")) {
+                                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);
+                            }
+                            BWSApplication.showToast(model.getResponseMessage(), ctx);
+                        } catch (Exception e) {
+                            e.printStackTrace();
+                        }
+                    }
+                }
+
+                @Override
+                public void onFailure(Call<PlaylistLikeModel> call, Throwable t) {
+                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                }
+            });
+        } else {
+            BWSApplication.showToast(getString(R.string.no_server_found), ctx);
+        }
+    }
 
     private List<DownloadPlaylistDetails> GetPlaylistDetail() {
         class GetTask extends AsyncTask<Void, Void, Void> {
Index: app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutPaymentActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.MembershipModule.Activities;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Paint;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.Spannable;\r\nimport android.text.TextWatcher;\r\nimport android.text.style.ReplacementSpan;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.ImageView;\r\nimport android.widget.NumberPicker;\r\nimport android.widget.TextView;\r\n\r\nimport com.brainwellnessspa.AddPayment.AddPaymentActivity;\r\nimport com.brainwellnessspa.AddPayment.Model.AddCardModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityCheckoutPaymentBinding;\r\nimport com.brainwellnessspa.databinding.YeardialogBinding;\r\nimport com.stripe.android.Stripe;\r\nimport com.stripe.android.TokenCallback;\r\nimport com.stripe.android.model.Card;\r\nimport com.stripe.android.model.Token;\r\n\r\nimport java.util.Calendar;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.MembershipModule.Adapters.MembershipPlanAdapter.planFlag;\r\nimport static com.brainwellnessspa.MembershipModule.Adapters.MembershipPlanAdapter.planId;\r\nimport static com.brainwellnessspa.MembershipModule.Adapters.MembershipPlanAdapter.price;\r\n\r\npublic class CheckoutPaymentActivity extends AppCompatActivity {\r\n    ActivityCheckoutPaymentBinding binding;\r\n    String MobileNo, Code;\r\n    Context context;\r\n    Activity activity;\r\n    Dialog d;\r\n    int a = 0;\r\n    int year, month;\r\n    YeardialogBinding binding1;\r\n    String strToken;\r\n    private long mLastClickTime = 0;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_checkout_payment);\r\n        context = CheckoutPaymentActivity.this;\r\n        activity = CheckoutPaymentActivity.this;\r\n        if (getIntent() != null) {\r\n            MobileNo = getIntent().getStringExtra(\"MobileNo\");\r\n            Code = getIntent().getStringExtra(\"Code\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                finish();\r\n            }\r\n        });\r\n\r\n        year = Calendar.getInstance().get(Calendar.YEAR);\r\n        month = Calendar.getInstance().get(Calendar.MONTH);\r\n        month = month + 1;\r\n        d = new Dialog(context);\r\n        d.setTitle(\"Year Picker\");\r\n        binding1 = DataBindingUtil.inflate(LayoutInflater.from(context),\r\n                R.layout.yeardialog, null, false);\r\n        d.setContentView(binding1.getRoot());\r\n       /* binding.etNumber.addTextChangedListener(addCardTextWatcher);\r\n        binding.etName.addTextChangedListener(addCardTextWatcher);\r\n        binding.textMonth.addTextChangedListener(addCardTextWatcher);\r\n        binding.etCvv.addTextChangedListener(addCardTextWatcher);*/\r\n\r\n//        DecimalFormat precision = new DecimalFormat(\"#.##\");\r\n        binding.tvDoller.setText(\"$\" + price);\r\n//        binding.tvDoller.setText(\"$\" + precision.format(price));\r\n        binding.etNumber.addTextChangedListener(new TextWatcher() {\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                if (binding.etNumber.getText().toString().length() == 16) {\r\n                    binding.etName.requestFocus();\r\n                }\r\n            }\r\n\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            }\r\n\r\n            public void afterTextChanged(Editable s) {\r\n            }\r\n        });\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(CheckoutPaymentActivity.this, 0,\r\n                5, 3, 1f, 0);\r\n        binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        binding.ivRestaurantImage.setImageResource(R.drawable.ic_checkout_card_logo);\r\n        binding.opendilog.setOnClickListener(v -> {\r\n            a = 1;\r\n            showYearDialog();\r\n        });\r\n\r\n        AddPaymentActivity.CreditCardFormatTextWatcher tv = new AddPaymentActivity.CreditCardFormatTextWatcher(binding.etNumber);\r\n        binding.etNumber.addTextChangedListener(tv);\r\n        binding.etName.addTextChangedListener(addCardTextWatcher);\r\n        binding.etNumber.addTextChangedListener(addCardTextWatcher);\r\n        binding.etCvv.addTextChangedListener(addCardTextWatcher);\r\n        binding.textMonth.addTextChangedListener(addCardTextWatcher);\r\n        binding.btnPayment.setOnClickListener(view -> {\r\n           if (binding.etNumber.getText().toString().equalsIgnoreCase(\"\")) {\r\n                binding.tlNumber.setError(\"Card number is required.\");\r\n                binding.txtError.setText(\"\");\r\n                binding.tlName.setError(\"\");\r\n            } else if (binding.etNumber.getText().toString().length() <= 15 || binding.etNumber.getText().toString().length() > 16) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"Please enter a valid card number\");\r\n                binding.txtError.setText(\"\");\r\n            } else if (binding.etName.getText().toString().equalsIgnoreCase(\"\")) {\r\n                binding.tlName.setError(\"Card name is required\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"\");\r\n            } else if (binding1.MonthPicker.getValue() < month && binding1.YearPicker.getValue() == year) {\r\n                binding.txtError.setText(\"Please enter a valid expiry mm/yyyy\");\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n            } else if (binding.textMonth.getText().toString().equalsIgnoreCase(\"Expiry Date\") || a == 0) {\r\n                binding.txtError.setText(\"Expiry month is required\");\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n            } else if (binding.etCvv.getText().toString().matches(\"\")) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"CVV is required\");\r\n            } else if (binding.etCvv.getText().toString().length() < 3) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"Please enter a valid CVV number\");\r\n            } else {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"\");\r\n                final String strCardNo = binding.etNumber.getText().toString().trim().replaceAll(\"\\\\s+\", \"\");\r\n                int months = binding1.MonthPicker.getValue();\r\n                int Years = binding1.YearPicker.getValue();\r\n                Card card = new Card(strCardNo, months, Years, binding.etCvv.getText().toString());\r\n\r\n                new Stripe().createToken(card, getString(R.string.stipe_test_key), new TokenCallback() {\r\n                    @Override\r\n                    public void onError(Exception error) {\r\n                        Log.e(\"error.........\", \"\" + error.toString());\r\n                        BWSApplication.showToast(\"Please enter valid card details\", getApplicationContext());\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onSuccess(Token token) {\r\n                        strToken = token.getId();\r\n                        Log.e(\"strToken.............\", \"\" + strToken);\r\n                        if (!strToken.equalsIgnoreCase(\"\")) {\r\n                            if (BWSApplication.isNetworkConnected(context)) {\r\n                                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                String countryCode = Code.replace(\"+\",\"\");\r\n                                Call<AddCardModel> listCall = APIClient.getClient().getMembershipPayment(planId, planFlag, strToken, MobileNo, countryCode);\r\n                                listCall.enqueue(new Callback<AddCardModel>() {\r\n                                    @Override\r\n                                    public void onResponse(Call<AddCardModel> call, Response<AddCardModel> response) {\r\n                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        if (response.isSuccessful()) {\r\n                                            AddCardModel cardModel = response.body();\r\n                                            if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n                                                keyboard.hideSoftInputFromWindow(view.getWindowToken(), 0);\r\n                                                if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);\r\n                                                    SharedPreferences.Editor editor = shared.edit();\r\n                                                    editor.putString(CONSTANTS.PREF_KEY_UserID, cardModel.getResponseData().getUserId());\r\n                                                    editor.putString(CONSTANTS.PREF_KEY_MobileNo, MobileNo);\r\n                                                    editor.commit();\r\n                                                    Intent i = new Intent(CheckoutPaymentActivity.this, ThankYouMpActivity.class);\r\n                                                    startActivity(i);\r\n                                                    finish();\r\n                                                } else if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                                } else {\r\n                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                                }\r\n                                            } else {\r\n                                                BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onFailure(Call<AddCardModel> call, Throwable t) {\r\n                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                BWSApplication.showToast(getString(R.string.no_server_found), context);\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        finish();\r\n    }\r\n\r\n      private TextWatcher addCardTextWatcher = new TextWatcher() {\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            String CardNo = binding.etNumber.getText().toString().trim();\r\n            String CardName = binding.etName.getText().toString().trim();\r\n            String Month = binding.textMonth.getText().toString().trim();\r\n            String CVV = binding.etCvv.getText().toString().trim();\r\n            if (!CardNo.isEmpty() || !CardName.isEmpty() || !Month.isEmpty() || !CVV.isEmpty()) {\r\n                binding.btnPayment.setEnabled(true);\r\n                binding.btnPayment.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnPayment.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnPayment.setEnabled(false);\r\n                binding.btnPayment.setTextColor(getResources().getColor(R.color.light_gray));\r\n                binding.btnPayment.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n        }\r\n    };\r\n\r\n    public void showYearDialog() {\r\n        binding1.MonthPicker.setMaxValue(12);\r\n        binding1.MonthPicker.setMinValue(1);\r\n        binding1.MonthPicker.setWrapSelectorWheel(false);\r\n        binding1.MonthPicker.setValue(month);\r\n        binding1.MonthPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);\r\n        binding1.YearPicker.setMaxValue(year + 80);\r\n        binding1.YearPicker.setMinValue(year);\r\n        binding1.YearPicker.setWrapSelectorWheel(false);\r\n        binding1.YearPicker.setValue(year);\r\n        binding1.YearPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);\r\n\r\n        binding1.set.setOnClickListener(v -> {\r\n            if (binding1.MonthPicker.getValue() < month && binding1.YearPicker.getValue() == year) {\r\n                binding.txtError.setText(\"Please Select Valid Month And Year\");\r\n                d.dismiss();\r\n            } else {\r\n                binding.textMonth.setText(\" \" + binding1.MonthPicker.getValue() + \" / \" + binding1.YearPicker.getValue());\r\n                binding.txtError.setText(\"\");\r\n                d.dismiss();\r\n            }\r\n        });\r\n        binding1.cancle.setOnClickListener(v -> {\r\n            d.dismiss();\r\n        });\r\n        d.show();\r\n    }\r\n\r\n    public static class CreditCardFormatTextWatcher implements TextWatcher {\r\n        public static final int NO_MAX_LENGTH = -1;\r\n        private int maxLength = NO_MAX_LENGTH;\r\n        private int paddingPx;\r\n        private boolean internalStopFormatFlag;\r\n\r\n        public CreditCardFormatTextWatcher(@NonNull TextView textView) {\r\n            setPaddingEm(textView, 1f);\r\n        }\r\n\r\n        public static void formatCardNumber(@NonNull Editable ccNumber, int paddingPx, int maxLength) {\r\n            int textLength = ccNumber.length();\r\n            // first remove any previous span\r\n            AddPaymentActivity.CreditCardFormatTextWatcher.PaddingRightSpan[] spans = ccNumber.getSpans(0, ccNumber.length(), AddPaymentActivity.CreditCardFormatTextWatcher.PaddingRightSpan.class);\r\n            for (int i = 0; i < spans.length; i++) {\r\n                ccNumber.removeSpan(spans[i]);\r\n            }\r\n            // then truncate to max length\r\n            if (maxLength > 0 && textLength > maxLength - 1) {\r\n                ccNumber.replace(maxLength, textLength, \"\");\r\n            }\r\n            // finally add margin spans\r\n            for (int i = 1; i <= ((textLength - 1) / 4); i++) {\r\n                int end = i * 4;\r\n                int start = end - 1;\r\n                AddPaymentActivity.CreditCardFormatTextWatcher.PaddingRightSpan marginSPan = new AddPaymentActivity.CreditCardFormatTextWatcher.PaddingRightSpan(paddingPx);\r\n                ccNumber.setSpan(marginSPan, start, end, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n            }\r\n        }\r\n\r\n\r\n        public void setPaddingPx(int paddingPx) {\r\n            this.paddingPx = paddingPx;\r\n        }\r\n\r\n\r\n        public void setPaddingEm(@NonNull TextView textView, float em) {\r\n            float emSize = textView.getPaint().measureText(\"x\");\r\n            setPaddingPx((int) (em * emSize));\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            if (internalStopFormatFlag) {\r\n                return;\r\n            }\r\n            internalStopFormatFlag = true;\r\n            formatCardNumber(s, paddingPx, maxLength);\r\n            internalStopFormatFlag = false;\r\n        }\r\n\r\n        public static class PaddingRightSpan extends ReplacementSpan {\r\n\r\n            private int mPadding;\r\n\r\n            public PaddingRightSpan(int padding) {\r\n                mPadding = padding;\r\n            }\r\n\r\n            @Override\r\n            public int getSize(@NonNull Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {\r\n                float[] widths = new float[end - start];\r\n                paint.getTextWidths(text, start, end, widths);\r\n                int sum = mPadding;\r\n                for (int i = 0; i < widths.length; i++) {\r\n                    sum += widths[i];\r\n                }\r\n                return sum;\r\n            }\r\n\r\n            @Override\r\n            public void draw(@NonNull Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, @NonNull Paint paint) {\r\n                canvas.drawText(text, start, end, x, y, paint);\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutPaymentActivity.java	(revision bef12230fb63eeb22fc36a24a9f011f88ef343b3)
+++ app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutPaymentActivity.java	(date 1604471378163)
@@ -125,7 +125,7 @@
         binding.etCvv.addTextChangedListener(addCardTextWatcher);
         binding.textMonth.addTextChangedListener(addCardTextWatcher);
         binding.btnPayment.setOnClickListener(view -> {
-           if (binding.etNumber.getText().toString().equalsIgnoreCase("")) {
+            if (binding.etNumber.getText().toString().equalsIgnoreCase("")) {
                 binding.tlNumber.setError("Card number is required.");
                 binding.txtError.setText("");
                 binding.tlName.setError("");
@@ -177,7 +177,7 @@
                         if (!strToken.equalsIgnoreCase("")) {
                             if (BWSApplication.isNetworkConnected(context)) {
                                 BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                                String countryCode = Code.replace("+","");
+                                String countryCode = Code.replace("+", "");
                                 Call<AddCardModel> listCall = APIClient.getClient().getMembershipPayment(planId, planFlag, strToken, MobileNo, countryCode);
                                 listCall.enqueue(new Callback<AddCardModel>() {
                                     @Override
@@ -188,20 +188,16 @@
                                             if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {
                                                 InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                                 keyboard.hideSoftInputFromWindow(view.getWindowToken(), 0);
-                                                if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {
-                                                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);
-                                                    SharedPreferences.Editor editor = shared.edit();
-                                                    editor.putString(CONSTANTS.PREF_KEY_UserID, cardModel.getResponseData().getUserId());
-                                                    editor.putString(CONSTANTS.PREF_KEY_MobileNo, MobileNo);
-                                                    editor.commit();
-                                                    Intent i = new Intent(CheckoutPaymentActivity.this, ThankYouMpActivity.class);
-                                                    startActivity(i);
-                                                    finish();
-                                                } else if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {
-                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);
-                                                } else {
-                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);
-                                                }
+                                                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);
+                                                SharedPreferences.Editor editor = shared.edit();
+                                                editor.putString(CONSTANTS.PREF_KEY_UserID, cardModel.getResponseData().getUserId());
+                                                editor.putString(CONSTANTS.PREF_KEY_MobileNo, MobileNo);
+                                                editor.commit();
+                                                Intent i = new Intent(CheckoutPaymentActivity.this, ThankYouMpActivity.class);
+                                                startActivity(i);
+                                                finish();
+                                            } else if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {
+                                                BWSApplication.showToast(cardModel.getResponseMessage(), context);
                                             } else {
                                                 BWSApplication.showToast(cardModel.getResponseMessage(), context);
                                             }
@@ -229,7 +225,7 @@
         finish();
     }
 
-      private TextWatcher addCardTextWatcher = new TextWatcher() {
+    private TextWatcher addCardTextWatcher = new TextWatcher() {
         @Override
         public void beforeTextChanged(CharSequence s, int start, int count, int after) {
         }
@@ -270,7 +266,7 @@
 
         binding1.set.setOnClickListener(v -> {
             if (binding1.MonthPicker.getValue() < month && binding1.YearPicker.getValue() == year) {
-                binding.txtError.setText("Please Select Valid Month And Year");
+                binding.txtError.setText("Please select valid month and year");
                 d.dismiss();
             } else {
                 binding.textMonth.setText(" " + binding1.MonthPicker.getValue() + " / " + binding1.YearPicker.getValue());
Index: app/src/main/java/com/brainwellnessspa/LikeModule/Models/LikesHistoryModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.LikeModule.Models;\r\n\r\nimport android.os.Parcelable;\r\n\r\nimport com.brainwellnessspa.InvoiceModule.Models.InvoiceListModel;\r\nimport com.google.gson.annotations.Expose;\r\nimport com.google.gson.annotations.SerializedName;\r\n\r\nimport java.util.List;\r\n\r\npublic class LikesHistoryModel {\r\n    @SerializedName(\"ResponseData\")\r\n    @Expose\r\n    private ResponseData responseData;\r\n    @SerializedName(\"ResponseCode\")\r\n    @Expose\r\n    private String responseCode;\r\n    @SerializedName(\"ResponseMessage\")\r\n    @Expose\r\n    private String responseMessage;\r\n    @SerializedName(\"ResponseStatus\")\r\n    @Expose\r\n    private String responseStatus;\r\n\r\n    public ResponseData getResponseData() {\r\n        return responseData;\r\n    }\r\n\r\n    public void setResponseData(ResponseData responseData) {\r\n        this.responseData = responseData;\r\n    }\r\n\r\n    public String getResponseCode() {\r\n        return responseCode;\r\n    }\r\n\r\n    public void setResponseCode(String responseCode) {\r\n        this.responseCode = responseCode;\r\n    }\r\n\r\n    public String getResponseMessage() {\r\n        return responseMessage;\r\n    }\r\n\r\n    public void setResponseMessage(String responseMessage) {\r\n        this.responseMessage = responseMessage;\r\n    }\r\n\r\n    public String getResponseStatus() {\r\n        return responseStatus;\r\n    }\r\n\r\n    public void setResponseStatus(String responseStatus) {\r\n        this.responseStatus = responseStatus;\r\n    }\r\n\r\n    public class ResponseData {\r\n        @SerializedName(\"Audio\")\r\n        @Expose\r\n        private List<Audio> audio = null;\r\n        @SerializedName(\"Playlist\")\r\n        @Expose\r\n        private List<Playlist> playlist = null;\r\n\r\n        public List<Audio> getAudio() {\r\n            return audio;\r\n        }\r\n\r\n        public void setAudio(List<Audio> audio) {\r\n            this.audio = audio;\r\n        }\r\n\r\n        public List<Playlist> getPlaylist() {\r\n            return playlist;\r\n        }\r\n\r\n        public void setPlaylist(List<Playlist> playlist) {\r\n            this.playlist = playlist;\r\n        }\r\n\r\n        public class Audio {\r\n            @SerializedName(\"ID\")\r\n            @Expose\r\n            private String iD;\r\n            @SerializedName(\"PlaylistId\")\r\n            @Expose\r\n            private String playlistId;\r\n            @SerializedName(\"Name\")\r\n            @Expose\r\n            private String name;\r\n            @SerializedName(\"AudioFile\")\r\n            @Expose\r\n            private String audioFile;\r\n            @SerializedName(\"ImageFile\")\r\n            @Expose\r\n            private String imageFile;\r\n            @SerializedName(\"Audiomastercat\")\r\n            @Expose\r\n            private String audiomastercat;\r\n            @SerializedName(\"AudioSubCategory\")\r\n            @Expose\r\n            private String audioSubCategory;\r\n            @SerializedName(\"AudioDuration\")\r\n            @Expose\r\n            private String audioDuration;\r\n            @SerializedName(\"AudioDirection\")\r\n            @Expose\r\n            private String audioDirection;\r\n            @SerializedName(\"Like\")\r\n            @Expose\r\n            private String like;\r\n            @SerializedName(\"Download\")\r\n            @Expose\r\n            private String download;\r\n            @SerializedName(\"IsLock\")\r\n            @Expose\r\n            private String isLock;\r\n            @SerializedName(\"IsPlay\")\r\n            @Expose\r\n            private String isPlay;\r\n\r\n            public String getID() {\r\n                return iD;\r\n            }\r\n\r\n            public void setID(String iD) {\r\n                this.iD = iD;\r\n            }\r\n\r\n            public String getPlaylistId() {\r\n                return playlistId;\r\n            }\r\n\r\n            public void setPlaylistId(String playlistId) {\r\n                this.playlistId = playlistId;\r\n            }\r\n\r\n            public String getName() {\r\n                return name;\r\n            }\r\n\r\n            public void setName(String name) {\r\n                this.name = name;\r\n            }\r\n\r\n            public String getAudioFile() {\r\n                return audioFile;\r\n            }\r\n\r\n            public void setAudioFile(String audioFile) {\r\n                this.audioFile = audioFile;\r\n            }\r\n\r\n            public String getImageFile() {\r\n                return imageFile;\r\n            }\r\n\r\n            public void setImageFile(String imageFile) {\r\n                this.imageFile = imageFile;\r\n            }\r\n\r\n            public String getAudiomastercat() {\r\n                return audiomastercat;\r\n            }\r\n\r\n            public void setAudiomastercat(String audiomastercat) {\r\n                this.audiomastercat = audiomastercat;\r\n            }\r\n\r\n            public String getAudioSubCategory() {\r\n                return audioSubCategory;\r\n            }\r\n\r\n            public void setAudioSubCategory(String audioSubCategory) {\r\n                this.audioSubCategory = audioSubCategory;\r\n            }\r\n\r\n            public String getAudioDuration() {\r\n                return audioDuration;\r\n            }\r\n\r\n            public void setAudioDuration(String audioDuration) {\r\n                this.audioDuration = audioDuration;\r\n            }\r\n\r\n            public String getAudioDirection() {\r\n                return audioDirection;\r\n            }\r\n\r\n            public void setAudioDirection(String audioDirection) {\r\n                this.audioDirection = audioDirection;\r\n            }\r\n\r\n            public String getLike() {\r\n                return like;\r\n            }\r\n\r\n            public void setLike(String like) {\r\n                this.like = like;\r\n            }\r\n\r\n            public String getDownload() {\r\n                return download;\r\n            }\r\n\r\n            public void setDownload(String download) {\r\n                this.download = download;\r\n            }\r\n\r\n            public String getIsLock() {\r\n                return isLock;\r\n            }\r\n\r\n            public void setIsLock(String isLock) {\r\n                this.isLock = isLock;\r\n            }\r\n\r\n            public String getIsPlay() {\r\n                return isPlay;\r\n            }\r\n\r\n            public void setIsPlay(String isPlay) {\r\n                this.isPlay = isPlay;\r\n            }\r\n        }\r\n\r\n        public class Playlist {\r\n            @SerializedName(\"PlaylistId\")\r\n            @Expose\r\n            private String playlistId;\r\n            @SerializedName(\"PlaylistName\")\r\n            @Expose\r\n            private String playlistName;\r\n            @SerializedName(\"PlaylistImage\")\r\n            @Expose\r\n            private String playlistImage;\r\n            @SerializedName(\"TotalAudio\")\r\n            @Expose\r\n            private String totalAudio;\r\n            @SerializedName(\"IsLock\")\r\n            @Expose\r\n            private String isLock;\r\n            @SerializedName(\"TotalDuration\")\r\n            @Expose\r\n            private String totalDuration;\r\n            @SerializedName(\"Totalhour\")\r\n            @Expose\r\n            private String totalhour;\r\n            @SerializedName(\"Totalminute\")\r\n            @Expose\r\n            private String totalminute;\r\n\r\n            public String getPlaylistId() {\r\n                return playlistId;\r\n            }\r\n\r\n            public void setPlaylistId(String playlistId) {\r\n                this.playlistId = playlistId;\r\n            }\r\n\r\n            public String getPlaylistName() {\r\n                return playlistName;\r\n            }\r\n\r\n            public void setPlaylistName(String playlistName) {\r\n                this.playlistName = playlistName;\r\n            }\r\n\r\n            public String getPlaylistImage() {\r\n                return playlistImage;\r\n            }\r\n\r\n            public void setPlaylistImage(String playlistImage) {\r\n                this.playlistImage = playlistImage;\r\n            }\r\n\r\n            public String getTotalAudio() {\r\n                return totalAudio;\r\n            }\r\n\r\n            public void setTotalAudio(String totalAudio) {\r\n                this.totalAudio = totalAudio;\r\n            }\r\n\r\n            public String getIsLock() {\r\n                return isLock;\r\n            }\r\n\r\n            public void setIsLock(String isLock) {\r\n                this.isLock = isLock;\r\n            }\r\n\r\n            public String getTotalDuration() {\r\n                return totalDuration;\r\n            }\r\n\r\n            public void setTotalDuration(String totalDuration) {\r\n                this.totalDuration = totalDuration;\r\n            }\r\n\r\n            public String getTotalhour() {\r\n                return totalhour;\r\n            }\r\n\r\n            public void setTotalhour(String totalhour) {\r\n                this.totalhour = totalhour;\r\n            }\r\n\r\n            public String getTotalminute() {\r\n                return totalminute;\r\n            }\r\n\r\n            public void setTotalminute(String totalminute) {\r\n                this.totalminute = totalminute;\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LikeModule/Models/LikesHistoryModel.java	(revision bef12230fb63eeb22fc36a24a9f011f88ef343b3)
+++ app/src/main/java/com/brainwellnessspa/LikeModule/Models/LikesHistoryModel.java	(date 1604468089496)
@@ -78,6 +78,120 @@
             this.playlist = playlist;
         }
 
+        public class Audiolist {
+
+            @SerializedName("AudioID")
+            @Expose
+            private String audioID;
+            @SerializedName("AudioName")
+            @Expose
+            private String audioName;
+            @SerializedName("AudioFile")
+            @Expose
+            private String audioFile;
+            @SerializedName("ImageFile")
+            @Expose
+            private String imageFile;
+            @SerializedName("Audiomastercat")
+            @Expose
+            private String audiomastercat;
+            @SerializedName("AudioSubCategory")
+            @Expose
+            private String audioSubCategory;
+            @SerializedName("AudioDuration")
+            @Expose
+            private String audioDuration;
+            @SerializedName("AudioDirection")
+            @Expose
+            private String audioDirection;
+            @SerializedName("Like")
+            @Expose
+            private String like;
+            @SerializedName("Download")
+            @Expose
+            private String download;
+
+            public String getAudioID() {
+                return audioID;
+            }
+
+            public void setAudioID(String audioID) {
+                this.audioID = audioID;
+            }
+
+            public String getAudioName() {
+                return audioName;
+            }
+
+            public void setAudioName(String audioName) {
+                this.audioName = audioName;
+            }
+
+            public String getAudioFile() {
+                return audioFile;
+            }
+
+            public void setAudioFile(String audioFile) {
+                this.audioFile = audioFile;
+            }
+
+            public String getImageFile() {
+                return imageFile;
+            }
+
+            public void setImageFile(String imageFile) {
+                this.imageFile = imageFile;
+            }
+
+            public String getAudiomastercat() {
+                return audiomastercat;
+            }
+
+            public void setAudiomastercat(String audiomastercat) {
+                this.audiomastercat = audiomastercat;
+            }
+
+            public String getAudioSubCategory() {
+                return audioSubCategory;
+            }
+
+            public void setAudioSubCategory(String audioSubCategory) {
+                this.audioSubCategory = audioSubCategory;
+            }
+
+            public String getAudioDuration() {
+                return audioDuration;
+            }
+
+            public void setAudioDuration(String audioDuration) {
+                this.audioDuration = audioDuration;
+            }
+
+            public String getAudioDirection() {
+                return audioDirection;
+            }
+
+            public void setAudioDirection(String audioDirection) {
+                this.audioDirection = audioDirection;
+            }
+
+            public String getLike() {
+                return like;
+            }
+
+            public void setLike(String like) {
+                this.like = like;
+            }
+
+            public String getDownload() {
+                return download;
+            }
+
+            public void setDownload(String download) {
+                this.download = download;
+            }
+        }
+
         public class Audio {
             @SerializedName("ID")
             @Expose
@@ -234,12 +348,12 @@
             @SerializedName("PlaylistImage")
             @Expose
             private String playlistImage;
+            @SerializedName("Audiolist")
+            @Expose
+            private List<Audiolist> audiolist = null;
             @SerializedName("TotalAudio")
             @Expose
             private String totalAudio;
-            @SerializedName("IsLock")
-            @Expose
-            private String isLock;
             @SerializedName("TotalDuration")
             @Expose
             private String totalDuration;
@@ -249,6 +363,9 @@
             @SerializedName("Totalminute")
             @Expose
             private String totalminute;
+            @SerializedName("IsLock")
+            @Expose
+            private String isLock;
 
             public String getPlaylistId() {
                 return playlistId;
@@ -274,6 +391,14 @@
                 this.playlistImage = playlistImage;
             }
 
+            public List<Audiolist> getAudiolist() {
+                return audiolist;
+            }
+
+            public void setAudiolist(List<Audiolist> audiolist) {
+                this.audiolist = audiolist;
+            }
+
             public String getTotalAudio() {
                 return totalAudio;
             }
@@ -282,14 +407,6 @@
                 this.totalAudio = totalAudio;
             }
 
-            public String getIsLock() {
-                return isLock;
-            }
-
-            public void setIsLock(String isLock) {
-                this.isLock = isLock;
-            }
-
             public String getTotalDuration() {
                 return totalDuration;
             }
@@ -313,6 +430,127 @@
             public void setTotalminute(String totalminute) {
                 this.totalminute = totalminute;
             }
+
+            public String getIsLock() {
+                return isLock;
+            }
+
+            public void setIsLock(String isLock) {
+                this.isLock = isLock;
+            }
+
+            public class Audiolist {
+                @SerializedName("AudioID")
+                @Expose
+                private String audioID;
+                @SerializedName("AudioName")
+                @Expose
+                private String audioName;
+                @SerializedName("AudioFile")
+                @Expose
+                private String audioFile;
+                @SerializedName("ImageFile")
+                @Expose
+                private String imageFile;
+                @SerializedName("Audiomastercat")
+                @Expose
+                private String audiomastercat;
+                @SerializedName("AudioSubCategory")
+                @Expose
+                private String audioSubCategory;
+                @SerializedName("AudioDuration")
+                @Expose
+                private String audioDuration;
+                @SerializedName("AudioDirection")
+                @Expose
+                private String audioDirection;
+                @SerializedName("Like")
+                @Expose
+                private String like;
+                @SerializedName("Download")
+                @Expose
+                private String download;
+
+                public String getAudioID() {
+                    return audioID;
+                }
+
+                public void setAudioID(String audioID) {
+                    this.audioID = audioID;
+                }
+
+                public String getAudioName() {
+                    return audioName;
+                }
+
+                public void setAudioName(String audioName) {
+                    this.audioName = audioName;
+                }
+
+                public String getAudioFile() {
+                    return audioFile;
+                }
+
+                public void setAudioFile(String audioFile) {
+                    this.audioFile = audioFile;
+                }
+
+                public String getImageFile() {
+                    return imageFile;
+                }
+
+                public void setImageFile(String imageFile) {
+                    this.imageFile = imageFile;
+                }
+
+                public String getAudiomastercat() {
+                    return audiomastercat;
+                }
+
+                public void setAudiomastercat(String audiomastercat) {
+                    this.audiomastercat = audiomastercat;
+                }
+
+                public String getAudioSubCategory() {
+                    return audioSubCategory;
+                }
+
+                public void setAudioSubCategory(String audioSubCategory) {
+                    this.audioSubCategory = audioSubCategory;
+                }
+
+                public String getAudioDuration() {
+                    return audioDuration;
+                }
+
+                public void setAudioDuration(String audioDuration) {
+                    this.audioDuration = audioDuration;
+                }
+
+                public String getAudioDirection() {
+                    return audioDirection;
+                }
+
+                public void setAudioDirection(String audioDirection) {
+                    this.audioDirection = audioDirection;
+                }
+
+                public String getLike() {
+                    return like;
+                }
+
+                public void setLike(String like) {
+                    this.like = like;
+                }
+
+                public String getDownload() {
+                    return download;
+                }
+
+                public void setDownload(String download) {
+                    this.download = download;
+                }
+            }
         }
     }
 }
Index: app/src/main/java/com/brainwellnessspa/Utility/APIInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.Utility;\r\n\r\nimport com.brainwellnessspa.AddPayment.Model.AddCardModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.BillingAddressSaveModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.BillingAddressViewModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CancelPlanModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardListModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CurrentPlanVieViewModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.PayNowDetailsModel;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.PlanListBillingModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.CreatePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.DirectionModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.DownloadPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.LogoutModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.NextSessionViewModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.PlaylistingModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.PreviousAppointmentsModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ReminderStatusPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.RenamePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SessionListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestionAudiosModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.UnlockAudioList;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllPlayListModel;\r\nimport com.brainwellnessspa.DownloadModule.Models.DownloadlistModel;\r\nimport com.brainwellnessspa.FaqModule.Models.FaqListModel;\r\nimport com.brainwellnessspa.InvoiceModule.Models.InvoiceDetailModel;\r\nimport com.brainwellnessspa.InvoiceModule.Models.InvoiceListModel;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.LoginModule.Models.CountryListModel;\r\nimport com.brainwellnessspa.LoginModule.Models.LoginModel;\r\nimport com.brainwellnessspa.LoginModule.Models.OtpModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.MembershipPlanListModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.SignUpModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.DeleteRemiderModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.RemiderDetailsModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.ReminderStatusModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.SelectPlaylistModel;\r\nimport com.brainwellnessspa.ReminderModule.Models.SetReminderModel;\r\nimport com.brainwellnessspa.ResourceModule.Models.ResourceFilterModel;\r\nimport com.brainwellnessspa.ResourceModule.Models.ResourceListModel;\r\nimport com.brainwellnessspa.SplashModule.Models.VersionModel;\r\nimport com.brainwellnessspa.UserModule.Models.AddProfileModel;\r\nimport com.brainwellnessspa.UserModule.Models.ProfileUpdateModel;\r\nimport com.brainwellnessspa.UserModule.Models.ProfileViewModel;\r\nimport com.brainwellnessspa.UserModule.Models.RemoveProfileModel;\r\n\r\nimport retrofit.mime.TypedFile;\r\nimport retrofit2.Call;\r\nimport retrofit2.http.Field;\r\nimport retrofit2.http.FormUrlEncoded;\r\nimport retrofit2.http.GET;\r\nimport retrofit2.http.Multipart;\r\nimport retrofit2.http.POST;\r\nimport retrofit2.http.Part;\r\n\r\npublic interface APIInterface {\r\n\r\n  /*  @Multipart\r\n    @POST(\"/addprofileimage\")\r\n    void getAddProfile(@Part(\"UserID\") String UserID,\r\n                       @Part(\"ProfileImage\") TypedFile Avtar,\r\n                       Callback<AddProfileModel> addProfileModelCallback);*/\r\n\r\n    /*TODO UserProfileActivity */\r\n\r\n    @Multipart\r\n    @POST(\"addprofileimage\")\r\n    Call<AddProfileModel> getAddProfile(@Part(\"UserID\") String userID,\r\n                                        @Part(\"ProfileImage\") TypedFile profileImage);\r\n\r\n    /*TODO App Version*/\r\n    @POST(\"appversion\")\r\n    @FormUrlEncoded\r\n    Call<VersionModel> getVersionDatas(@Field(\"Version\") String version,\r\n                                       @Field(\"AppType\") String appType);\r\n\r\n    /* TODO LoginActivtiy & OtpActivity */\r\n    @POST(\"sendotp\")\r\n    @FormUrlEncoded\r\n    Call<LoginModel> getLoginDatas(@Field(\"MobileNo\") String mobileNo,\r\n                                   @Field(\"CountryCode\") String countryCode,\r\n                                   @Field(\"DeviceType\") String deviceType,\r\n                                   @Field(\"Resend\") String resend,\r\n                                   @Field(\"key\") String key);\r\n\r\n    /* TODO Registration */\r\n    @POST(\"signupcheckout\")\r\n    @FormUrlEncoded\r\n    Call<LoginModel> getRegData(@Field(\"MobileNo\") String mobileNo,\r\n                                @Field(\"CountryCode\") String countryCode);\r\n\r\n    /* TODO Membership Payment */\r\n    @POST(\"payment\")\r\n    @FormUrlEncoded\r\n    Call<AddCardModel> getMembershipPayment(\r\n            @Field(\"PlanId\") String planId,\r\n            @Field(\"PlanFlag\") String planFlag,\r\n            @Field(\"TokenId\") String CardId,\r\n            @Field(\"MobileNo\") String MobileNo,\r\n            @Field(\"CountryCode\") String CountryCode);\r\n\r\n    /* TODO CheckoutGetCodeActivity */\r\n    @POST(\"signupcheckout\")\r\n    @FormUrlEncoded\r\n    Call<SignUpModel> getSignUpDatas(@Field(\"MobileNo\") String mobileNo,\r\n                                     @Field(\"CountryCode\") String countryCode,\r\n                                     @Field(\"DeviceType\") String deviceType,\r\n                                     @Field(\"Resend\") String resend,\r\n                                     @Field(\"key\") String key);\r\n\r\n    /* TODO OtpActivity */\r\n    @POST(\"authotp\")\r\n    @FormUrlEncoded\r\n    Call<OtpModel> getAuthOtps(@Field(\"OTP\") String otp,\r\n                               @Field(\"Token\") String token,\r\n                               @Field(\"DeviceType\") String deviceType,\r\n                               @Field(\"DeviceID\") String deviceID,\r\n                               @Field(\"MobileNo\") String mobileNo,\r\n                               @Field(\"SignupFlag\") String signupFlag);\r\n\r\n    /* TODO OtpActivity */\r\n    @POST(\"authotp\")\r\n    @FormUrlEncoded\r\n    Call<OtpModel> getAuthOtps1(@Field(\"OTP\") String otp,\r\n                                @Field(\"Token\") String token,\r\n                                @Field(\"DeviceType\") String deviceType,\r\n                                @Field(\"DeviceID\") String deviceID,\r\n                                @Field(\"MobileNo\") String mobileNo,\r\n                                @Field(\"SignupFlag\") String signupFlag);\r\n\r\n    /* TODO AccountFragment */\r\n    @POST(\"logout\")\r\n    @FormUrlEncoded\r\n    Call<LogoutModel> getLogout(@Field(\"UserID\") String otp,\r\n                                @Field(\"Token\") String token,\r\n                                @Field(\"Type\") String type);\r\n\r\n    /* TODO CountryActivity */\r\n    @GET(\"countrylist\")\r\n    Call<CountryListModel> getCountryLists();\r\n\r\n    /* TODO AudioFaqActivity */\r\n    @GET(\"faqlist\")\r\n    Call<FaqListModel> getFaqLists();\r\n\r\n    /* TODO AudioFaqActivity */\r\n    @GET(\"faqlistmembership\")\r\n    Call<FaqListModel> getFaqListings();\r\n\r\n    /* TODO UserProfileActivity */\r\n    @POST(\"profiledetail\")\r\n    @FormUrlEncoded\r\n    Call<ProfileViewModel> getProfileView(@Field(\"UserID\") String userID);\r\n\r\n    /*TODO UserProfileActivity */\r\n    @POST(\"profileupdate\")\r\n    @FormUrlEncoded\r\n    Call<ProfileUpdateModel> getProfileUpdate(@Field(\"UserID\") String userID,\r\n                                              @Field(\"Name\") String name,\r\n                                              @Field(\"Dob\") String dob,\r\n                                              @Field(\"MobileNo\") String mobileNo,\r\n                                              @Field(\"EmailId\") String emailId,\r\n                                              @Field(\"IsVerify\") String isVerify);\r\n\r\n    /* TODO Membership Plan List */\r\n    @GET(\"planlist\")\r\n    Call<MembershipPlanListModel> getMembershipPlanList();\r\n\r\n    /*TODO UserProfileActivity */\r\n    @POST(\"removeprofileimage\")\r\n    @FormUrlEncoded\r\n    Call<RemoveProfileModel> getRemoveProfile(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AudioFragment */\r\n    @POST(\"homeaudioscreen\")\r\n    @FormUrlEncoded\r\n    Call<MainAudioModel> getMainAudioLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AudioFragment */\r\n    @POST(\"unlockaudiolist\")\r\n    @FormUrlEncoded\r\n    Call<UnlockAudioList> getUnLockAudioList(@Field(\"UserID\") String userID);\r\n\r\n\r\n    /* TODO PlaylistFragment */\r\n    @POST(\"getlibrary\")\r\n    @FormUrlEncoded\r\n    Call<MainPlayListModel> getMainPlayLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO ViewAllPlaylistFragment */\r\n    @POST(\"playlistongetlibrary\")\r\n    @FormUrlEncoded\r\n    Call<ViewAllPlayListModel> getViewAllPlayLists(@Field(\"UserID\") String userID,\r\n                                                   @Field(\"GetLibraryId\") String getLibraryId);\r\n\r\n    /* TODO ViewAllAudioFragment */\r\n    @POST(\"gethomeallaudio\")\r\n    @FormUrlEncoded\r\n    Call<ViewAllAudioListModel> getViewAllAudioLists(@Field(\"UserID\") String userID,\r\n                                                     @Field(\"GetHomeId\") String HomeId,\r\n                                                     @Field(\"CategoryName\") String CategoryName);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"playlistdetails\")\r\n    @FormUrlEncoded\r\n    Call<SubPlayListModel> getSubPlayLists(@Field(\"UserID\") String userID,\r\n                                           @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"addaudiosearch\")\r\n    @FormUrlEncoded\r\n    Call<SuggestionAudiosModel> getAddSearchAudio(@Field(\"AudioName\") String audioName,\r\n                                                  @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO AddAudioActivity & SearchFragment */\r\n    @POST(\"suggestedaudio\")\r\n    @FormUrlEncoded\r\n    Call<SuggestedModel> getSuggestedLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO SearchFragment */\r\n    @POST(\"suggestedplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SearchPlaylistModel> getSuggestedPlayLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO SearchFragment */\r\n    @POST(\"searchonsuggestedlist\")\r\n    @FormUrlEncoded\r\n    Call<SearchBothModel> getSearchBoth(@Field(\"UserID\") String userID,\r\n                                        @Field(\"SuggestedName\") String suggestedName);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"addaudiotoplaylist\")\r\n    @FormUrlEncoded\r\n    Call<AddToPlaylist> getAddSearchAudioFromPlaylist(@Field(\"UserID\") String userID,\r\n                                                      @Field(\"AudioId\") String audioId,\r\n                                                      @Field(\"PlaylistId\") String playlistId,\r\n                                                      @Field(\"FromPlaylistId\") String fromPlaylistId);\r\n\r\n    /* TODO BillingAddressFragment */\r\n    @POST(\"billingaddress\")\r\n    @FormUrlEncoded\r\n    Call<BillingAddressViewModel> getBillingAddressView(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO BillingAddressFragment */\r\n    @POST(\"payonbillingorder\")\r\n    @FormUrlEncoded\r\n    Call<PayNowDetailsModel> getPayNowDetails(@Field(\"UserID\") String userID,\r\n                                              @Field(\"CardId\") String cardId,\r\n                                              @Field(\"PlanId\") String planId,\r\n                                              @Field(\"PlanType\") String planType,\r\n                                              @Field(\"invoicePayId\") String invoicePayId,\r\n                                              @Field(\"PlanStatus\") String planStatus);\r\n\r\n    /* TODO BillingAddressFragment */\r\n    @POST(\"billingdetailsave\")\r\n    @FormUrlEncoded\r\n    Call<BillingAddressSaveModel> getBillingAddressSave(@Field(\"UserID\") String userID,\r\n                                                        @Field(\"Name\") String name,\r\n                                                        @Field(\"Email\") String email,\r\n                                                        @Field(\"Country\") String country,\r\n                                                        @Field(\"AddressLine1\") String addressLine1,\r\n                                                        @Field(\"AddressLine2\") String addressLine2,\r\n                                                        @Field(\"Suburb\") String suburb,\r\n                                                        @Field(\"State\") String state,\r\n                                                        @Field(\"Postcode\") String postcode);\r\n\r\n    /* TODO CurrentPlanFragment */\r\n    @POST(\"billingorder\")\r\n    @FormUrlEncoded\r\n    Call<CurrentPlanVieViewModel> getCurrentPlanView(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO CancelMembershipActivity */\r\n    @POST(\"cancelplan\")\r\n    @FormUrlEncoded\r\n    Call<CancelPlanModel> getCancelPlan(@Field(\"UserID\") String userID,\r\n                                        @Field(\"CancelId\") String cancelId,\r\n                                        @Field(\"CancelReason\") String cancelReason);\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"nextsessionview\")\r\n    @FormUrlEncoded\r\n    Call<NextSessionViewModel> getNextSessionVIew(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"appointmentcategorylist\")\r\n    @FormUrlEncoded\r\n    Call<PreviousAppointmentsModel> getAppointmentVIew(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"appointmentsession\")\r\n    @FormUrlEncoded\r\n    Call<SessionListModel> getAppointmentSession(@Field(\"UserID\") String userID,\r\n                                                 @Field(\"AppointmentName\") String appointmentName\r\n    );\r\n\r\n    /* TODO AppointmentFragment */\r\n    @POST(\"appointmentdetail\")\r\n    @FormUrlEncoded\r\n    Call<AppointmentDetailModel> getAppointmentDetails(@Field(\"UserID\") String userID,\r\n                                                       @Field(\"AppointmentTypeId\") String appointmentTypeId);\r\n\r\n    /* TODO ReminderActivity */\r\n    @POST(\"setreminder\")\r\n    @FormUrlEncoded\r\n    Call<SetReminderModel> SetReminder(@Field(\"PlaylistId\") String PlaylistId,\r\n                                       @Field(\"UserID\") String userID,\r\n                                       @Field(\"IsSingle\") String IsSingle,\r\n                                       @Field(\"ReminderTime\") String ReminderTime,\r\n                                       @Field(\"ReminderDay\") String ReminderDay\r\n    );\r\n\r\n    /* TODO PlayWellnessActivity */\r\n    @POST(\"recentlyplayed\")\r\n    @FormUrlEncoded\r\n    Call<SucessModel> getRecentlyplayed(@Field(\"AudioId\") String audioId,\r\n                                        @Field(\"UserID\") String userID);\r\n\r\n    /* TODO AddQueueActivity */\r\n    @POST(\"audiodetail\")\r\n    @FormUrlEncoded\r\n    Call<DirectionModel> getAudioDetailLists(@Field(\"UserID\") String userID,\r\n                                             @Field(\"AudioId\") String audioId);\r\n\r\n    /* TODO AddPaymentActivity */\r\n    @POST(\"cardadd\")\r\n    @FormUrlEncoded\r\n    Call<AddCardModel> getAddCard(@Field(\"UserID\") String userID,\r\n                                  @Field(\"TokenId\") String tokenId);\r\n\r\n    /* TODO MembershipChangeActivity */\r\n    @POST(\"planlistonbilling\")\r\n    @FormUrlEncoded\r\n    Call<PlanListBillingModel> getPlanListBilling(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO PaymentFragment & AllCardAdapter*/\r\n    @POST(\"cardlist\")\r\n    @FormUrlEncoded\r\n    Call<CardListModel> getCardLists(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AllCardAdapter */\r\n    @POST(\"carddefault\")\r\n    @FormUrlEncoded\r\n    Call<CardListModel> getChangeCard(@Field(\"UserID\") String userID,\r\n                                      @Field(\"CardId\") String cardId);\r\n\r\n    /* TODO AllCardAdapter */\r\n    @POST(\"cardremove\")\r\n    @FormUrlEncoded\r\n    Call<CardModel> getRemoveCard(@Field(\"UserID\") String userID,\r\n                                  @Field(\"CardId\") String cardId);\r\n\r\n    /* TODO AddQueueActivity */\r\n    @POST(\"audiolike\")\r\n    @FormUrlEncoded\r\n    Call<AudioLikeModel> getAudioLike(@Field(\"AudioId\") String audioId,\r\n                                      @Field(\"UserID\") String userID);\r\n\r\n    /* TODO PlaylistFragment & AddPlaylistActivity*/\r\n    @POST(\"createplaylist\")\r\n    @FormUrlEncoded\r\n    Call<CreatePlaylistModel> getCreatePlaylist(@Field(\"UserID\") String userID,\r\n                                                @Field(\"PlaylistName\") String playlistName);\r\n\r\n    /* TODO MyPlaylistActivity */\r\n    @POST(\"renameplaylist\")\r\n    @FormUrlEncoded\r\n    Call<RenamePlaylistModel> getRenamePlaylist(@Field(\"UserID\") String userID,\r\n                                                @Field(\"PlaylistId\") String playlistId,\r\n                                                @Field(\"PlaylistNewName\") String playlistNewName);\r\n\r\n    /* TODO MyPlaylistActivity */\r\n    @POST(\"removeaudiofromplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SucessModel> getRemoveAudioFromPlaylist(@Field(\"UserID\") String userID,\r\n                                                 @Field(\"AudioId\") String audioId,\r\n                                                 @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO MyPlaylistsFragment */\r\n    @POST(\"deleteplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SucessModel> getDeletePlaylist(@Field(\"UserID\") String userID,\r\n                                        @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO AddPlaylistActivity */\r\n    @POST(\"playlist\")\r\n    @FormUrlEncoded\r\n    Call<PlaylistingModel> getPlaylisting(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO set Shorted Audio from created Playlist */\r\n    @POST(\"sortingplaylistaudio\")\r\n    @FormUrlEncoded\r\n    Call<CardModel> setShortedAudio(@Field(\"UserID\") String userID,\r\n                                    @Field(\"PlaylistId\") String playListId,\r\n                                    @Field(\"PlaylistAudioId\") String audioId);\r\n\r\n    /* TODO AddQueueActivity & PlayWellnessActivity */\r\n    @POST(\"downloads\")\r\n    @FormUrlEncoded\r\n    Call<DownloadPlaylistModel> getDownloadlistPlaylist(@Field(\"UserID\") String userID,\r\n                                                        @Field(\"AudioId\") String audioId,\r\n                                                        @Field(\"PlaylistId\") String playlistId);\r\n\r\n    /* TODO InvoiceActivity */\r\n    @POST(\"invoicelist\")\r\n    @FormUrlEncoded\r\n    Call<InvoiceListModel> getInvoicelistPlaylist(@Field(\"UserID\") String userID,\r\n                                                  @Field(\"Flag\") String flag);\r\n\r\n    /* TODO InvoiceReceiptFragment */\r\n    @POST(\"invoicedetaildownload\")\r\n    @FormUrlEncoded\r\n    Call<InvoiceDetailModel> getInvoiceDetailPlaylist(@Field(\"UserID\") String userID,\r\n                                                      @Field(\"InvoiceId\") String invoiceId,\r\n                                                      @Field(\"Flag\") String flag);\r\n\r\n    /* TODO DownloadsActivity */\r\n    @POST(\"downloadlist\")\r\n    @FormUrlEncoded\r\n    Call<DownloadlistModel> getDownloadlistPlaylist(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO LikeAudiosFragment & LikePlaylistsFragment */\r\n    @POST(\"likelist\")\r\n    @FormUrlEncoded\r\n    Call<LikesHistoryModel> getLikeAudioPlaylistListing(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO AppsFragment & AudioBooksFragment & DocumentariesFragment & PodcastsFragment & WebsiteFragment */\r\n    @POST(\"resourcelist\")\r\n    @FormUrlEncoded\r\n    Call<ResourceListModel> getResourcLists(@Field(\"UserID\") String userID,\r\n                                            @Field(\"ResourceTypeId\") String resourceTypeId,\r\n                                            @Field(\"Category\") String category);\r\n\r\n    /* TODO ResourceActivity */\r\n    @POST(\"resourcecategorylist\")\r\n    @FormUrlEncoded\r\n    Call<ResourceFilterModel> getResourcFilterLists(@Field(\"UserID\") String userID);\r\n\r\n\r\n    /* TODO ReminderDetailsActivity */\r\n    @POST(\"getreminder\")\r\n    @FormUrlEncoded\r\n    Call<RemiderDetailsModel> getGetReminderStatus(@Field(\"UserID\") String userID);\r\n\r\n    /* TODO ReminderDetailsActivity */\r\n    @POST(\"deletereminder\")\r\n    @FormUrlEncoded\r\n    Call<DeleteRemiderModel> getDeleteRemiderStatus(@Field(\"UserID\") String userID,\r\n                                                    @Field(\"ReminderId\") String reminderId);\r\n\r\n    /* TODO ReminderActivity */\r\n    @POST(\"reminderstatus\")\r\n    @FormUrlEncoded\r\n    Call<ReminderStatusModel> getReminderStatus(@Field(\"UserID\") String userID,\r\n                                                @Field(\"PlaylistId\") String playlistId,\r\n                                                @Field(\"ReminderStatus\") String reminderStatus);\r\n\r\n    /* TODO ReminderActivity */\r\n    @POST(\"reminderstatus\")\r\n    @FormUrlEncoded\r\n    Call<ReminderStatusPlaylistModel> getReminderStatusPlaylist(@Field(\"UserID\") String userID,\r\n                                                                @Field(\"PlaylistId\") String playlistId,\r\n                                                                @Field(\"ReminderStatus\") String reminderStatus);\r\n\r\n    /* TODO SelectPlaylistActivity */\r\n    @POST(\"allplaylist\")\r\n    @FormUrlEncoded\r\n    Call<SelectPlaylistModel> getAllPlayListing(@Field(\"UserID\") String userID);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/Utility/APIInterface.java	(revision bef12230fb63eeb22fc36a24a9f011f88ef343b3)
+++ app/src/main/java/com/brainwellnessspa/Utility/APIInterface.java	(date 1604468173084)
@@ -19,6 +19,7 @@
 import com.brainwellnessspa.DashboardModule.Models.MainAudioModel;
 import com.brainwellnessspa.DashboardModule.Models.MainPlayListModel;
 import com.brainwellnessspa.DashboardModule.Models.NextSessionViewModel;
+import com.brainwellnessspa.DashboardModule.Models.PlaylistLikeModel;
 import com.brainwellnessspa.DashboardModule.Models.PlaylistingModel;
 import com.brainwellnessspa.DashboardModule.Models.PreviousAppointmentsModel;
 import com.brainwellnessspa.DashboardModule.Models.ReminderStatusPlaylistModel;
@@ -366,6 +367,12 @@
     @FormUrlEncoded
     Call<AudioLikeModel> getAudioLike(@Field("AudioId") String audioId,
                                       @Field("UserID") String userID);
+
+    /* TODO MyPlaylistActivity */
+    @POST("playlistlike")
+    @FormUrlEncoded
+    Call<PlaylistLikeModel> getPlaylistLike(@Field("PlaylistId") String audioId,
+                                            @Field("UserID") String userID);
 
     /* TODO PlaylistFragment & AddPlaylistActivity*/
     @POST("createplaylist")
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Playlist;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Filter;\r\nimport android.widget.Filterable;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.ItemTouchHelper;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardModel;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ReminderStatusPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Search.SearchFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.ReminderModule.Activities.ReminderActivity;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.ItemMoveCallback;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.StartDragListener;\r\nimport com.brainwellnessspa.databinding.FragmentMyPlaylistsBinding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutBinding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutSorting1Binding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutSorting2Binding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutSortingBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.downloader.PRDownloader;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenReminder;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.MyPlaylistIds;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.PlaylistIDMS;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.addToSearch;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity.MyPlaylistId;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity.addToPlayList;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.ComeFindAudio;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.comeRename;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.deleteFrg;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.ViewAllPlaylistFragment.GetPlaylistLibraryID;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity.ComeFrom_Playlist;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadIdOne;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadProgress;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.isDownloading;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class MyPlaylistsFragment extends Fragment implements StartDragListener {\r\n    public static int RefreshIconData = 0;\r\n    public static String RefreshNew = \"\";\r\n    public static int disclaimerPlayed = 0;\r\n    public boolean RefreshPlaylist = false;\r\n    public boolean isPlayPlaylist = false;\r\n    FragmentMyPlaylistsBinding binding;\r\n    String UserID, New, PlaylistID, PlaylistName = \"\", PlaylistImage, SearchFlag, MyDownloads = \"\", AudioFlag, PlaylistIDs = \"\";\r\n    int RefreshIcon;\r\n    PlayListsAdpater adpater;\r\n    PlayListsAdpater1 adpater1;\r\n    PlayListsAdpater2 adpater2;\r\n    View view;\r\n    EditText searchEditText;\r\n    ArrayList<String> changedAudio;\r\n    Activity activity;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList, downloadedSingleAudio;\r\n    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongsList, playListSongListForDownload;\r\n    List<DownloadAudioDetails> oneAudioDetailsList, playlistWiseAudioDetails;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    DownloadPlaylistDetails downloadPlaylistDetails;\r\n    Dialog dialog;\r\n    List<String> fileNameList, playlistDownloadId, remainAudio;\r\n    ItemTouchHelper touchHelper;\r\n    Runnable UpdateSongTime2;\r\n    int SongListSize = 0, count;\r\n    List<DownloadAudioDetails> playlistWiseAudiosDetails;\r\n    SubPlayListModel.ResponseData GlobalListModel;\r\n    SubPlayListModel.ResponseData.PlaylistSong addDisclaimer = new SubPlayListModel.ResponseData.PlaylistSong();\r\n    SubPlayListModel.ResponseData.PlaylistSong songListDownload = new SubPlayListModel.ResponseData.PlaylistSong();\r\n    boolean isclose = false;\r\n    private Handler handler1, handler2;\r\n//    private Runnable UpdateSongTime1 = new Runnable() {\r\n//        @Override\r\n//        public void run() {\r\n//            getMediaByPer(PlaylistID,SongListSize);\r\n//\r\n///*            if (fileNameList.size() != 0) {\r\n//                if (remainAudio.size() <= SongListSize) {\r\n//                    int total = SongListSize;\r\n//                    int remain = remainAudio.size();\r\n//                    int complate = total - remain;\r\n//                    long progressPercent = complate * 100 / total;\r\n//                    int downloadProgress1 = (int) progressPercent;\r\n//                    if (SongListSize == 1) {\r\n//                        if (downloadProgress <= 100) {\r\n//                            binding.pbProgress.setProgress(downloadProgress);\r\n//                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n//                            binding.ivDownloads.setVisibility(View.GONE);\r\n//                            if (downloadProgress == 100) {\r\n//                                getDownloadData();\r\n//                            }\r\n//                        }\r\n//                    } else if (downloadProgress1 <= 100) {\r\n//                        if (downloadProgress1 == 100) {\r\n//                            getDownloadData();\r\n//                            binding.pbProgress.setVisibility(View.GONE);\r\n//                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n//                        } else {\r\n//                            binding.pbProgress.setProgress(downloadProgress1);\r\n//                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n//                            binding.ivDownloads.setVisibility(View.GONE);\r\n//                        }\r\n//                    } else {\r\n//                        binding.pbProgress.setVisibility(View.GONE);\r\n//                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n//                    }\r\n//                }\r\n//                getDownloadData();\r\n//                handler1.postDelayed(this, 500);\r\n//            }else {\r\n//                binding.pbProgress.setVisibility(View.GONE);\r\n//                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                handler1.removeCallbacks(UpdateSongTime1);\r\n//                getDownloadData();\r\n//            }*/\r\n//            handler1.postDelayed(this, 500);\r\n//        }\r\n//    };\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_playlists, container, false);\r\n        view = binding.getRoot();\r\n//        handler1 = new Handler();\r\n        handler2 = new Handler();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        activity = getActivity();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        fileNameList = new ArrayList<>();\r\n        playlistDownloadId = new ArrayList<>();\r\n        addDisclaimer();\r\n//        remainAudio = new ArrayList<>();\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        playlistSongsList = new ArrayList<>();\r\n        playListSongListForDownload = new ArrayList<>();\r\n        changedAudio = new ArrayList<>();\r\n        if (getArguments() != null) {\r\n            New = getArguments().getString(\"New\");\r\n            PlaylistID = getArguments().getString(\"PlaylistID\");\r\n            PlaylistName = getArguments().getString(\"PlaylistName\");\r\n            PlaylistImage = getArguments().getString(\"PlaylistImage\");\r\n            MyDownloads = getArguments().getString(\"MyDownloads\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(view1 -> {\r\n            binding.searchView.clearFocus();\r\n            callBack();\r\n        });\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity()) && !MyDownloads.equalsIgnoreCase(\"1\")) {\r\n            binding.llMore.setVisibility(View.VISIBLE);\r\n            binding.llMore.setClickable(true);\r\n            binding.llMore.setEnabled(true);\r\n            binding.ivMore.setImageResource(R.drawable.ic_menu_icon);\r\n            binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            binding.llMore.setVisibility(View.VISIBLE);\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setImageResource(R.drawable.ic_menu_icon);\r\n            binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n        }\r\n\r\n        binding.llMore.setOnClickListener(view13 -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            handler2.removeCallbacks(UpdateSongTime2);\r\n            Intent i = new Intent(getActivity(), MyPlaylistActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            i.putExtra(\"PlaylistIDImage\", PlaylistID);\r\n            startActivity(i);\r\n\r\n        });\r\n\r\n        binding.tvSearch.setOnClickListener(view14 -> {\r\n            Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            startActivity(i);\r\n        });\r\n\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        searchClear(searchEditText);\r\n        closeButton.setOnClickListener(v -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                binding.searchView.clearFocus();\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                try {\r\n                    if (adpater2 != null) {\r\n                        adpater2.getFilter().filter(search);\r\n                        SearchFlag = search;\r\n                        Log.e(\"searchsearch\", \"\" + search);\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n//        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        RecyclerView.LayoutManager playList1 = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists1.setLayoutManager(playList1);\r\n        binding.rvPlayLists1.setItemAnimator(new DefaultItemAnimator());\r\n        RecyclerView.LayoutManager playList = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists.setLayoutManager(playList);\r\n        binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());\r\n        RecyclerView.LayoutManager playList3 = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists2.setLayoutManager(playList3);\r\n        binding.rvPlayLists2.setItemAnimator(new DefaultItemAnimator());\r\n      /*  binding.rvPlayLists1.addOnScrollListener(new RecyclerView.OnScrollListener(){\r\n            @Override\r\n            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                binding.rvPlayLists.setScrollX(dx);\r\n                binding.rvPlayLists.setScrollY(dy);\r\n//                int pos = linearLayoutManager1.findFirstCompletelyVisibleItemPosition();\r\n//                linearLayoutManager.scrollToPositionWithOffset(pos, 20);\r\n            }\r\n        });*/\r\n        binding.llDownloads.setOnClickListener(view1 -> {\r\n            callDownload(\"\", \"\", \"\", playlistSongsList, 0, binding.llDownloads, binding.ivDownloads);\r\n        });\r\n\r\n        RefreshNew = New;\r\n        if (New.equalsIgnoreCase(\"1\")) {\r\n            binding.llAddAudio.setVisibility(View.VISIBLE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.INVISIBLE);\r\n            binding.llListing.setVisibility(View.GONE);\r\n            binding.btnAddAudio.setOnClickListener(view -> {\r\n                Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n                i.putExtra(\"PlaylistID\", PlaylistID);\r\n                startActivity(i);\r\n            });\r\n        } else if (New.equalsIgnoreCase(\"0\")) {\r\n            binding.llAddAudio.setVisibility(View.GONE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n            binding.llListing.setVisibility(View.VISIBLE);\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n        return view;\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail(String download) {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadPlaylistDetailsList.size() != 0 /*New.equalsIgnoreCase(\"1\") ||*/) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (RefreshIcon == 0) {\r\n                    enableDisableDownload(false, \"gray\");\r\n                } else if (download.equalsIgnoreCase(\"1\") /* New.equalsIgnoreCase(\"1\") ||*/) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (download.equalsIgnoreCase(\"0\") || download.equalsIgnoreCase(\"\") ||\r\n                        New.equalsIgnoreCase(\"0\") || RefreshIcon != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail2() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n   /*\r\n                    \"PlaylistDesc\": \"When life gets tough and you struggle through the days, download the Ultimate Self-development Bundle to help you in finding a new appreciation for life. Everyone can use a little help in all areas of their lives at times. There are 12 programs aimed to help your self-development:\",\r\n                    \"PlaylistMastercat\": \"Self-development\",\r\n                    \"PlaylistSubcat\": \"Self-expression, Focus, Discipline, Self-love, Mindset, Passion, Enthusiasm, Gratitude, Self-doubt, Inner Strength \",\r\n                    \"PlaylistImage\": \"https://brainwellnessspa.com.au/wp-content/uploads/2018/06/Ultimate self development bundle.jpg\",\r\n                    \"PlaylistSongs \" */\r\n                downloadAudioDetailsList = GetAllMedia();\r\n                playlistWiseAudioDetails = GetMedia();\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private void enableDisableDownload(boolean b, String color) {\r\n        if (b) {\r\n            binding.llDownloads.setClickable(true);\r\n            binding.llDownloads.setEnabled(true);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            binding.llDownloads.setClickable(false);\r\n            binding.llDownloads.setEnabled(false);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            if (color.equalsIgnoreCase(\"gray\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            } else if (color.equalsIgnoreCase(\"orange\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetAllMedia() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData1();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        addDisclaimer();\r\n\r\n//        if (binding.searchView != null) {\r\n//            binding.searchView.clearFocus();\r\n////            binding.searchView.onActionViewCollapsed();\r\n//            isclose = true;\r\n//            Toast.makeText(activity, \"closeeeeeee\", Toast.LENGTH_SHORT).show();\r\n//        }\r\n\r\n//        if (isclose) {\r\n        view.setFocusableInTouchMode(true);\r\n        view.requestFocus();\r\n        view.setOnKeyListener((v, keyCode, event) -> {\r\n            if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {\r\n//                binding.searchView.setQuery(\"\", false);\r\n//                binding.rlMainLayouts.requestFocus();\r\n                binding.searchView.clearFocus();\r\n//                binding.searchView.setFocusable(false);\r\n                callBack();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n//        }\r\n\r\n        if (deleteFrg == 1) {\r\n            binding.searchView.clearFocus();\r\n            callBack();\r\n            deleteFrg = 0;\r\n        } else if (addToPlayList) {\r\n            PlaylistID = MyPlaylistId;\r\n            prepareData(UserID, MyPlaylistId);\r\n            addToPlayList = false;\r\n        } else if (addToSearch) {\r\n            PlaylistIDs = PlaylistIDMS;\r\n            prepareData(UserID, MyPlaylistIds);\r\n            addToSearch = false;\r\n        } else {\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n        if (comeRename == 1) {\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n    }\r\n\r\n    private void callBack() {\r\n        if (MyPlaylistIds.equalsIgnoreCase(\"\")) {\r\n            if (comefrom_search == 2) {\r\n                Bundle bundle = new Bundle();\r\n                Fragment playlistFragment = new ViewAllPlaylistFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, playlistFragment)\r\n                        .commit();\r\n                bundle.putString(\"GetLibraryID\", GetPlaylistLibraryID);\r\n                bundle.putString(\"MyDownloads\", MyDownloads);\r\n                playlistFragment.setArguments(bundle);\r\n//            comefrom_search = 0;\r\n                Log.e(\"aaaaaaaaaaaa\", \"aaaaaaaaaaaaaa\");\r\n            } else if (comefrom_search == 1) {\r\n                Fragment fragment = new SearchFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, fragment)\r\n                        .commit();\r\n                comefrom_search = 0;\r\n                Log.e(\"aaaaaaaaaaaa\", \"bbbbbbbbbbbbbbbb\");\r\n            } else if (comefrom_search == 0) {\r\n                Fragment fragment = new PlaylistFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, fragment)\r\n                        .commit();\r\n                comefrom_search = 0;\r\n                Log.e(\"aaaaaaaaaaaa\", \"ccccccccccccc\");\r\n            } else if (comefrom_search == 3) {\r\n                Intent i = new Intent(getActivity(), DownloadsActivity.class);\r\n                ComeFrom_Playlist = true;\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                startActivity(i);\r\n                getActivity().finish();\r\n\r\n                Log.e(\"aaaaaaaaaaaa\", \"dddddddddddddd\");\r\n//            comefrom_search = 0;\r\n            }\r\n        } else {\r\n            prepareData(UserID, PlaylistIDs);\r\n            MyPlaylistIds = \"\";\r\n        }\r\n    }\r\n\r\n    private void searchClear(EditText searchEditText) {\r\n        if (ComeFindAudio == 1) {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n            ComeFindAudio = 0;\r\n        } else if (ComeFindAudio == 2) {\r\n            binding.searchView.requestFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n            ComeFindAudio = 0;\r\n        }\r\n    }\r\n\r\n    private void prepareData(String UserId, String PlaylistId) {\r\n        if (comefrom_search == 3) {\r\n            binding.llExtra.setVisibility(View.VISIBLE);\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 260);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n\r\n        downloadedSingleAudio = getMyMedia();\r\n        binding.tvPlaylist.setText(\"Playlist\");\r\n        searchClear(searchEditText);\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        try {\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = sharedx.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences sharedd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = sharedd.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n\r\n                } else {\r\n                    SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if (isMediaStart) {\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if (isMediaStart) {\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                callAddTransFrag();\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                params.setMargins(10, 8, 10, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                params.setMargins(10, 8, 10, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            if (!MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                Call<SubPlayListModel> listCall = APIClient.getClient().getSubPlayLists(UserId, PlaylistId);\r\n                listCall.enqueue(new Callback<SubPlayListModel>() {\r\n                    @SuppressLint(\"ClickableViewAccessibility\")\r\n                    @Override\r\n                    public void onResponse(Call<SubPlayListModel> call, Response<SubPlayListModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                            SubPlayListModel listModel = response.body();\r\n                            try {\r\n                                if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"0\") ||\r\n                                        listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n\r\n                                } else if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"1\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                                }\r\n                            } catch (Exception e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                            getDownloadData();\r\n                            downloadAudioDetailsList = GetAllMedia();\r\n                            SongListSize = listModel.getResponseData().getPlaylistSongs().size();\r\n                            playlistWiseAudioDetails = GetMedia();\r\n                            downloadedSingleAudio = getMyMedia();\r\n                            getMediaByPer(PlaylistId, SongListSize);\r\n                            binding.rlSearch.setVisibility(View.VISIBLE);\r\n                            binding.llMore.setVisibility(View.VISIBLE);\r\n                            binding.llReminder.setVisibility(View.VISIBLE);\r\n                            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n                            binding.tvTag.setText(R.string.Audios_in_Playlist);\r\n                            binding.llReminder.setOnClickListener(view -> {\r\n                                if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"0\") ||\r\n                                        listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n                                    Intent i = new Intent(getActivity(), ReminderActivity.class);\r\n                                    ComeScreenReminder = 0;\r\n                                    i.putExtra(\"ComeFrom\", \"1\");\r\n                                    i.putExtra(\"PlaylistID\", PlaylistID);\r\n                                    i.putExtra(\"PlaylistName\", listModel.getResponseData().getPlaylistName());\r\n                                    i.putExtra(\"Time\", listModel.getResponseData().getReminderTime());\r\n                                    i.putExtra(\"Day\", listModel.getResponseData().getReminderDay());\r\n                                    startActivity(i);\r\n                                } else if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"1\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                                    dialog = new Dialog(activity);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.delete_payment_card);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(activity.getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                                    final TextView tvSubTitle = dialog.findViewById(R.id.tvSubTitle);\r\n                                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                                    final Button Btn = dialog.findViewById(R.id.Btn);\r\n                                    tvTitle.setText(\"Reminder off\");\r\n                                    tvSubTitle.setText(\"Are you sure you want to reminder off ?\");\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n                                    Btn.setOnTouchListener((view1, event) -> {\r\n                                        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                                            switch (event.getAction()) {\r\n                                                case MotionEvent.ACTION_DOWN: {\r\n                                                    Button views = (Button) view1;\r\n                                                    views.getBackground().setColorFilter(0x77000000, PorterDuff.Mode.SRC_ATOP);\r\n                                                    view1.invalidate();\r\n                                                    break;\r\n                                                }\r\n                                                case MotionEvent.ACTION_UP:\r\n                                                    Call<ReminderStatusPlaylistModel> listCall1 = APIClient.getClient().getReminderStatusPlaylist(UserID, PlaylistID, \"0\");/*set 1 or not 0 */\r\n                                                    listCall1.enqueue(new Callback<ReminderStatusPlaylistModel>() {\r\n                                                        @Override\r\n                                                        public void onResponse(Call<ReminderStatusPlaylistModel> call1, Response<ReminderStatusPlaylistModel> response1) {\r\n                                                            if (response1.isSuccessful()) {\r\n                                                                ReminderStatusPlaylistModel listModel1 = response1.body();\r\n//                                                                prepareData(UserID, PlaylistID);\r\n                                                                listModel.getResponseData().setIsReminder(listModel1.getResponseData().getIsCheck());\r\n                                                                binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n                                                                dialog.dismiss();\r\n                                                                BWSApplication.showToast(listModel1.getResponseMessage(), activity);\r\n                                                            }\r\n                                                        }\r\n\r\n                                                        @Override\r\n                                                        public void onFailure(Call<ReminderStatusPlaylistModel> call1, Throwable t) {\r\n                                                        }\r\n                                                    });\r\n\r\n\r\n                                                case MotionEvent.ACTION_CANCEL: {\r\n                                                    Button views = (Button) view1;\r\n                                                    views.getBackground().clearColorFilter();\r\n                                                    views.invalidate();\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n                                        }\r\n\r\n                                        return true;\r\n                                    });\r\n\r\n                                    tvGoBack.setOnClickListener(v -> {\r\n                                        dialog.dismiss();\r\n                                    });\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n\r\n                                }\r\n                            });\r\n                            playlistSongsList = new ArrayList<>();\r\n                            playlistSongsList.addAll(listModel.getResponseData().getPlaylistSongs());\r\n                            downloadPlaylistDetails = new DownloadPlaylistDetails();\r\n                            downloadPlaylistDetails.setPlaylistID(listModel.getResponseData().getPlaylistID());\r\n                            downloadPlaylistDetails.setPlaylistName(listModel.getResponseData().getPlaylistName());\r\n                            downloadPlaylistDetails.setPlaylistDesc(listModel.getResponseData().getPlaylistDesc());\r\n                            downloadPlaylistDetails.setIsReminder(listModel.getResponseData().getIsReminder());\r\n                            downloadPlaylistDetails.setPlaylistMastercat(listModel.getResponseData().getPlaylistMastercat());\r\n                            downloadPlaylistDetails.setPlaylistSubcat(listModel.getResponseData().getPlaylistSubcat());\r\n                            downloadPlaylistDetails.setPlaylistImage(listModel.getResponseData().getPlaylistImage());\r\n                            downloadPlaylistDetails.setPlaylistImageDetails(listModel.getResponseData().getPlaylistImageDetail());\r\n                            downloadPlaylistDetails.setTotalAudio(listModel.getResponseData().getTotalAudio());\r\n                            downloadPlaylistDetails.setTotalDuration(listModel.getResponseData().getTotalDuration());\r\n                            downloadPlaylistDetails.setTotalhour(listModel.getResponseData().getTotalhour());\r\n                            downloadPlaylistDetails.setTotalminute(listModel.getResponseData().getTotalminute());\r\n                            downloadPlaylistDetails.setCreated(listModel.getResponseData().getCreated());\r\n                            downloadPlaylistDetails.setDownload(listModel.getResponseData().getDownload());\r\n                            downloadPlaylistDetails.setLike(listModel.getResponseData().getLike());\r\n\r\n                            setData(listModel.getResponseData());\r\n                            downloadPlaylistDetailsList = GetPlaylistDetail(listModel.getResponseData().getDownload());\r\n\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<SubPlayListModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                });\r\n            } else {\r\n                downloadPlaylistDetailsList = GetPlaylistDetail2();\r\n            }\r\n        } else {\r\n            downloadPlaylistDetailsList = GetPlaylistDetail2();\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n        SharedPreferences sharedw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        boolean audioPlay = sharedw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = sharedw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        String pID = sharedw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        if(MyDownloads.equalsIgnoreCase(\"1\")){\r\n            if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                isPlayPlaylist = true;\r\n                 binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n            } else {\r\n                isPlayPlaylist = false;\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n            }\r\n        }else {\r\n            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                isPlayPlaylist = true;\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n            } else {\r\n                isPlayPlaylist = false;\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private List<DownloadAudioDetails> getMyMedia() {\r\n        downloadedSingleAudio = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadedSingleAudio = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(\"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                /*playListSongListForDownload = new ArrayList<>();\r\n                if (downloadedSingleAudio.size() != 0) {\r\n                    for(int i =0;i<downloadedSingleAudio.size();i++) {\r\n                        songListDownload = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                        songListDownload.setID(downloadedSingleAudio.get(i).getID());\r\n                        songListDownload.setName(downloadedSingleAudio.get(i).getName());\r\n                        songListDownload.setAudioFile(downloadedSingleAudio.get(i).getAudioFile());\r\n                        songListDownload.setAudioDirection(downloadedSingleAudio.get(i).getAudioDirection());\r\n                        songListDownload.setAudiomastercat(downloadedSingleAudio.get(i).getAudiomastercat());\r\n                        songListDownload.setAudioSubCategory(downloadedSingleAudio.get(i).getAudioSubCategory());\r\n                        songListDownload.setImageFile(downloadedSingleAudio.get(i).getImageFile());\r\n                        songListDownload.setLike(downloadedSingleAudio.get(i).getLike());\r\n                        songListDownload.setDownload(\"\");\r\n                        songListDownload.setAudioDuration(downloadedSingleAudio.get(i).getAudioDuration());\r\n                        songListDownload.setPlaylistID(PlaylistID);\r\n                        playListSongListForDownload.add(songListDownload);\r\n                    }\r\n                }*/\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return downloadedSingleAudio;\r\n    }\r\n\r\n    private void callAddTransFrag() {\r\n        Fragment fragment = new TransparentPlayerFragment();\r\n        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n        fragmentManager1.beginTransaction()\r\n                .add(R.id.flContainer, fragment)\r\n                .commit();\r\n    }\r\n\r\n    private void getMediaByPer(String playlistID, int totalAudio) {\r\n        class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                count = DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getCountDownloadProgress(\"Complete\", playlistID);\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                downloadPlaylistDetailsList = GetPlaylistDetail(downloadPlaylistDetails.getDownload());\r\n\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    if (count <= totalAudio) {\r\n                        if (count == totalAudio) {\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        } else {\r\n                            long progressPercent = count * 100 / totalAudio;\r\n                            int downloadProgress1 = (int) progressPercent;\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            binding.pbProgress.setProgress(downloadProgress1);\r\n                            getMediaByPer(playlistID, totalAudio);\r\n//                             handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        getMediaByPer st = new getMediaByPer();\r\n        st.execute();\r\n    }\r\n\r\n    private void getDownloadData() {\r\n        try {\r\n            SharedPreferences sharedy = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n               /* remainAudio = new ArrayList<>();\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 0; i < fileNameList.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            remainAudio.add(playlistDownloadId.get(i));\r\n                        }\r\n                    }\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        if (remainAudio.size() < SongListSize) {\r\n                            handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    }\r\n                    //\r\n                } else {\r\n                    fileNameList = new ArrayList<>();\r\n                    playlistDownloadId = new ArrayList<>();\r\n                    remainAudio = new ArrayList<>();\r\n                }*/\r\n            } else {\r\n                fileNameList = new ArrayList<>();\r\n                playlistDownloadId = new ArrayList<>();\r\n//                remainAudio = new ArrayList<>();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void setData(SubPlayListModel.ResponseData listModel) {\r\n        GlobalListModel = listModel;\r\n        /*if (downloadAudioDetailsList.size() != 0) {\r\n            for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                for (int f = 0; i < listModel.getPlaylistSongs().size(); i++) {\r\n                    if (downloadAudioDetailsList.get(i).getAudioFile().equalsIgnoreCase(listModel.getPlaylistSongs().get(f).getAudioFile())) {\r\n\r\n\r\n                    }\r\n                }\r\n            }\r\n        }*/\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                5, 3, 1f, 0);\r\n        binding.ivBanner.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivBanner.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivBanner.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        if (listModel.getPlaylistName().equalsIgnoreCase(\"\") ||\r\n                listModel.getPlaylistName() == null) {\r\n            binding.tvLibraryName.setText(R.string.My_Playlist);\r\n        } else {\r\n            binding.tvLibraryName.setText(listModel.getPlaylistName());\r\n        }\r\n        binding.tvPlaylist.setText(\"Playlist\");\r\n        if (!listModel.getPlaylistImageDetail().equalsIgnoreCase(\"\")) {\r\n            try {\r\n                Glide.with(getActivity()).load(listModel.getPlaylistImageDetail()).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivBanner);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            binding.ivBanner.setImageResource(R.drawable.audio_bg);\r\n        }\r\n\r\n        if (listModel.getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                listModel.getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                        listModel.getTotalhour().equalsIgnoreCase(\"\")\r\n                        && listModel.getTotalminute().equalsIgnoreCase(\"\")) {\r\n            binding.tvLibraryDetail.setText(\"0 Audio | 0h 0m\");\r\n        } else {\r\n            if (listModel.getTotalminute().equalsIgnoreCase(\"\")) {\r\n                binding.tvLibraryDetail.setText(listModel.getTotalAudio() + \" Audio | \"\r\n                        + listModel.getTotalhour() + \"h 0m\");\r\n            } else {\r\n                binding.tvLibraryDetail.setText(listModel.getTotalAudio() + \" Audio | \"\r\n                        + listModel.getTotalhour() + \"h \" + listModel.getTotalminute() + \"m\");\r\n            }\r\n        }\r\n        RefreshIcon = listModel.getPlaylistSongs().size();\r\n        RefreshIconData = listModel.getPlaylistSongs().size();\r\n        binding.llReminder.setVisibility(View.INVISIBLE);\r\n        binding.llDownloads.setVisibility(View.INVISIBLE);\r\n        if (listModel.getPlaylistSongs().size() == 0) {\r\n            binding.llAddAudio.setVisibility(View.VISIBLE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.INVISIBLE);\r\n            binding.llListing.setVisibility(View.GONE);\r\n            binding.btnAddAudio.setOnClickListener(view -> {\r\n                Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n                i.putExtra(\"PlaylistID\", PlaylistID);\r\n                startActivity(i);\r\n            });\r\n        } else {\r\n            binding.llAddAudio.setVisibility(View.GONE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n            binding.llListing.setVisibility(View.VISIBLE);\r\n            try {\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    binding.llDelete.setVisibility(View.VISIBLE);\r\n                    binding.llReminder.setVisibility(View.INVISIBLE);\r\n                    binding.llDownloads.setVisibility(View.INVISIBLE);\r\n                    binding.llMore.setVisibility(View.GONE);\r\n                    binding.rlSearch.setVisibility(View.VISIBLE);\r\n                    adpater2 = new PlayListsAdpater2(listModel.getPlaylistSongs(), getActivity(), UserID, \"0\");\r\n                    binding.rvPlayLists2.setAdapter(adpater2);\r\n                    binding.rvPlayLists.setVisibility(View.GONE);\r\n                    binding.rvPlayLists1.setVisibility(View.GONE);\r\n                    binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                    binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                    binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                    enableDisableDownload(false, \"orange\");\r\n                    binding.ivReminder.setColorFilter(activity.getResources().getColor(R.color.gray), PorterDuff.Mode.SRC_IN);\r\n\r\n                } else {\r\n                    binding.llDownloads.setVisibility(View.VISIBLE);\r\n                    binding.llReminder.setVisibility(View.VISIBLE);\r\n                    if (listModel.getCreated().equalsIgnoreCase(\"1\")) {\r\n                        binding.rvPlayLists2.setVisibility(View.GONE);\r\n                        adpater1 = new PlayListsAdpater1(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated(), this);\r\n                        binding.rvPlayLists.setAdapter(adpater1);\r\n                        adpater = new PlayListsAdpater(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated(), this);\r\n//                        SongListSize = listModel.getPlaylistSongs().size();\r\n                        ItemTouchHelper.Callback callback = new ItemMoveCallback(adpater);\r\n                        touchHelper = new ItemTouchHelper(callback);\r\n                        touchHelper.attachToRecyclerView(binding.rvPlayLists1);\r\n                        binding.rvPlayLists1.setAdapter(adpater);\r\n                    } else {\r\n                        adpater2 = new PlayListsAdpater2(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated());\r\n                        binding.rvPlayLists2.setAdapter(adpater2);\r\n                        binding.rvPlayLists.setVisibility(View.GONE);\r\n                        binding.rvPlayLists1.setVisibility(View.GONE);\r\n                        binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                    }\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callTransparentFrag(int position, Context ctx, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList,\r\n                                     String myPlaylist, String playlistID) {\r\n        SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        if (queuePlay) {\r\n            int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n            Gson gson = new Gson();\r\n            String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                }.getType();\r\n                addToQueueModelList = gson.fromJson(json1, type1);\r\n            }\r\n            addToQueueModelList.remove(position1);\r\n            SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared2.edit();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();\r\n\r\n        }\r\n        player = 1;\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isPause = false;\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isCompleteStop = false;\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(listModelList);\r\n        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, myPlaylist);\r\n        if(MyDownloads.equalsIgnoreCase(\"1\")){\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"Downloadlist\");\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistName);\r\n        }else {\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, playlistID);\r\n        }\r\n        editor.commit();\r\n        try {\r\n            callAddTransFrag();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void callRemove(String id, String PlaylistAudioId, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData, int position) {\r\n        String AudioId = id;\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SucessModel> listCall = APIClient.getClient().getRemoveAudioFromPlaylist(UserID, AudioId, PlaylistID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        handler2.removeCallbacks(UpdateSongTime2);\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SucessModel listModel = response.body();\r\n                        mData.remove(position);\r\n                        if (mData.size() == 0) {\r\n                            enableDisableDownload(false, \"gray\");\r\n                        }\r\n                        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (pos == position && position < mData.size() - 1) {\r\n//                                            pos = pos + 1;\r\n                                if (isDisclaimer == 1) {\r\n//                                    BWSApplication.showToast(\"The audio shall remove after the disclaimer\", getActivity());\r\n                                } else {\r\n                                    callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\", PlaylistID);\r\n                                }\r\n                            } else if (pos == position && position == mData.size() - 1) {\r\n                                pos = 0;\r\n                                if (isDisclaimer == 1) {\r\n//                                    BWSApplication.showToast(\"The audio shall remove after the disclaimer\", getActivity());\r\n                                } else {\r\n                                    callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\", PlaylistID);\r\n                                }\r\n                            } else if (pos < position && pos < mData.size() - 1) {\r\n                                saveToPref(pos, mData);\r\n                            } else if (pos > position && pos == mData.size()) {\r\n                                pos = pos - 1;\r\n                                saveToPref(pos, mData);\r\n                            }\r\n                        }\r\n                        prepareData(UserID, PlaylistID);\r\n                        BWSApplication.showToast(listModel.getResponseMessage(), getActivity());\r\n                    }\r\n                }\r\n\r\n                private void saveToPref(int pos, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData) {\r\n                    SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shareddd.edit();\r\n                    Gson gson = new Gson();\r\n                    String json = gson.toJson(mData);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                    editor.commit();\r\n                    callAddTransFrag();\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private void callDownload(String id, String audioFile, String Name, ArrayList<SubPlayListModel.ResponseData.PlaylistSong>\r\n            playlistSongs, int position, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        if (id.isEmpty() && Name.isEmpty() && audioFile.isEmpty()) {\r\n            enableDisableDownload(false, \"orange\");\r\n            List<String> url = new ArrayList<>();\r\n            List<String> name = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs2 = new ArrayList<>();\r\n            playlistSongs2.addAll(playlistSongs);\r\n            if (downloadAudioDetailsList.size() != 0) {\r\n                for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                    if (playlistSongs2.size() == 0) {\r\n                        break;\r\n                    } else {\r\n                        for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                            if (playlistSongs2.size() != 0) {\r\n                                if (playlistSongs2.get(x).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                    playlistSongs2.remove(x);\r\n                                }\r\n                                if (playlistSongs2.size() == 0) {\r\n                                    break;\r\n                                }\r\n                            } else break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (playlistSongs2.size() != 0) {\r\n                for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                    name.add(playlistSongs2.get(x).getName());\r\n                    url.add(playlistSongs2.get(x).getAudioFile());\r\n                    downloadPlaylistId.add(playlistSongs2.get(x).getPlaylistID());\r\n                }\r\n            }\r\n            byte[] encodedBytes = new byte[1024];\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url.addAll(audioFile1);\r\n                    name.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            if (url.size() != 0) {\r\n                DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url);\r\n                String nameJson = gson.toJson(name);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                fileNameList = name;\r\n                playlistDownloadId = downloadPlaylistId;\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                /*remainAudio = new ArrayList<>();\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                        remainAudio.add(playlistDownloadId.get(i));\r\n                    }\r\n                }*/\r\n                SongListSize = playlistSongs.size();\r\n//                handler1.postDelayed(UpdateSongTime1, 500);\r\n            }\r\n            binding.pbProgress.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setVisibility(View.GONE);\r\n//            String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n//            SaveMedia(EncodeBytes, dirPath, playlistSongs, i, llDownload);\r\n            getMediaByPer(PlaylistID, SongListSize);\r\n            savePlaylist();\r\n            saveAllMedia(playlistSongs, playlistSongs2, encodedBytes);\r\n        } else {\r\n            boolean downloadOrNot = false;\r\n            if (downloadAudioDetailsList.size() != 0) {\r\n                for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                    if (downloadAudioDetailsList.get(i).equals(audioFile)) {\r\n                        downloadOrNot = false;\r\n                        break;\r\n                    } else {\r\n                        downloadOrNot = true;\r\n                    }\r\n                }\r\n            } else {\r\n                downloadOrNot = true;\r\n            }\r\n            if (downloadOrNot) {\r\n                disableDownload(llDownload, ivDownloads);\r\n                List<String> url = new ArrayList<>();\r\n                List<String> name = new ArrayList<>();\r\n                List<String> downloadPlaylistId = new ArrayList<>();\r\n                SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n                Gson gson1 = new Gson();\r\n                String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n                String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n                String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                    Type type = new TypeToken<List<String>>() {\r\n                    }.getType();\r\n                    List<String> fileNameList = gson1.fromJson(json, type);\r\n                    List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                    List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                    if (fileNameList.size() != 0) {\r\n                        url.addAll(audioFile1);\r\n                        name.addAll(fileNameList);\r\n                        downloadPlaylistId.addAll(playlistId1);\r\n                    }\r\n                }\r\n                url.add(audioFile);\r\n                name.add(Name);\r\n                downloadPlaylistId.add(\"\");\r\n                if (url.size() != 0) {\r\n                    DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                    downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared.edit();\r\n                    Gson gson = new Gson();\r\n                    String urlJson = gson.toJson(url);\r\n                    String nameJson = gson.toJson(name);\r\n                    String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                    editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                    editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                    editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                    editor.commit();\r\n                    fileNameList = name;\r\n                    playlistDownloadId = downloadPlaylistId;\r\n                }\r\n            }\r\n            String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n            SaveMedia(new byte[1024], dirPath, playlistSongs, position, llDownload, ivDownloads);\r\n            handler2.postDelayed(UpdateSongTime2, 2000);\r\n        }\r\n    }\r\n\r\n    private void savePlaylist() {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertPlaylist(downloadPlaylistDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n                getMediaByPer(PlaylistID, SongListSize);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void saveAllMedia(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs2, byte[] encodedBytes) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                for (int i = 0; i < playlistSongs.size(); i++) {\r\n                    downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                    downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                    downloadAudioDetails.setPlaylistId(PlaylistID);\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"0\");\r\n                    if (downloadAudioDetailsList.size() != 0) {\r\n                        for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                            if (playlistSongs.get(i).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                downloadAudioDetails.setIsDownload(\"Complete\");\r\n                                downloadAudioDetails.setDownloadProgress(100);\r\n                                break;\r\n                            } else {\r\n                                downloadAudioDetails.setIsDownload(\"pending\");\r\n                                downloadAudioDetails.setDownloadProgress(0);\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                    DatabaseClient.getInstance(getActivity())\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .insertMedia(downloadAudioDetails);\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n\r\n                getMediaByPer(PlaylistID, SongListSize);\r\n                enableDisableDownload(false, \"orange\");\r\n                downloadAudioDetailsList = GetAllMedia();\r\n                playlistWiseAudioDetails = GetMedia();\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void SaveMedia(byte[] encodeBytes, String dirPath, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, int i, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                downloadAudioDetails.setDownload(\"1\");\r\n                downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                downloadAudioDetails.setIsSingle(\"1\");\r\n                downloadAudioDetails.setPlaylistId(\"\");\r\n                downloadAudioDetails.setIsDownload(\"pending\");\r\n                downloadAudioDetails.setDownloadProgress(0);\r\n                DatabaseClient.getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                downloadAudioDetailsList = GetAllMedia();\r\n                playlistWiseAudioDetails = GetMedia();\r\n                downloadedSingleAudio = getMyMedia();\r\n                disableDownload(llDownload, ivDownloads);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public void GetMedia(String url, Context ctx, String download, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(url);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                        disableDownload(llDownload, ivDownloads);\r\n                    }\r\n                } else if (download.equalsIgnoreCase(\"1\")) {\r\n                    disableDownload(llDownload, ivDownloads);\r\n                } else {\r\n                    enableDownload(llDownload, ivDownloads);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetMedia() {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        SubPlayListModel responseData = new SubPlayListModel();\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> details = new ArrayList<>();\r\n                        SubPlayListModel.ResponseData listModel = new SubPlayListModel.ResponseData();\r\n                        listModel.setPlaylistID(downloadPlaylistDetailsList.get(0).getPlaylistID());\r\n                        listModel.setPlaylistName(downloadPlaylistDetailsList.get(0).getPlaylistName());\r\n                        listModel.setPlaylistDesc(downloadPlaylistDetailsList.get(0).getPlaylistDesc());\r\n                        listModel.setPlaylistMastercat(downloadPlaylistDetailsList.get(0).getPlaylistMastercat());\r\n                        listModel.setPlaylistSubcat(downloadPlaylistDetailsList.get(0).getPlaylistSubcat());\r\n                        listModel.setPlaylistImageDetail(downloadPlaylistDetailsList.get(0).getPlaylistImage());\r\n                        listModel.setTotalAudio(downloadPlaylistDetailsList.get(0).getTotalAudio());\r\n                        listModel.setTotalDuration(downloadPlaylistDetailsList.get(0).getTotalDuration());\r\n                        listModel.setTotalhour(downloadPlaylistDetailsList.get(0).getTotalhour());\r\n                        listModel.setTotalminute(downloadPlaylistDetailsList.get(0).getTotalminute());\r\n                        listModel.setCreated(downloadPlaylistDetailsList.get(0).getCreated());\r\n                        listModel.setLike(downloadPlaylistDetailsList.get(0).getLike());\r\n                        listModel.setIsReminder(downloadPlaylistDetailsList.get(0).getIsReminder());\r\n                        if (playlistWiseAudioDetails.size() != 0) {\r\n                            for (int i = 0; i < playlistWiseAudioDetails.size(); i++) {\r\n                                SubPlayListModel.ResponseData.PlaylistSong detail = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                detail.setID(playlistWiseAudioDetails.get(i).getID());\r\n                                detail.setName(playlistWiseAudioDetails.get(i).getName());\r\n                                detail.setAudioFile(playlistWiseAudioDetails.get(i).getAudioFile());\r\n                                detail.setAudioDirection(playlistWiseAudioDetails.get(i).getAudioDirection());\r\n                                detail.setAudiomastercat(playlistWiseAudioDetails.get(i).getAudiomastercat());\r\n                                detail.setAudioSubCategory(playlistWiseAudioDetails.get(i).getAudioSubCategory());\r\n                                detail.setImageFile(playlistWiseAudioDetails.get(i).getImageFile());\r\n                                detail.setLike(playlistWiseAudioDetails.get(i).getLike());\r\n                                detail.setDownload(playlistWiseAudioDetails.get(i).getDownload());\r\n                                detail.setAudioDuration(playlistWiseAudioDetails.get(i).getAudioDuration());\r\n                                details.add(detail);\r\n                            }\r\n                            listModel.setPlaylistSongs(details);\r\n                        }\r\n                        setData(listModel);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    private void enableDownload(RelativeLayout llDownload, ImageView ivDownloads) {\r\n        llDownload.setClickable(true);\r\n        llDownload.setEnabled(true);\r\n        ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n        ivDownloads.setColorFilter(activity.getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n    }\r\n\r\n    private void disableDownload(RelativeLayout llDownload, ImageView ivDownloads) {\r\n        ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n        ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        llDownload.setClickable(false);\r\n        llDownload.setEnabled(false);\r\n    }\r\n\r\n    @Override\r\n    public void requestDrag(RecyclerView.ViewHolder viewHolder) {\r\n        touchHelper.startDrag(viewHolder);\r\n    }\r\n\r\n    private void addDisclaimer() {\r\n        addDisclaimer = new SubPlayListModel.ResponseData.PlaylistSong();\r\n        addDisclaimer.setID(\"0\");\r\n        addDisclaimer.setName(\"Disclaimer\");\r\n        addDisclaimer.setAudioFile(\"\");\r\n        addDisclaimer.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n        addDisclaimer.setAudiomastercat(\"\");\r\n        addDisclaimer.setAudioSubCategory(\"\");\r\n        addDisclaimer.setImageFile(\"\");\r\n        addDisclaimer.setLike(\"\");\r\n        addDisclaimer.setDownload(\"\");\r\n        addDisclaimer.setAudioDuration(\"0:48\");\r\n    }\r\n\r\n    public class PlayListsAdpater extends RecyclerView.Adapter<PlayListsAdpater.MyViewHolder> implements Filterable/*, StartDragListener*/, ItemMoveCallback.ItemTouchHelperContract {\r\n        Context ctx;\r\n        String UserID, Created, name;\r\n        StartDragListener startDragListener;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                String Created, StartDragListener startDragListener) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n            this.startDragListener = startDragListener;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutSorting2Binding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout_sorting2, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @SuppressLint(\"ClickableViewAccessibility\")\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n\r\n            /*UpdateSongTime2 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n//                        for (int f = 0; f < GlobalListModel.getPlaylistSongs().size(); f++) {\r\n                        if (fileNameList.size() != 0) {\r\n                            for (int i = 0; i < fileNameList.size(); i++) {\r\n                                if (fileNameList.get(i).equalsIgnoreCase(GlobalListModel.getPlaylistSongs().get(position).getName())) {\r\n                                    if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(GlobalListModel.getPlaylistSongs().get(position).getName())) {\r\n                                        if (downloadProgress <= 100) {\r\n                                            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                                notifyItemChanged(position);\r\n                                            }\r\n                                        } else {\r\n                                            holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                            getDownloadData();\r\n                                        }\r\n                                    } else {\r\n//                                        notifyItemChanged(position);\r\n                                    }\r\n                                }\r\n                            }\r\n//                            }\r\n                        }\r\n                        if (downloadProgress == 0) {\r\n                            notifyDataSetChanged();\r\n                            getDownloadData();\r\n                        }\r\n                        handler2.postDelayed(this, 3000);\r\n                    } catch (Exception e) {\r\n\r\n                    }\r\n                }\r\n            };\r\n            searchEditText.setHint(R.string.playlist_or_audio_search);\r\n            binding.tvSearch.setHint(R.string.playlist_or_audio_search);\r\n            binding.tvSearch.setVisibility(View.VISIBLE);\r\n            binding.searchView.setVisibility(View.GONE);\r\n            holder.binding.tvTitle.setText(mData.get(position).getName());\r\n            holder.binding.tvTime.setText(mData.get(position).getAudioDuration());*/\r\n\r\n          /*  holder.binding.llMainLayout.setVisibility(View.GONE);\r\n            holder.binding.llDownload.setVisibility(View.GONE);\r\n            holder.binding.llRemove.setVisibility(View.GONE);*/\r\n\r\n//          holder.binding.llThirdLayout.setWeightSum(0.13f);\r\n            holder.binding.llSort.setOnTouchListener((v, event) -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall sort after the disclaimer\", ctx);\r\n                    } else {\r\n                        if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                            startDragListener.requestDrag(holder);\r\n                        }\r\n                        if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                            startDragListener.requestDrag(holder);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                    if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n           /* String id = mData.get(position).getID();\r\n\r\n            if (fileNameList.size() != 0) {\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(mData.get(position).getName())) {\r\n                            if (downloadProgress <= 100) {\r\n                                if (downloadProgress == 100) {\r\n                                    holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                } else {\r\n                                    holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                    holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                                }\r\n                            } else {\r\n                                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                                handler2.removeCallbacks(UpdateSongTime2);\r\n                            }\r\n                            handler2.postDelayed(UpdateSongTime2, 3000);\r\n                        } else {\r\n                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                            handler2.postDelayed(UpdateSongTime2, 3000);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n            }\r\n            for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                if (downloadAudioDetailsList.get(i).getAudioFile().equalsIgnoreCase(mData.get(position).getAudioFile())\r\n                        && downloadAudioDetailsList.get(i).getPlaylistId().equalsIgnoreCase(\"\")) {\r\n                    disableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                    break;\r\n                } else {\r\n                    enableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                }\r\n            }\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(listModelList.get(0).getPlaylistID())) {\r\n\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(0, ctx, listModelList, \"myPlaylist\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    listModelList2.add(addDisclaimer);\r\n                    listModelList2.addAll(listModelList);\r\n                    callTransparentFrag(0, ctx, listModelList2, \"myPlaylist\", PlaylistID);\r\n                }\r\n            });\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                int pos = holder.getAdapterPosition();\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                Log.e(\"postion of paly\", String.valueOf(position));\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(pos, ctx, listModelList, \"myPlaylist\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    if (position != 0) {\r\n                        listModelList2.addAll(listModelList);\r\n                        listModelList2.add(pos, addDisclaimer);\r\n                    } else {\r\n                        listModelList2.add(addDisclaimer);\r\n                        listModelList2.addAll(listModelList);\r\n                    }\r\n                    callTransparentFrag(pos, ctx, listModelList2, \"myPlaylist\", PlaylistID);\r\n                }\r\n            });\r\n\r\n            holder.binding.llDownload.setOnClickListener(view -> {\r\n                name = mData.get(position).getName();\r\n                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                callDownload(mData.get(position).getID(), mData.get(position).getAudioFile(), mData.get(position).getName(), listFilterData, position, holder.binding.llDownload, holder.binding.ivDownloads);\r\n            });\r\n            try {\r\n                holder.binding.llRemove.setOnClickListener(view -> {\r\n                    handler2.removeCallbacks(UpdateSongTime2);\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall remove after the disclaimer\", ctx);\r\n                        } else {\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                                BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                            } else {\r\n                                callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                            BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                        } else {\r\n                            callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                        }\r\n                    }\r\n                });\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }*/\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (listFilterData != null) {\r\n                return listFilterData.size();\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public void onRowMoved(int fromPosition, int toPosition) {\r\n            if (fromPosition < toPosition) {\r\n                for (int i = fromPosition; i < toPosition; i++) {\r\n                    Collections.swap(listModelList, i, i + 1);\r\n                }\r\n            } else {\r\n                for (int i = fromPosition; i > toPosition; i--) {\r\n                    Collections.swap(listModelList, i, i - 1);\r\n                }\r\n            }\r\n            changedAudio.clear();\r\n            for (int i = 0; i < listModelList.size(); i++) {\r\n                changedAudio.add(listModelList.get(i).getID());\r\n            }\r\n            callDragApi();\r\n            notifyItemMoved(fromPosition, toPosition);\r\n            adpater1.notifyItemMoved(fromPosition,toPosition);\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            if (audioPlay) {\r\n                if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (fromPosition == pos) {\r\n                            pos = toPosition;\r\n                            String one = \"1\";\r\n                            Log.e(\"one\", one);\r\n                        }/* else if (toPosition == pos) {\r\n                            if (action == 0) {\r\n                                pos = pos + 1;\r\n                            } else if (action == 1) {\r\n                                pos = pos - 1;\r\n                            }\r\n                        }*/ else if (fromPosition < pos && toPosition > pos) {\r\n                            pos = pos - 1;\r\n                            String one = \"2\";\r\n                            Log.e(\"one\", one);\r\n                        } else if ((fromPosition > pos && toPosition > pos) || (fromPosition < pos && toPosition < pos)) {\r\n                            pos = pos;\r\n                            String one = \"3\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition > pos && toPosition < pos) {\r\n                            pos = pos + 1;\r\n                            String one = \"4\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition > pos && toPosition == pos) {\r\n                            pos = pos + 1;\r\n                            String one = \"5\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition < pos && toPosition == pos) {\r\n                            pos = pos - 1;\r\n                            String one = \"6\";\r\n                            Log.e(\"one\", one);\r\n                        }\r\n                        SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shareddd.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(listModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                        editor.commit();\r\n                        callAddTransFrag();\r\n                    }\r\n                }\r\n            }\r\n\r\n         /* SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();*/\r\n\r\n        }\r\n\r\n        private void callDragApi() {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Call<CardModel> listCall = APIClient.getClient().setShortedAudio(UserID, PlaylistID, TextUtils.join(\",\", changedAudio));\r\n                listCall.enqueue(new Callback<CardModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<CardModel> call, Response<CardModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            CardModel listModel = response.body();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<CardModel> call, Throwable t) {\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onRowClear(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n       /* @Override\r\n        public int getItemViewType(int position) {\r\n            return position;\r\n        }\r\n\r\n        @Override\r\n        public long getItemId(int position) {\r\n            return position;\r\n        }*/\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        binding.rvPlayLists2.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutSorting2Binding binding;\r\n\r\n            public MyViewHolder(MyPlaylistLayoutSorting2Binding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n    public class PlayListsAdpater1 extends RecyclerView.Adapter<PlayListsAdpater1.MyViewHolder> implements Filterable/*, StartDragListener*//*, ItemMoveCallback.ItemTouchHelperContract */{\r\n        Context ctx;\r\n        String UserID, Created, name;\r\n        StartDragListener startDragListener;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater1(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                String Created, StartDragListener startDragListener) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n            this.startDragListener = startDragListener;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutSorting1Binding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout_sorting1, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @SuppressLint(\"ClickableViewAccessibility\")\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n\r\n            UpdateSongTime2 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n//                        for (int f = 0; f < GlobalListModel.getPlaylistSongs().size(); f++) {\r\n                        if (fileNameList.size() != 0) {\r\n                            for (int i = 0; i < fileNameList.size(); i++) {\r\n                                if (fileNameList.get(i).equalsIgnoreCase(GlobalListModel.getPlaylistSongs().get(position).getName())) {\r\n                                    if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(GlobalListModel.getPlaylistSongs().get(position).getName())) {\r\n                                        if (downloadProgress <= 100) {\r\n                                            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                                notifyItemChanged(position);\r\n                                            }\r\n                                        } else {\r\n                                            holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                            getDownloadData();\r\n                                        }\r\n                                    } else {\r\n//                                        notifyItemChanged(position);\r\n                                    }\r\n                                }\r\n                            }\r\n//                            }\r\n                        }\r\n                        if (downloadProgress == 0) {\r\n                            notifyDataSetChanged();\r\n                            getDownloadData();\r\n                        }\r\n                        handler2.postDelayed(this, 3000);\r\n                    } catch (Exception e) {\r\n\r\n                    }\r\n                }\r\n            };\r\n            holder.binding.llMainLayout.setVisibility(View.VISIBLE);\r\n            holder.binding.llDownload.setVisibility(View.VISIBLE);\r\n            holder.binding.llRemove.setVisibility(View.VISIBLE);\r\n            holder.binding.llSort.setVisibility(View.GONE);\r\n            searchEditText.setHint(R.string.playlist_or_audio_search);\r\n            binding.tvSearch.setHint(R.string.playlist_or_audio_search);\r\n            binding.tvSearch.setVisibility(View.VISIBLE);\r\n            binding.searchView.setVisibility(View.GONE);\r\n            holder.binding.tvTitle.setText(mData.get(position).getName());\r\n            holder.binding.tvTime.setText(mData.get(position).getAudioDuration());\r\n//            holder.binding.llThirdLayout.setWeightSum(0.26f);\r\n           /* holder.binding.llSort.setOnTouchListener((v, event) -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall sort after the disclaimer\", ctx);\r\n                    } else {\r\n                        if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                            startDragListener.requestDrag(holder);\r\n                        }\r\n                        if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                            startDragListener.requestDrag(holder);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                    if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                }\r\n                return false;\r\n            });*/\r\n            String id = mData.get(position).getID();\r\n\r\n            if (fileNameList.size() != 0) {\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(mData.get(position).getName())) {\r\n                            if (downloadProgress <= 100) {\r\n                                if (downloadProgress == 100) {\r\n                                    holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                } else {\r\n                                    holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                    holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                                }\r\n                            } else {\r\n                                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                                handler2.removeCallbacks(UpdateSongTime2);\r\n                            }\r\n                            handler2.postDelayed(UpdateSongTime2, 3000);\r\n                        } else {\r\n                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                            handler2.postDelayed(UpdateSongTime2, 3000);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n            }\r\n            for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                if (downloadAudioDetailsList.get(i).getAudioFile().equalsIgnoreCase(mData.get(position).getAudioFile())\r\n                        && downloadAudioDetailsList.get(i).getPlaylistId().equalsIgnoreCase(\"\")) {\r\n                    disableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                    break;\r\n                } else {\r\n                    enableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                }\r\n            }\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                if(isPlayPlaylist){\r\n                    pauseMedia();\r\n                    isPlayPlaylist = false;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                }else {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(listModelList.get(0).getPlaylistID())) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransparentFrag(0, ctx, listModelList, \"myPlaylist\", PlaylistID);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                        listModelList2.add(addDisclaimer);\r\n                        listModelList2.addAll(listModelList);\r\n                        callTransparentFrag(0, ctx, listModelList2, \"myPlaylist\", PlaylistID);\r\n                    }\r\n                    isPlayPlaylist = true;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                }\r\n            });\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                int pos = holder.getAdapterPosition();\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                Log.e(\"postion of paly\", String.valueOf(position));\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(pos, ctx, listModelList, \"myPlaylist\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    if (position != 0) {\r\n                        listModelList2.addAll(listModelList);\r\n                        listModelList2.add(pos, addDisclaimer);\r\n                    } else {\r\n                        listModelList2.add(addDisclaimer);\r\n                        listModelList2.addAll(listModelList);\r\n                    }\r\n                    callTransparentFrag(pos, ctx, listModelList2, \"myPlaylist\", PlaylistID);\r\n                }\r\n            });\r\n\r\n            holder.binding.llDownload.setOnClickListener(view -> {\r\n                name = mData.get(position).getName();\r\n                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                callDownload(mData.get(position).getID(), mData.get(position).getAudioFile(), mData.get(position).getName(), listFilterData, position, holder.binding.llDownload, holder.binding.ivDownloads);\r\n            });\r\n            try {\r\n                holder.binding.llRemove.setOnClickListener(view -> {\r\n                    handler2.removeCallbacks(UpdateSongTime2);\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall remove after the disclaimer\", ctx);\r\n                        } else {\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                                BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                            } else {\r\n                                callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                            BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                        } else {\r\n                            callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                        }\r\n                    }\r\n                });\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (listFilterData != null) {\r\n                return listFilterData.size();\r\n            }\r\n            return 0;\r\n        }\r\n\r\n      /*  @Override\r\n        public void onRowMoved(int fromPosition, int toPosition) {\r\n            if (fromPosition < toPosition) {\r\n                for (int i = fromPosition; i < toPosition; i++) {\r\n                    Collections.swap(listModelList, i, i + 1);\r\n                }\r\n            } else {\r\n                for (int i = fromPosition; i > toPosition; i--) {\r\n                    Collections.swap(listModelList, i, i - 1);\r\n                }\r\n            }\r\n            changedAudio.clear();\r\n            for (int i = 0; i < listModelList.size(); i++) {\r\n                changedAudio.add(listModelList.get(i).getID());\r\n            }\r\n\r\n            callDragApi();\r\n\r\n            notifyItemMoved(fromPosition, toPosition);\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            if (audioPlay) {\r\n                if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (fromPosition == pos) {\r\n                            pos = toPosition;\r\n                            String one = \"1\";\r\n                            Log.e(\"one\", one);\r\n                        }*//* else if (toPosition == pos) {\r\n                            if (action == 0) {\r\n                                pos = pos + 1;\r\n                            } else if (action == 1) {\r\n                                pos = pos - 1;\r\n                            }\r\n                        }*//* else if (fromPosition < pos && toPosition > pos) {\r\n                            pos = pos - 1;\r\n                            String one = \"2\";\r\n                            Log.e(\"one\", one);\r\n                        } else if ((fromPosition > pos && toPosition > pos) || (fromPosition < pos && toPosition < pos)) {\r\n                            pos = pos;\r\n                            String one = \"3\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition > pos && toPosition < pos) {\r\n                            pos = pos + 1;\r\n                            String one = \"4\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition > pos && toPosition == pos) {\r\n                            pos = pos + 1;\r\n                            String one = \"5\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition < pos && toPosition == pos) {\r\n                            pos = pos - 1;\r\n                            String one = \"6\";\r\n                            Log.e(\"one\", one);\r\n                        }\r\n                        SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shareddd.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(listModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                        editor.commit();\r\n                        callAddTransFrag();\r\n                    }\r\n                }\r\n            }\r\n\r\n         *//* SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();*//*\r\n\r\n        }\r\n\r\n        private void callDragApi() {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Call<CardModel> listCall = APIClient.getClient().setShortedAudio(UserID, PlaylistID, TextUtils.join(\",\", changedAudio));\r\n                listCall.enqueue(new Callback<CardModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<CardModel> call, Response<CardModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            CardModel listModel = response.body();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<CardModel> call, Throwable t) {\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onRowClear(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }*/\r\n\r\n        @Override\r\n        public int getItemViewType(int position) {\r\n            return position;\r\n        }\r\n\r\n        @Override\r\n        public long getItemId(int position) {\r\n            return position;\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        binding.rvPlayLists2.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutSorting1Binding binding;\r\n\r\n            public MyViewHolder(MyPlaylistLayoutSorting1Binding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PlayListsAdpater2 extends RecyclerView.Adapter<PlayListsAdpater2.MyViewHolder2> implements Filterable {\r\n        Context ctx;\r\n        String UserID, Created;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater2(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                 String Created) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder2 onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout, parent, false);\r\n            return new MyViewHolder2(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder2 holder, int position) {\r\n            searchEditText.setHint(\"Search for audios\");\r\n            binding.tvSearch.setHint(\"Search for audios\");\r\n\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n            holder.binding.tvTitleA.setText(mData.get(position).getName());\r\n            holder.binding.tvTimeA.setText(mData.get(position).getAudioDuration());\r\n            binding.tvSearch.setVisibility(View.GONE);\r\n            binding.searchView.setVisibility(View.VISIBLE);\r\n            String id = mData.get(position).getID();\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n//            GetMedia(id, activity, mData.get(position).getDownload(), holder.binding.llDownload, holder.binding.ivDownloads);\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                if(isPlayPlaylist){\r\n                    pauseMedia();\r\n                    isPlayPlaylist = false;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                }else {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                            } else {\r\n                                callTransparentFrag(0, ctx, listModelList, \"\", PlaylistID);\r\n                            }\r\n                        } else {\r\n                            isDisclaimer = 0;\r\n                            disclaimerPlayed = 0;\r\n                            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                            listModelList2.add(addDisclaimer);\r\n                            listModelList2.addAll(listModelList);\r\n                            callTransparentFrag(0, ctx, listModelList2, \"\", PlaylistID);\r\n                        }\r\n                    } else {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                            } else {\r\n                                callTransparentFrag(0, ctx, listModelList, \"\", PlaylistID);\r\n                            }\r\n                        } else {\r\n                            isDisclaimer = 0;\r\n                            disclaimerPlayed = 0;\r\n                            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                            listModelList2.add(addDisclaimer);\r\n                            listModelList2.addAll(listModelList);\r\n                            callTransparentFrag(0, ctx, listModelList2, \"\", PlaylistID);\r\n                        }\r\n                    }\r\n                    isPlayPlaylist = true;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                }\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                if(MyDownloads.equalsIgnoreCase(\"1\")){\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransparentFrag(position, ctx, listModelList, \"\", PlaylistID);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                        if (position != 0) {\r\n                            listModelList2.addAll(listModelList);\r\n                            listModelList2.add(position, addDisclaimer);\r\n                        } else {\r\n                            listModelList2.add(addDisclaimer);\r\n                            listModelList2.addAll(listModelList);\r\n                        }\r\n                        callTransparentFrag(position, ctx, listModelList2, \"\", PlaylistID);\r\n                    }\r\n                }else {\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransparentFrag(position, ctx, listModelList, \"\", PlaylistID);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                        if (position != 0) {\r\n                            listModelList2.addAll(listModelList);\r\n                            listModelList2.add(position, addDisclaimer);\r\n                        } else {\r\n                            listModelList2.add(addDisclaimer);\r\n                            listModelList2.addAll(listModelList);\r\n                        }\r\n                        callTransparentFrag(position, ctx, listModelList2, \"\", PlaylistID);\r\n                    }\r\n                }\r\n            });\r\n\r\n            binding.llDelete.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                        BWSApplication.showToast(\"Currently this playlist is in player,so you can't delete this playlist as of now\", ctx);\r\n                    } else {\r\n                        final Dialog dialog = new Dialog(ctx);\r\n                        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                        dialog.setContentView(R.layout.logout_layout);\r\n                        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));\r\n                        dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                        final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                        final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n                        final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                        final Button Btn = dialog.findViewById(R.id.Btn);\r\n                        tvTitle.setText(\"Remove playlist\");\r\n                        tvHeader.setText(\"Are you sure you want to remove the \" + PlaylistName + \" from downloads??\");\r\n                        Btn.setText(\"Confirm\");\r\n                        dialog.setOnKeyListener((vi, keyCode, event) -> {\r\n                            if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                dialog.dismiss();\r\n                            }\r\n                            return false;\r\n                        });\r\n\r\n                        Btn.setOnClickListener(views -> {\r\n                            getDeleteDownloadData();\r\n                            playlistWiseAudiosDetails = GetPlaylistMedia(PlaylistID);\r\n                            dialog.dismiss();\r\n                            Fragment fragment = new PlaylistFragment();\r\n                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .replace(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                        });\r\n\r\n                        tvGoBack.setOnClickListener(viewd -> dialog.dismiss());\r\n                        dialog.show();\r\n                        dialog.setCancelable(false);\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                holder.binding.llMore.setClickable(true);\r\n                holder.binding.llMore.setEnabled(true);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                holder.binding.llMore.setClickable(false);\r\n                holder.binding.llMore.setEnabled(false);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            holder.binding.llMore.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"You can see details after the disclaimer\", ctx);\r\n                    } else {\r\n                        Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                        i.putExtra(\"play\", \"playlist\");\r\n                        i.putExtra(\"ID\", mData.get(position).getID());\r\n                        i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                        i.putExtra(\"position\", position);\r\n                        i.putParcelableArrayListExtra(\"data\", mData);\r\n                        i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                        startActivity(i);\r\n                    }\r\n                } else {\r\n                    Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                    i.putExtra(\"play\", \"playlist\");\r\n                    i.putExtra(\"ID\", mData.get(position).getID());\r\n                    i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                    i.putExtra(\"position\", position);\r\n                    i.putParcelableArrayListExtra(\"data\", mData);\r\n                    i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listFilterData.size();\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.rvPlayLists2.setVisibility(View.GONE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        Log.e(\"search\", SearchFlag);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        public class MyViewHolder2 extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolder2(MyPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetPlaylistMedia(String playlistID) {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                deleteDownloadFile(getActivity(), playlistID);\r\n                for (int i = 0; i < playlistWiseAudioDetails.size(); i++) {\r\n                    GetSingleMedia(playlistWiseAudioDetails.get(i).getAudioFile(), getActivity(), playlistID);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    private void deleteDownloadFile(Context applicationContext, String PlaylistId) {\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(applicationContext)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deleteByPlaylistId(PlaylistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                notifyItemRemoved(position);\r\n                deletePlaylist(PlaylistID);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public void GetSingleMedia(String AudioFile, Context ctx, String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(AudioFile);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                try {\r\n                    if (oneAudioDetailsList.size() != 0) {\r\n                        if (oneAudioDetailsList.size() == 1) {\r\n                            FileUtils.deleteDownloadedFile(ctx, oneAudioDetailsList.get(0).getName());\r\n                        }\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia sts = new GetMedia();\r\n        sts.execute();\r\n    }\r\n\r\n    public void getDeleteDownloadData() {\r\n        List<String> fileNameList,fileNameList1, audioFile, playlistDownloadId;\r\n        try {\r\n            SharedPreferences sharedy = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                fileNameList1 = gson.fromJson(jsony, type);\r\n                audioFile = gson.fromJson(json1, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 1; i < fileNameList1.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            fileNameList.remove(i);\r\n                            audioFile.remove(i);\r\n                            playlistDownloadId.remove(i);\r\n                        }\r\n                    }\r\n                }\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                String nameJson = gson.toJson(fileNameList);\r\n                String urlJson = gson.toJson(audioFile);\r\n                String playlistIdJson = gson.toJson(playlistDownloadId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                if(fileNameList.get(0).equalsIgnoreCase(filename) &&playlistDownloadId.get(0).equalsIgnoreCase(PlaylistID)){\r\n                    PRDownloader.cancel(downloadIdOne);\r\n                    filename =\"\";\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void deletePlaylist(String playlistId) {\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deletePlaylist(playlistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java	(revision bef12230fb63eeb22fc36a24a9f011f88ef343b3)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java	(date 1604471917189)
@@ -512,7 +512,6 @@
                 bundle.putString("MyDownloads", MyDownloads);
                 playlistFragment.setArguments(bundle);
 //            comefrom_search = 0;
-                Log.e("aaaaaaaaaaaa", "aaaaaaaaaaaaaa");
             } else if (comefrom_search == 1) {
                 Fragment fragment = new SearchFragment();
                 FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();
@@ -520,7 +519,6 @@
                         .replace(R.id.flContainer, fragment)
                         .commit();
                 comefrom_search = 0;
-                Log.e("aaaaaaaaaaaa", "bbbbbbbbbbbbbbbb");
             } else if (comefrom_search == 0) {
                 Fragment fragment = new PlaylistFragment();
                 FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();
@@ -528,16 +526,13 @@
                         .replace(R.id.flContainer, fragment)
                         .commit();
                 comefrom_search = 0;
-                Log.e("aaaaaaaaaaaa", "ccccccccccccc");
             } else if (comefrom_search == 3) {
                 Intent i = new Intent(getActivity(), DownloadsActivity.class);
                 ComeFrom_Playlist = true;
                 i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
                 startActivity(i);
                 getActivity().finish();
-
-                Log.e("aaaaaaaaaaaa", "dddddddddddddd");
-//            comefrom_search = 0;
+                //            comefrom_search = 0;
             }
         } else {
             prepareData(UserID, PlaylistIDs);
@@ -808,15 +803,15 @@
         boolean audioPlay = sharedw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
         AudioFlag = sharedw.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
         String pID = sharedw.getString(CONSTANTS.PREF_KEY_PlaylistId, "");
-        if(MyDownloads.equalsIgnoreCase("1")){
+        if (MyDownloads.equalsIgnoreCase("1")) {
             if (audioPlay && AudioFlag.equalsIgnoreCase("Downloadlist") && pID.equalsIgnoreCase(PlaylistName)) {
                 isPlayPlaylist = true;
-                 binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));
+                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));
             } else {
                 isPlayPlaylist = false;
                 binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
             }
-        }else {
+        } else {
             if (audioPlay && AudioFlag.equalsIgnoreCase("SubPlayList") && pID.equalsIgnoreCase(PlaylistID)) {
                 isPlayPlaylist = true;
                 binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));
@@ -991,17 +986,16 @@
             binding.tvLibraryName.setText(listModel.getPlaylistName());
         }
         binding.tvPlaylist.setText("Playlist");
-        if (!listModel.getPlaylistImageDetail().equalsIgnoreCase("")) {
-            try {
+        try {
+            if (!listModel.getPlaylistImageDetail().equalsIgnoreCase("")) {
                 Glide.with(getActivity()).load(listModel.getPlaylistImageDetail()).thumbnail(0.05f)
                         .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivBanner);
-            } catch (Exception e) {
-                e.printStackTrace();
-            }
-        } else {
-            binding.ivBanner.setImageResource(R.drawable.audio_bg);
+            } else {
+                binding.ivBanner.setImageResource(R.drawable.audio_bg);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
         }
-
         if (listModel.getTotalAudio().equalsIgnoreCase("") ||
                 listModel.getTotalAudio().equalsIgnoreCase("0") &&
                         listModel.getTotalhour().equalsIgnoreCase("")
@@ -1121,10 +1115,10 @@
         editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
         editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
         editor.putString(CONSTANTS.PREF_KEY_myPlaylist, myPlaylist);
-        if(MyDownloads.equalsIgnoreCase("1")){
+        if (MyDownloads.equalsIgnoreCase("1")) {
             editor.putString(CONSTANTS.PREF_KEY_AudioFlag, "Downloadlist");
             editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistName);
-        }else {
+        } else {
             editor.putString(CONSTANTS.PREF_KEY_AudioFlag, "SubPlayList");
             editor.putString(CONSTANTS.PREF_KEY_PlaylistId, playlistID);
         }
@@ -1869,7 +1863,7 @@
             }
             callDragApi();
             notifyItemMoved(fromPosition, toPosition);
-            adpater1.notifyItemMoved(fromPosition,toPosition);
+            adpater1.notifyItemMoved(fromPosition, toPosition);
             SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
             boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
             AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
@@ -2010,6 +2004,7 @@
                 }
             };
         }
+
         public class MyViewHolder extends RecyclerView.ViewHolder {
             MyPlaylistLayoutSorting2Binding binding;
 
@@ -2019,7 +2014,8 @@
             }
         }
     }
-    public class PlayListsAdpater1 extends RecyclerView.Adapter<PlayListsAdpater1.MyViewHolder> implements Filterable/*, StartDragListener*//*, ItemMoveCallback.ItemTouchHelperContract */{
+
+    public class PlayListsAdpater1 extends RecyclerView.Adapter<PlayListsAdpater1.MyViewHolder> implements Filterable/*, StartDragListener*//*, ItemMoveCallback.ItemTouchHelperContract */ {
         Context ctx;
         String UserID, Created, name;
         StartDragListener startDragListener;
@@ -2027,7 +2023,7 @@
         private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;
 
         public PlayListsAdpater1(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,
-                                String Created, StartDragListener startDragListener) {
+                                 String Created, StartDragListener startDragListener) {
             this.listModelList = listModelList;
             this.listFilterData = listModelList;
             this.ctx = ctx;
@@ -2171,11 +2167,11 @@
             Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)
                     .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);
             binding.ivPlaylistStatus.setOnClickListener(view -> {
-                if(isPlayPlaylist){
+                if (isPlayPlaylist) {
                     pauseMedia();
                     isPlayPlaylist = false;
                     binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
-                }else {
+                } else {
                     SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
                     boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
                     AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
@@ -2485,11 +2481,11 @@
                     .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);
 //            GetMedia(id, activity, mData.get(position).getDownload(), holder.binding.llDownload, holder.binding.ivDownloads);
             binding.ivPlaylistStatus.setOnClickListener(view -> {
-                if(isPlayPlaylist){
+                if (isPlayPlaylist) {
                     pauseMedia();
                     isPlayPlaylist = false;
                     binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
-                }else {
+                } else {
                     SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
                     boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
                     AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
@@ -2534,7 +2530,7 @@
                 boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
                 AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
                 String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, "");
-                if(MyDownloads.equalsIgnoreCase("1")){
+                if (MyDownloads.equalsIgnoreCase("1")) {
                     if (audioPlay && AudioFlag.equalsIgnoreCase("Downloadlist") && pID.equalsIgnoreCase(PlaylistName)) {
                         if (isDisclaimer == 1) {
                             BWSApplication.showToast("The audio shall start playing after the disclaimer", ctx);
@@ -2554,7 +2550,7 @@
                         }
                         callTransparentFrag(position, ctx, listModelList2, "", PlaylistID);
                     }
-                }else {
+                } else {
                     if (audioPlay && AudioFlag.equalsIgnoreCase("SubPlayList") && pID.equalsIgnoreCase(PlaylistID)) {
                         if (isDisclaimer == 1) {
                             BWSApplication.showToast("The audio shall start playing after the disclaimer", ctx);
@@ -2800,7 +2796,7 @@
     }
 
     public void getDeleteDownloadData() {
-        List<String> fileNameList,fileNameList1, audioFile, playlistDownloadId;
+        List<String> fileNameList, fileNameList1, audioFile, playlistDownloadId;
         try {
             SharedPreferences sharedy = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);
             Gson gson = new Gson();
@@ -2834,9 +2830,9 @@
                 editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);
                 editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);
                 editor.commit();
-                if(fileNameList.get(0).equalsIgnoreCase(filename) &&playlistDownloadId.get(0).equalsIgnoreCase(PlaylistID)){
+                if (fileNameList.get(0).equalsIgnoreCase(filename) && playlistDownloadId.get(0).equalsIgnoreCase(PlaylistID)) {
                     PRDownloader.cancel(downloadIdOne);
-                    filename ="";
+                    filename = "";
                 }
             }
         } catch (Exception e) {
Index: app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikePlaylistsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.LikeModule.Fragments;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.InvoiceModule.Models.InvoiceListModel;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.FragmentLikesBinding;\r\nimport com.brainwellnessspa.databinding.LikeListLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\n\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class LikePlaylistsFragment extends Fragment {\r\n    FragmentLikesBinding binding;\r\n    String UserID;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_likes, container, false);\r\n        View view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        prepareData();\r\n\r\n        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getActivity());\r\n        binding.rvLikesList.setLayoutManager(mLayoutManager);\r\n        binding.rvLikesList.setItemAnimator(new DefaultItemAnimator());\r\n        binding.llError.setVisibility(View.GONE);\r\n        binding.tvFound.setText(\"No result found\");\r\n        return view;\r\n    }\r\n\r\n    public void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<LikesHistoryModel> listCall = APIClient.getClient().getLikeAudioPlaylistListing(UserID);\r\n            listCall.enqueue(new Callback<LikesHistoryModel>() {\r\n                @Override\r\n                public void onResponse(Call<LikesHistoryModel> call, Response<LikesHistoryModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        LikesHistoryModel listModel = response.body();\r\n                        List<LikesHistoryModel.ResponseData.Playlist> listDataModel = listModel.getResponseData().getPlaylist();\r\n                        if (listDataModel.size() == 0) {\r\n                            binding.tvFound.setVisibility(View.VISIBLE);\r\n                            binding.llError.setVisibility(View.VISIBLE);\r\n                        } else {\r\n                            binding.llError.setVisibility(View.GONE);\r\n                            LikePlaylistsAdapter adapter = new LikePlaylistsAdapter(listModel.getResponseData().getPlaylist(), getActivity());\r\n                            binding.rvLikesList.setAdapter(adapter);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<LikesHistoryModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    public class LikePlaylistsAdapter extends RecyclerView.Adapter<LikePlaylistsAdapter.MyViewHolder> {\r\n        private List<LikesHistoryModel.ResponseData.Playlist> modelList;\r\n        Context ctx;\r\n\r\n        public LikePlaylistsAdapter(List<LikesHistoryModel.ResponseData.Playlist> modelList, Context ctx) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            LikeListLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.like_list_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(modelList.get(position).getPlaylistName());\r\n            if (modelList.get(position).getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                    modelList.get(position).getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                            modelList.get(position).getTotalhour().equalsIgnoreCase(\"\")\r\n                            && modelList.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                holder.binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n            } else {\r\n                if (modelList.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.tvTime.setText(modelList.get(position).getTotalAudio() + \" Audio | \"\r\n                            + modelList.get(position).getTotalhour() + \"h 0m\");\r\n                } else {\r\n                    holder.binding.tvTime.setText(modelList.get(position).getTotalAudio() +\r\n                            \" Audios | \" + modelList.get(position).getTotalhour() + \"h \" + modelList.get(position).getTotalminute() + \"m\");\r\n                }\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(modelList.get(position).getPlaylistImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    Dialog dialog = new Dialog(ctx);\r\n                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                    dialog.setContentView(R.layout.logout_layout);\r\n                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));\r\n                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                    final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n                    final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                    final Button Btn = dialog.findViewById(R.id.Btn);\r\n                    tvTitle.setText(\"Remove from Liked Playlists?\");\r\n                    tvHeader.setText(modelList.get(position).getPlaylistName());\r\n                    Btn.setText(\"Remove\");\r\n                    tvGoBack.setText(\"Cancel\");\r\n                    dialog.setOnKeyListener((v1, keyCode, event) -> {\r\n                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                            dialog.dismiss();\r\n                        }\r\n                        return false;\r\n                    });\r\n\r\n                    Btn.setOnClickListener(v2 -> {\r\n//                        callRemoveLike(modelList.get(position).getPlaylistId());\r\n                        dialog.dismiss();\r\n                    });\r\n                    tvGoBack.setOnClickListener(v3 -> dialog.dismiss());\r\n                    dialog.show();\r\n                    dialog.setCancelable(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return modelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            LikeListLayoutBinding binding;\r\n\r\n            public MyViewHolder(LikeListLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n    private void callRemoveLike(String id) {\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(id, UserID);\r\n            listCall.enqueue(new Callback<AudioLikeModel>() {\r\n                @Override\r\n                public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        AudioLikeModel model = response.body();\r\n                        BWSApplication.showToast(model.getResponseMessage(), getActivity());\r\n                        prepareData();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AudioLikeModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikePlaylistsFragment.java	(revision bef12230fb63eeb22fc36a24a9f011f88ef343b3)
+++ app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikePlaylistsFragment.java	(date 1604468142496)
@@ -23,6 +23,7 @@
 
 import com.brainwellnessspa.BWSApplication;
 import com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;
+import com.brainwellnessspa.DashboardModule.Models.PlaylistLikeModel;
 import com.brainwellnessspa.InvoiceModule.Models.InvoiceListModel;
 import com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;
 import com.brainwellnessspa.R;
@@ -157,7 +158,7 @@
                     });
 
                     Btn.setOnClickListener(v2 -> {
-//                        callRemoveLike(modelList.get(position).getPlaylistId());
+                        callRemoveLike(modelList.get(position).getPlaylistId());
                         dialog.dismiss();
                     });
                     tvGoBack.setOnClickListener(v3 -> dialog.dismiss());
@@ -185,20 +186,20 @@
     private void callRemoveLike(String id) {
         if (BWSApplication.isNetworkConnected(getActivity())) {
             BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
-            Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(id, UserID);
-            listCall.enqueue(new Callback<AudioLikeModel>() {
+            Call<PlaylistLikeModel> listCall = APIClient.getClient().getPlaylistLike(id, UserID);
+            listCall.enqueue(new Callback<PlaylistLikeModel>() {
                 @Override
-                public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {
+                public void onResponse(Call<PlaylistLikeModel> call, Response<PlaylistLikeModel> response) {
                     if (response.isSuccessful()) {
                         BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
-                        AudioLikeModel model = response.body();
+                        PlaylistLikeModel model = response.body();
                         BWSApplication.showToast(model.getResponseMessage(), getActivity());
                         prepareData();
                     }
                 }
 
                 @Override
-                public void onFailure(Call<AudioLikeModel> call, Throwable t) {
+                public void onFailure(Call<PlaylistLikeModel> call, Throwable t) {
                     BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());
                 }
             });
@@ -206,5 +207,4 @@
             BWSApplication.showToast(getString(R.string.no_server_found), getActivity());
         }
     }
-
 }
\ No newline at end of file
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">Brain Wellness Spa</string>\r\n\r\n    <string name=\"ResponseCodesuccess\">200</string>\r\n    <string name=\"ResponseCodefail\">401</string>\r\n    <string name=\"stipe_test_key\">pk_test_Mm4d65j7STTpLo0YrkYGmaWH00tQO1qMnv</string>\r\n    <string name=\"stipe_live_key\">pk_live_nmRApzuiZfmKRruPcnpYhurb00tFp2EYYP</string>\r\n\r\n    <string name=\"sign_in\">Sign In</string>\r\n    <string name=\"enter_phone_number\">Enter Phone Number</string>\r\n    <string name=\"enter_mobile_number\">Enter Mobile Number</string>\r\n    <string name=\"mobile_number\">Mobile Number</string>\r\n    <string name=\"enter_your_code\">Enter your code</string>\r\n    <string name=\"phone_number\">Phone Number</string>\r\n    <string name=\"send_code_text\">We will send you a code by SMS to confirm your mobile number.</string>\r\n    <string name=\"register_text\"><u>Not a Member? Register</u></string>\r\n    <string name=\"privacy_policy\">Privacy Policy</string>\r\n    <string name=\"privacy_policy_t_n_c\">By clicking on Register or Sign up you agree to our</string>\r\n    <string name=\"get_the_code\">Get SMS code</string>\r\n    <string name=\"choose_your_country\">Choose your country</string>\r\n    <string name=\"enter_otp\">Enter OTP</string>\r\n    <string name=\"enter_sms\">Enter SMS Code</string>\r\n    <string name=\"resent_sms\">Resend SMS</string>\r\n    <string name=\"edit_phone_number\">Edit mobile number</string>\r\n    <string name=\"t_n_c\">Terms &amp; Conditions</string>\r\n    <string name=\"title_activity_dashboard\">MainActivity</string>\r\n    <string name=\"title_audio\">AUDIO</string>\r\n    <string name=\"title_playlist\">PLAYLIST</string>\r\n    <string name=\"title_appointment\">APPOINTMENT</string>\r\n    <string name=\"title_account\">ACCOUNT</string>\r\n    <string name=\"title_search\">SEARCH</string>\r\n    <string name=\"thank_u\">Thank You</string>\r\n    <string name=\"thank_u_quotes\">Congratulations on joining the Brain Wellness Spa Audio Membership</string>\r\n    <string name=\"explore_app\">Explore app</string>\r\n    <string name=\"view_invoice\"><u>View Invoice</u></string>\r\n    <string name=\"downloads\">Downloads</string>\r\n    <string name=\"invoices\">Invoices</string>\r\n    <string name=\"logout\">Log out</string>\r\n    <string name=\"faq\">FAQ</string>\r\n    <string name=\"reminder\">Reminder</string>\r\n    <string name=\"billing_and_order\">Billing and Order</string>\r\n    <string name=\"view_profile\">View Profile</string>\r\n    <string name=\"profile\">Profile</string>\r\n    <string name=\"Full_Name\">Full Name</string>\r\n    <string name=\"Date_of_Birth\">Date of Birth</string>\r\n    <string name=\"Mobile_Number\">Mobile Number</string>\r\n    <string name=\"Email_Address\">Email Address</string>\r\n    <string name=\"Downloads\">Downloads</string>\r\n    <string name=\"hello_blank_fragment\">Hello blank fragment</string>\r\n    <string name=\"Invoice\">Invoice</string>\r\n    <string name=\"Billing_and_Order\">Billing and Order</string>\r\n    <string name=\"Cancel_Subscription\">Cancel Subscription</string>\r\n    <string name=\"Cancel\">Cancel</string>\r\n    <string name=\"cancel_quotes\">Are you sure you want to cancel your subscription?</string>\r\n    <string name=\"reminder_quotes\">Are you sure you want to delete your reminder?</string>\r\n    <string name=\"go_back\">Go Back</string>\r\n    <string name=\"Country\">Country</string>\r\n    <string name=\"Postcode\">Postcode</string>\r\n    <string name=\"State\">State</string>\r\n    <string name=\"Save\">Save</string>\r\n    <string name=\"Address_Line_One\">Address Line 1</string>\r\n    <string name=\"Address_Line_Two\">Address Line 2 (Optional)</string>\r\n    <string name=\"City\">Suburb / Town / City</string>\r\n    <string name=\"Card_Number\">Card Number</string>\r\n    <string name=\"Card_Holder_Name\">Card Holder Name</string>\r\n    <string name=\"Cvv\">CVV</string>\r\n    <string name=\"Add_New_Card\">Add New Card</string>\r\n    <string name=\"FAQ\">FAQ</string>\r\n    <string name=\"disclaimer\"><b>Disclaimer:</b> The Brain Wellness Spa offers a unique, alternative and drug free method created by our founder Terri Bowman aimed to assist people encountering struggles in their daily lives, to find inner peace and overcome negative thoughts and emotions (the Brain Wellness Spa Method).\\n\\nThe Brain Wellness Spa Method is not a scientific method. \\n\\nThe testimonials of our clients speak for themselves and we are so proud of the incredible results they have achieved – we want to help you and are committed to assisting you find a way to live a better life. However, as with any service, we accept that it may not be right for everyone and that results may vary from client to client. Accordingly, we make no promises or representations that our service will work for you but we invite you to try it for yourself.</string>\r\n    <string name=\"Disclaimer\">Disclaimer</string>\r\n    <string name=\"Audio\">Audio</string>\r\n    <string name=\"Playlist\">Playlist</string>\r\n    <string name=\"Help\">Help</string>\r\n    <string name=\"Reminder\">Reminder</string>\r\n    <string name=\"Set_a_Reminder\">Set a Reminder</string>\r\n    <string name=\"Repeat\">Repeat</string>\r\n    <string name=\"Membership\">Membership</string>\r\n    <string name=\"month_free\">Join Now – Get 1 Month Free</string>\r\n    <string name=\"Order_Summary\">Order Summary</string>\r\n    <string name=\"Proceed_to_checkout\">Proceed to checkout</string>\r\n    <string name=\"Checkout\">Checkout</string>\r\n    <string name=\"Next\">Next</string>\r\n    <string name=\"Complete_Payment\">Complete Payment</string>\r\n    <string name=\"Explore\">Explore</string>\r\n    <string name=\"Recently_Played\">Recently Played</string>\r\n    <string name=\"My_Downloads\">My Downloads</string>\r\n    <string name=\"View_all\">View all</string>\r\n    <string name=\"Recommended\">Recommended</string>\r\n    <string name=\"Get_Inspired\">Get Inspired !</string>\r\n    <string name=\"Popular\">Popular</string>\r\n    <string name=\"Top_Categories\">Top Categories</string>\r\n    <string name=\"Appointment\">Appointment</string>\r\n    <string name=\"Next_Session\">Next Session</string>\r\n    <string name=\"Previous_Appointments\">Previous Appointments</string>\r\n    <string name=\"Create_playlist\">Create playlist</string>\r\n    <string name=\"give_playlist_name\">Give your playlist a name.</string>\r\n    <string name=\"Your_Created\">Your Created</string>\r\n    <string name=\"Suggested_Audios\">Suggested Audios</string>\r\n    <string name=\"Recommended_Audios\">Recommended  Audios</string>\r\n    <string name=\"Suggested_Playlist\">Suggested Playlist</string>\r\n    <string name=\"Recommendeds_Playlist\">Recommended Playlist</string>\r\n    <string name=\"View_order_details\">View order details</string>\r\n    <string name=\"Payment_information\">Payment information</string>\r\n    <string name=\"Order_summary\">Order summary</string>\r\n    <string name=\"NOW_PLAYING_FROM\">NOW PLAYING FROM</string>\r\n    <string name=\"Download_audio\">Download audio</string>\r\n    <string name=\"Like\">Like</string>\r\n    <string name=\"Add_to_Playlist\">Add to Playlist</string>\r\n    <string name=\"Add_to_Queue\">Add to Queue</string>\r\n    <string name=\"Shuffle\">Shuffle</string>\r\n    <string name=\"Go_to_queue\">Go to queue</string>\r\n    <string name=\"Directions\">Directions</string>\r\n    <string name=\"Now_Playing\">Now Playing</string>\r\n    <string name=\"Next_in_queue\">Next in queue</string>\r\n    <string name=\"close_queue\">Close queue</string>\r\n    <string name=\"Self_development\">Self-development</string>\r\n    <string name=\"Add_Audio\">Add Audio</string>\r\n    <string name=\"Add_Audios\">Add Audios</string>\r\n    <string name=\"Suggested\">Suggested</string>\r\n    <string name=\"Session\">Session</string>\r\n    <string name=\"Appointment_Details\">Appointment Details</string>\r\n    <string name=\"Complete_the_Booklet\">Complete the Booklet</string>\r\n    <string name=\"Download_PDF\">Download PDF</string>\r\n    <string name=\"Book_Now\">Book Now</string>\r\n    <string name=\"Audios_in_Playlist\">Audios in Playlist</string>\r\n    <string name=\"New_PLaylist\">New PLaylist</string>\r\n    <string name=\"Rename_playlist\">Rename playlist</string>\r\n    <string name=\"Delete_playlist\">Delete playlist</string>\r\n    <string name=\"Download_playlist\">Download playlist</string>\r\n    <string name=\"Add_playlist\">Add to playlist</string>\r\n    <string name=\"Add_playlist1\">Add Playlist</string>\r\n    <string name=\"delete_quotes\">Are you sure you want to delete Self-development playlist?</string>\r\n    <string name=\"Close\">Close</string>\r\n    <string name=\"Description\">Description</string>\r\n    <string name=\"Resource\">Resource</string>\r\n    <string name=\"Resources\">Resources</string>\r\n    <string name=\"Select_reason\">Select reason</string>\r\n    <string name=\"logout_quotes\">Are you sure you want to log out Brain Wellness Spa?</string>\r\n    <string name=\"Discover_More\">Discover More</string>\r\n    <string name=\"error_player\">There was an error initializing the YouTubePlayer (%1$s)</string>\r\n    <string name=\"no_server_found\">You are not currently connected to internet. Please try again.!</string>\r\n    <string name=\"not_valid_number\">Please enter a valid mobile number</string>\r\n    <string name=\"not_valid_mobile_number\">Please use a valid mobile number</string>\r\n    <string name=\"not_valids_mobile_number\">Please enter a valid mobile number</string>\r\n    <string name=\"no_add_digits\">Wait a sec! We need to exchange digits to get started</string>\r\n    <string name=\"Please_enter_your_mobile_number\">Please enter your mobile number</string>\r\n    <string name=\"Australia\">Australia</string>\r\n    <string name=\"code\">+61</string>\r\n    <string name=\"my_download\">MyDownload</string>\r\n    <string name=\"my_like\">MyLike</string>\r\n    <string name=\"recently_played\">Recently Played</string>\r\n    <string name=\"recommended\">Recommended</string>\r\n    <string name=\"Library\">Library</string>\r\n    <string name=\"get_inspired\">Get Inspired</string>\r\n    <string name=\"popular\">Popular</string>\r\n    <string name=\"top_categories\">Top Categories</string>\r\n    <string name=\"Rename\">Rename</string>\r\n    <string name=\"notvalid_number\">It seems your mobile number not exist in our system.</string>\r\n    <string name=\"valid_name\">Please enter name</string>\r\n    <string name=\"takePhoto\">Take photo</string>\r\n    <string name=\"chooseFromGallary\">Choose from gallery</string>\r\n    <string name=\"cancel\">Cancel</string>\r\n    <string name=\"addPhoto\">Add photo!</string>\r\n    <string name=\"removeProfilePicture\">Remove profile picture</string>\r\n    <string name=\"your_created\">Your Created</string>\r\n    <string name=\"MyDownloads\">MyDownloads</string>\r\n    <string name=\"populars\">Popular</string>\r\n    <string name=\"Bundle\">Bundle</string>\r\n    <string name=\"Recommended_Playlist\">Recommended Playlist</string>\r\n    <string name=\"first_card_chars\">XXXX XXXX XXXX </string>\r\n    <string name=\"blank_all_fields\">Hey! I\\'ll need your inputs</string>\r\n    <string name=\"valid_card_no_error\">Hey! Seems like the card number is out of whack. Fancy a retry?</string>\r\n    <string name=\"valid_expiry_error\">Hey! I\\'ll need you to add expiry details</string>\r\n    <string name=\"valid_cvv_error\">Hey! I\\'ll need you to add the CVV</string>\r\n    <string name=\"invalid_expiry_date\">Hey! Seems like the expiry details are out of whack. Fancy a retry?</string>\r\n    <string name=\"invalid_cvv_error\">Hey! Seems like the CVV is out of whack. Fancy a retry?</string>\r\n    <string name=\"blank_card_no_error\">Hey! I\\'ll need you to add card number</string>\r\n    <string name=\"blank_card_holder_name_error\">Hey! I\\'ll need you to add cardholder name</string>\r\n    <string name=\"Audio_Book\">Audio Books</string>\r\n    <string name=\"Podcasts\">Podcasts</string>\r\n    <string name=\"Apps\">Apps</string>\r\n    <string name=\"Website\">Website</string>\r\n    <string name=\"Websites\">Websites</string>\r\n    <string name=\"Documentaries\">Documentaries</string>\r\n    <string name=\"My_Playlist\">My Playlist</string>\r\n    <string name=\"background_image\">Background Image</string>\r\n    <string name=\"Search_for_audio\">Search for audio</string>\r\n    <string name=\"Feeling_better\">Feeling better</string>\r\n    <string name=\"Condition_worse\">Condition worse</string>\r\n    <string name=\"Pricing\">Pricing</string>\r\n    <string name=\"Other_reason\">Other reason</string>\r\n    <string name=\"Appointment_Header\">There are no upcoming appointments scheduled. Would you like to <b>Book a new appointment?</b></string>\r\n    <string name=\"Rename_your_playlist\">Rename your playlist .</string>\r\n    <string name=\"no_data_found\">Try searching again using a diffrent spelling or keyword.</string>\r\n    <string name=\"f_A_Q\">Frequently Asked Questions</string>\r\n    <string name=\"Find_in_playlist\">Find in playlist</string>\r\n    <string name=\"Remove_from_this_playlist\">Remove from this playlist</string>\r\n    <string name=\"Pay_Now\">Pay Now</string>\r\n    <string name=\"Active\">Active</string>\r\n    <string name=\"InActive\">InActive</string>\r\n    <string name=\"Suspended\">Suspended</string>\r\n    <string name=\"Cancelled\">Cancelled</string>\r\n    <string name=\"Proceed_to_plan\">Proceed to plan</string>\r\n    <string name=\"Select_Playlist\">Select Playlist</string>\r\n    <string name=\"Add_New_Reminder\">Add New Reminder</string>\r\n    <string name=\"Delete_Reminder\">Delete Reminder</string>\r\n    <string name=\"Payment\">Payment</string>\r\n\r\n    <string name=\"default_notification_channel_id\">10001</string>\r\n    <string name=\"Delete_payment_card\">Delete payment card</string>\r\n    <string name=\"delete_payment_quotes\">Are you sure you want to delete the payment card ?</string>\r\n    <string name=\"sucess_playlist\">Sucessfully added to playlist</string>\r\n    <string name=\"Guest\">Guest</string>\r\n    <string name=\"membership_title\">Access More Than 65 Audio Programs.</string>\r\n    <string name=\"t_n_cs\"><u>T&amp;Cs</u></string>\r\n    <string name=\"t_n_csm\">T&amp;Cs,</string>\r\n    <string name=\"privacy_policysm\">Privacy Policy </string>\r\n    <string name=\"privacy_policys\">, <u>Privacy Policy</u> </string>\r\n    <string name=\"disclaimers\"><u>Disclaimer</u></string>\r\n    <string name=\"playlist_or_audio_search\">Add or search for audio, playlist</string>\r\n    <string name=\"and\">and</string>\r\n    <string name=\"Disclaimer_text\">The Brain Wellness Spa offers a unique, alternative and drug free method created by our founder Terri Bowman aimed to assist people encountering struggles in their daily lives, to find inner peace and overcome negative thoughts and emotions (the Brain Wellness Spa Method).\\n\\nThe Brain Wellness Spa Method is not a scientific method. \\n\\nThe testimonials of our clients speak for themselves and we are so proud of the incredible results they have achieved – we want to help you and are committed to assisting you find a way to live a better life. However, as with any service, we accept that it may not be right for everyone and that results may vary from client to client. Accordingly, we make no promises or representations that our service will work for you but we invite you to try it for yourself.</string>\r\n    <string name=\"General\">General</string>\r\n    <string name=\"Favorites\">Favorites</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision bef12230fb63eeb22fc36a24a9f011f88ef343b3)
+++ app/src/main/res/values/strings.xml	(date 1604468416410)
@@ -125,6 +125,7 @@
     <string name="Audios_in_Playlist">Audios in Playlist</string>
     <string name="New_PLaylist">New PLaylist</string>
     <string name="Rename_playlist">Rename playlist</string>
+    <string name="Liked_playlist">Like playlist</string>
     <string name="Delete_playlist">Delete playlist</string>
     <string name="Download_playlist">Download playlist</string>
     <string name="Add_playlist">Add to playlist</string>
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Models/PlaylistLikeModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Models/PlaylistLikeModel.java	(date 1604467846742)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Models/PlaylistLikeModel.java	(date 1604467846742)
@@ -0,0 +1,65 @@
+package com.brainwellnessspa.DashboardModule.Models;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+public class PlaylistLikeModel {
+    @SerializedName("ResponseData")
+    @Expose
+    private ResponseData responseData;
+    @SerializedName("ResponseCode")
+    @Expose
+    private String responseCode;
+    @SerializedName("ResponseMessage")
+    @Expose
+    private String responseMessage;
+    @SerializedName("ResponseStatus")
+    @Expose
+    private String responseStatus;
+
+    public ResponseData getResponseData() {
+        return responseData;
+    }
+
+    public void setResponseData(ResponseData responseData) {
+        this.responseData = responseData;
+    }
+
+    public String getResponseCode() {
+        return responseCode;
+    }
+
+    public void setResponseCode(String responseCode) {
+        this.responseCode = responseCode;
+    }
+
+    public String getResponseMessage() {
+        return responseMessage;
+    }
+
+    public void setResponseMessage(String responseMessage) {
+        this.responseMessage = responseMessage;
+    }
+
+    public String getResponseStatus() {
+        return responseStatus;
+    }
+
+    public void setResponseStatus(String responseStatus) {
+        this.responseStatus = responseStatus;
+    }
+
+    public class ResponseData {
+        @SerializedName("flag")
+        @Expose
+        private String flag;
+
+        public String getFlag() {
+            return flag;
+        }
+
+        public void setFlag(String flag) {
+            this.flag = flag;
+        }
+    }
+}
Index: app/src/main/res/layout/activity_my_playlist.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/dark_blue_gray\">\r\n\r\n        <androidx.core.widget.NestedScrollView\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:overScrollMode=\"never\">\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                android:layout_marginBottom=\"@dimen/_26sdp\"\r\n                android:orientation=\"vertical\">\r\n\r\n                <RelativeLayout\r\n                    android:id=\"@+id/rlLayout\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"@dimen/_56sdp\">\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llBack\"\r\n                        android:layout_width=\"42dp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_centerVertical=\"true\"\r\n                        android:gravity=\"center\">\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:src=\"@drawable/ic_close_white_icon\"\r\n                            app:tint=\"@color/white\" />\r\n\r\n                    </LinearLayout>\r\n\r\n                </RelativeLayout>\r\n\r\n                <androidx.cardview.widget.CardView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_gravity=\"center_horizontal\"\r\n                    android:layout_marginTop=\"@dimen/_26sdp\"\r\n                    app:cardCornerRadius=\"@dimen/_10sdp\">\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ivRestaurantImage\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\" />\r\n                </androidx.cardview.widget.CardView>\r\n\r\n                <TextView\r\n                    android:id=\"@+id/tvName\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_26sdp\"\r\n                    android:ellipsize=\"end\"\r\n                    android:fontFamily=\"@font/montserrat_medium\"\r\n                    android:gravity=\"center\"\r\n                    android:textColor=\"@color/white\"\r\n                    android:textSize=\"@dimen/_22sdp\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/tvDesc\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_6sdp\"\r\n                    android:ellipsize=\"end\"\r\n                    android:fontFamily=\"@font/montserrat_regular\"\r\n                    android:gravity=\"center\"\r\n                    android:maxLines=\"1\"\r\n                    android:textColor=\"#838383\"\r\n                    android:textSize=\"@dimen/_13sdp\"\r\n                    android:visibility=\"gone\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/tvTime\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_6sdp\"\r\n                    android:ellipsize=\"end\"\r\n                    android:fontFamily=\"@font/montserrat_regular\"\r\n                    android:gravity=\"center\"\r\n                    android:textColor=\"#838383\"\r\n                    android:textSize=\"@dimen/_13sdp\" />\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llOptions\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:orientation=\"vertical\"\r\n                    android:visibility=\"visible\">\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvTitleDec\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:layout_marginTop=\"@dimen/_20sdp\"\r\n                        android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                        android:gravity=\"start\"\r\n                        android:text=\"@string/Description\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_16sdp\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                    <RelativeLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\">\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvSubDec\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                            android:layout_marginTop=\"@dimen/_10sdp\"\r\n                            android:fontFamily=\"@font/montserrat_regular\"\r\n                            android:gravity=\"start\"\r\n                            android:justificationMode=\"inter_word\"\r\n                            android:lineSpacingExtra=\"@dimen/_4sdp\"\r\n                            android:maxLines=\"3\"\r\n                            android:textColor=\"@color/white\"\r\n                            android:textSize=\"@dimen/_13sdp\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvReadMore\"\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_below=\"@id/tvSubDec\"\r\n                            android:layout_alignParentLeft=\"true\"\r\n                            android:layout_alignParentBottom=\"true\"\r\n                            android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                            android:layout_marginTop=\"@dimen/_2sdp\"\r\n                            android:text=\"Read More...\"\r\n                            android:textColor=\"#F89552\"\r\n                            android:visibility=\"gone\" />\r\n                    </RelativeLayout>\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvDire\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:layout_marginTop=\"@dimen/_20sdp\"\r\n                        android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                        android:gravity=\"start\"\r\n                        android:text=\"@string/Directions\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_16sdp\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvSubDire\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:layout_marginTop=\"@dimen/_10sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"start\"\r\n                        android:justificationMode=\"inter_word\"\r\n                        android:lineSpacingExtra=\"@dimen/_4sdp\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_13sdp\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                    <androidx.recyclerview.widget.RecyclerView\r\n                        android:id=\"@+id/rvDirlist\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:overScrollMode=\"never\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llLikes\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ivLike\"\r\n                        android:layout_width=\"@dimen/_56sdp\"\r\n                        android:layout_height=\"@dimen/_50sdp\"\r\n                        android:padding=\"@dimen/_15sdp\"\r\n                        android:src=\"@drawable/ic_edit_number_icon\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvLikes\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"left\"\r\n                        android:text=\"@string/Rename_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llRename\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"@dimen/_56sdp\"\r\n                        android:layout_height=\"@dimen/_50sdp\"\r\n                        android:padding=\"@dimen/_15sdp\"\r\n                        android:src=\"@drawable/ic_edit_number_icon\"\r\n                        app:tint=\"@color/white\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvRename\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"left\"\r\n                        android:text=\"@string/Rename_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llFind\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"@dimen/_56sdp\"\r\n                        android:layout_height=\"@dimen/_50sdp\"\r\n                        android:padding=\"@dimen/_15sdp\"\r\n                        android:src=\"@drawable/ic_search_icon\"\r\n                        app:tint=\"@color/white\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvFind\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"left\"\r\n                        android:text=\"@string/Find_in_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llDelete\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"@dimen/_56sdp\"\r\n                        android:layout_height=\"@dimen/_50sdp\"\r\n                        android:padding=\"@dimen/_18sdp\"\r\n                        android:src=\"@drawable/ic_close_white_icon\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvDelete\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"left\"\r\n                        android:text=\"@string/Delete_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llDownload\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <RelativeLayout\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\">\r\n\r\n                        <ProgressBar\r\n                            android:id=\"@+id/pbProgress\"\r\n                            style=\"?android:attr/progressBarStyleHorizontal\"\r\n                            android:layout_width=\"@dimen/_55sdp\"\r\n                            android:layout_height=\"@dimen/_55sdp\"\r\n                            android:layout_centerInParent=\"true\"\r\n                            android:background=\"@drawable/circular_shapesm\"\r\n                            android:indeterminate=\"false\"\r\n                            android:indeterminateTint=\"@color/dark_yellow\"\r\n                            android:max=\"100\"\r\n                            android:progress=\"50\"\r\n                            android:progressDrawable=\"@drawable/circular_progress_barsm\"\r\n                            android:visibility=\"gone\" />\r\n\r\n                        <ImageView\r\n                            android:id=\"@+id/ivDownloads\"\r\n                            android:layout_width=\"@dimen/_56sdp\"\r\n                            android:layout_height=\"@dimen/_50sdp\"\r\n                            android:padding=\"@dimen/_15sdp\"\r\n                            android:src=\"@drawable/ic_download_white_icon\" />\r\n                    </RelativeLayout>\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvDownload\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"left\"\r\n                        android:text=\"@string/Download_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llAddPlaylist\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ivAddPlaylist\"\r\n                        android:layout_width=\"@dimen/_56sdp\"\r\n                        android:layout_height=\"@dimen/_50sdp\"\r\n                        android:padding=\"@dimen/_15sdp\"\r\n                        android:src=\"@drawable/ic_playlist_white_icon\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvAddPlaylist\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"start\"\r\n                        android:text=\"@string/Add_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n            </LinearLayout>\r\n        </androidx.core.widget.NestedScrollView>\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:gravity=\"center\"\r\n            android:padding=\"@dimen/_60sdp\">\r\n\r\n            <ProgressBar\r\n                android:id=\"@+id/progressBar\"\r\n                android:layout_width=\"@dimen/_50sdp\"\r\n                android:layout_height=\"@dimen/_50sdp\"\r\n                android:indeterminateTint=\"@color/blue\"\r\n                android:scaleType=\"centerInside\"\r\n                android:visibility=\"gone\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <FrameLayout\r\n            android:id=\"@+id/progressBarHolder\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:alpha=\"0.4\"\r\n            android:animateLayoutChanges=\"true\"\r\n            android:background=\"#C0000000\"\r\n            android:visibility=\"gone\" />\r\n    </RelativeLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_my_playlist.xml	(revision bef12230fb63eeb22fc36a24a9f011f88ef343b3)
+++ app/src/main/res/layout/activity_my_playlist.xml	(date 1604468416328)
@@ -188,7 +188,7 @@
                         android:layout_width="@dimen/_56sdp"
                         android:layout_height="@dimen/_50sdp"
                         android:padding="@dimen/_15sdp"
-                        android:src="@drawable/ic_edit_number_icon" />
+                        android:src="@drawable/ic_like_white_icon" />
 
                     <TextView
                         android:id="@+id/tvLikes"
@@ -197,7 +197,7 @@
                         android:layout_marginLeft="@dimen/_4sdp"
                         android:fontFamily="@font/montserrat_regular"
                         android:gravity="left"
-                        android:text="@string/Rename_playlist"
+                        android:text="@string/Liked_playlist"
                         android:textColor="@color/white"
                         android:textSize="@dimen/_15sdp" />
                 </LinearLayout>
Index: app/src/main/java/com/brainwellnessspa/AddPayment/AddPaymentActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.AddPayment;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Paint;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.Spannable;\r\nimport android.text.TextWatcher;\r\nimport android.text.style.ReplacementSpan;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.NumberPicker;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport com.brainwellnessspa.AddPayment.Model.AddCardModel;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.BillingOrderActivity;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.PaymentActivity;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityAddPaymentBinding;\r\nimport com.brainwellnessspa.databinding.YeardialogBinding;\r\nimport com.stripe.android.Stripe;\r\nimport com.stripe.android.TokenCallback;\r\nimport com.stripe.android.model.Card;\r\nimport com.stripe.android.model.Token;\r\n\r\nimport java.util.Calendar;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class AddPaymentActivity extends AppCompatActivity {\r\n    ActivityAddPaymentBinding binding;\r\n    String userId;\r\n    Context context;\r\n    Activity activity;\r\n    Dialog d;\r\n    int a = 0;\r\n    int year, month;\r\n    YeardialogBinding binding1;\r\n    String strToken, ComePayment = \"\";\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_add_payment);\r\n        context = AddPaymentActivity.this;\r\n        activity = AddPaymentActivity.this;\r\n        if (getIntent() != null) {\r\n            ComePayment = getIntent().getStringExtra(\"ComePayment\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            if (ComePayment.equalsIgnoreCase(\"1\")) {\r\n                finish();\r\n            } else if (ComePayment.equalsIgnoreCase(\"2\")) {\r\n                Intent i = new Intent(context, PaymentActivity.class);\r\n                startActivity(i);\r\n                finish();\r\n            } else {\r\n                finish();\r\n            }\r\n        });\r\n\r\n        year = Calendar.getInstance().get(Calendar.YEAR);\r\n        month = Calendar.getInstance().get(Calendar.MONTH);\r\n        month = month + 1;\r\n        d = new Dialog(context);\r\n        d.setTitle(\"Year Picker\");\r\n        binding1 = DataBindingUtil.inflate(LayoutInflater.from(context),\r\n                R.layout.yeardialog, null, false);\r\n        d.setContentView(binding1.getRoot());\r\n        binding.etNumber.addTextChangedListener(addCardTextWatcher);\r\n        binding.etName.addTextChangedListener(addCardTextWatcher);\r\n        binding.textMonth.addTextChangedListener(addCardTextWatcher);\r\n        binding.etCvv.addTextChangedListener(addCardTextWatcher);\r\n        binding.etNumber.addTextChangedListener(new TextWatcher() {\r\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                if (binding.etNumber.getText().toString().length() == 16) {\r\n                    binding.etName.requestFocus();\r\n                }\r\n            }\r\n\r\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n            }\r\n\r\n            public void afterTextChanged(Editable s) {\r\n            }\r\n        });\r\n\r\n        binding.opendilog.setOnClickListener(v -> {\r\n            a = 1;\r\n            showYearDialog();\r\n        });\r\n        SharedPreferences shared = context.getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);\r\n        userId = (shared.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        CreditCardFormatTextWatcher tv = new CreditCardFormatTextWatcher(binding.etNumber);\r\n        binding.etNumber.addTextChangedListener(tv);\r\n        binding.etName.addTextChangedListener(addCardTextWatcher);\r\n        binding.etNumber.addTextChangedListener(addCardTextWatcher);\r\n        binding.etCvv.addTextChangedListener(addCardTextWatcher);\r\n        binding.textMonth.addTextChangedListener(addCardTextWatcher);\r\n        binding.btnSave.setOnClickListener(view -> {\r\n            if (binding.etNumber.getText().toString().equalsIgnoreCase(\"\")) {\r\n                binding.tlNumber.setError(\"Card number is required.\");\r\n                binding.txtError.setText(\"\");\r\n                binding.tlName.setError(\"\");\r\n            } else if (binding.etNumber.getText().toString().length() <= 15 || binding.etNumber.getText().toString().length() > 16) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"Please enter a valid card number\");\r\n                binding.txtError.setText(\"\");\r\n            } else if (binding.etName.getText().toString().equalsIgnoreCase(\"\")) {\r\n                binding.tlName.setError(\"Card name is required\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"\");\r\n            } else if (binding1.MonthPicker.getValue() < month && binding1.YearPicker.getValue() == year) {\r\n                binding.txtError.setText(\"Please enter a valid expiry mm/yyyy\");\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n            } else if (binding.textMonth.getText().toString().equalsIgnoreCase(\"Expiry Date\") || a == 0) {\r\n                binding.txtError.setText(\"Expiry month is required\");\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n            } else if (binding.etCvv.getText().toString().matches(\"\")) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"CVV is required\");\r\n            } else if (binding.etCvv.getText().toString().length() < 3) {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"Please enter a valid CVV number\");\r\n            } else {\r\n                binding.tlName.setError(\"\");\r\n                binding.tlNumber.setError(\"\");\r\n                binding.txtError.setText(\"\");\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                final String strCardNo = binding.etNumber.getText().toString().trim().replaceAll(\"\\\\s+\", \"\");\r\n                int months = binding1.MonthPicker.getValue();\r\n                int Years = binding1.YearPicker.getValue();\r\n\r\n                Card card = new Card(strCardNo, months, Years, binding.etCvv.getText().toString());\r\n                new Stripe().createToken(card, getString(R.string.stipe_test_key), new TokenCallback() {\r\n                    @Override\r\n                    public void onError(Exception error) {\r\n                        Log.e(\"error.........\", \"\" + error.toString());\r\n                        BWSApplication.showToast(\"Please enter valid card details\", context);\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    }\r\n                    @Override\r\n                    public void onSuccess(Token token) {\r\n                        strToken = token.getId();\r\n                        Log.e(\"strToken.............\", \"\" + strToken);\r\n                        if (!strToken.equalsIgnoreCase(\"\")) {\r\n                            if (BWSApplication.isNetworkConnected(context)) {\r\n                                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                Call<AddCardModel> listCall = APIClient.getClient().getAddCard(userId, strToken);\r\n                                listCall.enqueue(new Callback<AddCardModel>() {\r\n                                    @Override\r\n                                    public void onResponse(Call<AddCardModel> call, Response<AddCardModel> response) {\r\n                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        if (response.isSuccessful()) {\r\n                                            AddCardModel cardModel = response.body();\r\n                                            if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                                InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\r\n                                                keyboard.hideSoftInputFromWindow(view.getWindowToken(), 0);\r\n                                                if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                                    finish();\r\n                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                                } else if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                                } else {\r\n                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                                }\r\n                                            } else {\r\n                                                BWSApplication.showToast(cardModel.getResponseMessage(), context);\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onFailure(Call<AddCardModel> call, Throwable t) {\r\n                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    }\r\n\r\n                                });\r\n                            } else {\r\n                                BWSApplication.showToast(getString(R.string.no_server_found), context);\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private TextWatcher addCardTextWatcher = new TextWatcher() {\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            String CardNo = binding.etNumber.getText().toString().trim();\r\n            String CardName = binding.etName.getText().toString().trim();\r\n            String Month = binding.textMonth.getText().toString().trim();\r\n            String CVV = binding.etCvv.getText().toString().trim();\r\n            if (!CardNo.isEmpty() || !CardName.isEmpty() || !Month.isEmpty() || !CVV.isEmpty()) {\r\n                binding.btnSave.setEnabled(true);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnSave.setEnabled(false);\r\n                binding.btnSave.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSave.setBackgroundResource(R.drawable.gray_extra_round_corners);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n        }\r\n    };\r\n\r\n    public void showYearDialog() {\r\n        binding1.MonthPicker.setMaxValue(12);\r\n        binding1.MonthPicker.setMinValue(1);\r\n        binding1.MonthPicker.setWrapSelectorWheel(false);\r\n        binding1.MonthPicker.setValue(month);\r\n        binding1.MonthPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);\r\n        binding1.YearPicker.setMaxValue(year + 80);\r\n        binding1.YearPicker.setMinValue(year);\r\n        binding1.YearPicker.setWrapSelectorWheel(false);\r\n        binding1.YearPicker.setValue(year);\r\n        binding1.YearPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);\r\n\r\n        binding1.set.setOnClickListener(v -> {\r\n            if (binding1.MonthPicker.getValue() < month && binding1.YearPicker.getValue() == year) {\r\n                binding.txtError.setText(\"Please Select Valid Month And Year\");\r\n                d.dismiss();\r\n            } else {\r\n                binding.textMonth.setText(\" \" + binding1.MonthPicker.getValue() + \" / \" + binding1.YearPicker.getValue());\r\n                binding.txtError.setText(\"\");\r\n                d.dismiss();\r\n            }\r\n        });\r\n        binding1.cancle.setOnClickListener(v -> {\r\n            d.dismiss();\r\n        });\r\n        d.show();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (ComePayment.equalsIgnoreCase(\"1\")) {\r\n            finish();\r\n        } else if (ComePayment.equalsIgnoreCase(\"2\")) {\r\n            Intent i = new Intent(context, PaymentActivity.class);\r\n            startActivity(i);\r\n            finish();\r\n        } else {\r\n            finish();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n\r\n    public static class CreditCardFormatTextWatcher implements TextWatcher {\r\n        public static final int NO_MAX_LENGTH = -1;\r\n        private int maxLength = NO_MAX_LENGTH;\r\n        private int paddingPx;\r\n        private boolean internalStopFormatFlag;\r\n\r\n        public CreditCardFormatTextWatcher(@NonNull TextView textView) {\r\n            setPaddingEm(textView, 1f);\r\n        }\r\n\r\n        public static void formatCardNumber(@NonNull Editable ccNumber, int paddingPx, int maxLength) {\r\n            int textLength = ccNumber.length();\r\n            // first remove any previous span\r\n            PaddingRightSpan[] spans = ccNumber.getSpans(0, ccNumber.length(), PaddingRightSpan.class);\r\n            for (int i = 0; i < spans.length; i++) {\r\n                ccNumber.removeSpan(spans[i]);\r\n            }\r\n            // then truncate to max length\r\n            if (maxLength > 0 && textLength > maxLength - 1) {\r\n                ccNumber.replace(maxLength, textLength, \"\");\r\n            }\r\n            // finally add margin spans\r\n            for (int i = 1; i <= ((textLength - 1) / 4); i++) {\r\n                int end = i * 4;\r\n                int start = end - 1;\r\n                PaddingRightSpan marginSPan = new PaddingRightSpan(paddingPx);\r\n                ccNumber.setSpan(marginSPan, start, end, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);\r\n            }\r\n        }\r\n\r\n\r\n        public void setPaddingPx(int paddingPx) {\r\n            this.paddingPx = paddingPx;\r\n        }\r\n\r\n        public void setPaddingEm(@NonNull TextView textView, float em) {\r\n            float emSize = textView.getPaint().measureText(\"x\");\r\n            setPaddingPx((int) (em * emSize));\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            if (internalStopFormatFlag) {\r\n                return;\r\n            }\r\n            internalStopFormatFlag = true;\r\n            formatCardNumber(s, paddingPx, maxLength);\r\n            internalStopFormatFlag = false;\r\n        }\r\n\r\n        public static class PaddingRightSpan extends ReplacementSpan {\r\n\r\n            private int mPadding;\r\n\r\n            public PaddingRightSpan(int padding) {\r\n                mPadding = padding;\r\n            }\r\n\r\n            @Override\r\n            public int getSize(@NonNull Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {\r\n                float[] widths = new float[end - start];\r\n                paint.getTextWidths(text, start, end, widths);\r\n                int sum = mPadding;\r\n                for (int i = 0; i < widths.length; i++) {\r\n                    sum += widths[i];\r\n                }\r\n                return sum;\r\n            }\r\n\r\n            @Override\r\n            public void draw(@NonNull Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, @NonNull Paint paint) {\r\n                canvas.drawText(text, start, end, x, y, paint);\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/AddPayment/AddPaymentActivity.java	(revision bef12230fb63eeb22fc36a24a9f011f88ef343b3)
+++ app/src/main/java/com/brainwellnessspa/AddPayment/AddPaymentActivity.java	(date 1604471338582)
@@ -160,6 +160,7 @@
                         BWSApplication.showToast("Please enter valid card details", context);
                         BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
                     }
+
                     @Override
                     public void onSuccess(Token token) {
                         strToken = token.getId();
@@ -177,14 +178,10 @@
                                             if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {
                                                 InputMethodManager keyboard = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                                                 keyboard.hideSoftInputFromWindow(view.getWindowToken(), 0);
-                                                if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {
-                                                    finish();
-                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);
-                                                } else if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {
-                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);
-                                                } else {
-                                                    BWSApplication.showToast(cardModel.getResponseMessage(), context);
-                                                }
+                                                finish();
+                                                BWSApplication.showToast(cardModel.getResponseMessage(), context);
+                                            } else if (cardModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {
+                                                BWSApplication.showToast(cardModel.getResponseMessage(), context);
                                             } else {
                                                 BWSApplication.showToast(cardModel.getResponseMessage(), context);
                                             }
@@ -249,7 +246,7 @@
 
         binding1.set.setOnClickListener(v -> {
             if (binding1.MonthPicker.getValue() < month && binding1.YearPicker.getValue() == year) {
-                binding.txtError.setText("Please Select Valid Month And Year");
+                binding.txtError.setText("Please select valid month and year");
                 d.dismiss();
             } else {
                 binding.textMonth.setText(" " + binding1.MonthPicker.getValue() + " / " + binding1.YearPicker.getValue());
