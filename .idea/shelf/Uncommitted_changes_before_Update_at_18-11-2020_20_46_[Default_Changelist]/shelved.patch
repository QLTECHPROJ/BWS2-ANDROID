Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Playlist;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Filter;\r\nimport android.widget.Filterable;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.ItemTouchHelper;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardModel;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ReminderStatusPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Search.SearchFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.LikeModule.Activities.LikeActivity;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.ReminderModule.Activities.ReminderActivity;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.ItemMoveCallback;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.Playable;\r\nimport com.brainwellnessspa.Utility.StartDragListener;\r\nimport com.brainwellnessspa.databinding.FragmentMyPlaylistsBinding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutBinding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutSorting1Binding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutSorting2Binding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutSortingBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.downloader.PRDownloader;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenReminder;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.MyPlaylistIds;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.PlaylistIDMS;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.addToSearch;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity.MyPlaylistId;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity.addToPlayList;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.ComeFindAudio;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.comeRename;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.deleteFrg;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.ViewAllPlaylistFragment.GetPlaylistLibraryID;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.addToRecentPlayId;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.myAudioId;\r\nimport static com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity.ComeFrom_Playlist;\r\nimport static com.brainwellnessspa.LikeModule.Activities.LikeActivity.ComeFrom_LikePlaylist;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadIdOne;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadProgress;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.isDownloading;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isResume;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class MyPlaylistsFragment extends Fragment implements StartDragListener {\r\n    public static int RefreshIconData = 0;\r\n    public static String RefreshNew = \"\";\r\n    public static int disclaimerPlayed = 0;\r\n    public boolean RefreshPlaylist = false;\r\n    public static int isPlayPlaylist = 0;\r\n    FragmentMyPlaylistsBinding binding;\r\n    String UserID, New, PlaylistID, PlaylistName = \"\", PlaylistImage, SearchFlag, MyDownloads = \"\", AudioFlag, PlaylistIDs = \"\";\r\n    int RefreshIcon;\r\n    PlayListsAdpater adpater;\r\n    PlayListsAdpater1 adpater1;\r\n    PlayListsAdpater2 adpater2;\r\n    View view;\r\n    EditText searchEditText;\r\n    ArrayList<String> changedAudio;\r\n    Activity activity;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList, downloadedSingleAudio;\r\n    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongsList, playListSongListForDownload;\r\n    List<DownloadAudioDetails> oneAudioDetailsList, playlistWiseAudioDetails;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    DownloadPlaylistDetails downloadPlaylistDetails;\r\n    Dialog dialog;\r\n    List<String> fileNameList, playlistDownloadId, remainAudio;\r\n    ItemTouchHelper touchHelper;\r\n    Runnable UpdateSongTime2;\r\n    int SongListSize = 0, count;\r\n    List<DownloadAudioDetails> playlistWiseAudiosDetails;\r\n    SubPlayListModel.ResponseData GlobalListModel;\r\n    SubPlayListModel.ResponseData.PlaylistSong addDisclaimer = new SubPlayListModel.ResponseData.PlaylistSong();\r\n    SubPlayListModel.ResponseData.PlaylistSong songListDownload = new SubPlayListModel.ResponseData.PlaylistSong();\r\n    boolean isclose = false;\r\n    private Handler handler1, handler2, handler3;\r\n    private Runnable UpdateSongTime3;\r\n    int position = 0, startTime, listSize, myCount;\r\n    private long totalDuration, currentDuration = 0;\r\n    long myProgress = 0, diff = 0;\r\n\r\n//    private Runnable UpdateSongTime1 = new Runnable() {\r\n//        @Override\r\n//        public void run() {\r\n//            getMediaByPer(PlaylistID,SongListSize);\r\n//\r\n///*            if (fileNameList.size() != 0) {\r\n//                if (remainAudio.size() <= SongListSize) {\r\n//                    int total = SongListSize;\r\n//                    int remain = remainAudio.size();\r\n//                    int complate = total - remain;\r\n//                    long progressPercent = complate * 100 / total;\r\n//                    int downloadProgress1 = (int) progressPercent;\r\n//                    if (SongListSize == 1) {\r\n//                        if (downloadProgress <= 100) {\r\n//                            binding.pbProgress.setProgress(downloadProgress);\r\n//                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n//                            binding.ivDownloads.setVisibility(View.GONE);\r\n//                            if (downloadProgress == 100) {\r\n//                                getDownloadData();\r\n//                            }\r\n//                        }\r\n//                    } else if (downloadProgress1 <= 100) {\r\n//                        if (downloadProgress1 == 100) {\r\n//                            getDownloadData();\r\n//                            binding.pbProgress.setVisibility(View.GONE);\r\n//                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n//                        } else {\r\n//                            binding.pbProgress.setProgress(downloadProgress1);\r\n//                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n//                            binding.ivDownloads.setVisibility(View.GONE);\r\n//                        }\r\n//                    } else {\r\n//                        binding.pbProgress.setVisibility(View.GONE);\r\n//                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n//                    }\r\n//                }\r\n//                getDownloadData();\r\n//                handler1.postDelayed(this, 500);\r\n//            }else {\r\n//                binding.pbProgress.setVisibility(View.GONE);\r\n//                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                handler1.removeCallbacks(UpdateSongTime1);\r\n//                getDownloadData();\r\n//            }*/\r\n//            handler1.postDelayed(this, 500);\r\n//        }\r\n//    };\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_playlists, container, false);\r\n        view = binding.getRoot();\r\n//        handler1 = new Handler();\r\n        handler2 = new Handler();\r\n        handler3 = new Handler();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        activity = getActivity();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        fileNameList = new ArrayList<>();\r\n        playlistDownloadId = new ArrayList<>();\r\n        addDisclaimer();\r\n//        remainAudio = new ArrayList<>();\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        playlistSongsList = new ArrayList<>();\r\n        playListSongListForDownload = new ArrayList<>();\r\n        changedAudio = new ArrayList<>();\r\n        if (getArguments() != null) {\r\n            New = getArguments().getString(\"New\");\r\n            PlaylistID = getArguments().getString(\"PlaylistID\");\r\n            PlaylistName = getArguments().getString(\"PlaylistName\");\r\n            PlaylistImage = getArguments().getString(\"PlaylistImage\");\r\n            MyDownloads = getArguments().getString(\"MyDownloads\");\r\n        }\r\n        binding.llBack.setOnClickListener(view1 -> {\r\n            binding.searchView.clearFocus();\r\n            callBack();\r\n        });\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity()) && !MyDownloads.equalsIgnoreCase(\"1\")) {\r\n            binding.llMore.setVisibility(View.VISIBLE);\r\n            binding.llMore.setClickable(true);\r\n            binding.llMore.setEnabled(true);\r\n            binding.ivMore.setImageResource(R.drawable.ic_menu_icon);\r\n            binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            binding.llMore.setVisibility(View.VISIBLE);\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setImageResource(R.drawable.ic_menu_icon);\r\n            binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n        }\r\n\r\n        binding.llMore.setOnClickListener(view13 -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            handler2.removeCallbacks(UpdateSongTime2);\r\n            Intent i = new Intent(getActivity(), MyPlaylistActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            i.putExtra(\"PlaylistIDImage\", PlaylistImage);\r\n            i.putExtra(\"Liked\", \"0\");\r\n            startActivity(i);\r\n\r\n        });\r\n\r\n        binding.tvSearch.setOnClickListener(view14 -> {\r\n            Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            startActivity(i);\r\n        });\r\n\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        searchClear(searchEditText);\r\n        closeButton.setOnClickListener(v -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                binding.searchView.clearFocus();\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                try {\r\n                    if (adpater2 != null) {\r\n                        adpater2.getFilter().filter(search);\r\n                        SearchFlag = search;\r\n                        Log.e(\"searchsearch\", \"\" + search);\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n//        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        RecyclerView.LayoutManager playList1 = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists1.setLayoutManager(playList1);\r\n        binding.rvPlayLists1.setItemAnimator(new DefaultItemAnimator());\r\n        RecyclerView.LayoutManager playList = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists.setLayoutManager(playList);\r\n        binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());\r\n        RecyclerView.LayoutManager playList3 = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists2.setLayoutManager(playList3);\r\n        binding.rvPlayLists2.setItemAnimator(new DefaultItemAnimator());\r\n      /*  binding.rvPlayLists1.addOnScrollListener(new RecyclerView.OnScrollListener(){\r\n            @Override\r\n            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                binding.rvPlayLists.setScrollX(dx);\r\n                binding.rvPlayLists.setScrollY(dy);\r\n//                int pos = linearLayoutManager1.findFirstCompletelyVisibleItemPosition();\r\n//                linearLayoutManager.scrollToPositionWithOffset(pos, 20);\r\n            }\r\n        });*/\r\n        binding.llDownloads.setOnClickListener(view1 -> {\r\n            callDownload(\"\", \"\", \"\", playlistSongsList, 0, binding.llDownloads, binding.ivDownloads);\r\n        });\r\n\r\n        RefreshNew = New;\r\n        if (New.equalsIgnoreCase(\"1\")) {\r\n            binding.llAddAudio.setVisibility(View.VISIBLE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.INVISIBLE);\r\n            binding.llListing.setVisibility(View.GONE);\r\n            binding.btnAddAudio.setOnClickListener(view -> {\r\n                Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n                i.putExtra(\"PlaylistID\", PlaylistID);\r\n                startActivity(i);\r\n            });\r\n        } else if (New.equalsIgnoreCase(\"0\")) {\r\n            binding.llAddAudio.setVisibility(View.GONE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n            binding.llListing.setVisibility(View.VISIBLE);\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n        return view;\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail(String download) {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadPlaylistDetailsList.size() != 0 /*New.equalsIgnoreCase(\"1\") ||*/) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (RefreshIcon == 0) {\r\n                    enableDisableDownload(false, \"gray\");\r\n                } else if (download.equalsIgnoreCase(\"1\") /* New.equalsIgnoreCase(\"1\") ||*/) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (download.equalsIgnoreCase(\"0\") || download.equalsIgnoreCase(\"\") ||\r\n                        New.equalsIgnoreCase(\"0\") || RefreshIcon != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail2() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n   /*\r\n                    \"PlaylistDesc\": \"When life gets tough and you struggle through the days, download the Ultimate Self-development Bundle to help you in finding a new appreciation for life. Everyone can use a little help in all areas of their lives at times. There are 12 programs aimed to help your self-development:\",\r\n                    \"PlaylistMastercat\": \"Self-development\",\r\n                    \"PlaylistSubcat\": \"Self-expression, Focus, Discipline, Self-love, Mindset, Passion, Enthusiasm, Gratitude, Self-doubt, Inner Strength \",\r\n                    \"PlaylistImage\": \"https://brainwellnessspa.com.au/wp-content/uploads/2018/06/Ultimate self development bundle.jpg\",\r\n                    \"PlaylistSongs \" */\r\n                downloadAudioDetailsList = GetAllMedia();\r\n                playlistWiseAudioDetails = GetMedia();\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private void enableDisableDownload(boolean b, String color) {\r\n        if (b) {\r\n            binding.llDownloads.setClickable(true);\r\n            binding.llDownloads.setEnabled(true);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            binding.llDownloads.setClickable(false);\r\n            binding.llDownloads.setEnabled(false);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            if (color.equalsIgnoreCase(\"gray\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            } else if (color.equalsIgnoreCase(\"orange\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetAllMedia() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData1();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        handler3.removeCallbacks(UpdateSongTime3);\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        addDisclaimer();\r\n\r\n        view.setFocusableInTouchMode(true);\r\n        view.requestFocus();\r\n        view.setOnKeyListener((v, keyCode, event) -> {\r\n            if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {\r\n                binding.searchView.clearFocus();\r\n                callBack();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        if (deleteFrg == 1) {\r\n            binding.searchView.clearFocus();\r\n            callBack();\r\n            deleteFrg = 0;\r\n        } else if (addToPlayList) {\r\n            PlaylistID = MyPlaylistId;\r\n            prepareData(UserID, MyPlaylistId);\r\n            addToPlayList = false;\r\n        } else if (addToSearch) {\r\n            PlaylistIDs = PlaylistIDMS;\r\n            prepareData(UserID, MyPlaylistIds);\r\n            addToSearch = false;\r\n        } else {\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n        if (comeRename == 1) {\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n    }\r\n\r\n    private void callBack() {\r\n        if (MyPlaylistIds.equalsIgnoreCase(\"\")) {\r\n            if (comefrom_search == 2) {\r\n                Bundle bundle = new Bundle();\r\n                Fragment playlistFragment = new ViewAllPlaylistFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, playlistFragment)\r\n                        .commit();\r\n                bundle.putString(\"GetLibraryID\", GetPlaylistLibraryID);\r\n                bundle.putString(\"MyDownloads\", MyDownloads);\r\n                playlistFragment.setArguments(bundle);\r\n//            comefrom_search = 0;\r\n            } else if (comefrom_search == 1) {\r\n                Fragment fragment = new SearchFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, fragment)\r\n                        .commit();\r\n                comefrom_search = 0;\r\n            } else if (comefrom_search == 0) {\r\n                Fragment fragment = new PlaylistFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, fragment)\r\n                        .commit();\r\n                comefrom_search = 0;\r\n            } else if (comefrom_search == 4) {\r\n                Intent i = new Intent(getActivity(), LikeActivity.class);\r\n                ComeFrom_LikePlaylist = true;\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                startActivity(i);\r\n                getActivity().finish();\r\n                //            comefrom_search = 0;\r\n            } else if (comefrom_search == 3) {\r\n                Intent i = new Intent(getActivity(), DownloadsActivity.class);\r\n                ComeFrom_Playlist = true;\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                startActivity(i);\r\n                getActivity().finish();\r\n                //            comefrom_search = 0;\r\n            }\r\n        } else {\r\n            prepareData(UserID, PlaylistIDs);\r\n            MyPlaylistIds = \"\";\r\n        }\r\n    }\r\n\r\n    private void searchClear(EditText searchEditText) {\r\n        if (ComeFindAudio == 1) {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n            ComeFindAudio = 0;\r\n        } else if (ComeFindAudio == 2) {\r\n            binding.searchView.requestFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n            ComeFindAudio = 0;\r\n        }\r\n    }\r\n\r\n    private void prepareData(String UserId, String PlaylistId) {\r\n        if (comefrom_search == 3) {\r\n            binding.llExtra.setVisibility(View.VISIBLE);\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(0, 8, 0, 260);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n\r\n        downloadedSingleAudio = getMyMedia();\r\n        binding.tvPlaylist.setText(\"Playlist\");\r\n        searchClear(searchEditText);\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        try {\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = sharedx.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences sharedd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = sharedd.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n\r\n                } else {\r\n                    SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if (isMediaStart) {\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if (isMediaStart) {\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                callAddTransFrag();\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                params.setMargins(0, 8, 0, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                params.setMargins(0, 8, 0, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            if (!MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                Call<SubPlayListModel> listCall = APIClient.getClient().getSubPlayLists(UserId, PlaylistId);\r\n                listCall.enqueue(new Callback<SubPlayListModel>() {\r\n                    @SuppressLint(\"ClickableViewAccessibility\")\r\n                    @Override\r\n                    public void onResponse(Call<SubPlayListModel> call, Response<SubPlayListModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                            SubPlayListModel listModel = response.body();\r\n                            try {\r\n                                if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"0\") ||\r\n                                        listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n\r\n                                } else if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"1\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                                }\r\n                            } catch (Exception e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                            getDownloadData();\r\n                            downloadAudioDetailsList = GetAllMedia();\r\n                            SongListSize = listModel.getResponseData().getPlaylistSongs().size();\r\n                            playlistWiseAudioDetails = GetMedia();\r\n                            downloadedSingleAudio = getMyMedia();\r\n                            getMediaByPer(PlaylistId, SongListSize);\r\n                            binding.rlSearch.setVisibility(View.VISIBLE);\r\n                            binding.llMore.setVisibility(View.VISIBLE);\r\n                            binding.llReminder.setVisibility(View.VISIBLE);\r\n                            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n                            binding.tvTag.setText(R.string.Audios_in_Playlist);\r\n                            binding.llReminder.setOnClickListener(view -> {\r\n                                if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"0\") ||\r\n                                        listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n                                    Intent i = new Intent(getActivity(), ReminderActivity.class);\r\n                                    ComeScreenReminder = 0;\r\n                                    i.putExtra(\"ComeFrom\", \"1\");\r\n                                    i.putExtra(\"PlaylistID\", PlaylistID);\r\n                                    i.putExtra(\"PlaylistName\", listModel.getResponseData().getPlaylistName());\r\n                                    i.putExtra(\"Time\", listModel.getResponseData().getReminderTime());\r\n                                    i.putExtra(\"Day\", listModel.getResponseData().getReminderDay());\r\n                                    startActivity(i);\r\n                                } else if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"1\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                                    dialog = new Dialog(activity);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.delete_payment_card);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(activity.getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                                    final TextView tvSubTitle = dialog.findViewById(R.id.tvSubTitle);\r\n                                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                                    final Button Btn = dialog.findViewById(R.id.Btn);\r\n                                    tvTitle.setText(\"Reminder off\");\r\n                                    tvSubTitle.setText(\"Are you sure you want to reminder off ?\");\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n                                    Btn.setOnTouchListener((view1, event) -> {\r\n                                        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                                            switch (event.getAction()) {\r\n                                                case MotionEvent.ACTION_DOWN: {\r\n                                                    Button views = (Button) view1;\r\n                                                    views.getBackground().setColorFilter(0x77000000, PorterDuff.Mode.SRC_ATOP);\r\n                                                    view1.invalidate();\r\n                                                    break;\r\n                                                }\r\n                                                case MotionEvent.ACTION_UP:\r\n                                                    Call<ReminderStatusPlaylistModel> listCall1 = APIClient.getClient().getReminderStatusPlaylist(UserID, PlaylistID, \"0\");/*set 1 or not 0 */\r\n                                                    listCall1.enqueue(new Callback<ReminderStatusPlaylistModel>() {\r\n                                                        @Override\r\n                                                        public void onResponse(Call<ReminderStatusPlaylistModel> call1, Response<ReminderStatusPlaylistModel> response1) {\r\n                                                            if (response1.isSuccessful()) {\r\n                                                                ReminderStatusPlaylistModel listModel1 = response1.body();\r\n//                                                                prepareData(UserID, PlaylistID);\r\n                                                                listModel.getResponseData().setIsReminder(listModel1.getResponseData().getIsCheck());\r\n                                                                binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n                                                                dialog.dismiss();\r\n                                                                BWSApplication.showToast(listModel1.getResponseMessage(), activity);\r\n                                                            }\r\n                                                        }\r\n\r\n                                                        @Override\r\n                                                        public void onFailure(Call<ReminderStatusPlaylistModel> call1, Throwable t) {\r\n                                                        }\r\n                                                    });\r\n\r\n\r\n                                                case MotionEvent.ACTION_CANCEL: {\r\n                                                    Button views = (Button) view1;\r\n                                                    views.getBackground().clearColorFilter();\r\n                                                    views.invalidate();\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n                                        }\r\n\r\n                                        return true;\r\n                                    });\r\n\r\n                                    tvGoBack.setOnClickListener(v -> {\r\n                                        dialog.dismiss();\r\n                                    });\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n\r\n                                }\r\n                            });\r\n                            playlistSongsList = new ArrayList<>();\r\n                            playlistSongsList.addAll(listModel.getResponseData().getPlaylistSongs());\r\n                            downloadPlaylistDetails = new DownloadPlaylistDetails();\r\n                            downloadPlaylistDetails.setPlaylistID(listModel.getResponseData().getPlaylistID());\r\n                            downloadPlaylistDetails.setPlaylistName(listModel.getResponseData().getPlaylistName());\r\n                            downloadPlaylistDetails.setPlaylistDesc(listModel.getResponseData().getPlaylistDesc());\r\n                            downloadPlaylistDetails.setIsReminder(listModel.getResponseData().getIsReminder());\r\n                            downloadPlaylistDetails.setPlaylistMastercat(listModel.getResponseData().getPlaylistMastercat());\r\n                            downloadPlaylistDetails.setPlaylistSubcat(listModel.getResponseData().getPlaylistSubcat());\r\n                            downloadPlaylistDetails.setPlaylistImage(listModel.getResponseData().getPlaylistImage());\r\n                            downloadPlaylistDetails.setPlaylistImageDetails(listModel.getResponseData().getPlaylistImageDetail());\r\n                            downloadPlaylistDetails.setTotalAudio(listModel.getResponseData().getTotalAudio());\r\n                            downloadPlaylistDetails.setTotalDuration(listModel.getResponseData().getTotalDuration());\r\n                            downloadPlaylistDetails.setTotalhour(listModel.getResponseData().getTotalhour());\r\n                            downloadPlaylistDetails.setTotalminute(listModel.getResponseData().getTotalminute());\r\n                            downloadPlaylistDetails.setCreated(listModel.getResponseData().getCreated());\r\n                            downloadPlaylistDetails.setDownload(listModel.getResponseData().getDownload());\r\n                            downloadPlaylistDetails.setLike(listModel.getResponseData().getLike());\r\n\r\n                            setData(listModel.getResponseData());\r\n                            downloadPlaylistDetailsList = GetPlaylistDetail(listModel.getResponseData().getDownload());\r\n\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<SubPlayListModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                });\r\n            } else {\r\n                downloadPlaylistDetailsList = GetPlaylistDetail2();\r\n            }\r\n        } else {\r\n            downloadPlaylistDetailsList = GetPlaylistDetail2();\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n        SharedPreferences sharedw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        boolean audioPlay = sharedw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = sharedw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        String pID = sharedw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n            if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                if (isMediaStart) {\r\n                    isPlayPlaylist = 1;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                    handler3.postDelayed(UpdateSongTime3, 500);\r\n                } else {\r\n                    isPlayPlaylist = 0;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                }\r\n            } else {\r\n                isPlayPlaylist = 0;\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n            }\r\n        } else {\r\n            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                if (isMediaStart) {\r\n                    isPlayPlaylist = 1;\r\n                    handler3.postDelayed(UpdateSongTime3, 500);\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                } else {\r\n                    isPlayPlaylist = 0;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                }\r\n            } else {\r\n                isPlayPlaylist = 0;\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n            }\r\n        }\r\n    }\r\n\r\n    private List<DownloadAudioDetails> getMyMedia() {\r\n        downloadedSingleAudio = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadedSingleAudio = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(\"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                /*playListSongListForDownload = new ArrayList<>();\r\n                if (downloadedSingleAudio.size() != 0) {\r\n                    for(int i =0;i<downloadedSingleAudio.size();i++) {\r\n                        songListDownload = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                        songListDownload.setID(downloadedSingleAudio.get(i).getID());\r\n                        songListDownload.setName(downloadedSingleAudio.get(i).getName());\r\n                        songListDownload.setAudioFile(downloadedSingleAudio.get(i).getAudioFile());\r\n                        songListDownload.setAudioDirection(downloadedSingleAudio.get(i).getAudioDirection());\r\n                        songListDownload.setAudiomastercat(downloadedSingleAudio.get(i).getAudiomastercat());\r\n                        songListDownload.setAudioSubCategory(downloadedSingleAudio.get(i).getAudioSubCategory());\r\n                        songListDownload.setImageFile(downloadedSingleAudio.get(i).getImageFile());\r\n                        songListDownload.setLike(downloadedSingleAudio.get(i).getLike());\r\n                        songListDownload.setDownload(\"\");\r\n                        songListDownload.setAudioDuration(downloadedSingleAudio.get(i).getAudioDuration());\r\n                        songListDownload.setPlaylistID(PlaylistID);\r\n                        playListSongListForDownload.add(songListDownload);\r\n                    }\r\n                }*/\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return downloadedSingleAudio;\r\n    }\r\n\r\n    private void callAddTransFrag() {\r\n        Fragment fragment = new TransparentPlayerFragment();\r\n        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n        fragmentManager1.beginTransaction()\r\n                .add(R.id.flContainer, fragment)\r\n                .commit();\r\n    }\r\n\r\n    private void getMediaByPer(String playlistID, int totalAudio) {\r\n        class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                count = DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getCountDownloadProgress(\"Complete\", playlistID);\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                downloadPlaylistDetailsList = GetPlaylistDetail(downloadPlaylistDetails.getDownload());\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    if (count <= totalAudio) {\r\n                        if (count == totalAudio) {\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        } else {\r\n                            long progressPercent = count * 100 / totalAudio;\r\n                            int downloadProgress1 = (int) progressPercent;\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            binding.pbProgress.setProgress(downloadProgress1);\r\n                            getMediaByPer(playlistID, totalAudio);\r\n//                             handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        getMediaByPer st = new getMediaByPer();\r\n        st.execute();\r\n    }\r\n\r\n    private void getDownloadData() {\r\n        try {\r\n            SharedPreferences sharedy = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n               /* remainAudio = new ArrayList<>();\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 0; i < fileNameList.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            remainAudio.add(playlistDownloadId.get(i));\r\n                        }\r\n                    }\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        if (remainAudio.size() < SongListSize) {\r\n                            handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    }\r\n                    //\r\n                } else {\r\n                    fileNameList = new ArrayList<>();\r\n                    playlistDownloadId = new ArrayList<>();\r\n                    remainAudio = new ArrayList<>();\r\n                }*/\r\n            } else {\r\n                fileNameList = new ArrayList<>();\r\n                playlistDownloadId = new ArrayList<>();\r\n//                remainAudio = new ArrayList<>();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void setData(SubPlayListModel.ResponseData listModel) {\r\n        GlobalListModel = listModel;\r\n        /*if (downloadAudioDetailsList.size() != 0) {\r\n            for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                for (int f = 0; i < listModel.getPlaylistSongs().size(); i++) {\r\n                    if (downloadAudioDetailsList.get(i).getAudioFile().equalsIgnoreCase(listModel.getPlaylistSongs().get(f).getAudioFile())) {\r\n\r\n\r\n                    }\r\n                }\r\n            }\r\n        }*/\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                5, 3, 1f, 0);\r\n        binding.ivBanner.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivBanner.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivBanner.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        if (listModel.getPlaylistName().equalsIgnoreCase(\"\") ||\r\n                listModel.getPlaylistName() == null) {\r\n            binding.tvLibraryName.setText(R.string.My_Playlist);\r\n        } else {\r\n            binding.tvLibraryName.setText(listModel.getPlaylistName());\r\n        }\r\n        binding.tvPlaylist.setText(\"Playlist\");\r\n        try {\r\n            if (!listModel.getPlaylistImageDetail().equalsIgnoreCase(\"\")) {\r\n                Glide.with(getActivity()).load(listModel.getPlaylistImageDetail()).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivBanner);\r\n            } else {\r\n                binding.ivBanner.setImageResource(R.drawable.audio_bg);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (listModel.getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                listModel.getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                        listModel.getTotalhour().equalsIgnoreCase(\"\")\r\n                        && listModel.getTotalminute().equalsIgnoreCase(\"\")) {\r\n            binding.tvLibraryDetail.setText(\"0 Audio | 0h 0m\");\r\n        } else {\r\n            if (listModel.getTotalminute().equalsIgnoreCase(\"\")) {\r\n                binding.tvLibraryDetail.setText(listModel.getTotalAudio() + \" Audio | \"\r\n                        + listModel.getTotalhour() + \"h 0m\");\r\n            } else {\r\n                binding.tvLibraryDetail.setText(listModel.getTotalAudio() + \" Audio | \"\r\n                        + listModel.getTotalhour() + \"h \" + listModel.getTotalminute() + \"m\");\r\n            }\r\n        }\r\n        RefreshIcon = listModel.getPlaylistSongs().size();\r\n        RefreshIconData = listModel.getPlaylistSongs().size();\r\n        binding.llReminder.setVisibility(View.INVISIBLE);\r\n        binding.llDownloads.setVisibility(View.INVISIBLE);\r\n        if (listModel.getPlaylistSongs().size() == 0) {\r\n            binding.llAddAudio.setVisibility(View.VISIBLE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.INVISIBLE);\r\n            binding.llListing.setVisibility(View.GONE);\r\n            binding.btnAddAudio.setOnClickListener(view -> {\r\n                Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n                i.putExtra(\"PlaylistID\", PlaylistID);\r\n                startActivity(i);\r\n            });\r\n        } else {\r\n            binding.llAddAudio.setVisibility(View.GONE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n            binding.llListing.setVisibility(View.VISIBLE);\r\n            try {\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    binding.llDelete.setVisibility(View.VISIBLE);\r\n                    binding.llReminder.setVisibility(View.INVISIBLE);\r\n                    binding.llDownloads.setVisibility(View.INVISIBLE);\r\n                    binding.llMore.setVisibility(View.GONE);\r\n                    binding.rlSearch.setVisibility(View.VISIBLE);\r\n                    adpater2 = new PlayListsAdpater2(listModel.getPlaylistSongs(), getActivity(), UserID, \"0\");\r\n                    binding.rvPlayLists2.setAdapter(adpater2);\r\n                    binding.rvPlayLists.setVisibility(View.GONE);\r\n                    binding.rvPlayLists1.setVisibility(View.GONE);\r\n                    binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                    binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                    binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                    enableDisableDownload(false, \"orange\");\r\n                    binding.ivReminder.setColorFilter(activity.getResources().getColor(R.color.gray), PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    binding.llDownloads.setVisibility(View.VISIBLE);\r\n                    binding.llReminder.setVisibility(View.VISIBLE);\r\n                    if (listModel.getCreated().equalsIgnoreCase(\"1\")) {\r\n                        binding.rvPlayLists.setVisibility(View.VISIBLE);\r\n                        binding.rvPlayLists1.setVisibility(View.VISIBLE);\r\n                        binding.rvPlayLists2.setVisibility(View.GONE);\r\n                        adpater1 = new PlayListsAdpater1(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated(), this);\r\n                        binding.rvPlayLists.setAdapter(adpater1);\r\n                        adpater = new PlayListsAdpater(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated(), this);\r\n                        ItemTouchHelper.Callback callback = new ItemMoveCallback(adpater);\r\n                        touchHelper = new ItemTouchHelper(callback);\r\n                        touchHelper.attachToRecyclerView(binding.rvPlayLists1);\r\n                        binding.rvPlayLists1.setAdapter(adpater);\r\n                    } else {\r\n                        adpater2 = new PlayListsAdpater2(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated());\r\n                        binding.rvPlayLists2.setAdapter(adpater2);\r\n                        binding.rvPlayLists.setVisibility(View.GONE);\r\n                        binding.rvPlayLists1.setVisibility(View.GONE);\r\n                        binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                    }\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callTransparentFrag(int position, Context ctx, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList,\r\n                                     String myPlaylist, String playlistID) {\r\n        SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        if (queuePlay) {\r\n            int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n            Gson gson = new Gson();\r\n            String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                }.getType();\r\n                addToQueueModelList = gson.fromJson(json1, type1);\r\n            }\r\n            addToQueueModelList.remove(position1);\r\n            SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared2.edit();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();\r\n\r\n        }\r\n        player = 1;\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isPause = false;\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isCompleteStop = false;\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(listModelList);\r\n        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, myPlaylist);\r\n        if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"Downloadlist\");\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistName);\r\n        } else {\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, playlistID);\r\n        }\r\n        editor.commit();\r\n        try {\r\n            callAddTransFrag();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void callRemove(String id, String PlaylistAudioId, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData, int position) {\r\n        String AudioId = id;\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SucessModel> listCall = APIClient.getClient().getRemoveAudioFromPlaylist(UserID, AudioId, PlaylistID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        handler2.removeCallbacks(UpdateSongTime2);\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SucessModel listModel = response.body();\r\n                        mData.remove(position);\r\n                        if (mData.size() == 0) {\r\n                            enableDisableDownload(false, \"gray\");\r\n                        }\r\n                        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (pos == position && position < mData.size() - 1) {\r\n//                                            pos = pos + 1;\r\n                                if (isDisclaimer == 1) {\r\n//                                    BWSApplication.showToast(\"The audio shall remove after the disclaimer\", getActivity());\r\n                                } else {\r\n                                    callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\", PlaylistID);\r\n                                }\r\n                            } else if (pos == position && position == mData.size() - 1) {\r\n                                pos = 0;\r\n                                if (isDisclaimer == 1) {\r\n//                                    BWSApplication.showToast(\"The audio shall remove after the disclaimer\", getActivity());\r\n                                } else {\r\n                                    callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\", PlaylistID);\r\n                                }\r\n                            } else if (pos < position && pos < mData.size() - 1) {\r\n                                saveToPref(pos, mData);\r\n                            } else if (pos > position && pos == mData.size()) {\r\n                                pos = pos - 1;\r\n                                saveToPref(pos, mData);\r\n                            }\r\n                        }\r\n                        prepareData(UserID, PlaylistID);\r\n                        BWSApplication.showToast(listModel.getResponseMessage(), getActivity());\r\n                    }\r\n                }\r\n\r\n                private void saveToPref(int pos, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData) {\r\n                    SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shareddd.edit();\r\n                    Gson gson = new Gson();\r\n                    String json = gson.toJson(mData);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                    editor.commit();\r\n                    callAddTransFrag();\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private void callDownload(String id, String audioFile, String Name, ArrayList<SubPlayListModel.ResponseData.PlaylistSong>\r\n            playlistSongs, int position, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        if (id.isEmpty() && Name.isEmpty() && audioFile.isEmpty()) {\r\n            enableDisableDownload(false, \"orange\");\r\n            List<String> url = new ArrayList<>();\r\n            List<String> name = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs2 = new ArrayList<>();\r\n            playlistSongs2.addAll(playlistSongs);\r\n            if (downloadAudioDetailsList.size() != 0) {\r\n                for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                    if (playlistSongs2.size() == 0) {\r\n                        break;\r\n                    } else {\r\n                        for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                            if (playlistSongs2.size() != 0) {\r\n                                if (playlistSongs2.get(x).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                    playlistSongs2.remove(x);\r\n                                }\r\n                                if (playlistSongs2.size() == 0) {\r\n                                    break;\r\n                                }\r\n                            } else break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (playlistSongs2.size() != 0) {\r\n                for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                    name.add(playlistSongs2.get(x).getName());\r\n                    url.add(playlistSongs2.get(x).getAudioFile());\r\n                    downloadPlaylistId.add(playlistSongs2.get(x).getPlaylistID());\r\n                }\r\n            }\r\n            byte[] encodedBytes = new byte[1024];\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url.addAll(audioFile1);\r\n                    name.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            if (url.size() != 0) {\r\n                DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url);\r\n                String nameJson = gson.toJson(name);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                fileNameList = name;\r\n                playlistDownloadId = downloadPlaylistId;\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                /*remainAudio = new ArrayList<>();\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                        remainAudio.add(playlistDownloadId.get(i));\r\n                    }\r\n                }*/\r\n                SongListSize = playlistSongs.size();\r\n//                handler1.postDelayed(UpdateSongTime1, 500);\r\n            }\r\n            binding.pbProgress.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setVisibility(View.GONE);\r\n//            String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n//            SaveMedia(EncodeBytes, dirPath, playlistSongs, i, llDownload);\r\n            getMediaByPer(PlaylistID, SongListSize);\r\n            savePlaylist();\r\n            saveAllMedia(playlistSongs, playlistSongs2, encodedBytes);\r\n        } else {\r\n            boolean downloadOrNot = false;\r\n            if (downloadAudioDetailsList.size() != 0) {\r\n                for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                    if (downloadAudioDetailsList.get(i).equals(audioFile)) {\r\n                        downloadOrNot = false;\r\n                        break;\r\n                    } else {\r\n                        downloadOrNot = true;\r\n                    }\r\n                }\r\n            } else {\r\n                downloadOrNot = true;\r\n            }\r\n            if (downloadOrNot) {\r\n                disableDownload(llDownload, ivDownloads);\r\n                List<String> url = new ArrayList<>();\r\n                List<String> name = new ArrayList<>();\r\n                List<String> downloadPlaylistId = new ArrayList<>();\r\n                SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n                Gson gson1 = new Gson();\r\n                String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n                String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n                String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                    Type type = new TypeToken<List<String>>() {\r\n                    }.getType();\r\n                    List<String> fileNameList = gson1.fromJson(json, type);\r\n                    List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                    List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                    if (fileNameList.size() != 0) {\r\n                        url.addAll(audioFile1);\r\n                        name.addAll(fileNameList);\r\n                        downloadPlaylistId.addAll(playlistId1);\r\n                    }\r\n                }\r\n                url.add(audioFile);\r\n                name.add(Name);\r\n                downloadPlaylistId.add(\"\");\r\n                if (url.size() != 0) {\r\n                    DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                    downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared.edit();\r\n                    Gson gson = new Gson();\r\n                    String urlJson = gson.toJson(url);\r\n                    String nameJson = gson.toJson(name);\r\n                    String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                    editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                    editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                    editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                    editor.commit();\r\n                    fileNameList = name;\r\n                    playlistDownloadId = downloadPlaylistId;\r\n                }\r\n            }\r\n            String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n            SaveMedia(new byte[1024], dirPath, playlistSongs, position, llDownload, ivDownloads);\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = sharedx.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int position1 = sharedx.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            boolean audioPlay = sharedx.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            Gson gsonx = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n            String jsonw = sharedx.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gsonx));\r\n            Type type1 = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            Gson gson1 = new Gson();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson1.fromJson(jsonw, type1);\r\n            ArrayList<MainPlayModel> arrayList2 = gson1.fromJson(json, type1);\r\n\r\n            if (audioPlay && AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n                DownloadAudioDetails mainPlayModel = new DownloadAudioDetails();\r\n                mainPlayModel.setID(playlistSongs.get(position).getID());\r\n                mainPlayModel.setName(playlistSongs.get(position).getName());\r\n                mainPlayModel.setAudioFile(playlistSongs.get(position).getAudioFile());\r\n                mainPlayModel.setAudioDirection(playlistSongs.get(position).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(playlistSongs.get(position).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(playlistSongs.get(position).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(playlistSongs.get(position).getImageFile());\r\n                mainPlayModel.setLike(playlistSongs.get(position).getLike());\r\n                mainPlayModel.setDownload(playlistSongs.get(position).getDownload());\r\n                mainPlayModel.setAudioDuration(playlistSongs.get(position).getAudioDuration());\r\n                arrayList.add(mainPlayModel);\r\n                MainPlayModel mainPlayModel1 = new MainPlayModel();\r\n                mainPlayModel1.setID(playlistSongs.get(position).getID());\r\n                mainPlayModel1.setName(playlistSongs.get(position).getName());\r\n                mainPlayModel1.setAudioFile(playlistSongs.get(position).getAudioFile());\r\n                mainPlayModel1.setAudioDirection(playlistSongs.get(position).getAudioDirection());\r\n                mainPlayModel1.setAudiomastercat(playlistSongs.get(position).getAudiomastercat());\r\n                mainPlayModel1.setAudioSubCategory(playlistSongs.get(position).getAudioSubCategory());\r\n                mainPlayModel1.setImageFile(playlistSongs.get(position).getImageFile());\r\n                mainPlayModel1.setLike(playlistSongs.get(position).getLike());\r\n                mainPlayModel1.setDownload(playlistSongs.get(position).getDownload());\r\n                mainPlayModel1.setAudioDuration(playlistSongs.get(position).getAudioDuration());\r\n                arrayList2.add(mainPlayModel1);\r\n            }\r\n            SharedPreferences sharedd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedd.edit();\r\n            Gson gson = new Gson();\r\n            String jsonx = gson.toJson(arrayList2);\r\n            String json1 = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position1);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"DownloadListAudio\");\r\n            editor.commit();\r\n            callAddTransFrag();\r\n            handler2.postDelayed(UpdateSongTime2, 2000);\r\n        }\r\n    }\r\n\r\n    private void savePlaylist() {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertPlaylist(downloadPlaylistDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n                getMediaByPer(PlaylistID, SongListSize);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void saveAllMedia(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs2, byte[] encodedBytes) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                for (int i = 0; i < playlistSongs.size(); i++) {\r\n                    downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                    downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                    downloadAudioDetails.setPlaylistId(PlaylistID);\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"0\");\r\n                    if (downloadAudioDetailsList.size() != 0) {\r\n                        for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                            if (playlistSongs.get(i).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                downloadAudioDetails.setIsDownload(\"Complete\");\r\n                                downloadAudioDetails.setDownloadProgress(100);\r\n                                break;\r\n                            } else {\r\n                                downloadAudioDetails.setIsDownload(\"pending\");\r\n                                downloadAudioDetails.setDownloadProgress(0);\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                    DatabaseClient.getInstance(getActivity())\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .insertMedia(downloadAudioDetails);\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n\r\n                getMediaByPer(PlaylistID, SongListSize);\r\n                enableDisableDownload(false, \"orange\");\r\n                downloadAudioDetailsList = GetAllMedia();\r\n                playlistWiseAudioDetails = GetMedia();\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void SaveMedia(byte[] encodeBytes, String dirPath, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, int i, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                downloadAudioDetails.setDownload(\"1\");\r\n                downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                downloadAudioDetails.setIsSingle(\"1\");\r\n                downloadAudioDetails.setPlaylistId(\"\");\r\n                downloadAudioDetails.setIsDownload(\"pending\");\r\n                downloadAudioDetails.setDownloadProgress(0);\r\n                DatabaseClient.getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                downloadAudioDetailsList = GetAllMedia();\r\n                playlistWiseAudioDetails = GetMedia();\r\n                downloadedSingleAudio = getMyMedia();\r\n                disableDownload(llDownload, ivDownloads);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public void GetMedia(String url, Context ctx, String download, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(url);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                        disableDownload(llDownload, ivDownloads);\r\n                    }\r\n                } else if (download.equalsIgnoreCase(\"1\")) {\r\n                    disableDownload(llDownload, ivDownloads);\r\n                } else {\r\n                    enableDownload(llDownload, ivDownloads);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetMedia() {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        SubPlayListModel responseData = new SubPlayListModel();\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> details = new ArrayList<>();\r\n                        SubPlayListModel.ResponseData listModel = new SubPlayListModel.ResponseData();\r\n                        listModel.setPlaylistID(downloadPlaylistDetailsList.get(0).getPlaylistID());\r\n                        listModel.setPlaylistName(downloadPlaylistDetailsList.get(0).getPlaylistName());\r\n                        listModel.setPlaylistDesc(downloadPlaylistDetailsList.get(0).getPlaylistDesc());\r\n                        listModel.setPlaylistMastercat(downloadPlaylistDetailsList.get(0).getPlaylistMastercat());\r\n                        listModel.setPlaylistSubcat(downloadPlaylistDetailsList.get(0).getPlaylistSubcat());\r\n                        listModel.setPlaylistImageDetail(downloadPlaylistDetailsList.get(0).getPlaylistImage());\r\n                        listModel.setTotalAudio(downloadPlaylistDetailsList.get(0).getTotalAudio());\r\n                        listModel.setTotalDuration(downloadPlaylistDetailsList.get(0).getTotalDuration());\r\n                        listModel.setTotalhour(downloadPlaylistDetailsList.get(0).getTotalhour());\r\n                        listModel.setTotalminute(downloadPlaylistDetailsList.get(0).getTotalminute());\r\n                        listModel.setCreated(downloadPlaylistDetailsList.get(0).getCreated());\r\n                        listModel.setLike(downloadPlaylistDetailsList.get(0).getLike());\r\n                        listModel.setIsReminder(downloadPlaylistDetailsList.get(0).getIsReminder());\r\n                        if (playlistWiseAudioDetails.size() != 0) {\r\n                            for (int i = 0; i < playlistWiseAudioDetails.size(); i++) {\r\n                                SubPlayListModel.ResponseData.PlaylistSong detail = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                detail.setID(playlistWiseAudioDetails.get(i).getID());\r\n                                detail.setName(playlistWiseAudioDetails.get(i).getName());\r\n                                detail.setAudioFile(playlistWiseAudioDetails.get(i).getAudioFile());\r\n                                detail.setAudioDirection(playlistWiseAudioDetails.get(i).getAudioDirection());\r\n                                detail.setAudiomastercat(playlistWiseAudioDetails.get(i).getAudiomastercat());\r\n                                detail.setAudioSubCategory(playlistWiseAudioDetails.get(i).getAudioSubCategory());\r\n                                detail.setImageFile(playlistWiseAudioDetails.get(i).getImageFile());\r\n                                detail.setLike(playlistWiseAudioDetails.get(i).getLike());\r\n                                detail.setDownload(playlistWiseAudioDetails.get(i).getDownload());\r\n                                detail.setAudioDuration(playlistWiseAudioDetails.get(i).getAudioDuration());\r\n                                details.add(detail);\r\n                            }\r\n                            listModel.setPlaylistSongs(details);\r\n                        }\r\n                        setData(listModel);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    private void enableDownload(RelativeLayout llDownload, ImageView ivDownloads) {\r\n        llDownload.setClickable(true);\r\n        llDownload.setEnabled(true);\r\n        ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n        ivDownloads.setColorFilter(activity.getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n    }\r\n\r\n    private void disableDownload(RelativeLayout llDownload, ImageView ivDownloads) {\r\n        ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n        ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        llDownload.setClickable(false);\r\n        llDownload.setEnabled(false);\r\n    }\r\n\r\n    @Override\r\n    public void requestDrag(RecyclerView.ViewHolder viewHolder) {\r\n        touchHelper.startDrag(viewHolder);\r\n    }\r\n\r\n    private void addDisclaimer() {\r\n        addDisclaimer = new SubPlayListModel.ResponseData.PlaylistSong();\r\n        addDisclaimer.setID(\"0\");\r\n        addDisclaimer.setName(\"Disclaimer\");\r\n        addDisclaimer.setAudioFile(\"\");\r\n        addDisclaimer.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n        addDisclaimer.setAudiomastercat(\"\");\r\n        addDisclaimer.setAudioSubCategory(\"\");\r\n        addDisclaimer.setImageFile(\"\");\r\n        addDisclaimer.setLike(\"\");\r\n        addDisclaimer.setDownload(\"\");\r\n        addDisclaimer.setAudioDuration(\"00:48\");\r\n    }\r\n\r\n    public class PlayListsAdpater extends RecyclerView.Adapter<PlayListsAdpater.MyViewHolder> implements Filterable/*, StartDragListener*/, ItemMoveCallback.ItemTouchHelperContract {\r\n        Context ctx;\r\n        String UserID, Created, name;\r\n        StartDragListener startDragListener;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                String Created, StartDragListener startDragListener) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n            this.startDragListener = startDragListener;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutSorting2Binding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout_sorting2, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @SuppressLint(\"ClickableViewAccessibility\")\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n\r\n            /*UpdateSongTime2 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n//                        for (int f = 0; f < GlobalListModel.getPlaylistSongs().size(); f++) {\r\n                        if (fileNameList.size() != 0) {\r\n                            for (int i = 0; i < fileNameList.size(); i++) {\r\n                                if (fileNameList.get(i).equalsIgnoreCase(GlobalListModel.getPlaylistSongs().get(position).getName())) {\r\n                                    if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(GlobalListModel.getPlaylistSongs().get(position).getName())) {\r\n                                        if (downloadProgress <= 100) {\r\n                                            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                                notifyItemChanged(position);\r\n                                            }\r\n                                        } else {\r\n                                            holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                            getDownloadData();\r\n                                        }\r\n                                    } else {\r\n//                                        notifyItemChanged(position);\r\n                                    }\r\n                                }\r\n                            }\r\n//                            }\r\n                        }\r\n                        if (downloadProgress == 0) {\r\n                            notifyDataSetChanged();\r\n                            getDownloadData();\r\n                        }\r\n                        handler2.postDelayed(this, 3000);\r\n                    } catch (Exception e) {\r\n\r\n                    }\r\n                }\r\n            };\r\n            searchEditText.setHint(R.string.playlist_or_audio_search);\r\n            binding.tvSearch.setHint(R.string.playlist_or_audio_search);\r\n            binding.tvSearch.setVisibility(View.VISIBLE);\r\n            binding.searchView.setVisibility(View.GONE);\r\n            holder.binding.tvTitle.setText(mData.get(position).getName());\r\n            holder.binding.tvTime.setText(mData.get(position).getAudioDuration());*/\r\n\r\n            SharedPreferences sharedzw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n\r\n            if (audioPlayz && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pIDz.equalsIgnoreCase(PlaylistID)) {\r\n                if (myAudioId.equalsIgnoreCase(mData.get(position).getID())) {\r\n                    holder.binding.llHighLight.setBackgroundResource(R.color.highlight_background);\r\n//            holder.binding.equalizerview.stopBars();\r\n                } else {\r\n                    holder.binding.llHighLight.setBackgroundResource(R.color.white);\r\n                }\r\n            } else {\r\n                holder.binding.llHighLight.setBackgroundResource(R.color.white);\r\n            }\r\n\r\n\r\n          /*  holder.binding.llMainLayout.setVisibility(View.GONE);\r\n            holder.binding.llDownload.setVisibility(View.GONE);\r\n            holder.binding.llRemove.setVisibility(View.GONE);*/\r\n//            holder.binding.llHighLight.setBackgroundResource(R.color.highlight_background);\r\n//          holder.binding.llThirdLayout.setWeightSum(0.13f);\r\n            holder.binding.llSort.setOnTouchListener((v, event) -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall sort after the disclaimer\", ctx);\r\n                    } else {\r\n                        if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                            startDragListener.requestDrag(holder);\r\n                        }\r\n                        if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                            startDragListener.requestDrag(holder);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                    if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n           /* String id = mData.get(position).getID();\r\n\r\n            if (fileNameList.size() != 0) {\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(mData.get(position).getName())) {\r\n                            if (downloadProgress <= 100) {\r\n                                if (downloadProgress == 100) {\r\n                                    holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                } else {\r\n                                    holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                    holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                                }\r\n                            } else {\r\n                                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                                handler2.removeCallbacks(UpdateSongTime2);\r\n                            }\r\n                            handler2.postDelayed(UpdateSongTime2, 3000);\r\n                        } else {\r\n                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                            handler2.postDelayed(UpdateSongTime2, 3000);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n            }\r\n            for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                if (downloadAudioDetailsList.get(i).getAudioFile().equalsIgnoreCase(mData.get(position).getAudioFile())\r\n                        && downloadAudioDetailsList.get(i).getPlaylistId().equalsIgnoreCase(\"\")) {\r\n                    disableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                    break;\r\n                } else {\r\n                    enableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                }\r\n            }\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(listModelList.get(0).getPlaylistID())) {\r\n\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(0, ctx, listModelList, \"myPlaylist\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    listModelList2.add(addDisclaimer);\r\n                    listModelList2.addAll(listModelList);\r\n                    callTransparentFrag(0, ctx, listModelList2, \"myPlaylist\", PlaylistID);\r\n                }\r\n            });\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                int pos = holder.getAdapterPosition();\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                Log.e(\"postion of paly\", String.valueOf(position));\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(pos, ctx, listModelList, \"myPlaylist\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    if (position != 0) {\r\n                        listModelList2.addAll(listModelList);\r\n                        listModelList2.add(pos, addDisclaimer);\r\n                    } else {\r\n                        listModelList2.add(addDisclaimer);\r\n                        listModelList2.addAll(listModelList);\r\n                    }\r\n                    callTransparentFrag(pos, ctx, listModelList2, \"myPlaylist\", PlaylistID);\r\n                }\r\n            });\r\n\r\n            holder.binding.llDownload.setOnClickListener(view -> {\r\n                name = mData.get(position).getName();\r\n                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                callDownload(mData.get(position).getID(), mData.get(position).getAudioFile(), mData.get(position).getName(), listFilterData, position, holder.binding.llDownload, holder.binding.ivDownloads);\r\n            });\r\n            try {\r\n                holder.binding.llRemove.setOnClickListener(view -> {\r\n                    handler2.removeCallbacks(UpdateSongTime2);\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall remove after the disclaimer\", ctx);\r\n                        } else {\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                                BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                            } else {\r\n                                callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                            BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                        } else {\r\n                            callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                        }\r\n                    }\r\n                });\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }*/\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (listFilterData != null) {\r\n                return listFilterData.size();\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public void onRowMoved(int fromPosition, int toPosition) {\r\n            if (fromPosition < toPosition) {\r\n                for (int i = fromPosition; i < toPosition; i++) {\r\n                    Collections.swap(listModelList, i, i + 1);\r\n                }\r\n            } else {\r\n                for (int i = fromPosition; i > toPosition; i--) {\r\n                    Collections.swap(listModelList, i, i - 1);\r\n                }\r\n            }\r\n            changedAudio.clear();\r\n            for (int i = 0; i < listModelList.size(); i++) {\r\n                changedAudio.add(listModelList.get(i).getID());\r\n            }\r\n            callDragApi();\r\n            notifyItemMoved(fromPosition, toPosition);\r\n            adpater1.notifyItemMoved(fromPosition, toPosition);\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            if (audioPlay) {\r\n                if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (fromPosition == pos) {\r\n                            pos = toPosition;\r\n                            String one = \"1\";\r\n                            Log.e(\"one\", one);\r\n                        }/* else if (toPosition == pos) {\r\n                            if (action == 0) {\r\n                                pos = pos + 1;\r\n                            } else if (action == 1) {\r\n                                pos = pos - 1;\r\n                            }\r\n                        }*/ else if (fromPosition < pos && toPosition > pos) {\r\n                            pos = pos - 1;\r\n                            String one = \"2\";\r\n                            Log.e(\"one\", one);\r\n                        } else if ((fromPosition > pos && toPosition > pos) || (fromPosition < pos && toPosition < pos)) {\r\n                            pos = pos;\r\n                            String one = \"3\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition > pos && toPosition < pos) {\r\n                            pos = pos + 1;\r\n                            String one = \"4\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition > pos && toPosition == pos) {\r\n                            pos = pos + 1;\r\n                            String one = \"5\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition < pos && toPosition == pos) {\r\n                            pos = pos - 1;\r\n                            String one = \"6\";\r\n                            Log.e(\"one\", one);\r\n                        }\r\n                        SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shareddd.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(listModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                        editor.commit();\r\n                        callAddTransFrag();\r\n                    }\r\n                }\r\n            }\r\n\r\n         /* SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();*/\r\n\r\n        }\r\n\r\n        private void callDragApi() {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Call<CardModel> listCall = APIClient.getClient().setShortedAudio(UserID, PlaylistID, TextUtils.join(\",\", changedAudio));\r\n                listCall.enqueue(new Callback<CardModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<CardModel> call, Response<CardModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            CardModel listModel = response.body();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<CardModel> call, Throwable t) {\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onRowClear(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n       /* @Override\r\n        public int getItemViewType(int position) {\r\n            return position;\r\n        }\r\n\r\n        @Override\r\n        public long getItemId(int position) {\r\n            return position;\r\n        }*/\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        binding.rvPlayLists2.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutSorting2Binding binding;\r\n\r\n            public MyViewHolder(MyPlaylistLayoutSorting2Binding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PlayListsAdpater1 extends RecyclerView.Adapter<PlayListsAdpater1.MyViewHolder> implements Filterable/*, ItemMoveCallback.ItemTouchHelperContract */ {\r\n        Context ctx;\r\n        String UserID, Created, name, songId, songOldId;\r\n        StartDragListener startDragListener;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n        int ps = 0, nps = 0;\r\n\r\n        public PlayListsAdpater1(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                 String Created, StartDragListener startDragListener) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n            this.startDragListener = startDragListener;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutSorting1Binding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout_sorting1, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @SuppressLint(\"ClickableViewAccessibility\")\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n            UpdateSongTime3 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n                        startTime = getStartTime();\r\n                        myProgress = currentDuration;\r\n                        currentDuration = getStartTime();\r\n                        if (currentDuration == 0 && isCompleteStop) {\r\n                            notifyDataSetChanged();\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        } else if (currentDuration >= 1 && !isPause) {\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                        } else if (currentDuration >= 1 && isPause) {\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        }\r\n                        if (currentDuration <= 555) {\r\n                            notifyDataSetChanged();\r\n                        }\r\n\r\n                        /*if(isPause && ps == 0){\r\n                            ps++;\r\n                            notifyDataSetChanged();\r\n                        }else if(!isPause && nps == 0){\r\n                            nps++;\r\n                            notifyDataSetChanged();\r\n                        }*/\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    handler3.postDelayed(this, 300);\r\n                }\r\n            };\r\n            UpdateSongTime2 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n//                        for (int f = 0; f < GlobalListModel.getPlaylistSongs().size(); f++) {\r\n                        if (fileNameList.size() != 0) {\r\n                            for (int i = 0; i < fileNameList.size(); i++) {\r\n                                if (fileNameList.get(i).equalsIgnoreCase(GlobalListModel.getPlaylistSongs().get(position).getName())) {\r\n                                    if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(GlobalListModel.getPlaylistSongs().get(position).getName())) {\r\n                                        if (downloadProgress <= 100) {\r\n                                            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                                notifyItemChanged(position);\r\n                                            }\r\n                                        } else {\r\n                                            holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                            getDownloadData();\r\n                                        }\r\n                                    } else {\r\n//                                        notifyItemChanged(position);\r\n                                    }\r\n                                }\r\n                            }\r\n//                            }\r\n                        }\r\n                        if (downloadProgress == 0) {\r\n                            notifyDataSetChanged();\r\n                            getDownloadData();\r\n                        }\r\n                        handler2.postDelayed(this, 3000);\r\n                    } catch (Exception e) {\r\n\r\n                    }\r\n                }\r\n            };\r\n            holder.binding.llMainLayout.setVisibility(View.VISIBLE);\r\n            holder.binding.llDownload.setVisibility(View.VISIBLE);\r\n            holder.binding.llRemove.setVisibility(View.VISIBLE);\r\n            holder.binding.llSort.setVisibility(View.GONE);\r\n            searchEditText.setHint(R.string.playlist_or_audio_search);\r\n            binding.tvSearch.setHint(R.string.playlist_or_audio_search);\r\n            binding.tvSearch.setVisibility(View.VISIBLE);\r\n            binding.searchView.setVisibility(View.GONE);\r\n            holder.binding.tvTitle.setText(mData.get(position).getName());\r\n            holder.binding.tvTime.setText(mData.get(position).getAudioDuration());\r\n//            holder.binding.llThirdLayout.setWeightSum(0.26f);\r\n           /* holder.binding.llSort.setOnTouchListener((v, event) -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall sort after the disclaimer\", ctx);\r\n                    } else {\r\n                        if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                            startDragListener.requestDrag(holder);\r\n                        }\r\n                        if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                            startDragListener.requestDrag(holder);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                    if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                }\r\n                return false;\r\n            });*/\r\n\r\n            SharedPreferences sharedzw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            if (audioPlayz && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pIDz.equalsIgnoreCase(PlaylistID)) {\r\n                if (myAudioId.equalsIgnoreCase(mData.get(position).getID())) {\r\n                    songId = myAudioId;\r\n                    if (isPause) {\r\n                        holder.binding.equalizerview.stopBars();\r\n                    } else\r\n                        holder.binding.equalizerview.animateBars();\r\n                    holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                    holder.binding.llHighLight.setBackgroundResource(R.color.highlight_background);\r\n                    adpater.notifyDataSetChanged();\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n                        /*if(ps == 1){\r\n                            ps = 0;\r\n                        }if(nps == 1){\r\n                            nps = 0;\r\n                        }*/\r\n//            holder.binding.equalizerview.stopBars();\r\n                } else {\r\n                    adpater.notifyDataSetChanged();\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llHighLight.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                }\r\n                handler3.postDelayed(UpdateSongTime3, 500);\r\n            } else {\r\n                holder.binding.equalizerview.setVisibility(View.GONE);\r\n                holder.binding.llHighLight.setBackgroundResource(R.color.white);\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                handler3.removeCallbacks(UpdateSongTime3);\r\n            }\r\n\r\n            if (fileNameList.size() != 0) {\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(mData.get(position).getName())) {\r\n                            if (downloadProgress <= 100) {\r\n                                if (downloadProgress == 100) {\r\n                                    holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                } else {\r\n                                    holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                    holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                                }\r\n                            } else {\r\n                                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                                handler2.removeCallbacks(UpdateSongTime2);\r\n                            }\r\n                            handler2.postDelayed(UpdateSongTime2, 3000);\r\n                        } else {\r\n                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                            handler2.postDelayed(UpdateSongTime2, 3000);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n            }\r\n            for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                if (downloadAudioDetailsList.get(i).getAudioFile().equalsIgnoreCase(mData.get(position).getAudioFile())\r\n                        && downloadAudioDetailsList.get(i).getPlaylistId().equalsIgnoreCase(\"\")) {\r\n                    disableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                    break;\r\n                } else {\r\n                    enableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                }\r\n            }\r\n\r\n           /* MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            holder.binding.ivBackgroundImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.setScaleType(ImageView.ScaleType.FIT_XY);*/\r\n//            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n//            holder.binding.llHighLight.setBackgroundResource(R.color.highlight_background);\r\n//            holder.binding.equalizerview.animateBars();\r\n//            holder.binding.equalizerview.stopBars();\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                if (isPlayPlaylist == 1) {\r\n                    pauseMedia();\r\n                    isPlayPlaylist = 2;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                } else if (isPlayPlaylist == 2) {\r\n                    resumeMedia();\r\n                    isPlayPlaylist = 1;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                } else {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(listModelList.get(0).getPlaylistID())) {\r\n                        if (isDisclaimer == 1) {\r\n                            if (isPause || !isMediaStart) {\r\n                                resumeMedia();\r\n                            } else\r\n                                BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            myAudioId = mData.get(0).getID();\r\n                            callTransparentFrag(0, ctx, listModelList, \"myPlaylist\", PlaylistID);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                        listModelList2.add(addDisclaimer);\r\n                        listModelList2.addAll(listModelList);\r\n                        callTransparentFrag(0, ctx, listModelList2, \"myPlaylist\", PlaylistID);\r\n                    }\r\n                    isPlayPlaylist = 1;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                }\r\n                notifyDataSetChanged();\r\n                handler3.postDelayed(UpdateSongTime3, 500);\r\n            });\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                int pos = holder.getAdapterPosition();\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                songOldId = songId;\r\n                songId = mData.get(pos).getID();\r\n                Log.e(\"position of play\", String.valueOf(position));\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        myAudioId = mData.get(pos).getID();\r\n                        callTransparentFrag(pos, ctx, listModelList, \"myPlaylist\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    if (position != 0) {\r\n                        listModelList2.addAll(listModelList);\r\n                        listModelList2.add(pos, addDisclaimer);\r\n                    } else {\r\n                        listModelList2.add(addDisclaimer);\r\n                        listModelList2.addAll(listModelList);\r\n                    }\r\n                    callTransparentFrag(pos, ctx, listModelList2, \"myPlaylist\", PlaylistID);\r\n                }\r\n                isPlayPlaylist = 1;\r\n                handler3.postDelayed(UpdateSongTime3, 500);\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                notifyDataSetChanged();\r\n            });\r\n            holder.binding.llDownload.setOnClickListener(view -> {\r\n                name = mData.get(position).getName();\r\n                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                callDownload(mData.get(position).getID(), mData.get(position).getAudioFile(), mData.get(position).getName(), listFilterData, position, holder.binding.llDownload, holder.binding.ivDownloads);\r\n            });\r\n            try {\r\n                holder.binding.llRemove.setOnClickListener(view -> {\r\n                    handler2.removeCallbacks(UpdateSongTime2);\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall remove after the disclaimer\", ctx);\r\n                        } else {\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                                BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                            } else {\r\n                                callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                            BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                        } else {\r\n                            callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                        }\r\n                    }\r\n                });\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (listFilterData != null) {\r\n                return listFilterData.size();\r\n            }\r\n            return 0;\r\n        }\r\n\r\n      /*  @Override\r\n        public void onRowMoved(int fromPosition, int toPosition) {\r\n            if (fromPosition < toPosition) {\r\n                for (int i = fromPosition; i < toPosition; i++) {\r\n                    Collections.swap(listModelList, i, i + 1);\r\n                }\r\n            } else {\r\n                for (int i = fromPosition; i > toPosition; i--) {\r\n                    Collections.swap(listModelList, i, i - 1);\r\n                }\r\n            }\r\n            changedAudio.clear();\r\n            for (int i = 0; i < listModelList.size(); i++) {\r\n                changedAudio.add(listModelList.get(i).getID());\r\n            }\r\n\r\n            callDragApi();\r\n\r\n            notifyItemMoved(fromPosition, toPosition);\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            if (audioPlay) {\r\n                if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (fromPosition == pos) {\r\n                            pos = toPosition;\r\n                            String one = \"1\";\r\n                            Log.e(\"one\", one);\r\n                        }*//* else if (toPosition == pos) {\r\n                            if (action == 0) {\r\n                                pos = pos + 1;\r\n                            } else if (action == 1) {\r\n                                pos = pos - 1;\r\n                            }\r\n                        }*//* else if (fromPosition < pos && toPosition > pos) {\r\n                            pos = pos - 1;\r\n                            String one = \"2\";\r\n                            Log.e(\"one\", one);\r\n                        } else if ((fromPosition > pos && toPosition > pos) || (fromPosition < pos && toPosition < pos)) {\r\n                            pos = pos;\r\n                            String one = \"3\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition > pos && toPosition < pos) {\r\n                            pos = pos + 1;\r\n                            String one = \"4\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition > pos && toPosition == pos) {\r\n                            pos = pos + 1;\r\n                            String one = \"5\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition < pos && toPosition == pos) {\r\n                            pos = pos - 1;\r\n                            String one = \"6\";\r\n                            Log.e(\"one\", one);\r\n                        }\r\n                        SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shareddd.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(listModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                        editor.commit();\r\n                        callAddTransFrag();\r\n                    }\r\n                }\r\n            }\r\n\r\n         *//* SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();*//*\r\n\r\n        }\r\n\r\n        private void callDragApi() {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Call<CardModel> listCall = APIClient.getClient().setShortedAudio(UserID, PlaylistID, TextUtils.join(\",\", changedAudio));\r\n                listCall.enqueue(new Callback<CardModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<CardModel> call, Response<CardModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            CardModel listModel = response.body();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<CardModel> call, Throwable t) {\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onRowClear(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }*/\r\n\r\n        @Override\r\n        public int getItemViewType(int position) {\r\n            return position;\r\n        }\r\n\r\n        @Override\r\n        public long getItemId(int position) {\r\n            return position;\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        binding.rvPlayLists2.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutSorting1Binding binding;\r\n\r\n            public MyViewHolder(MyPlaylistLayoutSorting1Binding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PlayListsAdpater2 extends RecyclerView.Adapter<PlayListsAdpater2.MyViewHolder2> implements Filterable {\r\n        Context ctx;\r\n        String UserID, Created, songId;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n        int ps = 0, nps = 0;\r\n        boolean aps = false, bps = false;\r\n\r\n        public PlayListsAdpater2(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                 String Created) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder2 onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout, parent, false);\r\n            return new MyViewHolder2(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder2 holder, int position) {\r\n            UpdateSongTime3 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n                        startTime = getStartTime();\r\n                        myProgress = currentDuration;\r\n                        currentDuration = getStartTime();\r\n                        if (currentDuration == 0 && isCompleteStop) {\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                            notifyDataSetChanged();\r\n                        } else if (currentDuration >= 1 && !isPause) {\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                        } else if (currentDuration >= 1 && isPause) {\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        }\r\n                        if (currentDuration <= 555) {\r\n                            notifyDataSetChanged();\r\n                        }\r\n\r\n                        /*if(isPause && ps == 0){\r\n                            ps++;\r\n                            aps = true;\r\n                            notifyDataSetChanged();\r\n                        }else if(!isPause && nps == 0){\r\n                            nps++;\r\n                            bps = true;\r\n                            notifyDataSetChanged();\r\n                        }*/\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    handler3.postDelayed(this, 300);\r\n                }\r\n            };\r\n            searchEditText.setHint(\"Search for audios\");\r\n            binding.tvSearch.setHint(\"Search for audios\");\r\n\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n            holder.binding.tvTitleA.setText(mData.get(position).getName());\r\n            holder.binding.tvTimeA.setText(mData.get(position).getAudioDuration());\r\n            binding.tvSearch.setVisibility(View.GONE);\r\n            binding.searchView.setVisibility(View.VISIBLE);\r\n            String id = mData.get(position).getID();\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            holder.binding.rlImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.rlImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n//            GetMedia(id, activity, mData.get(position).getDownload(), holder.binding.llDownload, holder.binding.ivDownloads);\r\n//            holder.binding.equalizerview.animateBars();\r\n//            holder.binding.equalizerview.stopBars();\r\n            SharedPreferences sharedzw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                if (audioPlayz && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pIDz.equalsIgnoreCase(PlaylistName)) {\r\n                    if (myAudioId.equalsIgnoreCase(mData.get(position).getID())) {\r\n                        if (isPause) {\r\n                            holder.binding.equalizerview.stopBars();\r\n                        } else\r\n                            holder.binding.equalizerview.animateBars();\r\n                        holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                        holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n                        songId = myAudioId;\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n                        /*if(ps == 1 && aps){\r\n                            ps = 0;\r\n                            aps = false;\r\n                        }if(nps == 1 && bps){\r\n                            nps = 0;\r\n                            bps = false;\r\n                        }*/\r\n//            holder.binding.equalizerview.stopBars();\r\n                    } else {\r\n                        holder.binding.equalizerview.setVisibility(View.GONE);\r\n                        holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    }\r\n                    handler3.postDelayed(UpdateSongTime3, 500);\r\n                } else {\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    handler3.removeCallbacks(UpdateSongTime3);\r\n                }\r\n            } else {\r\n                if (audioPlayz && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pIDz.equalsIgnoreCase(PlaylistID)) {\r\n                    if (myAudioId.equalsIgnoreCase(mData.get(position).getID())) {\r\n                        if (isPause) {\r\n                            holder.binding.equalizerview.stopBars();\r\n                        } else\r\n                            holder.binding.equalizerview.animateBars();\r\n                        holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                        holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n                        songId = myAudioId;\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n                        /*if(ps == 1){\r\n                            ps = 0;\r\n                        }if(nps == 1){\r\n                            nps = 0;\r\n                        }*/\r\n//            holder.binding.equalizerview.stopBars();\r\n                    } else {\r\n                        holder.binding.equalizerview.setVisibility(View.GONE);\r\n                        holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    }\r\n                    handler3.postDelayed(UpdateSongTime3, 500);\r\n                } else {\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    handler3.removeCallbacks(UpdateSongTime3);\r\n                }\r\n            }\r\n\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                if (isPlayPlaylist == 1) {\r\n                    pauseMedia();\r\n                    isPlayPlaylist = 2;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                } else if (isPlayPlaylist == 2) {\r\n                    resumeMedia();\r\n                    isPlayPlaylist = 1;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                } else {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                            if (isDisclaimer == 1) {\r\n                                if (isPause) {\r\n                                    resumeMedia();\r\n                                } else\r\n                                    BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                            } else {\r\n                                callTransparentFrag(0, ctx, listModelList, \"\", PlaylistID);\r\n                            }\r\n                        } else {\r\n                            isDisclaimer = 0;\r\n                            disclaimerPlayed = 0;\r\n                            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                            listModelList2.add(addDisclaimer);\r\n                            listModelList2.addAll(listModelList);\r\n                            callTransparentFrag(0, ctx, listModelList2, \"\", PlaylistID);\r\n                        }\r\n                    } else {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                if (isPause) {\r\n                                    resumeMedia();\r\n                                } else\r\n                                    BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                            } else {\r\n                                callTransparentFrag(0, ctx, listModelList, \"\", PlaylistID);\r\n                            }\r\n                        } else {\r\n                            isDisclaimer = 0;\r\n                            disclaimerPlayed = 0;\r\n                            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                            listModelList2.add(addDisclaimer);\r\n                            listModelList2.addAll(listModelList);\r\n                            callTransparentFrag(0, ctx, listModelList2, \"\", PlaylistID);\r\n                        }\r\n                    }\r\n                    isPlayPlaylist = 1;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                }\r\n                handler3.postDelayed(UpdateSongTime3, 500);\r\n                notifyDataSetChanged();\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransparentFrag(position, ctx, listModelList, \"\", PlaylistID);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                        if (position != 0) {\r\n                            listModelList2.addAll(listModelList);\r\n                            listModelList2.add(position, addDisclaimer);\r\n                        } else {\r\n                            listModelList2.add(addDisclaimer);\r\n                            listModelList2.addAll(listModelList);\r\n                        }\r\n                        callTransparentFrag(position, ctx, listModelList2, \"\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransparentFrag(position, ctx, listModelList, \"\", PlaylistID);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                        if (position != 0) {\r\n                            listModelList2.addAll(listModelList);\r\n                            listModelList2.add(position, addDisclaimer);\r\n                        } else {\r\n                            listModelList2.add(addDisclaimer);\r\n                            listModelList2.addAll(listModelList);\r\n                        }\r\n                        callTransparentFrag(position, ctx, listModelList2, \"\", PlaylistID);\r\n                    }\r\n                }\r\n                isPlayPlaylist = 1;\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                handler3.postDelayed(UpdateSongTime3, 500);\r\n                notifyDataSetChanged();\r\n            });\r\n\r\n            binding.llDelete.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                        BWSApplication.showToast(\"Currently this playlist is in player,so you can't delete this playlist as of now\", ctx);\r\n                    } else {\r\n                        final Dialog dialog = new Dialog(ctx);\r\n                        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                        dialog.setContentView(R.layout.logout_layout);\r\n                        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));\r\n                        dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                        final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                        final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n                        final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                        final Button Btn = dialog.findViewById(R.id.Btn);\r\n                        tvTitle.setText(\"Remove playlist\");\r\n                        tvHeader.setText(\"Are you sure you want to remove the \" + PlaylistName + \" from downloads??\");\r\n                        Btn.setText(\"Confirm\");\r\n                        dialog.setOnKeyListener((vi, keyCode, event) -> {\r\n                            if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                dialog.dismiss();\r\n                            }\r\n                            return false;\r\n                        });\r\n\r\n                        Btn.setOnClickListener(views -> {\r\n                            getDeleteDownloadData();\r\n                            playlistWiseAudiosDetails = GetPlaylistMedia(PlaylistID);\r\n                            dialog.dismiss();\r\n                            Fragment fragment = new PlaylistFragment();\r\n                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .replace(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                        });\r\n\r\n                        tvGoBack.setOnClickListener(viewd -> dialog.dismiss());\r\n                        dialog.show();\r\n                        dialog.setCancelable(false);\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                holder.binding.llMore.setClickable(true);\r\n                holder.binding.llMore.setEnabled(true);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                holder.binding.llMore.setClickable(false);\r\n                holder.binding.llMore.setEnabled(false);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            holder.binding.llMore.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"You can see details after the disclaimer\", ctx);\r\n                    } else {\r\n                        Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                        i.putExtra(\"play\", \"playlist\");\r\n                        i.putExtra(\"ID\", mData.get(position).getID());\r\n                        i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                        i.putExtra(\"position\", position);\r\n                        i.putParcelableArrayListExtra(\"data\", mData);\r\n                        i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                        startActivity(i);\r\n                    }\r\n                } else {\r\n                    Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                    i.putExtra(\"play\", \"playlist\");\r\n                    i.putExtra(\"ID\", mData.get(position).getID());\r\n                    i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                    i.putExtra(\"position\", position);\r\n                    i.putParcelableArrayListExtra(\"data\", mData);\r\n                    i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listFilterData.size();\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.rvPlayLists2.setVisibility(View.GONE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        Log.e(\"search\", SearchFlag);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        public class MyViewHolder2 extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolder2(MyPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetPlaylistMedia(String playlistID) {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                deleteDownloadFile(getActivity(), playlistID);\r\n                for (int i = 0; i < playlistWiseAudioDetails.size(); i++) {\r\n                    GetSingleMedia(playlistWiseAudioDetails.get(i).getAudioFile(), getActivity(), playlistID);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    private void deleteDownloadFile(Context applicationContext, String PlaylistId) {\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(applicationContext)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deleteByPlaylistId(PlaylistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                notifyItemRemoved(position);\r\n                deletePlaylist(PlaylistID);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public void GetSingleMedia(String AudioFile, Context ctx, String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(AudioFile);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                try {\r\n                    if (oneAudioDetailsList.size() != 0) {\r\n                        if (oneAudioDetailsList.size() == 1) {\r\n                            FileUtils.deleteDownloadedFile(ctx, oneAudioDetailsList.get(0).getName());\r\n                        }\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia sts = new GetMedia();\r\n        sts.execute();\r\n    }\r\n\r\n    public void getDeleteDownloadData() {\r\n        List<String> fileNameList, fileNameList1, audioFile, playlistDownloadId;\r\n        try {\r\n            SharedPreferences sharedy = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                fileNameList1 = gson.fromJson(jsony, type);\r\n                audioFile = gson.fromJson(json1, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 1; i < fileNameList1.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            fileNameList.remove(i);\r\n                            audioFile.remove(i);\r\n                            playlistDownloadId.remove(i);\r\n                        }\r\n                    }\r\n                }\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                String nameJson = gson.toJson(fileNameList);\r\n                String urlJson = gson.toJson(audioFile);\r\n                String playlistIdJson = gson.toJson(playlistDownloadId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                if (fileNameList.get(0).equalsIgnoreCase(filename) && playlistDownloadId.get(0).equalsIgnoreCase(PlaylistID)) {\r\n                    PRDownloader.cancel(downloadIdOne);\r\n                    filename = \"\";\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void deletePlaylist(String playlistId) {\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deletePlaylist(playlistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java	(date 1605711637768)
@@ -57,11 +57,13 @@
 import com.brainwellnessspa.EncryptDecryptUtils.FileUtils;
 import com.brainwellnessspa.LikeModule.Activities.LikeActivity;
 import com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;
+import com.brainwellnessspa.LoginModule.Activities.LoginActivity;
 import com.brainwellnessspa.R;
 import com.brainwellnessspa.ReminderModule.Activities.ReminderActivity;
 import com.brainwellnessspa.RoomDataBase.DatabaseClient;
 import com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;
 import com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;
+import com.brainwellnessspa.SplashModule.SplashScreenActivity;
 import com.brainwellnessspa.Utility.APIClient;
 import com.brainwellnessspa.Utility.CONSTANTS;
 import com.brainwellnessspa.Utility.ItemMoveCallback;
@@ -163,56 +165,7 @@
     int position = 0, startTime, listSize, myCount;
     private long totalDuration, currentDuration = 0;
     long myProgress = 0, diff = 0;
-
-//    private Runnable UpdateSongTime1 = new Runnable() {
-//        @Override
-//        public void run() {
-//            getMediaByPer(PlaylistID,SongListSize);
-//
-///*            if (fileNameList.size() != 0) {
-//                if (remainAudio.size() <= SongListSize) {
-//                    int total = SongListSize;
-//                    int remain = remainAudio.size();
-//                    int complate = total - remain;
-//                    long progressPercent = complate * 100 / total;
-//                    int downloadProgress1 = (int) progressPercent;
-//                    if (SongListSize == 1) {
-//                        if (downloadProgress <= 100) {
-//                            binding.pbProgress.setProgress(downloadProgress);
-//                            binding.pbProgress.setVisibility(View.VISIBLE);
-//                            binding.ivDownloads.setVisibility(View.GONE);
-//                            if (downloadProgress == 100) {
-//                                getDownloadData();
-//                            }
-//                        }
-//                    } else if (downloadProgress1 <= 100) {
-//                        if (downloadProgress1 == 100) {
-//                            getDownloadData();
-//                            binding.pbProgress.setVisibility(View.GONE);
-//                            binding.ivDownloads.setVisibility(View.VISIBLE);
-//                            handler1.removeCallbacks(UpdateSongTime1);
-//                        } else {
-//                            binding.pbProgress.setProgress(downloadProgress1);
-//                            binding.pbProgress.setVisibility(View.VISIBLE);
-//                            binding.ivDownloads.setVisibility(View.GONE);
-//                        }
-//                    } else {
-//                        binding.pbProgress.setVisibility(View.GONE);
-//                        binding.ivDownloads.setVisibility(View.VISIBLE);
-//                        handler1.removeCallbacks(UpdateSongTime1);
-//                    }
-//                }
-//                getDownloadData();
-//                handler1.postDelayed(this, 500);
-//            }else {
-//                binding.pbProgress.setVisibility(View.GONE);
-//                binding.ivDownloads.setVisibility(View.VISIBLE);
-//                handler1.removeCallbacks(UpdateSongTime1);
-//                getDownloadData();
-//            }*/
-//            handler1.postDelayed(this, 500);
-//        }
-//    };
+    boolean Isclose = false;
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
@@ -480,17 +433,16 @@
     public void onResume() {
         super.onResume();
         addDisclaimer();
-
-        view.setFocusableInTouchMode(true);
-        view.requestFocus();
-        view.setOnKeyListener((v, keyCode, event) -> {
-            if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {
-                binding.searchView.clearFocus();
-                callBack();
-                return true;
-            }
-            return false;
-        });
+        if (binding.searchView.hasFocus()) {
+            binding.searchView.clearFocus();
+            Isclose = true;
+            new Handler().postDelayed(() -> {
+                Refresback(Isclose, 1);
+            }, 2 * 800);
+        } else if (!binding.searchView.hasFocus()) {
+            Isclose = true;
+            Refresback(Isclose, 0);
+        }
 
         if (deleteFrg == 1) {
             binding.searchView.clearFocus();
@@ -512,6 +464,18 @@
         }
     }
 
+    public void Refresback(boolean Isclose, int status) {
+        view.setFocusableInTouchMode(true);
+        view.requestFocus();
+        view.setOnKeyListener((v, keyCode, event) -> {
+            if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {
+                callBack();
+                return true;
+            }
+            return false;
+        });
+    }
+
     private void callBack() {
         if (MyPlaylistIds.equalsIgnoreCase("")) {
             if (comefrom_search == 2) {
@@ -2113,7 +2077,7 @@
         }
     }
 
-    public class PlayListsAdpater1 extends RecyclerView.Adapter<PlayListsAdpater1.MyViewHolder> implements Filterable/*, ItemMoveCallback.ItemTouchHelperContract */ {
+    public class PlayListsAdpater1 extends RecyclerView.Adapter<PlayListsAdpater1.MyViewHolder> implements Filterable/*, Playable, ItemMoveCallback.ItemTouchHelperContract */ {
         Context ctx;
         String UserID, Created, name, songId, songOldId;
         StartDragListener startDragListener;
@@ -2165,10 +2129,18 @@
                         /*if(isPause && ps == 0){
                             ps++;
                             notifyDataSetChanged();
-                        }else if(!isPause && nps == 0){
+                        } else if (!isPause && nps == 0) {
                             nps++;
                             notifyDataSetChanged();
                         }*/
+                        if (isPause) {
+                            holder.binding.equalizerview.stopBars();
+                            notifyDataSetChanged();
+                        } else if (!isPause) {
+                            holder.binding.equalizerview.animateBars();
+                            notifyDataSetChanged();
+                        }
+
                     } catch (Exception e) {
                         e.printStackTrace();
                     }
@@ -2455,118 +2427,6 @@
             return 0;
         }
 
-      /*  @Override
-        public void onRowMoved(int fromPosition, int toPosition) {
-            if (fromPosition < toPosition) {
-                for (int i = fromPosition; i < toPosition; i++) {
-                    Collections.swap(listModelList, i, i + 1);
-                }
-            } else {
-                for (int i = fromPosition; i > toPosition; i--) {
-                    Collections.swap(listModelList, i, i - 1);
-                }
-            }
-            changedAudio.clear();
-            for (int i = 0; i < listModelList.size(); i++) {
-                changedAudio.add(listModelList.get(i).getID());
-            }
-
-            callDragApi();
-
-            notifyItemMoved(fromPosition, toPosition);
-            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
-            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
-            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
-            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);
-            if (audioPlay) {
-                if (AudioFlag.equalsIgnoreCase("SubPlayList")) {
-                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, "0");
-                    if (pID.equalsIgnoreCase(PlaylistID)) {
-                        if (fromPosition == pos) {
-                            pos = toPosition;
-                            String one = "1";
-                            Log.e("one", one);
-                        }*//* else if (toPosition == pos) {
-                            if (action == 0) {
-                                pos = pos + 1;
-                            } else if (action == 1) {
-                                pos = pos - 1;
-                            }
-                        }*//* else if (fromPosition < pos && toPosition > pos) {
-                            pos = pos - 1;
-                            String one = "2";
-                            Log.e("one", one);
-                        } else if ((fromPosition > pos && toPosition > pos) || (fromPosition < pos && toPosition < pos)) {
-                            pos = pos;
-                            String one = "3";
-                            Log.e("one", one);
-                        } else if (fromPosition > pos && toPosition < pos) {
-                            pos = pos + 1;
-                            String one = "4";
-                            Log.e("one", one);
-                        } else if (fromPosition > pos && toPosition == pos) {
-                            pos = pos + 1;
-                            String one = "5";
-                            Log.e("one", one);
-                        } else if (fromPosition < pos && toPosition == pos) {
-                            pos = pos - 1;
-                            String one = "6";
-                            Log.e("one", one);
-                        }
-                        SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
-                        SharedPreferences.Editor editor = shareddd.edit();
-                        Gson gson = new Gson();
-                        String json = gson.toJson(listModelList);
-                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);
-                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);
-                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);
-                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
-                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);
-                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, "myPlaylist");
-                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, "SubPlayList");
-                        editor.commit();
-                        callAddTransFrag();
-                    }
-                }
-            }
-
-         *//* SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
-            SharedPreferences.Editor editor = shared.edit();
-            Gson gson = new Gson();
-            String json = gson.toJson(listModelList);
-            editor.putString(CONSTANTS.PREF_KEY_queueList, json);
-            editor.commit();*//*
-
-        }
-
-        private void callDragApi() {
-            if (BWSApplication.isNetworkConnected(getActivity())) {
-                Call<CardModel> listCall = APIClient.getClient().setShortedAudio(UserID, PlaylistID, TextUtils.join(",", changedAudio));
-                listCall.enqueue(new Callback<CardModel>() {
-                    @Override
-                    public void onResponse(Call<CardModel> call, Response<CardModel> response) {
-                        if (response.isSuccessful()) {
-                            CardModel listModel = response.body();
-                        }
-                    }
-
-                    @Override
-                    public void onFailure(Call<CardModel> call, Throwable t) {
-                    }
-                });
-            }
-        }
-
-        @Override
-        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) {
-
-        }
-
-        @Override
-        public void onRowClear(RecyclerView.ViewHolder myViewHolder) {
-
-        }*/
-
         @Override
         public int getItemViewType(int position) {
             return position;
@@ -2577,6 +2437,122 @@
             return position;
         }
 
+       /* @Override
+        public void onTrackPrevious() {
+            try {
+                startTime = getStartTime();
+                myProgress = currentDuration;
+                currentDuration = getStartTime();
+                if (currentDuration == 0 && isCompleteStop) {
+                    notifyDataSetChanged();
+                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+                } else if (currentDuration >= 1 && !isPause) {
+                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));
+                } else if (currentDuration >= 1 && isPause) {
+                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+                }
+                if (currentDuration <= 555) {
+                    notifyDataSetChanged();
+                }
+                        *//*if(isPause && ps == 0){
+                            ps++;
+                            notifyDataSetChanged();
+                        }else if(!isPause && nps == 0){
+                            nps++;
+                            notifyDataSetChanged();
+                        }*//*
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+
+        @Override
+        public void onTrackPlay() {
+            try {
+                startTime = getStartTime();
+                myProgress = currentDuration;
+                currentDuration = getStartTime();
+                if (currentDuration == 0 && isCompleteStop) {
+                    notifyDataSetChanged();
+                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+                } else if (currentDuration >= 1 && !isPause) {
+                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));
+                } else if (currentDuration >= 1 && isPause) {
+                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+                }
+                if (currentDuration <= 555) {
+                    notifyDataSetChanged();
+                }
+                        *//*if(isPause && ps == 0){
+                            ps++;
+                            notifyDataSetChanged();
+                        }else if(!isPause && nps == 0){
+                            nps++;
+                            notifyDataSetChanged();
+                        }*//*
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+
+        @Override
+        public void onTrackPause() {
+            try {
+                startTime = getStartTime();
+                myProgress = currentDuration;
+                currentDuration = getStartTime();
+                if (currentDuration == 0 && isCompleteStop) {
+                    notifyDataSetChanged();
+                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+                } else if (currentDuration >= 1 && !isPause) {
+                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));
+                } else if (currentDuration >= 1 && isPause) {
+                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+                }
+                if (currentDuration <= 555) {
+                    notifyDataSetChanged();
+                }
+                        *//*if(isPause && ps == 0){
+                            ps++;
+                            notifyDataSetChanged();
+                        }else if(!isPause && nps == 0){
+                            nps++;
+                            notifyDataSetChanged();
+                        }*//*
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+
+        @Override
+        public void onTrackNext() {
+            try {
+                startTime = getStartTime();
+                myProgress = currentDuration;
+                currentDuration = getStartTime();
+                if (currentDuration == 0 && isCompleteStop) {
+                    notifyDataSetChanged();
+                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+                } else if (currentDuration >= 1 && !isPause) {
+                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));
+                } else if (currentDuration >= 1 && isPause) {
+                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+                }
+                if (currentDuration <= 555) {
+                    notifyDataSetChanged();
+                }
+                        *//*if(isPause && ps == 0){
+                            ps++;
+                            notifyDataSetChanged();
+                        }else if(!isPause && nps == 0){
+                            nps++;
+                            notifyDataSetChanged();
+                        }*//*
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }*/
+
         @Override
         public Filter getFilter() {
             return new Filter() {
@@ -2626,7 +2602,7 @@
         }
     }
 
-    public class PlayListsAdpater2 extends RecyclerView.Adapter<PlayListsAdpater2.MyViewHolder2> implements Filterable {
+    public class PlayListsAdpater2 extends RecyclerView.Adapter<PlayListsAdpater2.MyViewHolder2> implements Filterable/*, Playable */ {
         Context ctx;
         String UserID, Created, songId;
         private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;
@@ -2668,25 +2644,17 @@
                         } else if (currentDuration >= 1 && isPause) {
                             binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
                         }
+
                         if (currentDuration <= 555) {
                             notifyDataSetChanged();
                         }
-
-                        /*if(isPause && ps == 0){
-                            ps++;
-                            aps = true;
-                            notifyDataSetChanged();
-                        }else if(!isPause && nps == 0){
-                            nps++;
-                            bps = true;
-                            notifyDataSetChanged();
-                        }*/
                     } catch (Exception e) {
                         e.printStackTrace();
                     }
                     handler3.postDelayed(this, 300);
                 }
             };
+
             searchEditText.setHint("Search for audios");
             binding.tvSearch.setHint("Search for audios");
 
@@ -2697,7 +2665,7 @@
             binding.searchView.setVisibility(View.VISIBLE);
             String id = mData.get(position).getID();
             MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,
-                    1, 1, 0.12f, 0);
+                    1, 1, 0.13f, 0);
             holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());
             holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());
             holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);
@@ -2709,9 +2677,7 @@
 
             Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)
                     .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);
-//            GetMedia(id, activity, mData.get(position).getDownload(), holder.binding.llDownload, holder.binding.ivDownloads);
-//            holder.binding.equalizerview.animateBars();
-//            holder.binding.equalizerview.stopBars();
+
             SharedPreferences sharedzw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
             boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
             AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
@@ -2728,14 +2694,6 @@
                         songId = myAudioId;
                         holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
                         holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);
-                        /*if(ps == 1 && aps){
-                            ps = 0;
-                            aps = false;
-                        }if(nps == 1 && bps){
-                            nps = 0;
-                            bps = false;
-                        }*/
-//            holder.binding.equalizerview.stopBars();
                     } else {
                         holder.binding.equalizerview.setVisibility(View.GONE);
                         holder.binding.llMainLayout.setBackgroundResource(R.color.white);
@@ -2760,12 +2718,6 @@
                         songId = myAudioId;
                         holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
                         holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);
-                        /*if(ps == 1){
-                            ps = 0;
-                        }if(nps == 1){
-                            nps = 0;
-                        }*/
-//            holder.binding.equalizerview.stopBars();
                     } else {
                         holder.binding.equalizerview.setVisibility(View.GONE);
                         holder.binding.llMainLayout.setBackgroundResource(R.color.white);
@@ -2837,6 +2789,7 @@
                 handler3.postDelayed(UpdateSongTime3, 500);
                 notifyDataSetChanged();
             });
+
             holder.binding.llMainLayout.setOnClickListener(view -> {
                 SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
                 boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
@@ -2889,52 +2842,49 @@
                 notifyDataSetChanged();
             });
 
-            binding.llDelete.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
-                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
-                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
-                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, "");
-                    if (audioPlay && AudioFlag.equalsIgnoreCase("Downloadlist") && pID.equalsIgnoreCase(PlaylistName)) {
-                        BWSApplication.showToast("Currently this playlist is in player,so you can't delete this playlist as of now", ctx);
-                    } else {
-                        final Dialog dialog = new Dialog(ctx);
-                        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
-                        dialog.setContentView(R.layout.logout_layout);
-                        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));
-                        dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+            binding.llDelete.setOnClickListener(v -> {
+                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
+                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
+                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
+                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, "");
+                if (audioPlay && AudioFlag.equalsIgnoreCase("Downloadlist") && pID.equalsIgnoreCase(PlaylistName)) {
+                    BWSApplication.showToast("Currently this playlist is in player,so you can't delete this playlist as of now", ctx);
+                } else {
+                    final Dialog dialog = new Dialog(ctx);
+                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
+                    dialog.setContentView(R.layout.logout_layout);
+                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));
+                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
 
-                        final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);
-                        final TextView tvHeader = dialog.findViewById(R.id.tvHeader);
-                        final TextView tvTitle = dialog.findViewById(R.id.tvTitle);
-                        final Button Btn = dialog.findViewById(R.id.Btn);
-                        tvTitle.setText("Remove playlist");
-                        tvHeader.setText("Are you sure you want to remove the " + PlaylistName + " from downloads??");
-                        Btn.setText("Confirm");
-                        dialog.setOnKeyListener((vi, keyCode, event) -> {
-                            if (keyCode == KeyEvent.KEYCODE_BACK) {
-                                dialog.dismiss();
-                            }
-                            return false;
-                        });
+                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);
+                    final TextView tvHeader = dialog.findViewById(R.id.tvHeader);
+                    final TextView tvTitle = dialog.findViewById(R.id.tvTitle);
+                    final Button Btn = dialog.findViewById(R.id.Btn);
+                    tvTitle.setText("Remove playlist");
+                    tvHeader.setText("Are you sure you want to remove the " + PlaylistName + " from downloads??");
+                    Btn.setText("Confirm");
+                    dialog.setOnKeyListener((vi, keyCode, event) -> {
+                        if (keyCode == KeyEvent.KEYCODE_BACK) {
+                            dialog.dismiss();
+                        }
+                        return false;
+                    });
 
-                        Btn.setOnClickListener(views -> {
-                            getDeleteDownloadData();
-                            playlistWiseAudiosDetails = GetPlaylistMedia(PlaylistID);
-                            dialog.dismiss();
-                            Fragment fragment = new PlaylistFragment();
-                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();
-                            fragmentManager1.beginTransaction()
-                                    .replace(R.id.flContainer, fragment)
-                                    .commit();
-                        });
+                    Btn.setOnClickListener(views -> {
+                        getDeleteDownloadData();
+                        playlistWiseAudiosDetails = GetPlaylistMedia(PlaylistID);
+                        dialog.dismiss();
+                        Fragment fragment = new PlaylistFragment();
+                        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();
+                        fragmentManager1.beginTransaction()
+                                .replace(R.id.flContainer, fragment)
+                                .commit();
+                    });
 
-                        tvGoBack.setOnClickListener(viewd -> dialog.dismiss());
-                        dialog.show();
-                        dialog.setCancelable(false);
+                    tvGoBack.setOnClickListener(viewd -> dialog.dismiss());
+                    dialog.show();
+                    dialog.setCancelable(false);
 
-                    }
                 }
             });
 
@@ -2947,6 +2897,7 @@
                 holder.binding.llMore.setEnabled(false);
                 holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);
             }
+
             holder.binding.llMore.setOnClickListener(view -> {
                 SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
                 boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
@@ -2983,6 +2934,78 @@
             return listFilterData.size();
         }
 
+/*        @Override
+        public void onTrackPrevious() {
+            startTime = getStartTime();
+            myProgress = currentDuration;
+            currentDuration = getStartTime();
+            if (currentDuration == 0 && isCompleteStop) {
+                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+                notifyDataSetChanged();
+            } else if (currentDuration >= 1 && !isPause) {
+                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));
+            } else if (currentDuration >= 1 && isPause) {
+                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+            }
+            if (currentDuration <= 555) {
+                notifyDataSetChanged();
+            }
+        }
+
+        @Override
+        public void onTrackPlay() {
+            startTime = getStartTime();
+            myProgress = currentDuration;
+            currentDuration = getStartTime();
+            if (currentDuration == 0 && isCompleteStop) {
+                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+                notifyDataSetChanged();
+            } else if (currentDuration >= 1 && !isPause) {
+                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));
+            } else if (currentDuration >= 1 && isPause) {
+                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+            }
+            if (currentDuration <= 555) {
+                notifyDataSetChanged();
+            }
+        }
+
+        @Override
+        public void onTrackPause() {
+            startTime = getStartTime();
+            myProgress = currentDuration;
+            currentDuration = getStartTime();
+            if (currentDuration == 0 && isCompleteStop) {
+                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+                notifyDataSetChanged();
+            } else if (currentDuration >= 1 && !isPause) {
+                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));
+            } else if (currentDuration >= 1 && isPause) {
+                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+            }
+            if (currentDuration <= 555) {
+                notifyDataSetChanged();
+            }
+        }
+
+        @Override
+        public void onTrackNext() {
+            startTime = getStartTime();
+            myProgress = currentDuration;
+            currentDuration = getStartTime();
+            if (currentDuration == 0 && isCompleteStop) {
+                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+                notifyDataSetChanged();
+            } else if (currentDuration >= 1 && !isPause) {
+                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));
+            } else if (currentDuration >= 1 && isPause) {
+                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
+            }
+            if (currentDuration <= 555) {
+                notifyDataSetChanged();
+            }
+        }*/
+
         @Override
         public Filter getFilter() {
             return new Filter() {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/AudioFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio;\r\n\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.DownloadAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.LibraryAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.PopularPlayedAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.RecentlyPlayedAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.RecommendedAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Audio.Adapters.TopCategoriesAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.UnlockAudioList;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.SplashModule.SplashScreenActivity;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.FragmentAudioBinding;\r\nimport com.brainwellnessspa.databinding.MainAudioLayoutBinding;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.TimeZone;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.ViewAllAudioFragment.viewallAudio;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.isDownloading;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class AudioFragment extends Fragment {\r\n    public static boolean exit = false;\r\n    public static String IsLock = \"0\";\r\n    FragmentAudioBinding binding;\r\n    String UserID, AudioFlag, expDate;\r\n    List<String> fileNameList;\r\n    List<String> audioFile, playlistDownloadId;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_audio, container, false);\r\n        View view = binding.getRoot();\r\n        viewallAudio = false;\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        ComeScreenAccount = 0;\r\n        comefromDownload = \"0\";\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n        if (!isDownloading) {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n                String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n                String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type = new TypeToken<List<String>>() {\r\n                    }.getType();\r\n                    fileNameList = gson.fromJson(json, type);\r\n                    audioFile = gson.fromJson(json1, type);\r\n\r\n            /*if(json2.equalsIgnoreCase(String.valueOf(gson))){\r\n                playlistDownloadId = new ArrayList<>();\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                String playlistIdJson = gson.toJson(playlistDownloadId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                SharedPreferences sharedy = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n                json2 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            }*/\r\n                    playlistDownloadId = gson.fromJson(json2, type);\r\n                    if (fileNameList.size() != 0) {\r\n                        DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                        downloadMedia.encrypt1(audioFile, fileNameList, playlistDownloadId/*, playlistSongs*/);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        prepareData();\r\n        return view;\r\n    }\r\n\r\n    public void GetAllMedia(FragmentActivity ctx, List<MainAudioModel.ResponseData> listModel) {\r\n        ArrayList<MainAudioModel.ResponseData.Detail> details = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData(\"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadAudioDetailsList.size() != 0) {\r\n                    for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                        MainAudioModel.ResponseData.Detail detail = new MainAudioModel.ResponseData.Detail();\r\n                        detail.setID(downloadAudioDetailsList.get(i).getID());\r\n                        detail.setName(downloadAudioDetailsList.get(i).getName());\r\n                        detail.setAudioFile(downloadAudioDetailsList.get(i).getAudioFile());\r\n                        detail.setAudioDirection(downloadAudioDetailsList.get(i).getAudioDirection());\r\n                        detail.setAudiomastercat(downloadAudioDetailsList.get(i).getAudiomastercat());\r\n                        detail.setAudioSubCategory(downloadAudioDetailsList.get(i).getAudioSubCategory());\r\n                        detail.setImageFile(downloadAudioDetailsList.get(i).getImageFile());\r\n                        detail.setLike(downloadAudioDetailsList.get(i).getLike());\r\n                        detail.setDownload(downloadAudioDetailsList.get(i).getDownload());\r\n                        detail.setAudioDuration(downloadAudioDetailsList.get(i).getAudioDuration());\r\n                        details.add(detail);\r\n                    }\r\n                    for (int i = 0; i < listModel.size(); i++) {\r\n                        if (listModel.get(i).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                            listModel.get(i).setDetails(details);\r\n                        }\r\n                    }\r\n                    MainAudioListAdapter adapter = new MainAudioListAdapter(listModel, getActivity());\r\n                    RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n                    binding.rvMainAudioList.setLayoutManager(manager);\r\n                    binding.rvMainAudioList.setItemAnimator(new DefaultItemAnimator());\r\n                    binding.rvMainAudioList.setAdapter(adapter);\r\n                } else {\r\n                    MainAudioListAdapter adapter = new MainAudioListAdapter(listModel, getActivity());\r\n                    RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n                    binding.rvMainAudioList.setLayoutManager(manager);\r\n                    binding.rvMainAudioList.setItemAnimator(new DefaultItemAnimator());\r\n                    binding.rvMainAudioList.setAdapter(adapter);\r\n                }\r\n                /*if (downloadAudioDetailsList.size() != 0) {\r\n                    MainAudioListAdapter1 adapter1 = new MainAudioListAdapter1(getActivity(),listModel);\r\n                    RecyclerView.LayoutManager manager1 = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    binding.rvMainAudioList.setLayoutManager(manager1);\r\n                    binding.rvMainAudioList.setItemAnimator(new DefaultItemAnimator());\r\n                    binding.rvMainAudioList.setAdapter(adapter1);\r\n                } else {\r\n                    binding.rvMainAudioList.setVisibility(View.GONE);\r\n                }*/\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n    }\r\n\r\n    private void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<MainAudioModel> listCall = APIClient.getClient().getMainAudioLists(UserID);\r\n            listCall.enqueue(new Callback<MainAudioModel>() {\r\n                @Override\r\n                public void onResponse(Call<MainAudioModel> call, Response<MainAudioModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        MainAudioModel listModel = response.body();\r\n                        try {\r\n                            IsLock = listModel.getResponseData().get(0).getIsLock();\r\n                            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n                            SharedPreferences.Editor editor = shared.edit();\r\n                            editor.putString(CONSTANTS.PREF_KEY_ExpDate, listModel.getResponseData().get(0).getExpireDate());\r\n                            editor.putString(CONSTANTS.PREF_KEY_IsLock, listModel.getResponseData().get(0).getIsLock());\r\n                            editor.commit();\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n                        GetAllMedia(getActivity(), listModel.getResponseData());\r\n                    } else {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<MainAudioModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Call<UnlockAudioList> listCall1 = APIClient.getClient().getUnLockAudioList(UserID);\r\n                listCall1.enqueue(new Callback<UnlockAudioList>() {\r\n                    @Override\r\n                    public void onResponse(Call<UnlockAudioList> call, Response<UnlockAudioList> response) {\r\n                        if (response.isSuccessful()) {\r\n                            UnlockAudioList listModel = response.body();\r\n                            try {\r\n                                IsLock = listModel.getResponseData().getIsLock();\r\n                                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n                                SharedPreferences.Editor editor = shared.edit();\r\n                                ;\r\n                                editor.putString(CONSTANTS.PREF_KEY_IsLock, listModel.getResponseData().getIsLock());\r\n                                Gson gson = new Gson();\r\n                                editor.putString(CONSTANTS.PREF_KEY_UnLockAudiList, gson.toJson(listModel.getResponseData().getID()));\r\n                                editor.commit();\r\n                            } catch (Exception e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<UnlockAudioList> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            expDate = (shared1.getString(CONSTANTS.PREF_KEY_ExpDate, \"\"));\r\n//            expDate = \"2020-09-29 06:34:10\";\r\n            Log.e(\"Exp Date !!!!\", expDate);\r\n            SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n            Date Expdate = new Date();\r\n            try {\r\n                Expdate = format.parse(expDate);\r\n                Log.e(\"Exp Date Expdate!!!!\", String.valueOf(Expdate));\r\n            } catch (ParseException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n            simpleDateFormat1.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n            Date currdate = Calendar.getInstance().getTime();\r\n            Date currdate1 = new Date();\r\n            String currantDateTime = simpleDateFormat1.format(currdate);\r\n            try {\r\n                currdate1 = format.parse(currantDateTime);\r\n                Log.e(\"currant currdate !!!!\", String.valueOf(currdate1));\r\n            } catch (ParseException e) {\r\n                e.printStackTrace();\r\n            }\r\n            Log.e(\"currant Date !!!!\", currantDateTime);\r\n            if (Expdate.before(currdate1)) {\r\n                Log.e(\"app\", \"Date1 is before Date2\");\r\n                IsLock = \"1\";\r\n            } else if (Expdate.after(currdate1)) {\r\n                Log.e(\"app\", \"Date1 is after Date2\");\r\n                IsLock = \"0\";\r\n            } else if (Expdate == currdate1) {\r\n                Log.e(\"app\", \"Date1 is equal Date2\");\r\n                IsLock = \"1\";\r\n            }\r\n            ArrayList<MainAudioModel.ResponseData> responseData = new ArrayList<>();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> details = new ArrayList<>();\r\n            MainAudioModel.ResponseData listModel = new MainAudioModel.ResponseData();\r\n            listModel.setHomeID(\"1\");\r\n            listModel.setDetails(details);/*\r\n            \"UserID\": \"2\",\r\n            \"IsLock\": \"0\",*/\r\n            listModel.setView(\"My Downloads\");\r\n            listModel.setHomeID(\"1\");\r\n            listModel.setUserID(UserID);\r\n            listModel.setIsLock(IsLock);\r\n            responseData.add(listModel);\r\n            GetAllMedia(getActivity(), responseData);\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n        try {\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n            SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n\r\n                } else {\r\n                    SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if (isMediaStart) {\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if (isMediaStart) {\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(0, 6, 0, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(0, 6, 0, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        ComeScreenAccount = 0;\r\n        comefromDownload = \"0\";\r\n        prepareData();\r\n//        BWSApplication.getLatasteUpdate(getActivity());\r\n    }\r\n\r\n    public class MainAudioListAdapter extends RecyclerView.Adapter<MainAudioListAdapter.MyViewHolder> {\r\n        FragmentActivity activity;\r\n        private List<MainAudioModel.ResponseData> listModelList;\r\n\r\n        public MainAudioListAdapter(List<MainAudioModel.ResponseData> listModelList, FragmentActivity activity) {\r\n            this.listModelList = listModelList;\r\n            this.activity = activity;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MainAudioLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.main_audio_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvViewAll.setOnClickListener(view -> {\r\n                Fragment viewAllAudioFragment = new ViewAllAudioFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, viewAllAudioFragment)\r\n                        .commit();\r\n                Bundle bundle = new Bundle();\r\n                bundle.putString(\"ID\", listModelList.get(position).getHomeID());\r\n                bundle.putString(\"Name\", listModelList.get(position).getView());\r\n                bundle.putString(\"Category\", \"\");\r\n                viewAllAudioFragment.setArguments(bundle);\r\n            });\r\n\r\n            if (listModelList.get(position).getDetails().size() == 0) {\r\n                holder.binding.llMainLayout.setVisibility(View.GONE);\r\n            } else {\r\n                holder.binding.llMainLayout.setVisibility(View.VISIBLE);\r\n                holder.binding.tvTitle.setText(listModelList.get(position).getView());\r\n                if (listModelList.get(position).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                    DownloadAdapter myDownloadsAdapter = new DownloadAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock());\r\n                    IsLock = listModelList.get(position).getIsLock();\r\n                    RecyclerView.LayoutManager myDownloads = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(myDownloads);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(myDownloadsAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 4) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.Library))) {\r\n                    LibraryAdapter recommendedAdapter = new LibraryAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock(), listModelList.get(position).getView());\r\n                    IsLock = listModelList.get(position).getIsLock();\r\n                    RecyclerView.LayoutManager recommended = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(recommended);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(recommendedAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 4) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.my_like))) {\r\n                    holder.binding.llMainLayout.setVisibility(View.GONE);\r\n                    /*RecentlyPlayedAdapter recentlyPlayedAdapter = new RecentlyPlayedAdapter(listModelList.get(position).getDetails(), getActivity());\r\n                    RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(recentlyPlayed);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(recentlyPlayedAdapter);*/\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.recently_played))) {\r\n                    RecentlyPlayedAdapter recentlyPlayedAdapter = new RecentlyPlayedAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock(), listModelList.get(position).getView());\r\n                    RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(recentlyPlayed);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(recentlyPlayedAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 6) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.get_inspired))) {\r\n                    RecommendedAdapter inspiredAdapter = new RecommendedAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock(), listModelList.get(position).getView());\r\n                    RecyclerView.LayoutManager inspired = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(inspired);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(inspiredAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 4) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.popular))) {\r\n                    PopularPlayedAdapter popularPlayedAdapter = new PopularPlayedAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getIsLock(), listModelList.get(position).getView());\r\n                    RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(recentlyPlayed);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(popularPlayedAdapter);\r\n                    if (listModelList.get(position).getDetails() != null &&\r\n                            listModelList.get(position).getDetails().size() > 6) {\r\n                        holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    }\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.top_categories))) {\r\n                    holder.binding.tvViewAll.setVisibility(View.GONE);\r\n                    TopCategoriesAdapter topCategoriesAdapter = new TopCategoriesAdapter(listModelList.get(position).getDetails(), getActivity(), activity,\r\n                            listModelList.get(position).getHomeID(), listModelList.get(position).getView());\r\n                    RecyclerView.LayoutManager topCategories = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n                    holder.binding.rvMainAudio.setLayoutManager(topCategories);\r\n                    holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n                    holder.binding.rvMainAudio.setAdapter(topCategoriesAdapter);\r\n                }\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MainAudioLayoutBinding binding;\r\n\r\n            public MyViewHolder(MainAudioLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/AudioFragment.java	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/AudioFragment.java	(date 1605711637785)
@@ -228,7 +228,6 @@
                                 IsLock = listModel.getResponseData().getIsLock();
                                 SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);
                                 SharedPreferences.Editor editor = shared.edit();
-                                ;
                                 editor.putString(CONSTANTS.PREF_KEY_IsLock, listModel.getResponseData().getIsLock());
                                 Gson gson = new Gson();
                                 editor.putString(CONSTANTS.PREF_KEY_UnLockAudiList, gson.toJson(listModel.getResponseData().getID()));
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleHome\" value=\"$USER_HOME$/.gradle/gradle-3.3-bin\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ .idea/gradle.xml	(date 1605711637796)
@@ -16,6 +16,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Appointment/AppointmentDetails/AptAudioFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Appointment.AppointmentDetails;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.AudioAptListLayoutBinding;\r\nimport com.brainwellnessspa.databinding.FragmentAptAudioBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.myAudioId;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadProgress;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\n\r\npublic class AptAudioFragment extends Fragment {\r\n    public FragmentManager f_manager;\r\n    FragmentAptAudioBinding binding;\r\n    String UserID, AudioFlag;\r\n    ArrayList<AppointmentDetailModel.Audio> appointmentDetail;\r\n    List<DownloadAudioDetails> oneAudioDetailsList;\r\n    public static int comeRefreshData = 0;\r\n    private Handler handler1;\r\n    Handler handler3;\r\n    int startTime;\r\n    private long currentDuration = 0;\r\n    long myProgress = 0;\r\n    private Runnable UpdateSongTime3;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_apt_audio, container, false);\r\n        View view = binding.getRoot();\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        handler1 = new Handler();\r\n        handler3 = new Handler();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        appointmentDetail = new ArrayList<>();\r\n        if (getArguments() != null) {\r\n            appointmentDetail = getArguments().getParcelableArrayList(\"AppointmentDetailList\");\r\n        }\r\n        if (appointmentDetail.size() == 0) {\r\n        } else {\r\n            AudioListAdapter appointmentsAdapter = new AudioListAdapter(appointmentDetail, getActivity(), f_manager);\r\n            RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n            binding.rvAudioList.setLayoutManager(recentlyPlayed);\r\n            binding.rvAudioList.setItemAnimator(new DefaultItemAnimator());\r\n            binding.rvAudioList.setAdapter(appointmentsAdapter);\r\n        }\r\n        return view;\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onPause() {\r\n        handler3.removeCallbacks(UpdateSongTime3);\r\n        super.onPause();\r\n    }\r\n\r\n    public void GetMedia(String AudioFile, Context ctx, String download, RelativeLayout llDownload, ImageView ivDownload) {\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(AudioFile);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                        disableDownload(llDownload, ivDownload);\r\n                    }\r\n                } else if (download.equalsIgnoreCase(\"1\")) {\r\n                    disableDownload(llDownload, ivDownload);\r\n                } else {\r\n                    enableDownload(llDownload, ivDownload);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public class AudioListAdapter extends RecyclerView.Adapter<AudioListAdapter.MyViewHolder> {\r\n        public FragmentManager f_manager;\r\n        Context ctx;\r\n        String Name, songId;\r\n        List<String> fileNameList = new ArrayList<>(), playlistDownloadId = new ArrayList<>();\r\n        int ps = 0, nps = 0;\r\n        private ArrayList<AppointmentDetailModel.Audio> listModelList;\r\n        Runnable UpdateSongTime1;\r\n\r\n        public AudioListAdapter(ArrayList<AppointmentDetailModel.Audio> listModelList, Context ctx, FragmentManager f_manager) {\r\n            this.listModelList = listModelList;\r\n            this.ctx = ctx;\r\n            this.f_manager = f_manager;\r\n            SharedPreferences sharedx = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(json, type);\r\n            }\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            AudioAptListLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.audio_apt_list_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            AppointmentDetailModel.Audio audiolist = listModelList.get(position);\r\n            UpdateSongTime1 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    for (int f = 0; f < listModelList.size(); f++) {\r\n                        if (fileNameList.size() != 0) {\r\n                            for (int i = 0; i < fileNameList.size(); i++) {\r\n                                if (fileNameList.get(i).equalsIgnoreCase(listModelList.get(f).getName())) {\r\n                                    if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(listModelList.get(f).getName())) {\r\n                                        if (downloadProgress <= 100) {\r\n                                            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                                notifyItemChanged(f);\r\n                                            }\r\n                                         /*   holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.GONE);*/\r\n                                        } else {\r\n                                            holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                            //                                            handler2.removeCallbacks(UpdateSongTime2);\r\n                                            getDownloadData();\r\n                                        }\r\n                                    } else {\r\n                                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                            notifyItemChanged(f);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (downloadProgress == 0) {\r\n                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                            notifyDataSetChanged();\r\n                        }\r\n                        getDownloadData();\r\n                    }\r\n                    handler1.postDelayed(this, 300);\r\n                }\r\n            };\r\n            UpdateSongTime3 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n                        startTime = getStartTime();\r\n                        myProgress = currentDuration;\r\n                        currentDuration = getStartTime();\r\n                        if (currentDuration == 0 && isCompleteStop) {\r\n                            notifyDataSetChanged();\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        } else if (currentDuration >= 1 && !isPause) {\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                        } else if (currentDuration >= 1 && isPause) {\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        }\r\n\r\n                        if(currentDuration <= 555){\r\n                            notifyDataSetChanged();\r\n                        }\r\n                        /*if(isPause && ps == 0){\r\n                            ps++;\r\n                            notifyDataSetChanged();\r\n                        }else if(!isPause && nps == 0){\r\n                            nps++;\r\n                            notifyDataSetChanged();\r\n                        }*/\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    handler3.postDelayed(this, 500);\r\n                }\r\n            };\r\n            SharedPreferences sharedzw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            if (audioPlayz && AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                if (myAudioId.equalsIgnoreCase(audiolist.getID())) {\r\n                    songId = myAudioId;\r\n                    holder.binding.equalizerview.animateBars();\r\n                    holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n//            holder.binding.equalizerview.stopBars();\r\n//                        ps =0;\r\n//                        nps = 0;\r\n                } else {\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                }\r\n                handler3.postDelayed(UpdateSongTime3, 500);\r\n            } else {\r\n                holder.binding.equalizerview.setVisibility(View.GONE);\r\n                holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                handler3.removeCallbacks(UpdateSongTime3);\r\n            }\r\n            holder.binding.tvTitle.setText(audiolist.getName());\r\n            if (audiolist.getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                holder.binding.tvTime.setVisibility(View.GONE);\r\n            } else {\r\n                holder.binding.tvTime.setVisibility(View.VISIBLE);\r\n                holder.binding.tvTime.setText(audiolist.getAudioDirection());\r\n            }\r\n            if (fileNameList.size() != 0) {\r\n             /*   for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                        isDownloading++;\r\n                        break;\r\n                    }else{\r\n                        holder.binding.pbProgress.setVisibility(View.GONE);\r\n                    }\r\n                }*/\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(listModelList.get(position).getName())) {\r\n                        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(listModelList.get(position).getName())) {\r\n                            if (downloadProgress <= 100) {\r\n                                if (downloadProgress == 100) {\r\n                                    holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                    holder.binding.ivDownload.setVisibility(View.VISIBLE);\r\n                                } else {\r\n                                    holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                    holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                    holder.binding.ivDownload.setVisibility(View.GONE);\r\n                                }\r\n                            } else {\r\n                                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                holder.binding.ivDownload.setVisibility(View.VISIBLE);\r\n//                                handler2.removeCallbacks(UpdateSongTime2);\r\n                            }\r\n                        } else {\r\n                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivDownload.setVisibility(View.GONE);\r\n                            handler1.postDelayed(UpdateSongTime1, 200);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                holder.binding.ivDownload.setVisibility(View.VISIBLE);\r\n            }\r\n            GetMedia(audiolist.getAudioFile(), getActivity(), audiolist.getDownload(), holder.binding.llDownload, holder.binding.ivDownload);\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.13f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            holder.binding.ivBackgroundImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n//            holder.binding.ivBackgroundImaged.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n//            holder.binding.ivBackgroundImaged.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n//            holder.binding.ivBackgroundImaged.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(getActivity()).load(audiolist.getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                if (queuePlay) {\r\n                    int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                    Gson gson = new Gson();\r\n                    String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                    if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                        Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                        }.getType();\r\n                        addToQueueModelList = gson.fromJson(json1, type1);\r\n                    }\r\n                    addToQueueModelList.remove(position1);\r\n                    SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared2.edit();\r\n                    String json = gson.toJson(addToQueueModelList);\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                    editor.commit();\r\n\r\n                }\r\n                comeRefreshData = 1;\r\n                try {\r\n                    player = 1;\r\n                    if (isPrepare || isMediaStart || isPause) {\r\n                        stopMedia();\r\n                    }\r\n                    isPause = false;\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                    isCompleteStop = false;\r\n\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n\r\n                    SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared.edit();\r\n                    Gson gson = new Gson();\r\n                    ArrayList<AppointmentDetailModel.Audio> listModelList2 = new ArrayList<>();\r\n                    AppointmentDetailModel.Audio mainPlayModel = new AppointmentDetailModel.Audio();\r\n                    mainPlayModel.setID(\"0\");\r\n                    mainPlayModel.setName(\"Disclaimer\");\r\n                    mainPlayModel.setAudioFile(\"\");\r\n                    mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                    mainPlayModel.setAudiomastercat(\"\");\r\n                    mainPlayModel.setAudioSubCategory(\"\");\r\n                    mainPlayModel.setImageFile(\"\");\r\n                    mainPlayModel.setLike(\"\");\r\n                    mainPlayModel.setDownload(\"\");\r\n                    mainPlayModel.setAudioDuration(\"00:48\");\r\n                    listModelList2.add(mainPlayModel);\r\n                    listModelList2.add(listModelList.get(position));\r\n\r\n                    String json = gson.toJson(listModelList2);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"AppointmentDetailList\");\r\n                    editor.commit();\r\n\r\n                    handler3.postDelayed(UpdateSongTime3, 500);\r\n                    notifyDataSetChanged();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            });\r\n\r\n            holder.binding.llDownload.setOnClickListener(view -> {\r\n                List<String> url1 = new ArrayList<>();\r\n                List<String> name1 = new ArrayList<>();\r\n                List<String> downloadPlaylistId = new ArrayList<>();\r\n                SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                Gson gson1 = new Gson();\r\n                String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n                String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n                String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                    Type type = new TypeToken<List<String>>() {\r\n                    }.getType();\r\n                    List<String> fileNameList = gson1.fromJson(json, type);\r\n                    List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                    List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                    if (fileNameList.size() != 0) {\r\n                        url1.addAll(audioFile1);\r\n                        name1.addAll(fileNameList);\r\n                        downloadPlaylistId.addAll(playlistId1);\r\n                    }\r\n                }\r\n                Name = listModelList.get(position).getName();\r\n                String audioFile = listModelList.get(position).getAudioFile();\r\n                url1.add(audioFile);\r\n                name1.add(Name);\r\n                downloadPlaylistId.add(\"\");\r\n                if (url1.size() != 0) {\r\n                    SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared.edit();\r\n                    Gson gson = new Gson();\r\n                    String urlJson = gson.toJson(url1);\r\n                    String nameJson = gson.toJson(name1);\r\n                    String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                    editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                    editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                    editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                    editor.commit();\r\n                }\r\n                DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                downloadMedia.encrypt1(url1, name1, downloadPlaylistId);\r\n                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                holder.binding.ivDownload.setVisibility(View.GONE);\r\n                fileNameList = url1;\r\n                handler1.postDelayed(UpdateSongTime1, 500);\r\n                String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n                SaveMedia(new byte[1024], dirPath, listModelList.get(position), holder.binding.llDownload);\r\n            });\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        ctx.startActivity(i);\r\n                    } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"0\") ||\r\n                            listModelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                        i.putExtra(\"AudioId\", listModelList.get(position).getID());\r\n                        i.putExtra(\"PlaylistID\", \"\");\r\n                        startActivity(i);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        private void getDownloadData() {\r\n            try {\r\n                SharedPreferences sharedy = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n                String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n                if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type = new TypeToken<List<String>>() {\r\n                    }.getType();\r\n                    fileNameList = gson.fromJson(jsony, type);\r\n                    playlistDownloadId = gson.fromJson(jsonq, type);\r\n                    if (fileNameList.size() != 0) {\r\n                        handler1.postDelayed(UpdateSongTime1, 500);\r\n                    } else {\r\n                        fileNameList = new ArrayList<>();\r\n                        playlistDownloadId = new ArrayList<>();\r\n                    }\r\n                } else {\r\n                    fileNameList = new ArrayList<>();\r\n                    playlistDownloadId = new ArrayList<>();\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        private void SaveMedia(byte[] encodeBytes, String dirPath, AppointmentDetailModel.Audio audio, RelativeLayout llDownload) {\r\n            class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n                @Override\r\n                protected Void doInBackground(Void... voids) {\r\n                    DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                    downloadAudioDetails.setID(audio.getID());\r\n                    downloadAudioDetails.setName(audio.getName());\r\n                    downloadAudioDetails.setAudioFile(audio.getAudioFile());\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                    downloadAudioDetails.setAudioDirection(audio.getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(audio.getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(audio.getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(audio.getImageFile());\r\n                    downloadAudioDetails.setLike(audio.getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(audio.getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n\r\n                    SharedPreferences sharedx1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    String AudioFlag = sharedx1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    boolean audioPlay = sharedx1.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    Gson gsonx = new Gson();\r\n                    String json11 = sharedx1.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                    String jsonw = sharedx1.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gsonx));\r\n                    Type type1 = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n                    }.getType();\r\n                    Gson gson1 = new Gson();\r\n                    ArrayList<DownloadAudioDetails> arrayList = gson1.fromJson(jsonw, type1);\r\n                    ArrayList<MainPlayModel> arrayList2 = gson1.fromJson(json11, type1);\r\n                    int position = sharedx1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n                        arrayList.add(downloadAudioDetails);\r\n                        MainPlayModel mainPlayModel1 = new MainPlayModel();\r\n                        mainPlayModel1.setID(downloadAudioDetails.getID());\r\n                        mainPlayModel1.setName(downloadAudioDetails.getName());\r\n                        mainPlayModel1.setAudioFile(downloadAudioDetails.getAudioFile());\r\n                        mainPlayModel1.setAudioDirection(downloadAudioDetails.getAudioDirection());\r\n                        mainPlayModel1.setAudiomastercat(downloadAudioDetails.getAudiomastercat());\r\n                        mainPlayModel1.setAudioSubCategory(downloadAudioDetails.getAudioSubCategory());\r\n                        mainPlayModel1.setImageFile(downloadAudioDetails.getImageFile());\r\n                        mainPlayModel1.setLike(downloadAudioDetails.getLike());\r\n                        mainPlayModel1.setDownload(downloadAudioDetails.getDownload());\r\n                        mainPlayModel1.setAudioDuration(downloadAudioDetails.getAudioDuration());\r\n                        arrayList2.add(mainPlayModel1);\r\n                    }\r\n                    SharedPreferences sharedd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = sharedd.edit();\r\n                    Gson gson = new Gson();\r\n                    String jsonx = gson.toJson(arrayList2);\r\n                    String json1q1 = gson.toJson(arrayList);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json1q1);\r\n                    editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"DownloadListAudio\");\r\n                    editor.commit();\r\n                    DatabaseClient.getInstance(getActivity().getApplicationContext())\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .insertMedia(downloadAudioDetails);\r\n                    return null;\r\n                }\r\n\r\n                @Override\r\n                protected void onPostExecute(Void aVoid) {\r\n                    llDownload.setClickable(false);\r\n                    llDownload.setEnabled(false);\r\n                    super.onPostExecute(aVoid);\r\n                }\r\n            }\r\n            SaveMedia st = new SaveMedia();\r\n            st.execute();\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            AudioAptListLayoutBinding binding;\r\n\r\n            public MyViewHolder(AudioAptListLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void enableDownload(RelativeLayout llDownload, ImageView ivDownload) {\r\n        llDownload.setClickable(true);\r\n        llDownload.setEnabled(true);\r\n        ivDownload.setColorFilter(getActivity().getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n        ivDownload.setImageResource(R.drawable.ic_download_white_icon);\r\n    }\r\n\r\n    private void disableDownload(RelativeLayout llDownload, ImageView ivDownload) {\r\n        ivDownload.setImageResource(R.drawable.ic_download_white_icon);\r\n        ivDownload.setColorFilter(getActivity().getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        llDownload.setClickable(false);\r\n        llDownload.setEnabled(false);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Appointment/AppointmentDetails/AptAudioFragment.java	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Appointment/AppointmentDetails/AptAudioFragment.java	(date 1605711637828)
@@ -208,6 +208,7 @@
                     handler1.postDelayed(this, 300);
                 }
             };
+
             UpdateSongTime3 = new Runnable() {
                 @Override
                 public void run() {
@@ -247,24 +248,27 @@
             if (audioPlayz && AudioFlag.equalsIgnoreCase("AppointmentDetailList")) {
                 if (myAudioId.equalsIgnoreCase(audiolist.getID())) {
                     songId = myAudioId;
-                    holder.binding.equalizerview.animateBars();
+                    if (isPause) {
+                        holder.binding.equalizerview.stopBars();
+                    } else
+                        holder.binding.equalizerview.animateBars();
                     holder.binding.equalizerview.setVisibility(View.VISIBLE);
+                    holder.binding.ivPlayIcon.setVisibility(View.GONE);
                     holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);
                     holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
                     holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);
-//            holder.binding.equalizerview.stopBars();
-//                        ps =0;
-//                        nps = 0;
                 } else {
                     holder.binding.equalizerview.setVisibility(View.GONE);
+                    holder.binding.ivPlayIcon.setVisibility(View.VISIBLE);
                     holder.binding.llMainLayout.setBackgroundResource(R.color.white);
-                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);
+                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
                 }
                 handler3.postDelayed(UpdateSongTime3, 500);
             } else {
                 holder.binding.equalizerview.setVisibility(View.GONE);
+                holder.binding.ivPlayIcon.setVisibility(View.VISIBLE);
                 holder.binding.llMainLayout.setBackgroundResource(R.color.white);
-                holder.binding.ivBackgroundImage.setVisibility(View.GONE);
+                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
                 handler3.removeCallbacks(UpdateSongTime3);
             }
             holder.binding.tvTitle.setText(audiolist.getName());
Index: app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikeAudiosFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.LikeModule.Fragments;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.FragmentLikesBinding;\r\nimport com.brainwellnessspa.databinding.LikeListLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.myAudioId;\r\nimport static com.brainwellnessspa.LikeModule.Activities.PlaylistLikeActivity.RefreshLikePlaylist;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class LikeAudiosFragment extends Fragment {\r\n    FragmentLikesBinding binding;\r\n    String UserID, AudioFlag;\r\n    Handler handler3;\r\n    int startTime;\r\n    private long currentDuration = 0;\r\n    long myProgress = 0;\r\n    private Runnable UpdateSongTime3;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_likes, container, false);\r\n        View view = binding.getRoot();\r\n        handler3 = new Handler();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getActivity());\r\n        binding.rvLikesList.setLayoutManager(mLayoutManager);\r\n        binding.rvLikesList.setItemAnimator(new DefaultItemAnimator());\r\n        prepareData();\r\n        binding.llError.setVisibility(View.GONE);\r\n        binding.tvFound.setText(\"Your like audios will appear here\");\r\n        return view;\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        handler3.removeCallbacks(UpdateSongTime3);\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        prepareData();\r\n    }\r\n\r\n    public void prepareData() {\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n            RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            params.setMargins(0, 9, 0, 190);\r\n            binding.llSpace.setLayoutParams(params);\r\n        } else {\r\n            RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            params.setMargins(0, 9, 0, 28);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<LikesHistoryModel> listCall = APIClient.getClient().getLikeAudioPlaylistListing(UserID);\r\n            listCall.enqueue(new Callback<LikesHistoryModel>() {\r\n                @Override\r\n                public void onResponse(Call<LikesHistoryModel> call, Response<LikesHistoryModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        LikesHistoryModel listModel = response.body();\r\n                        List<LikesHistoryModel.ResponseData.Audio> listDataModel = listModel.getResponseData().getAudio();\r\n                        if (listDataModel.size() == 0) {\r\n                            binding.tvFound.setVisibility(View.VISIBLE);\r\n                            binding.llError.setVisibility(View.VISIBLE);\r\n                            binding.rvLikesList.setVisibility(View.GONE);\r\n                        } else {\r\n                            binding.llError.setVisibility(View.GONE);\r\n                            binding.rvLikesList.setVisibility(View.VISIBLE);\r\n                            LikeAudiosAdapter adapter = new LikeAudiosAdapter(listModel.getResponseData().getAudio(), getActivity());\r\n                            binding.rvLikesList.setAdapter(adapter);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<LikesHistoryModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    public class LikeAudiosAdapter extends RecyclerView.Adapter<LikeAudiosAdapter.MyViewHolder> {\r\n        private List<LikesHistoryModel.ResponseData.Audio> modelList;\r\n        Context ctx;\r\n        String songId;\r\n        int ps = 0, nps = 0;\r\n\r\n        public LikeAudiosAdapter(List<LikesHistoryModel.ResponseData.Audio> modelList, Context ctx) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            LikeListLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.like_list_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            UpdateSongTime3 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n                        startTime = getStartTime();\r\n                        myProgress = currentDuration;\r\n                        currentDuration = getStartTime();\r\n                        if (currentDuration == 0 && isCompleteStop) {\r\n                            notifyDataSetChanged();\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        } else if (currentDuration >= 1 && !isPause) {\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                        } else if (currentDuration >= 1 && isPause) {\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        }\r\n\r\n                        if(currentDuration <= 555){\r\n                            notifyDataSetChanged();\r\n                        }\r\n                        /*if(isPause && ps == 0){\r\n                            ps++;\r\n                            notifyDataSetChanged();\r\n                        }else if(!isPause && nps == 0){\r\n                            nps++;\r\n                            notifyDataSetChanged();\r\n                        }*/\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    handler3.postDelayed(this, 500);\r\n                }\r\n            };\r\n\r\n            holder.binding.tvTitle.setText(modelList.get(position).getName());\r\n            holder.binding.tvTime.setText(modelList.get(position).getAudioDuration());\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(modelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            SharedPreferences sharedzw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"Downloadlist\") && !AudioFlag.equalsIgnoreCase(\"SubPlayList\") && !AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                if (myAudioId.equalsIgnoreCase(modelList.get(position).getID())) {\r\n                    songId = myAudioId;\r\n                    holder.binding.equalizerview.animateBars();\r\n                    holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n//            holder.binding.equalizerview.stopBars();\r\n//                        ps =0;\r\n//                        nps = 0;\r\n                } else {\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                }\r\n                handler3.postDelayed(UpdateSongTime3, 500);\r\n            } else {\r\n                holder.binding.equalizerview.setVisibility(View.GONE);\r\n                holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                handler3.removeCallbacks(UpdateSongTime3);\r\n            }\r\n            holder.binding.llMenu.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                    if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                        i.putExtra(\"play\", \"TopCategories\");\r\n                    } else\r\n                        i.putExtra(\"play\", \"play\");\r\n                    i.putExtra(\"ID\", modelList.get(position).getID());\r\n                    i.putExtra(\"position\", position);\r\n                    i.putExtra(\"PlaylistAudioId\", \"\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n\r\n            holder.binding.llLikes.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall remove after the disclaimer\", ctx);\r\n                        } else {\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"LikeAudioList\") && modelList.size() == 1) {\r\n                                BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                            } else {\r\n                                callAlert(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"LikeAudioList\") && modelList.size() == 1) {\r\n                            BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                        } else {\r\n                            callAlert(position);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    LikesHistoryModel.ResponseData.Audio mainPlayModel = new LikesHistoryModel.ResponseData.Audio();\r\n                    mainPlayModel.setID(\"0\");\r\n                    mainPlayModel.setName(\"Disclaimer\");\r\n                    mainPlayModel.setAudioFile(\"\");\r\n                    mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                    mainPlayModel.setAudiomastercat(\"\");\r\n                    mainPlayModel.setAudioSubCategory(\"\");\r\n                    mainPlayModel.setImageFile(\"\");\r\n                    mainPlayModel.setLike(\"\");\r\n                    mainPlayModel.setDownload(\"\");\r\n                    mainPlayModel.setAudioDuration(\"00:48\");\r\n\r\n                    int pos = holder.getAdapterPosition();\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    Log.e(\"postion of paly\", String.valueOf(position));\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransFrag(pos, modelList);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        List<LikesHistoryModel.ResponseData.Audio> listModelList2 = new ArrayList<>();\r\n                        if (position != 0) {\r\n                            listModelList2.addAll(modelList);\r\n                            listModelList2.add(pos, mainPlayModel);\r\n                        } else {\r\n                            listModelList2.add(mainPlayModel);\r\n                            listModelList2.addAll(modelList);\r\n                        }\r\n                        callTransFrag(pos, listModelList2);\r\n                    }\r\n                    handler3.postDelayed(UpdateSongTime3, 500);\r\n                    notifyDataSetChanged();\r\n                }\r\n            });\r\n        }\r\n\r\n        private void callAlert(int position) {\r\n            final Dialog dialog = new Dialog(ctx);\r\n            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n            dialog.setContentView(R.layout.logout_layout);\r\n            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));\r\n            dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n            final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n            final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n            final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n            final Button Btn = dialog.findViewById(R.id.Btn);\r\n            tvTitle.setText(\"Remove from Liked Audios?\");\r\n            tvHeader.setText(modelList.get(position).getName());\r\n            Btn.setText(\"Remove\");\r\n            tvGoBack.setText(\"Cancel\");\r\n            dialog.setOnKeyListener((v1, keyCode, event) -> {\r\n                if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                    dialog.dismiss();\r\n                }\r\n                return false;\r\n            });\r\n\r\n            Btn.setOnClickListener(v4 -> {\r\n                callRemoveLike(modelList.get(position).getID(), position, modelList);\r\n                dialog.dismiss();\r\n            });\r\n            tvGoBack.setOnClickListener(v3 -> dialog.dismiss());\r\n            dialog.show();\r\n            dialog.setCancelable(false);\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return modelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            LikeListLayoutBinding binding;\r\n\r\n            public MyViewHolder(LikeListLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callTransFrag(int position, List<LikesHistoryModel.ResponseData.Audio> listModelList) {\r\n        try {\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n\r\n\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"LikeAudioList\");\r\n            editor.commit();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void saveToPref(int pos, List<LikesHistoryModel.ResponseData.Audio> listModelList2) {\r\n        SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shareddd.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(listModelList2);\r\n        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"LikeAudioList\");\r\n        editor.commit();\r\n        Fragment fragment = new TransparentPlayerFragment();\r\n        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n        fragmentManager1.beginTransaction()\r\n                .add(R.id.flContainer, fragment)\r\n                .commit();\r\n    }\r\n\r\n    private void callRemoveLike(String id, int position, List<LikesHistoryModel.ResponseData.Audio> listModelList2) {\r\n        try {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(id, UserID);\r\n                listCall.enqueue(new Callback<AudioLikeModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {\r\n                        try {\r\n                            if (response.isSuccessful()) {\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                                AudioLikeModel model = response.body();\r\n                                BWSApplication.showToast(model.getResponseMessage(), getActivity());\r\n                                /*listModelList2.remove(position);\r\n                                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                                if (audioPlay && AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n                                    if (pos == position && position < listModelList2.size() - 1) {\r\n//                                            pos = pos + 1;\r\n                                        if (isDisclaimer == 1) {\r\n//                                    BWSApplication.showToast(\"The audio shall remove after the disclaimer\", getActivity());\r\n                                        } else {\r\n                                            callTransFrag(position, listModelList2);\r\n                                        }\r\n                                    } else if (pos == position && position == listModelList2.size() - 1) {\r\n                                        pos = 0;\r\n                                        if (isDisclaimer == 1) {\r\n//                                    BWSApplication.showToast(\"The audio shall remove after the disclaimer\", getActivity());\r\n                                        } else {\r\n                                            callTransFrag(position, listModelList2);\r\n                                        }\r\n                                    } else if (pos < position && pos < listModelList2.size() - 1) {\r\n                                        saveToPref(pos, listModelList2);\r\n                                    } else if (pos > position && pos == listModelList2.size()) {\r\n                                        pos = pos - 1;\r\n                                        saveToPref(pos, listModelList2);\r\n                                    }\r\n                                }*/\r\n                                prepareData();\r\n                            }\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<AudioLikeModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                });\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikeAudiosFragment.java	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikeAudiosFragment.java	(date 1605711637877)
@@ -182,7 +182,7 @@
 //                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
                         }
 
-                        if(currentDuration <= 555){
+                        if (currentDuration <= 555) {
                             notifyDataSetChanged();
                         }
                         /*if(isPause && ps == 0){
@@ -218,7 +218,10 @@
             if (!AudioFlag.equalsIgnoreCase("Downloadlist") && !AudioFlag.equalsIgnoreCase("SubPlayList") && !AudioFlag.equalsIgnoreCase("TopCategories")) {
                 if (myAudioId.equalsIgnoreCase(modelList.get(position).getID())) {
                     songId = myAudioId;
-                    holder.binding.equalizerview.animateBars();
+                    if (isPause) {
+                        holder.binding.equalizerview.stopBars();
+                    } else
+                        holder.binding.equalizerview.animateBars();
                     holder.binding.equalizerview.setVisibility(View.VISIBLE);
                     holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);
                     holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.databinding.ActivityAddAudioBinding;\r\nimport com.brainwellnessspa.databinding.DownloadsLayoutBinding;\r\nimport com.brainwellnessspa.databinding.GlobalSearchLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.myAudioId;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\n\r\npublic class AddAudioActivity extends AppCompatActivity {\r\n    ActivityAddAudioBinding binding;\r\n    Context ctx;\r\n    String UserID, PlaylistID, AudioFlag;\r\n    SerachListAdpater adpater;\r\n    EditText searchEditText;\r\n    Activity activity;\r\n    public static boolean addToSearch = false;\r\n    public static String MyPlaylistIds = \"\";\r\n    public static String PlaylistIDMS = \"\";\r\n    Handler handler3;\r\n    int startTime;\r\n    private long currentDuration = 0;\r\n    long myProgress = 0, diff = 0;\r\n    private Runnable UpdateSongTime3;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_add_audio);\r\n        ctx = AddAudioActivity.this;\r\n        activity = AddAudioActivity.this;\r\n        handler3 = new Handler();\r\n        if (getIntent().getExtras() != null) {\r\n            PlaylistID = getIntent().getStringExtra(CONSTANTS.PlaylistID);\r\n        }\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        closeButton.setOnClickListener(view -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.rvSerachList.setAdapter(null);\r\n            binding.rvSerachList.setVisibility(View.GONE);\r\n            binding.llError.setVisibility(View.GONE);\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                binding.searchView.clearFocus();\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                } else {\r\n                    prepareSearchData(search, searchEditText);\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            callback();\r\n        });\r\n\r\n        RecyclerView.LayoutManager suggested = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvSuggestedList.setLayoutManager(suggested);\r\n        binding.rvSuggestedList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager serachList = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvSerachList.setLayoutManager(serachList);\r\n        binding.rvSerachList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager manager = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayList.setItemAnimator(new DefaultItemAnimator());\r\n        binding.rvPlayList.setLayoutManager(manager);\r\n        prepareSuggestedData();\r\n    }\r\n\r\n    private void callback() {\r\n        comefromDownload = \"0\";\r\n        finish();\r\n    }\r\n\r\n    private void prepareSearchData(String search, EditText searchEditText) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SearchBothModel> listCall = APIClient.getClient().getSearchBoth(UserID, search);\r\n            listCall.enqueue(new Callback<SearchBothModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchBothModel> call, Response<SearchBothModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SearchBothModel listModel = response.body();\r\n                        if (!searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            if (listModel.getResponseData().size() == 0) {\r\n                                binding.rvSerachList.setVisibility(View.GONE);\r\n                                binding.llError.setVisibility(View.VISIBLE);\r\n                                binding.tvFound.setText(\"Couldn't find '\" + search + \"'. Try searching again\");\r\n                            } else {\r\n                                binding.llError.setVisibility(View.GONE);\r\n                                binding.rvSerachList.setVisibility(View.VISIBLE);\r\n                                adpater = new SerachListAdpater(listModel.getResponseData(), activity, binding.rvSerachList, UserID);\r\n                                binding.rvSerachList.setAdapter(adpater);\r\n                            }\r\n                        } else if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            binding.rvSerachList.setAdapter(null);\r\n                            binding.rvSerachList.setVisibility(View.GONE);\r\n                            binding.llError.setVisibility(View.GONE);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchBothModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void prepareSuggestedData() {\r\n        SharedPreferences shareddes = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shareddes.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n            comefromDownload = \"1\";\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 210);\r\n            binding.llSpace.setLayoutParams(params);\r\n        } else {\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 20);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SuggestedModel> listCall = APIClient.getClient().getSuggestedLists(UserID);\r\n            listCall.enqueue(new Callback<SuggestedModel>() {\r\n                @Override\r\n                public void onResponse(Call<SuggestedModel> call, Response<SuggestedModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SuggestedModel listModel = response.body();\r\n                        binding.tvSuggestedAudios.setText(R.string.Recommended_Audios);\r\n                        binding.tvSAViewAll.setVisibility(View.VISIBLE);\r\n                        SuggestedAdpater suggestedAdpater = new SuggestedAdpater(listModel.getResponseData(), ctx);\r\n                        binding.rvSuggestedList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSAViewAll.setOnClickListener(view -> {\r\n                            Intent i = new Intent(ctx, ViewSuggestedActivity.class);\r\n                            i.putExtra(\"Name\", \"Recommended  Audios\");\r\n                            i.putExtra(\"PlaylistID\", PlaylistID);\r\n                            i.putParcelableArrayListExtra(\"AudiolistModel\", listModel.getResponseData());\r\n                            startActivity(i);\r\n                            finish();\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SuggestedModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SearchPlaylistModel> listCall = APIClient.getClient().getSuggestedPlayLists(UserID);\r\n            listCall.enqueue(new Callback<SearchPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchPlaylistModel> call, Response<SearchPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SearchPlaylistModel listModel = response.body();\r\n                        binding.tvSuggestedPlaylist.setText(R.string.Recommendeds_Playlist);\r\n                        binding.tvSPViewAll.setVisibility(View.VISIBLE);\r\n\r\n                        SuggestedPlayListsAdpater suggestedAdpater = new SuggestedPlayListsAdpater(listModel.getResponseData());\r\n                        binding.rvPlayList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSPViewAll.setOnClickListener(view -> {\r\n                            Intent i = new Intent(ctx, ViewSuggestedActivity.class);\r\n                            i.putExtra(\"Name\", \"Recommended Playlist\");\r\n                            i.putExtra(\"PlaylistID\", PlaylistID);\r\n                            i.putParcelableArrayListExtra(\"PlaylistModel\", listModel.getResponseData());\r\n                            startActivity(i);\r\n                            finish();\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callback();\r\n    }\r\n\r\n\r\n    public class SerachListAdpater extends RecyclerView.Adapter<SerachListAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        String UserID, songId;\r\n        RecyclerView rvSerachList;\r\n        private List<SearchBothModel.ResponseData> modelList;\r\n\r\n        public SerachListAdpater(List<SearchBothModel.ResponseData> modelList, Context ctx,\r\n                                 RecyclerView rvSerachList, String UserID) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n            this.rvSerachList = rvSerachList;\r\n            this.UserID = UserID;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            GlobalSearchLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.global_search_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(modelList.get(position).getName());\r\n\r\n            if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            if (modelList.get(position).getIscategory().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.tvPart.setText(R.string.Audio);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                UpdateSongTime3 = new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        try {\r\n                            startTime = getStartTime();\r\n                            myProgress = currentDuration;\r\n                            currentDuration = getStartTime();\r\n                            if (currentDuration == 0 && isCompleteStop) {\r\n                                notifyDataSetChanged();\r\n//                                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                            } else if (currentDuration >= 1 && !isPause) {\r\n//                                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                            } else if (currentDuration >= 1 && isPause) {\r\n//                                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                            }\r\n\r\n                            if (currentDuration <= 555) {\r\n                                notifyDataSetChanged();\r\n                            }\r\n                        /*if(isPause && ps == 0){\r\n                            ps++;\r\n                            notifyDataSetChanged();\r\n                        }else if(!isPause && nps == 0){\r\n                            nps++;\r\n                            notifyDataSetChanged();\r\n                        }*/\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                        handler3.postDelayed(this, 500);\r\n                    }\r\n                };\r\n\r\n                SharedPreferences sharedzw = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                if (!AudioFlag.equalsIgnoreCase(\"Downloadlist\") &&\r\n                        !AudioFlag.equalsIgnoreCase(\"SubPlayList\") && !AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                    if (myAudioId.equalsIgnoreCase(modelList.get(position).getID())) {\r\n                        songId = myAudioId;\r\n                        holder.binding.equalizerview.animateBars();\r\n                        holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                        holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n//            holder.binding.equalizerview.stopBars();\r\n//                        ps =0;\r\n//                        nps = 0;\r\n                    } else {\r\n                        holder.binding.equalizerview.setVisibility(View.GONE);\r\n                        holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    }\r\n                    handler3.postDelayed(UpdateSongTime3, 500);\r\n                } else {\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    handler3.removeCallbacks(UpdateSongTime3);\r\n                }\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                            holder.binding.ivLock.setVisibility(View.GONE);\r\n                            String AudioID = modelList.get(position).getID();\r\n                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                                } else {\r\n                                    callAddSearchAudio(AudioID, \"0\", \"\");\r\n                                }\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                                || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                            Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                            i.putExtra(\"ComeFrom\", \"Plan\");\r\n                            startActivity(i);\r\n                        }\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                            holder.binding.ivLock.setVisibility(View.GONE);\r\n                            String AudioID = modelList.get(position).getID();\r\n                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                                } else {\r\n                                    callAddSearchAudio(AudioID, \"0\", \"\");\r\n                                }\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                                || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                            BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                        }\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = modelList.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    }\r\n                });\r\n\r\n                holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        try {\r\n                            player = 1;\r\n                            if (isPrepare || isMediaStart || isPause) {\r\n                                MusicService.stopMedia();\r\n                            }\r\n                            isPause = false;\r\n                            isMediaStart = false;\r\n                            isPrepare = false;\r\n                            isCompleteStop = false;\r\n                            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                            SharedPreferences.Editor editor = shared.edit();\r\n                            Gson gson = new Gson();\r\n                            ArrayList<SearchBothModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                            SearchBothModel.ResponseData mainPlayModel = new SearchBothModel.ResponseData();\r\n                            mainPlayModel.setID(\"0\");\r\n                            mainPlayModel.setName(\"Disclaimer\");\r\n                            mainPlayModel.setAudioFile(\"\");\r\n                            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                            mainPlayModel.setAudiomastercat(\"\");\r\n                            mainPlayModel.setAudioSubCategory(\"\");\r\n                            mainPlayModel.setImageFile(\"\");\r\n                            mainPlayModel.setLike(\"\");\r\n                            mainPlayModel.setDownload(\"\");\r\n                            mainPlayModel.setAudioDuration(\"00:48\");\r\n                            listModelList2.add(mainPlayModel);\r\n\r\n                            listModelList2.add(modelList.get(position));\r\n                            String json = gson.toJson(listModelList2);\r\n                            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                            editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchModelAudio\");\r\n                            editor.commit();\r\n                            Fragment fragment = new TransparentPlayerFragment();\r\n                            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .add(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                            handler3.postDelayed(UpdateSongTime3, 500);\r\n                            notifyDataSetChanged();\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                });\r\n\r\n            } else if (modelList.get(position).getIscategory().equalsIgnoreCase(\"0\")) {\r\n                holder.binding.tvPart.setText(R.string.Playlist);\r\n                holder.binding.equalizerview.setVisibility(View.GONE);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddSearchAudio(\"\", \"1\", modelList.get(position).getID());\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(\"\", \"1\", modelList.get(position).getID());\r\n                        }\r\n                    }\r\n                });\r\n                holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        comefromDownload = \"0\";\r\n                        addToSearch = true;\r\n                        MyPlaylistIds = modelList.get(position).getID();\r\n                        PlaylistIDMS = PlaylistID;\r\n                        finish();\r\n                    /*Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    Bundle bundle = new Bundle();\r\n                    bundle.putString(\"New\", \"0\");\r\n                    bundle.putString(\"PlaylistID\", PlaylistModel.get(position).getID());\r\n                    bundle.putString(\"PlaylistName\", PlaylistModel.get(position).getName());\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();*/\r\n                    }\r\n                });\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(modelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return modelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            GlobalSearchLayoutBinding binding;\r\n\r\n            public MyViewHolder(GlobalSearchLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callAddSearchAudio(String AudioID, String s, String FromPlaylistId) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<AddToPlaylist> listCall = APIClient.getClient().getAddSearchAudioFromPlaylist(UserID, AudioID, PlaylistID, FromPlaylistId);\r\n            listCall.enqueue(new Callback<AddToPlaylist>() {\r\n                @Override\r\n                public void onResponse(Call<AddToPlaylist> call, Response<AddToPlaylist> response) {\r\n                    try {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            AddToPlaylist listModels = response.body();\r\n                            if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                                if (audioPlay) {\r\n                                    if (AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                        Gson gsonx = new Gson();\r\n                                        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                                        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                                        }.getType();\r\n                                        ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();\r\n                                        mainPlayModelListold = gsonx.fromJson(json, type);\r\n                                        String id = mainPlayModelListold.get(pos).getID();\r\n                                        ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();\r\n                                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();\r\n\r\n                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                            MainPlayModel mainPlayModel = new MainPlayModel();\r\n                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                            mainPlayModelList.add(mainPlayModel);\r\n                                        }\r\n                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                            SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                            playlistSongs.add(mainPlayModel);\r\n                                        }\r\n\r\n                                        for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                            if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {\r\n                                                pos = i;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                        SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                        SharedPreferences.Editor editor = sharedd.edit();\r\n                                        Gson gson = new Gson();\r\n                                        String jsonx = gson.toJson(mainPlayModelList);\r\n                                        String json1 = gson.toJson(playlistSongs);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                        editor.commit();\r\n                                    }\r\n                                }\r\n                                if (s.equalsIgnoreCase(\"1\")) {\r\n                                    finish();\r\n                                }\r\n                            } else if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                            }\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AddToPlaylist> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(ctx.getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public class SuggestedAdpater extends RecyclerView.Adapter<SuggestedAdpater.MyViewHolder> {\r\n        private List<SuggestedModel.ResponseData> listModel;\r\n        Context ctx;\r\n        String songId;\r\n\r\n        public SuggestedAdpater(List<SuggestedModel.ResponseData> listModel, Context ctx) {\r\n            this.listModel = listModel;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(listModel.get(position).getName());\r\n            holder.binding.tvTime.setText(listModel.get(position).getAudioDuration());\r\n            UpdateSongTime3 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n                        startTime = getStartTime();\r\n                        myProgress = currentDuration;\r\n                        currentDuration = getStartTime();\r\n                        if (currentDuration == 0 && isCompleteStop) {\r\n                            notifyDataSetChanged();\r\n//                                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        } else if (currentDuration >= 1 && !isPause) {\r\n//                                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                        } else if (currentDuration >= 1 && isPause) {\r\n//                                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        }\r\n\r\n                        if (currentDuration <= 555) {\r\n                            notifyDataSetChanged();\r\n                        }\r\n                        /*if(isPause && ps == 0){\r\n                            ps++;\r\n                            notifyDataSetChanged();\r\n                        }else if(!isPause && nps == 0){\r\n                            nps++;\r\n                            notifyDataSetChanged();\r\n                        }*/\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    handler3.postDelayed(this, 500);\r\n                }\r\n            };\r\n            SharedPreferences sharedzw = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"Downloadlist\") &&\r\n                    !AudioFlag.equalsIgnoreCase(\"SubPlayList\") && !AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                if (myAudioId.equalsIgnoreCase(listModel.get(position).getID())) {\r\n                    songId = myAudioId;\r\n                    holder.binding.equalizerview.animateBars();\r\n                    holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n//            holder.binding.equalizerview.stopBars();\r\n//                        ps =0;\r\n//                        nps = 0;\r\n                } else {\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                }\r\n                handler3.postDelayed(UpdateSongTime3, 500);\r\n            } else {\r\n                holder.binding.equalizerview.setVisibility(View.GONE);\r\n                holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                handler3.removeCallbacks(UpdateSongTime3);\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(listModel.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n\r\n            if (listModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                    || listModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n            holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n                if (listModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        try {\r\n                            player = 1;\r\n                            if (isPrepare || isMediaStart || isPause) {\r\n                                MusicService.stopMedia();\r\n                            }\r\n                            isPause = false;\r\n                            isMediaStart = false;\r\n                            isPrepare = false;\r\n                            isCompleteStop = false;\r\n                            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                            SharedPreferences.Editor editor = shared.edit();\r\n                            Gson gson = new Gson();\r\n                            ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                            SuggestedModel.ResponseData mainPlayModel = new SuggestedModel.ResponseData();\r\n                            mainPlayModel.setID(\"0\");\r\n                            mainPlayModel.setName(\"Disclaimer\");\r\n                            mainPlayModel.setAudioFile(\"\");\r\n                            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                            mainPlayModel.setAudiomastercat(\"\");\r\n                            mainPlayModel.setAudioSubCategory(\"\");\r\n                            mainPlayModel.setImageFile(\"\");\r\n                            mainPlayModel.setLike(\"\");\r\n                            mainPlayModel.setDownload(\"\");\r\n                            mainPlayModel.setAudioDuration(\"00:48\");\r\n                            listModelList2.add(mainPlayModel);\r\n\r\n                            listModelList2.add(listModel.get(position));\r\n                            String json = gson.toJson(listModelList2);\r\n                            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                            editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchAudio\");\r\n                            editor.commit();\r\n                            Fragment fragment = new TransparentPlayerFragment();\r\n                            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .add(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    }\r\n                } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || listModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    try {\r\n                        player = 1;\r\n                        if (isPrepare || isMediaStart || isPause) {\r\n                            MusicService.stopMedia();\r\n                        }\r\n                        isPause = false;\r\n                        isMediaStart = false;\r\n                        isPrepare = false;\r\n                        isCompleteStop = false;\r\n                        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                        SuggestedModel.ResponseData mainPlayModel = new SuggestedModel.ResponseData();\r\n                        mainPlayModel.setID(\"0\");\r\n                        mainPlayModel.setName(\"Disclaimer\");\r\n                        mainPlayModel.setAudioFile(\"\");\r\n                        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                        mainPlayModel.setAudiomastercat(\"\");\r\n                        mainPlayModel.setAudioSubCategory(\"\");\r\n                        mainPlayModel.setImageFile(\"\");\r\n                        mainPlayModel.setLike(\"\");\r\n                        mainPlayModel.setDownload(\"\");\r\n                        mainPlayModel.setAudioDuration(\"00:48\");\r\n                        listModelList2.add(mainPlayModel);\r\n\r\n                        listModelList2.add(listModel.get(position));\r\n                        String json = gson.toJson(listModelList2);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchAudio\");\r\n                        editor.commit();\r\n                        Fragment fragment = new TransparentPlayerFragment();\r\n                        FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                        fragmentManager1.beginTransaction()\r\n                                .add(R.id.flContainer, fragment)\r\n                                .commit();\r\n                        handler3.postDelayed(UpdateSongTime3, 500);\r\n                        notifyDataSetChanged();\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            });\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (listModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = listModel.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    }\r\n                } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = listModel.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    }\r\n                } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || listModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    String AudioID = listModel.get(position).getID();\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else {\r\n                        callAddSearchAudio(AudioID, \"0\", \"\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (10 > listModel.size()) {\r\n                return listModel.size();\r\n            } else {\r\n                return 10;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SuggestedPlayListsAdpater extends RecyclerView.Adapter<SuggestedPlayListsAdpater.MyViewHolder> {\r\n        private List<SearchPlaylistModel.ResponseData> PlaylistModel;\r\n\r\n        public SuggestedPlayListsAdpater(List<SearchPlaylistModel.ResponseData> PlaylistModel) {\r\n            this.PlaylistModel = PlaylistModel;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(PlaylistModel.get(position).getName());\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n            holder.binding.equalizerview.setVisibility(View.GONE);\r\n            if (PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                    PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                            PlaylistModel.get(position).getTotalhour().equalsIgnoreCase(\"\")\r\n                            && PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                holder.binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n            } else {\r\n                if (PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() + \" Audio | \"\r\n                            + PlaylistModel.get(position).getTotalhour() + \"h 0m\");\r\n                } else {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() +\r\n                            \" Audios | \" + PlaylistModel.get(position).getTotalhour() + \"h \" + PlaylistModel.get(position).getTotalminute() + \"m\");\r\n                }\r\n            }\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(PlaylistModel.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    comefromDownload = \"0\";\r\n                    addToSearch = true;\r\n                    MyPlaylistIds = PlaylistModel.get(position).getID();\r\n                    PlaylistIDMS = PlaylistID;\r\n                    finish();\r\n                    /*Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    Bundle bundle = new Bundle();\r\n                    bundle.putString(\"New\", \"0\");\r\n                    bundle.putString(\"PlaylistID\", PlaylistModel.get(position).getID());\r\n                    bundle.putString(\"PlaylistName\", PlaylistModel.get(position).getName());\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();*/\r\n                }\r\n            });\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    comefromDownload = \"0\";\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        } else {\r\n                            callAddSearchAudio(\"\", \"1\", PlaylistModel.get(position).getID());\r\n                        }\r\n                    } else {\r\n                        callAddSearchAudio(\"\", \"1\", PlaylistModel.get(position).getID());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (10 > PlaylistModel.size()) {\r\n                return PlaylistModel.size();\r\n            } else {\r\n                return 10;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java	(date 1605711637901)
@@ -363,7 +363,10 @@
                         !AudioFlag.equalsIgnoreCase("SubPlayList") && !AudioFlag.equalsIgnoreCase("TopCategories")) {
                     if (myAudioId.equalsIgnoreCase(modelList.get(position).getID())) {
                         songId = myAudioId;
-                        holder.binding.equalizerview.animateBars();
+                        if (isPause) {
+                            holder.binding.equalizerview.stopBars();
+                        } else
+                            holder.binding.equalizerview.animateBars();
                         holder.binding.equalizerview.setVisibility(View.VISIBLE);
                         holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);
                         holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
@@ -775,7 +778,10 @@
                     !AudioFlag.equalsIgnoreCase("SubPlayList") && !AudioFlag.equalsIgnoreCase("TopCategories")) {
                 if (myAudioId.equalsIgnoreCase(listModel.get(position).getID())) {
                     songId = myAudioId;
-                    holder.binding.equalizerview.animateBars();
+                    if (isPause) {
+                        holder.binding.equalizerview.stopBars();
+                    } else
+                        holder.binding.equalizerview.animateBars();
                     holder.binding.equalizerview.setVisibility(View.VISIBLE);
                     holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);
                     holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"30.0.2\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.brainwellnessspa\"\r\n        minSdkVersion 16\r\n        targetSdkVersion 30\r\n        versionCode 5\r\n        versionName \"1.1\"\r\n        multiDexEnabled true\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    lintOptions {\r\n        checkReleaseBuilds false\r\n    }\r\n    buildTypes {\r\n        debug {\r\n            debuggable true\r\n            resValue(\"string\", \"PORT_NUMBER\", \"8081\")\r\n        }\r\n\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        targetCompatibility 1.8\r\n        sourceCompatibility 1.8\r\n    }\r\n\r\n    buildFeatures {\r\n        dataBinding true\r\n    }\r\n\r\n    dexOptions {\r\n        jumboMode = true\r\n        javaMaxHeapSize \"4g\"\r\n    }\r\n\r\n    packagingOptions {\r\n        exclude 'META-INF/DEPENDENCIES'\r\n        exclude 'META-INF/LICENSE'\r\n        exclude 'META-INF/LICENSE.txt'\r\n        exclude 'META-INF/license.txt'\r\n        exclude 'META-INF/NOTICE'\r\n        exclude 'META-INF/NOTICE.txt'\r\n        exclude 'META-INF/notice.txt'\r\n        exclude 'META-INF/ASL2.0'\r\n    }\r\n}\r\n\r\ndependencies {\r\n    def room_version = \"1.1.1\"\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    testImplementation 'junit:junit:4.13'\r\n    implementation 'com.android.support:multidex:1.0.3'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\r\n\r\n    /* TODO Firebase Dependency */\r\n    implementation 'com.google.firebase:firebase-auth:20.0.0'\r\n    implementation 'com.google.firebase:firebase-core:18.0.0'\r\n    implementation 'com.google.firebase:firebase-analytics:18.0.0'\r\n    implementation 'com.google.firebase:firebase-messaging:21.0.0'\r\n    /* TODO Room Database Dependency */\r\n    implementation \"android.arch.persistence.room:runtime:$room_version\"\r\n    annotationProcessor \"android.arch.persistence.room:compiler:$room_version\"\r\n    testImplementation \"android.arch.persistence.room:testing:$room_version\"\r\n    debugImplementation 'com.amitshekhar.android:debug-db:1.0.6'\r\n    debugImplementation 'com.amitshekhar.android:debug-db-encrypt:1.0.6'\r\n\r\n    /* TODO Material Design Dependency */\r\n    implementation 'com.google.android.material:material:1.2.1'\r\n    /* TODO Bottom Menu and Fragment*/\r\n    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'\r\n    implementation 'androidx.navigation:navigation-fragment:2.3.1'\r\n    implementation 'androidx.navigation:navigation-ui:2.3.1'\r\n    implementation 'androidx.navigation:navigation-fragment:2.3.1'\r\n    implementation 'androidx.navigation:navigation-ui:2.3.1'\r\n    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    /* TODO Stripe Payment Gateway */\r\n    implementation 'com.stripe:stripe-android:2.0.2'\r\n    /* TODO Use Youtube Video Player */\r\n    implementation files('libs/YouTubeAndroidPlayerApi.jar')\r\n    /* TODO Cardview Design Dependency */\r\n    implementation 'androidx.cardview:cardview:1.0.0'\r\n    /* TODO Recyclerview Design & Development Dependency */\r\n    implementation 'androidx.recyclerview:recyclerview:1.1.0'\r\n    / TODO Circle Imageview Design Dependency */\r\n    implementation 'de.hdodenhof:circleimageview:3.1.0'\r\n    /* TODO Retrofit Development Dependency */\r\n    implementation 'com.squareup.retrofit:retrofit:1.9.0'\r\n    implementation 'com.squareup.retrofit2:retrofit:2.5.0'\r\n    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'\r\n    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'\r\n    implementation 'com.google.code.gson:gson:2.8.6'\r\n    implementation 'com.squareup.okhttp:okhttp:2.7.5'\r\n    implementation 'com.squareup.okhttp:okhttp-urlconnection:2.7.5'\r\n    implementation 'com.squareup.okhttp3:okhttp:4.7.2'\r\n    implementation 'com.squareup.okhttp3:logging-interceptor:4.7.2'\r\n    /* TODO Glide Dependency*/\r\n    implementation 'com.github.bumptech.glide:glide:3.7.0'\r\n    implementation 'com.mindorks.android:prdownloader:0.4.0'\r\n    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'\r\n    implementation 'com.google.android.gms:play-services-auth:18.1.0'\r\n    implementation 'com.facebook.android:facebook-android-sdk:5.15.3'\r\n    implementation 'com.github.claucookie.miniequalizer:library:1.0.0'\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/build.gradle	(date 1605711637913)
@@ -67,7 +67,7 @@
     implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
 
     /* TODO Firebase Dependency */
-    implementation 'com.google.firebase:firebase-auth:20.0.0'
+    implementation 'com.google.firebase:firebase-auth:20.0.1'
     implementation 'com.google.firebase:firebase-core:18.0.0'
     implementation 'com.google.firebase:firebase-analytics:18.0.0'
     implementation 'com.google.firebase:firebase-messaging:21.0.0'
@@ -112,7 +112,7 @@
     implementation 'com.github.bumptech.glide:glide:3.7.0'
     implementation 'com.mindorks.android:prdownloader:0.4.0'
     implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
-    implementation 'com.google.android.gms:play-services-auth:18.1.0'
+    implementation 'com.google.android.gms:play-services-auth:19.0.0'
     implementation 'com.facebook.android:facebook-android-sdk:5.15.3'
     implementation 'com.github.claucookie.miniequalizer:library:1.0.0'
 
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddPlaylistActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.CreatePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.PlaylistingModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityAddPlaylistBinding;\r\nimport com.brainwellnessspa.databinding.AddPlayListLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.comeAddPlaylist;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\n\r\npublic class AddPlaylistActivity extends AppCompatActivity {\r\n    public static boolean addToPlayList = false;\r\n    public static String MyPlaylistId = \"\";\r\n    ActivityAddPlaylistBinding binding;\r\n    String UserID, AudioId, FromPlaylistID, PlaylistName;\r\n    Context ctx;\r\n    Activity activity;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_add_playlist);\r\n        ctx = AddPlaylistActivity.this;\r\n        activity = AddPlaylistActivity.this;\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            AudioId = getIntent().getStringExtra(\"AudioId\");\r\n            FromPlaylistID = getIntent().getStringExtra(\"PlaylistID\");\r\n        }\r\n        if (getIntent().getExtras() != null) {\r\n            PlaylistName = getIntent().getStringExtra(\"PlaylistName\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            comefrom_search = 0;\r\n            finish();\r\n        });\r\n\r\n        RecyclerView.LayoutManager played = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists.setLayoutManager(played);\r\n        binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());\r\n        prepareData(ctx);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        comefrom_search = 0;\r\n        finish();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        prepareData(AddPlaylistActivity.this);\r\n    }\r\n\r\n    private void prepareData(Context ctx) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<PlaylistingModel> listCall = APIClient.getClient().getPlaylisting(UserID);\r\n            listCall.enqueue(new Callback<PlaylistingModel>() {\r\n                @Override\r\n                public void onResponse(Call<PlaylistingModel> call, Response<PlaylistingModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        PlaylistingModel model = response.body();\r\n                        AddPlaylistAdapter addPlaylistAdapter = new AddPlaylistAdapter(model.getResponseData(), ctx);\r\n                        binding.rvPlayLists.setAdapter(addPlaylistAdapter);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<PlaylistingModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void callAddPlaylistFromPlaylist(String PlaylistID, String name, Dialog dialog, String d) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<AddToPlaylist> listCall = APIClient.getClient().getAddSearchAudioFromPlaylist(UserID, AudioId, PlaylistID, FromPlaylistID);\r\n            listCall.enqueue(new Callback<AddToPlaylist>() {\r\n                @Override\r\n                public void onResponse(Call<AddToPlaylist> call, Response<AddToPlaylist> response) {\r\n                    try {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            AddToPlaylist listModels = response.body();\r\n                            if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                                if (audioPlay) {\r\n                                    if (AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                        Gson gsonx = new Gson();\r\n                                        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                                        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                                        }.getType();\r\n                                        ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();\r\n                                        mainPlayModelListold = gsonx.fromJson(json, type);\r\n                                        String id = mainPlayModelListold.get(pos).getID();\r\n                                        ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();\r\n                                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();\r\n\r\n                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                            MainPlayModel mainPlayModel = new MainPlayModel();\r\n                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                            mainPlayModelList.add(mainPlayModel);\r\n                                        }\r\n                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                            SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                            playlistSongs.add(mainPlayModel);\r\n                                        }\r\n\r\n                                        for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                            if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {\r\n                                                pos = i;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                        SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                        SharedPreferences.Editor editor = sharedd.edit();\r\n                                        Gson gson = new Gson();\r\n                                        String jsonx = gson.toJson(mainPlayModelList);\r\n                                        String json1 = gson.toJson(playlistSongs);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                        editor.commit();\r\n                                    }\r\n                                }\r\n                                if (comeAddPlaylist == 1) {\r\n                                    final Dialog dialog = new Dialog(ctx);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.go_to_playlist);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                                    final RelativeLayout rlCreate = dialog.findViewById(R.id.rlCreate);\r\n\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n\r\n                                    rlCreate.setOnClickListener(view2 -> {\r\n                                        addToPlayList = true;\r\n                                        MyPlaylistId = PlaylistID;\r\n                                        dialog.dismiss();\r\n                                        finish();\r\n                                    });\r\n\r\n                                    tvCancel.setOnClickListener(v -> {\r\n                                        dialog.dismiss();\r\n                                        finish();\r\n                                    });\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n                                } else {\r\n                                    if (d.equalsIgnoreCase(\"0\")) {\r\n                                        dialog.dismiss();\r\n                                    }\r\n                                    final Dialog dialog = new Dialog(ctx);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.go_to_playlist);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                                    final RelativeLayout rlCreate = dialog.findViewById(R.id.rlCreate);\r\n\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n\r\n                                    rlCreate.setOnClickListener(view2 -> {\r\n                                        comefrom_search = 0;\r\n                                        addToPlayList = true;\r\n                                        MyPlaylistId = PlaylistID;\r\n                                        dialog.dismiss();\r\n                                        Intent intent = new Intent(ctx, DashboardActivity.class);\r\n                                        intent.putExtra(\"Goplaylist\", \"1\");\r\n                                        intent.putExtra(\"PlaylistID\", PlaylistID);\r\n                                        intent.putExtra(\"PlaylistName\", name);\r\n                                        intent.putExtra(\"PlaylistImage\", \"\");\r\n                                        startActivity(intent);\r\n                                        finish();\r\n                                    });\r\n\r\n                                    tvCancel.setOnClickListener(v -> {\r\n                                        dialog.dismiss();\r\n                                        finish();\r\n                                    });\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n                                }\r\n                            } else if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AddToPlaylist> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private class AddPlaylistAdapter extends RecyclerView.Adapter<AddPlaylistAdapter.MyViewHolder> {\r\n        Context ctx;\r\n        private List<PlaylistingModel.ResponseData> listModel;\r\n\r\n        public AddPlaylistAdapter(List<PlaylistingModel.ResponseData> listModel, Context ctx) {\r\n            this.listModel = listModel;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            AddPlayListLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.add_play_list_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(listModel.get(position).getName());\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.16f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(listModel.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            binding.btnAddPlatLists.setOnClickListener(view -> {\r\n                final Dialog dialog = new Dialog(ctx);\r\n                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                dialog.setContentView(R.layout.create_palylist);\r\n                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                final EditText edtCreate = dialog.findViewById(R.id.edtCreate);\r\n                final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                final Button btnSendCode = dialog.findViewById(R.id.btnSendCode);\r\n\r\n                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                        dialog.dismiss();\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n\r\n                TextWatcher popupTextWatcher = new TextWatcher() {\r\n                    @Override\r\n                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                    }\r\n\r\n                    @Override\r\n                    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                        String number = edtCreate.getText().toString().trim();\r\n                        if (!number.isEmpty()) {\r\n                            btnSendCode.setEnabled(true);\r\n                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                            btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                        } else {\r\n                            btnSendCode.setEnabled(false);\r\n                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                            btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void afterTextChanged(Editable s) {\r\n                    }\r\n                };\r\n\r\n\r\n                edtCreate.addTextChangedListener(popupTextWatcher);\r\n                btnSendCode.setOnClickListener(view1 -> {\r\n                    if (edtCreate.getText().toString().equalsIgnoreCase(\"\")) {\r\n                        BWSApplication.showToast(\"Please provide the playlist's name\", ctx);\r\n                    } else {\r\n                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                            Call<CreatePlaylistModel> listCall = APIClient.getClient().getCreatePlaylist(UserID, edtCreate.getText().toString());\r\n                            listCall.enqueue(new Callback<CreatePlaylistModel>() {\r\n                                @Override\r\n                                public void onResponse(Call<CreatePlaylistModel> call, Response<CreatePlaylistModel> response) {\r\n                                    if (response.isSuccessful()) {\r\n                                        CreatePlaylistModel listsModel = response.body();\r\n                                        if (listsModel.getResponseData().getIscreated().equalsIgnoreCase(\"1\")) {\r\n                                            dialog.dismiss();\r\n                                            prepareData(ctx);\r\n                                            String PlaylistID = listsModel.getResponseData().getId();\r\n                                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                                if (isDisclaimer == 1) {\r\n                                                    BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                                                } else {\r\n                                                    callAddPlaylistFromPlaylist(PlaylistID, listsModel.getResponseData().getName(), dialog, \"0\");\r\n                                                }\r\n                                            } else {\r\n                                                callAddPlaylistFromPlaylist(PlaylistID, listsModel.getResponseData().getName(), dialog, \"0\");\r\n\r\n                                            }\r\n                                        } else {\r\n                                            BWSApplication.showToast(listsModel.getResponseMessage(), ctx);\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onFailure(Call<CreatePlaylistModel> call, Throwable t) {\r\n                                }\r\n                            });\r\n                        } else {\r\n                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                        }\r\n\r\n\r\n                    }\r\n                });\r\n                tvCancel.setOnClickListener(v -> dialog.dismiss());\r\n                dialog.show();\r\n                dialog.setCancelable(false);\r\n\r\n            });\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    String PlaylistID = listModel.get(position).getID();\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        } else {\r\n                            final Dialog dialogx = new Dialog(ctx);\r\n                            callAddPlaylistFromPlaylist(PlaylistID, listModel.get(position).getName(), dialogx, \"1\");\r\n                        }\r\n                    } else {\r\n                        final Dialog dialogx = new Dialog(ctx);\r\n                        callAddPlaylistFromPlaylist(PlaylistID, listModel.get(position).getName(), dialogx, \"1\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModel.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            AddPlayListLayoutBinding binding;\r\n\r\n            public MyViewHolder(AddPlayListLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddPlaylistActivity.java	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddPlaylistActivity.java	(date 1605711637930)
@@ -88,7 +88,105 @@
         RecyclerView.LayoutManager played = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);
         binding.rvPlayLists.setLayoutManager(played);
         binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());
+        binding.llError.setVisibility(View.GONE);
+        binding.tvFound.setText("No result found");
         prepareData(ctx);
+
+        binding.btnAddPlatLists.setOnClickListener(view -> {
+            final Dialog dialog = new Dialog(ctx);
+            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
+            dialog.setContentView(R.layout.create_palylist);
+            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));
+            dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+            final EditText edtCreate = dialog.findViewById(R.id.edtCreate);
+            final TextView tvCancel = dialog.findViewById(R.id.tvCancel);
+            final Button btnSendCode = dialog.findViewById(R.id.btnSendCode);
+
+            dialog.setOnKeyListener((v, keyCode, event) -> {
+                if (keyCode == KeyEvent.KEYCODE_BACK) {
+                    dialog.dismiss();
+                    return true;
+                }
+                return false;
+            });
+
+            TextWatcher popupTextWatcher = new TextWatcher() {
+                @Override
+                public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+                }
+
+                @Override
+                public void onTextChanged(CharSequence s, int start, int before, int count) {
+                    String number = edtCreate.getText().toString().trim();
+                    if (!number.isEmpty()) {
+                        btnSendCode.setEnabled(true);
+                        btnSendCode.setTextColor(getResources().getColor(R.color.white));
+                        btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);
+                    } else {
+                        btnSendCode.setEnabled(false);
+                        btnSendCode.setTextColor(getResources().getColor(R.color.white));
+                        btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);
+                    }
+                }
+
+                @Override
+                public void afterTextChanged(Editable s) {
+                }
+            };
+
+
+            edtCreate.addTextChangedListener(popupTextWatcher);
+            btnSendCode.setOnClickListener(view1 -> {
+                if (edtCreate.getText().toString().equalsIgnoreCase("")) {
+                    BWSApplication.showToast("Please provide the playlist's name", ctx);
+                } else {
+                    if (BWSApplication.isNetworkConnected(ctx)) {
+                        Call<CreatePlaylistModel> listCall = APIClient.getClient().getCreatePlaylist(UserID, edtCreate.getText().toString());
+                        listCall.enqueue(new Callback<CreatePlaylistModel>() {
+                            @Override
+                            public void onResponse(Call<CreatePlaylistModel> call, Response<CreatePlaylistModel> response) {
+                                if (response.isSuccessful()) {
+                                    CreatePlaylistModel listsModel = response.body();
+                                    if (listsModel.getResponseData().getIscreated().equalsIgnoreCase("1")) {
+                                        dialog.dismiss();
+                                        prepareData(ctx);
+                                        String PlaylistID = listsModel.getResponseData().getId();
+                                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
+                                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
+                                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
+                                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, "0");
+                                        if (audioPlay && AudioFlag.equalsIgnoreCase("SubPlayList") && pID.equalsIgnoreCase(PlaylistID)) {
+                                            if (isDisclaimer == 1) {
+                                                BWSApplication.showToast("The audio shall add after playing the disclaimer", ctx);
+                                            } else {
+                                                callAddPlaylistFromPlaylist(PlaylistID, listsModel.getResponseData().getName(), dialog, "0");
+                                            }
+                                        } else {
+                                            callAddPlaylistFromPlaylist(PlaylistID, listsModel.getResponseData().getName(), dialog, "0");
+
+                                        }
+                                    } else {
+                                        BWSApplication.showToast(listsModel.getResponseMessage(), ctx);
+                                    }
+
+                                }
+                            }
+
+                            @Override
+                            public void onFailure(Call<CreatePlaylistModel> call, Throwable t) {
+                            }
+                        });
+                    } else {
+                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);
+                    }
+
+
+                }
+            });
+            tvCancel.setOnClickListener(v -> dialog.dismiss());
+            dialog.show();
+            dialog.setCancelable(false);
+        });
     }
 
     @Override
@@ -113,8 +211,15 @@
                     if (response.isSuccessful()) {
                         BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
                         PlaylistingModel model = response.body();
-                        AddPlaylistAdapter addPlaylistAdapter = new AddPlaylistAdapter(model.getResponseData(), ctx);
-                        binding.rvPlayLists.setAdapter(addPlaylistAdapter);
+                        if (model.getResponseData().size() == 0) {
+                            binding.llError.setVisibility(View.VISIBLE);
+                            binding.rvPlayLists.setVisibility(View.GONE);
+                        } else {
+                            binding.llError.setVisibility(View.GONE);
+                            binding.rvPlayLists.setVisibility(View.VISIBLE);
+                            AddPlaylistAdapter addPlaylistAdapter = new AddPlaylistAdapter(model.getResponseData(), ctx);
+                            binding.rvPlayLists.setAdapter(addPlaylistAdapter);
+                        }
                     }
                 }
 
@@ -328,103 +433,6 @@
             Glide.with(ctx).load(listModel.get(position).getImage()).thumbnail(0.05f)
                     .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);
 
-            binding.btnAddPlatLists.setOnClickListener(view -> {
-                final Dialog dialog = new Dialog(ctx);
-                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
-                dialog.setContentView(R.layout.create_palylist);
-                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));
-                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
-                final EditText edtCreate = dialog.findViewById(R.id.edtCreate);
-                final TextView tvCancel = dialog.findViewById(R.id.tvCancel);
-                final Button btnSendCode = dialog.findViewById(R.id.btnSendCode);
-
-                dialog.setOnKeyListener((v, keyCode, event) -> {
-                    if (keyCode == KeyEvent.KEYCODE_BACK) {
-                        dialog.dismiss();
-                        return true;
-                    }
-                    return false;
-                });
-
-                TextWatcher popupTextWatcher = new TextWatcher() {
-                    @Override
-                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
-                    }
-
-                    @Override
-                    public void onTextChanged(CharSequence s, int start, int before, int count) {
-                        String number = edtCreate.getText().toString().trim();
-                        if (!number.isEmpty()) {
-                            btnSendCode.setEnabled(true);
-                            btnSendCode.setTextColor(getResources().getColor(R.color.white));
-                            btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);
-                        } else {
-                            btnSendCode.setEnabled(false);
-                            btnSendCode.setTextColor(getResources().getColor(R.color.white));
-                            btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);
-                        }
-                    }
-
-                    @Override
-                    public void afterTextChanged(Editable s) {
-                    }
-                };
-
-
-                edtCreate.addTextChangedListener(popupTextWatcher);
-                btnSendCode.setOnClickListener(view1 -> {
-                    if (edtCreate.getText().toString().equalsIgnoreCase("")) {
-                        BWSApplication.showToast("Please provide the playlist's name", ctx);
-                    } else {
-                        if (BWSApplication.isNetworkConnected(ctx)) {
-                            Call<CreatePlaylistModel> listCall = APIClient.getClient().getCreatePlaylist(UserID, edtCreate.getText().toString());
-                            listCall.enqueue(new Callback<CreatePlaylistModel>() {
-                                @Override
-                                public void onResponse(Call<CreatePlaylistModel> call, Response<CreatePlaylistModel> response) {
-                                    if (response.isSuccessful()) {
-                                        CreatePlaylistModel listsModel = response.body();
-                                        if (listsModel.getResponseData().getIscreated().equalsIgnoreCase("1")) {
-                                            dialog.dismiss();
-                                            prepareData(ctx);
-                                            String PlaylistID = listsModel.getResponseData().getId();
-                                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
-                                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);
-                                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
-                                            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, "0");
-                                            if (audioPlay && AudioFlag.equalsIgnoreCase("SubPlayList") && pID.equalsIgnoreCase(PlaylistID)) {
-                                                if (isDisclaimer == 1) {
-                                                    BWSApplication.showToast("The audio shall add after playing the disclaimer", ctx);
-                                                } else {
-                                                    callAddPlaylistFromPlaylist(PlaylistID, listsModel.getResponseData().getName(), dialog, "0");
-                                                }
-                                            } else {
-                                                callAddPlaylistFromPlaylist(PlaylistID, listsModel.getResponseData().getName(), dialog, "0");
-
-                                            }
-                                        } else {
-                                            BWSApplication.showToast(listsModel.getResponseMessage(), ctx);
-                                        }
-
-                                    }
-                                }
-
-                                @Override
-                                public void onFailure(Call<CreatePlaylistModel> call, Throwable t) {
-                                }
-                            });
-                        } else {
-                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);
-                        }
-
-
-                    }
-                });
-                tvCancel.setOnClickListener(v -> dialog.dismiss());
-                dialog.show();
-                dialog.setCancelable(false);
-
-            });
-
             holder.binding.llMainLayout.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View view) {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewSuggestedActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.databinding.ActivityViewSuggestedBinding;\r\nimport com.brainwellnessspa.databinding.DownloadsLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.myAudioId;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.addToSearch;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.MyPlaylistIds;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.PlaylistIDMS;\r\n\r\npublic class ViewSuggestedActivity extends AppCompatActivity {\r\n    ActivityViewSuggestedBinding binding;\r\n    Activity activity;\r\n    Context ctx;\r\n    String UserID, AudioFlag, Name, PlaylistID;\r\n    ArrayList<SuggestedModel.ResponseData> AudiolistsModel;\r\n    ArrayList<SearchPlaylistModel.ResponseData> PlaylistModel;\r\n    Handler handler3;\r\n    int startTime;\r\n    private long currentDuration = 0;\r\n    long myProgress = 0, diff = 0;\r\n    private Runnable UpdateSongTime3;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_view_suggested);\r\n        ctx = ViewSuggestedActivity.this;\r\n        activity = ViewSuggestedActivity.this;\r\n        handler3 = new Handler();\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        binding.llBack.setOnClickListener(view -> {\r\n            Intent i = new Intent(ctx, AddAudioActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        if (getIntent() != null) {\r\n            Name = getIntent().getStringExtra(\"Name\");\r\n        }\r\n        if (getIntent() != null) {\r\n            PlaylistID = getIntent().getStringExtra(CONSTANTS.PlaylistID);\r\n        }\r\n        if (getIntent() != null) {\r\n            AudiolistsModel = getIntent().getParcelableArrayListExtra(\"AudiolistModel\");\r\n        }\r\n        if (getIntent() != null) {\r\n            PlaylistModel = getIntent().getParcelableArrayListExtra(\"PlaylistModel\");\r\n        }\r\n        PrepareData();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        Intent i = new Intent(ctx, AddAudioActivity.class);\r\n        i.putExtra(\"PlaylistID\", PlaylistID);\r\n        startActivity(i);\r\n        finish();\r\n    }\r\n\r\n    public void PrepareData() {\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n            comefromDownload = \"1\";\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 210);\r\n            binding.llSpace.setLayoutParams(params);\r\n        } else {\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 20);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n        binding.tvTitle.setText(Name);\r\n        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvMainAudio.setLayoutManager(layoutManager);\r\n        binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n        if (Name.equalsIgnoreCase(\"Recommended  Audios\")) {\r\n            AudiosListAdpater suggestedAdpater = new AudiosListAdpater(AudiolistsModel);\r\n            binding.rvMainAudio.setAdapter(suggestedAdpater);\r\n        } else if (Name.equalsIgnoreCase(\"Recommended Playlist\")) {\r\n            SuggestionPlayListsAdpater adpater = new SuggestionPlayListsAdpater(PlaylistModel);\r\n            binding.rvMainAudio.setAdapter(adpater);\r\n        }\r\n    }\r\n\r\n    private void callAddAudioToPlaylist(String AudioID, String FromPlaylistId, String s1) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<AddToPlaylist> listCall = APIClient.getClient().getAddSearchAudioFromPlaylist(UserID, AudioID, PlaylistID, FromPlaylistId);\r\n            listCall.enqueue(new Callback<AddToPlaylist>() {\r\n                @Override\r\n                public void onResponse(Call<AddToPlaylist> call, Response<AddToPlaylist> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        AddToPlaylist listModels = response.body();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        if (audioPlay) {\r\n                            if (AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                Gson gsonx = new Gson();\r\n                                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                                }.getType();\r\n                                ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();\r\n                                mainPlayModelListold = gsonx.fromJson(json, type);\r\n                                String id = mainPlayModelListold.get(pos).getID();\r\n                                ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();\r\n                                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();\r\n\r\n                                for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                    MainPlayModel mainPlayModel = new MainPlayModel();\r\n                                    mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                    mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                    mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                    mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                    mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                    mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                    mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                    mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                    mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                    mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                    mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                    mainPlayModelList.add(mainPlayModel);\r\n                                }\r\n                                for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                    SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                    mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                    mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                    mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                    mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                    mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                    mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                    mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                    mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                    mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                    mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                    mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                    playlistSongs.add(mainPlayModel);\r\n                                }\r\n\r\n                                for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                    if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {\r\n                                        pos = i;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                SharedPreferences.Editor editor = sharedd.edit();\r\n                                Gson gson = new Gson();\r\n                                String jsonx = gson.toJson(mainPlayModelList);\r\n                                String json1 = gson.toJson(playlistSongs);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                editor.commit();\r\n                            }\r\n                        }\r\n                        BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                        if (s1.equalsIgnoreCase(\"1\")) {\r\n                            finish();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AddToPlaylist> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public class AudiosListAdpater extends RecyclerView.Adapter<AudiosListAdpater.MyViewHolder> {\r\n        private ArrayList<SuggestedModel.ResponseData> AudiolistsModel;\r\n        String songId;\r\n\r\n        public AudiosListAdpater(ArrayList<SuggestedModel.ResponseData> AudiolistsModel) {\r\n            this.AudiolistsModel = AudiolistsModel;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binds.tvTitle.setText(AudiolistsModel.get(position).getName());\r\n            holder.binds.tvTime.setText(AudiolistsModel.get(position).getAudioDuration());\r\n            holder.binds.pbProgress.setVisibility(View.GONE);\r\n\r\n            UpdateSongTime3 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n                        startTime = getStartTime();\r\n                        myProgress = currentDuration;\r\n                        currentDuration = getStartTime();\r\n                        if (currentDuration == 0 && isCompleteStop) {\r\n                            notifyDataSetChanged();\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        } else if (currentDuration >= 1 && !isPause) {\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                        } else if (currentDuration >= 1 && isPause) {\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        }\r\n\r\n                        if (currentDuration <= 555) {\r\n                            notifyDataSetChanged();\r\n                        }\r\n                        /*if(isPause && ps == 0){\r\n                            ps++;\r\n                            notifyDataSetChanged();\r\n                        }else if(!isPause && nps == 0){\r\n                            nps++;\r\n                            notifyDataSetChanged();\r\n                        }*/\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    handler3.postDelayed(this, 500);\r\n                }\r\n            };\r\n            SharedPreferences sharedzw = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"Downloadlist\") &&\r\n                    !AudioFlag.equalsIgnoreCase(\"SubPlayList\") && !AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                if (myAudioId.equalsIgnoreCase(AudiolistsModel.get(position).getID())) {\r\n                    songId = myAudioId;\r\n                    holder.binds.equalizerview.animateBars();\r\n                    holder.binds.equalizerview.setVisibility(View.VISIBLE);\r\n                    holder.binds.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n                    holder.binds.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binds.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n//            holder.binding.equalizerview.stopBars();\r\n//                        ps =0;\r\n//                        nps = 0;\r\n                } else {\r\n                    holder.binds.equalizerview.setVisibility(View.GONE);\r\n                    holder.binds.llMainLayout.setBackgroundResource(R.color.white);\r\n                    holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                }\r\n                handler3.postDelayed(UpdateSongTime3, 500);\r\n            } else {\r\n                holder.binds.equalizerview.setVisibility(View.GONE);\r\n                holder.binds.llMainLayout.setBackgroundResource(R.color.white);\r\n                holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                handler3.removeCallbacks(UpdateSongTime3);\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binds.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binds.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(AudiolistsModel.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binds.ivRestaurantImage);\r\n            holder.binds.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binds.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binds.ivLock.setVisibility(View.GONE);\r\n                } else if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binds.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binds.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                    || AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binds.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binds.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n                if (AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binds.ivLock.setVisibility(View.GONE);\r\n                        try {\r\n                            player = 1;\r\n                            if (isPrepare || isMediaStart || isPause) {\r\n                                MusicService.stopMedia();\r\n                            }\r\n                            isPause = false;\r\n                            isMediaStart = false;\r\n                            isPrepare = false;\r\n                            isCompleteStop = false;\r\n                            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                            SharedPreferences.Editor editor = shared.edit();\r\n                            Gson gson = new Gson();\r\n                            ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                            SuggestedModel.ResponseData mainPlayModel = new SuggestedModel.ResponseData();\r\n                            mainPlayModel.setID(\"0\");\r\n                            mainPlayModel.setName(\"Disclaimer\");\r\n                            mainPlayModel.setAudioFile(\"\");\r\n                            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                            mainPlayModel.setAudiomastercat(\"\");\r\n                            mainPlayModel.setAudioSubCategory(\"\");\r\n                            mainPlayModel.setImageFile(\"\");\r\n                            mainPlayModel.setLike(\"\");\r\n                            mainPlayModel.setDownload(\"\");\r\n                            mainPlayModel.setAudioDuration(\"00:48\");\r\n                            listModelList2.add(mainPlayModel);\r\n                            listModelList2.add(AudiolistsModel.get(position));\r\n                            String json = gson.toJson(listModelList2);\r\n                            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                            editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchAudio\");\r\n                            editor.commit();\r\n                            Fragment fragment = new TransparentPlayerFragment();\r\n                            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .add(R.id.flContainer, fragment).commit();\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    } else if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binds.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binds.ivLock.setVisibility(View.VISIBLE);\r\n                    }\r\n                } else if (AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binds.ivLock.setVisibility(View.GONE);\r\n                    try {\r\n                        player = 1;\r\n                        if (isPrepare || isMediaStart || isPause) {\r\n                            MusicService.stopMedia();\r\n                        }\r\n                        isPause = false;\r\n                        isMediaStart = false;\r\n                        isPrepare = false;\r\n                        isCompleteStop = false;\r\n                        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                        SuggestedModel.ResponseData mainPlayModel = new SuggestedModel.ResponseData();\r\n                        mainPlayModel.setID(\"0\");\r\n                        mainPlayModel.setName(\"Disclaimer\");\r\n                        mainPlayModel.setAudioFile(\"\");\r\n                        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                        mainPlayModel.setAudiomastercat(\"\");\r\n                        mainPlayModel.setAudioSubCategory(\"\");\r\n                        mainPlayModel.setImageFile(\"\");\r\n                        mainPlayModel.setLike(\"\");\r\n                        mainPlayModel.setDownload(\"\");\r\n                        mainPlayModel.setAudioDuration(\"00:48\");\r\n                        listModelList2.add(mainPlayModel);\r\n                        listModelList2.add(AudiolistsModel.get(position));\r\n                        String json = gson.toJson(listModelList2);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchAudio\");\r\n                        editor.commit();\r\n                        Fragment fragment = new TransparentPlayerFragment();\r\n                        FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                        fragmentManager1.beginTransaction()\r\n                                .add(R.id.flContainer, fragment).commit();\r\n\r\n                        handler3.postDelayed(UpdateSongTime3, 500);\r\n                        notifyDataSetChanged();\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n            });\r\n            holder.binds.llRemoveAudio.setOnClickListener(view -> {\r\n                if (AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binds.ivLock.setVisibility(View.GONE);\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddAudioToPlaylist(AudiolistsModel.get(position).getID(), \"\", \"0\");\r\n                            }\r\n                        } else {\r\n                            callAddAudioToPlaylist(AudiolistsModel.get(position).getID(), \"\", \"0\");\r\n                        }\r\n                    } else if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binds.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binds.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    }\r\n                } else if (AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binds.ivLock.setVisibility(View.GONE);\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            } else {\r\n                                callAddAudioToPlaylist(AudiolistsModel.get(position).getID(), \"\", \"0\");\r\n                            }\r\n                        } else {\r\n                            callAddAudioToPlaylist(AudiolistsModel.get(position).getID(), \"\", \"0\");\r\n                        }\r\n                    } else if (AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || AudiolistsModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binds.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binds.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    }\r\n                } else if (AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || AudiolistsModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binds.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binds.ivLock.setVisibility(View.GONE);\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        } else {\r\n                            callAddAudioToPlaylist(AudiolistsModel.get(position).getID(), \"\", \"0\");\r\n                        }\r\n                    } else {\r\n                        callAddAudioToPlaylist(AudiolistsModel.get(position).getID(), \"\", \"0\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return AudiolistsModel.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binds;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binds) {\r\n                super(binds.getRoot());\r\n                this.binds = binds;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SuggestionPlayListsAdpater extends RecyclerView.Adapter<SuggestionPlayListsAdpater.MyViewHolder> {\r\n        private ArrayList<SearchPlaylistModel.ResponseData> PlaylistModel;\r\n\r\n        public SuggestionPlayListsAdpater(ArrayList<SearchPlaylistModel.ResponseData> PlaylistModel) {\r\n            this.PlaylistModel = PlaylistModel;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(PlaylistModel.get(position).getName());\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n            holder.binding.equalizerview.setVisibility(View.GONE);\r\n            if (PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                    PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                            PlaylistModel.get(position).getTotalhour().equalsIgnoreCase(\"\")\r\n                            && PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                holder.binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n            } else {\r\n                if (PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() + \" Audio | \"\r\n                            + PlaylistModel.get(position).getTotalhour() + \"h 0m\");\r\n                } else {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() +\r\n                            \" Audios | \" + PlaylistModel.get(position).getTotalhour() + \"h \" + PlaylistModel.get(position).getTotalminute() + \"m\");\r\n                }\r\n            }\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(PlaylistModel.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n            if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    comefromDownload = \"0\";\r\n                    addToSearch = true;\r\n                    MyPlaylistIds = PlaylistModel.get(position).getID();\r\n                    PlaylistIDMS = PlaylistID;\r\n                    finish();\r\n                }\r\n            });\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    comefromDownload = \"0\";\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        } else {\r\n                            callAddAudioToPlaylist(\"\", PlaylistModel.get(position).getID(), \"1\");\r\n                        }\r\n                    } else {\r\n                        callAddAudioToPlaylist(\"\", PlaylistModel.get(position).getID(), \"1\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return PlaylistModel.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewSuggestedActivity.java	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewSuggestedActivity.java	(date 1605711637968)
@@ -301,7 +301,10 @@
                     !AudioFlag.equalsIgnoreCase("SubPlayList") && !AudioFlag.equalsIgnoreCase("TopCategories")) {
                 if (myAudioId.equalsIgnoreCase(AudiolistsModel.get(position).getID())) {
                     songId = myAudioId;
-                    holder.binds.equalizerview.animateBars();
+                    if (isPause) {
+                        holder.binds.equalizerview.stopBars();
+                    } else
+                        holder.binds.equalizerview.animateBars();
                     holder.binds.equalizerview.setVisibility(View.VISIBLE);
                     holder.binds.llMainLayout.setBackgroundResource(R.color.highlight_background);
                     holder.binds.ivBackgroundImage.setVisibility(View.VISIBLE);
Index: app/src/main/java/com/brainwellnessspa/BWSApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa;\r\n\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.app.Application;\r\nimport android.app.Notification;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.app.Service;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.media.RingtoneManager;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.provider.Settings;\r\nimport android.support.v4.media.session.MediaControllerCompat;\r\nimport android.support.v4.media.session.MediaSessionCompat;\r\nimport android.support.v4.media.session.PlaybackStateCompat;\r\nimport android.util.Base64;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.Gravity;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.core.app.NotificationManagerCompat;\r\nimport androidx.media.MediaSessionManager;\r\nimport androidx.media.session.MediaButtonReceiver;\r\nimport androidx.room.migration.Migration;\r\nimport androidx.sqlite.db.SupportSQLiteDatabase;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Activities.DashboardActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Services.NotificationActionService;\r\nimport com.brainwellnessspa.SplashModule.Models.VersionModel;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.AppSignatureHashHelper;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.CryptLib;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.Utility.NotificationDismissedReceiver;\r\nimport com.brainwellnessspa.Utility.PlaybackStatus;\r\nimport com.brainwellnessspa.Utility.Track;\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Random;\r\nimport java.util.TimeZone;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\nimport javax.net.ssl.HttpsURLConnection;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static java.sql.DriverManager.println;\r\n\r\npublic class BWSApplication extends Application {\r\n    private static Context mContext;\r\n    private static BWSApplication BWSApplication;\r\n    private static List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    private static final int NOTIFICATION_ID = 101;\r\n    private static Bitmap myBitmap;\r\n    private static Service service;\r\n    private static Bitmap mCurrTrackCover;\r\n    public static MediaSessionCompat mMediaSession = null;\r\n    public static PendingIntent play_pauseAction = null;\r\n    public static boolean usesChronometer = false;\r\n    public static boolean showWhen = false;\r\n    public static Long notifWhen = 0L;\r\n    public static MediaSessionManager mediaSessionManager;\r\n    public static MediaSessionCompat mediaSession;\r\n    public static MediaControllerCompat.TransportControls transportControls;\r\n    private static Track track;\r\n    public static final String CHANNEL_ID = \"channel1\";\r\n    public static final String ACTION_PREVIUOS = \"actionprevious\";\r\n    public static final String ACTION_PLAY = \"actionplay\";\r\n    public static final String ACTION_NEXT = \"actionnext\";\r\n//    public static Notification notification;\r\n//    public static NotificationManager notificationManager;\r\n\r\n    public static Context getContext() {\r\n        return mContext;\r\n    }\r\n\r\n    public static MeasureRatio measureRatio(Context context, float outerMargin, float aspectX, float aspectY, float proportion, float innerMargin) {\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        try {\r\n            WindowManager windowmanager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\r\n            windowmanager.getDefaultDisplay().getMetrics(displayMetrics);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        float width = displayMetrics.widthPixels / displayMetrics.density;\r\n        float widthImg = ((width - outerMargin) * proportion) - innerMargin;\r\n        float height = widthImg * aspectY / aspectX;\r\n        //Log.e(\"width.........\", \"\" + context.getClass().getSimpleName()+\",\"+width);\r\n//        //Log.e(\"widthImg.........\", \"\" + context.getClass().getSimpleName()+\",\"+widthImg);\r\n//        //Log.e(\"height...........\", \"\" + context.getClass().getSimpleName()+\",\"+height);\r\n//        //Log.e(\"displayMetrics.density...........\", \"\" + context.getClass().getSimpleName()+\",\"+displayMetrics.density);\r\n        return new MeasureRatio(widthImg, height, displayMetrics.density, proportion);\r\n    }\r\n\r\n    public static final Migration MIGRATION_1_2 = new Migration(1, 2) {\r\n        @Override\r\n        public void migrate(SupportSQLiteDatabase database) {\r\n            database.execSQL(\"ALTER TABLE 'playlist_table' ADD COLUMN 'PlaylistImageDetails' TEXT\");\r\n        }\r\n    };\r\n\r\n/*\r\n    public static void createNotification(Context context, MainPlayModel track, int playbutton, int pos, int size) {\r\n        try {\r\n            getMediaBitmep(track,context,playbutton);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n*/\r\n\r\n/*\r\n    private static void getMediaBitmep(MainPlayModel track, Context context, int playbutton) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                try {\r\n                    if(track.getAudioFile().equalsIgnoreCase(\"\")){\r\n                        myBitmap = BitmapFactory.decodeResource(context.getResources(),R.drawable.disclaimer);\r\n                    }else {\r\n                        URL url = new URL(track.getImageFile());\r\n                        myBitmap = BitmapFactory.decodeStream(url.openConnection().getInputStream());\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\r\n                MediaSessionCompat mediaSessionCompat = new MediaSessionCompat(context, \"tag\");\r\n                PendingIntent pendingIntentPrevious;\r\n                Intent intent = new Intent(context, PlayWellnessActivity.class);\r\n                intent.putExtra(\"com.brainwellnessspa.notifyId\", NOTIFICATION_ID);\r\n                PendingIntent pIntent = PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n                int drw_previous;\r\n//            if (pos == 0) {\r\n//                pendingIntentPrevious = null;\r\n//                drw_previous = 0;\r\n//            } else {\r\n                Intent intentPrevious = new Intent(context, NotificationActionService.class).setAction(ACTION_PREVIUOS);\r\n                pendingIntentPrevious = PendingIntent.getBroadcast(context, 0, intentPrevious, PendingIntent.FLAG_UPDATE_CURRENT);\r\n                drw_previous = R.drawable.ic_skip_previous_black_24dp;\r\n//            }\r\n\r\n                Intent intentPlay = new Intent(context, NotificationActionService.class).setAction(ACTION_PLAY);\r\n                PendingIntent pendingIntentPlay = PendingIntent.getBroadcast(context, 0, intentPlay, PendingIntent.FLAG_UPDATE_CURRENT);\r\n                PendingIntent pendingIntentNext;\r\n                int drw_next;\r\n//            if (pos == size) {\r\n//                pendingIntentNext = null;\r\n//                drw_next = 0;\r\n//            } else {\r\n                Intent intentNext = new Intent(context, NotificationActionService.class).setAction(ACTION_NEXT);\r\n                pendingIntentNext = PendingIntent.getBroadcast(context, 0, intentNext, PendingIntent.FLAG_UPDATE_CURRENT);\r\n                drw_next = R.drawable.ic_skip_next_black_24dp;\r\n//            }\r\n//            BitmapFactory.decodeResource(context.getResources(), R.drawable.square_app_icon)\r\n                try {\r\n//                byte[] encodeByte = Base64.decode(track.getImageFile(), Base64.DEFAULT);\r\n//                myBitmap = BitmapFactory.decodeByteArray(encodeByte, 0, encodeByte.length);\r\n                } catch (Exception e) {\r\n                    e.getMessage();\r\n                }\r\n                //create notification\r\n                notification = new NotificationCompat.Builder(context, CHANNEL_ID)\r\n                        .setSmallIcon(R.drawable.ic_music_note)\r\n                        .setContentTitle(track.getName())\r\n                        .setContentText(track.getAudioDirection())\r\n                        .setLargeIcon(myBitmap)\r\n                        .setOnlyAlertOnce(true)//show notification for only first time\r\n                        .setShowWhen(false)\r\n                        .setOngoing(true)\r\n                        .setContentIntent(pIntent)\r\n                        .addAction(drw_previous, \"Previous\", pendingIntentPrevious)\r\n                        .addAction(playbutton, \"Play\", pendingIntentPlay)\r\n                        .addAction(drw_next, \"Next\", pendingIntentNext)\r\n                        .setStyle(new androidx.media.app.NotificationCompat.MediaStyle()\r\n                                .setShowActionsInCompactView(0, 1, 2))\r\n                        .setDeleteIntent(\r\n                                MediaButtonReceiver.buildMediaButtonPendingIntent(context, PlaybackStateCompat.ACTION_STOP))\r\n                        .setPriority(NotificationCompat.PRIORITY_LOW)\r\n                        .build();\r\n//.setMediaSession(mediaSessionCompat.getSessionToken())\r\n                notificationManagerCompat.notify(1, notification);\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n*/\r\n\r\n/*\r\n    public static void createChannel(Context ctx) {\r\n        try {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                NotificationChannel channel = new NotificationChannel(CHANNEL_ID,\r\n                        \"KOD Dev\", NotificationManager.IMPORTANCE_LOW);\r\n\r\n                notificationManager = ctx.getSystemService(NotificationManager.class);\r\n                if (notificationManager != null) {\r\n                    notificationManager.createNotificationChannel(channel);\r\n                }\r\n            } else {\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                    notificationManager = ctx.getSystemService(NotificationManager.class);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n*/\r\n\r\n /*   public static void cancelNotification(Context ctx) {\r\n        notificationManager = (NotificationManager) ctx.getSystemService(Context.NOTIFICATION_SERVICE);\r\n        notificationManager.cancel(NOTIFICATION_ID); // Notification ID to cancel\r\n    }*/\r\n\r\n    public static void getLatasteUpdate(Context context) {\r\n        String appURI = \"https://play.google.com/store/apps/details?id=com.brainwellnessspa\";\r\n        if (BWSApplication.isNetworkConnected(context)) {\r\n            Call<VersionModel> listCall = APIClient.getClient().getVersionDatas(String.valueOf(BuildConfig.VERSION_CODE), CONSTANTS.FLAG_ONE);\r\n            listCall.enqueue(new Callback<VersionModel>() {\r\n                @Override\r\n                public void onResponse(Call<VersionModel> call, Response<VersionModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        VersionModel versionModel = response.body();\r\n//                    if (versionModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                        if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"0\")) {\r\n                            AlertDialog.Builder builder = new AlertDialog.Builder(context);\r\n                            builder.setTitle(\"Update Brain Wellness Spa\");\r\n                            builder.setCancelable(false);\r\n                            builder.setMessage(\"Brain Wellness Spa recommends that you update to the latest version\")\r\n                                    .setPositiveButton(\"UPDATE\", (dialog, id) -> {\r\n                                        context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(appURI)));\r\n                                        dialog.cancel();\r\n                                    })\r\n                                    .setNegativeButton(\"NOT NOW\", (dialog, id) -> dialog.dismiss());\r\n                            builder.create().show();\r\n                        } else if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"1\")) {\r\n                            AlertDialog.Builder builder = new AlertDialog.Builder(context);\r\n                            builder.setTitle(\"Update Required\");\r\n                            builder.setCancelable(false);\r\n                            builder.setMessage(\"To keep using Brain Wellness Spa, download the latest version\")\r\n                                    .setCancelable(false)\r\n                                    .setPositiveButton(\"UPDATE\", (dialog, id) -> context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(appURI))));\r\n                            builder.create().show();\r\n                        } else if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"\")) {\r\n                        }\r\n                    }\r\n                    /*} else {\r\n                    }*/\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<VersionModel> call, Throwable t) {\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(context.getString(R.string.no_server_found), context);\r\n        }\r\n    }\r\n\r\n    public static String getKey(Context context) {\r\n        AppSignatureHashHelper appSignatureHashHelper = new AppSignatureHashHelper(context);\r\n        String key = appSignatureHashHelper.getAppSignatures().get(0);\r\n\r\n        SharedPreferences shared = context.getSharedPreferences(CONSTANTS.PREF_KEY_Splash, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putString(CONSTANTS.PREF_KEY_SplashKey, appSignatureHashHelper.getAppSignatures().get(0));\r\n        editor.commit();\r\n        return key;\r\n    }\r\n\r\n    public static void showToast(String message, Context context) {\r\n        Toast toast = new Toast(context);\r\n        View view = LayoutInflater.from(context).inflate(R.layout.toast_layout, null);\r\n        TextView tvMessage = view.findViewById(R.id.tvMessage);\r\n        tvMessage.setText(message);\r\n        toast.setGravity(Gravity.BOTTOM | Gravity.CENTER, 0, 35);\r\n        toast.setView(view);\r\n        toast.show();\r\n    }\r\n\r\n    public static String getProgressDisplayLine(long currentBytes, long totalBytes) {\r\n        return getBytesToMBString(currentBytes) + \"/\" + getBytesToMBString(totalBytes);\r\n    }\r\n\r\n    private static String getBytesToMBString(long bytes) {\r\n        return String.format(Locale.ENGLISH, \"%.2fMb\", bytes / (1024.00 * 1024.00));\r\n    }\r\n/*    public static List<DownloadAudioDetails> GetAllMedia(Context ctx) {\r\n\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }*/\r\n\r\n    public static synchronized BWSApplication getInstance() {\r\n        return BWSApplication;\r\n    }\r\n\r\n    public static void hideProgressBar(ProgressBar progressBar, FrameLayout progressBarHolder, Activity ctx) {\r\n        try {\r\n            progressBarHolder.setVisibility(View.GONE);\r\n            progressBar.setVisibility(View.GONE);\r\n            ctx.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void showProgressBar(ProgressBar progressBar, FrameLayout progressBarHolder, Activity ctx) {\r\n        try {\r\n            progressBarHolder.setVisibility(View.VISIBLE);\r\n            ctx.getWindow().setFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE, WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);\r\n            progressBar.setVisibility(View.VISIBLE);\r\n            progressBar.invalidate();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static boolean isEmailValid(String email) {\r\n        boolean isValid = false;\r\n        String expression = \"^[\\\\w\\\\.-]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,3}$\";\r\n        CharSequence inputStr = email;\r\n\r\n        Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);\r\n        Matcher matcher = pattern.matcher(inputStr);\r\n        if (matcher.matches()) {\r\n            isValid = true;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        mContext = this;\r\n        BWSApplication = this;\r\n    }\r\n\r\n    public static boolean isNetworkConnected(Context context) {\r\n        try {\r\n            ConnectivityManager mConnectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n            NetworkInfo mNetworkInfo = mConnectivityManager.getActiveNetworkInfo();\r\n            boolean flag = false;\r\n            ConnectivityManager manager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n//For 3G check\r\n            boolean is3g = manager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE)\r\n                    .isConnectedOrConnecting();\r\n//For WiFi Check\r\n            boolean isWifi = manager.getNetworkInfo(ConnectivityManager.TYPE_WIFI)\r\n                    .isConnectedOrConnecting();\r\n\r\n            flag = !(!is3g && !isWifi);\r\n            return flag;\r\n        } catch (NullPointerException e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static String securityKey() {\r\n        String key;\r\n        String DeviceId = Settings.Secure.getString(getContext().getContentResolver(), Settings.Secure.ANDROID_ID);\r\n        String AES = \"OsEUHhecSs4gRGcy2vMQs1s/XajBrLGADR71cKMRNtA=\";\r\n        String RSA = \"KlWxBHfKPGkkeTjkT7IEo32bZW8GlVCPq/nvVFuYfIY=\";\r\n        String TDES = \"1dpra0SZhVPpiUQvikMvkDxEp7qLLJL9pe9G6Apg01g=\";\r\n        String SHA1 = \"Ey8rBCHsqITEbh7KQKRmYObCGBXqFnvtL5GjMFQWHQo=\";\r\n        String MD5 = \"/qc2rO3RB8Z/XA+CmHY0tCaJch9a5BdlQW1xb7db+bg=\";\r\n\r\n        Calendar calendar = Calendar.getInstance();\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n        calendar.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n        calendar.setTime(new Date());\r\n        SimpleDateFormat outputFmt = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n        String dateAsString = outputFmt.format(calendar.getTime());\r\n        //        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n        //2019-11-21 06:45:32\r\n//        String currentDateandTime = sdf.format(new Date());\r\n        String finalKey = \"\";\r\n        HashMap<String, String> hash_map = new HashMap<String, String>();\r\n        hash_map.put(\"AES\", AES);\r\n        hash_map.put(\"RSA\", RSA);\r\n        hash_map.put(\"TDES\", TDES);\r\n        hash_map.put(\"SHA1\", SHA1);\r\n        hash_map.put(\"MD5\", MD5);\r\n\r\n        Random random = new Random();\r\n        List<String> keys = new ArrayList<String>(hash_map.keySet());\r\n        String randomKey = keys.get(random.nextInt(keys.size()));\r\n        String value = hash_map.get(randomKey);\r\n        key = DeviceId + \".\" + dateAsString + \".\" + randomKey + \".\" + value;\r\n\r\n        try {\r\n            finalKey = ProgramForAES(key);\r\n            System.out.println(finalKey);\r\n        } catch (Exception e) {\r\n        }\r\n        return finalKey;\r\n    }\r\n\r\n    public static String ProgramForAES(String baseString) {\r\n        String cipher = \"\";\r\n        try {\r\n            String key = \"5785abf057d4eea9e59151f75a6fadb724768053df2acdfabb68f2b946b972c6\";\r\n            CryptLib cryptLib = new CryptLib();\r\n            cipher = cryptLib.encryptPlainTextWithRandomIV(baseString, key);\r\n            println(\"cipherText\" + cipher);\r\n            String decryptedString = cryptLib.decryptCipherTextWithRandomIV(cipher, key);\r\n            println(\"decryptedString\" + decryptedString);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return cipher;\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/BWSApplication.java	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/java/com/brainwellnessspa/BWSApplication.java	(date 1605711637981)
@@ -105,8 +105,8 @@
     public static final String ACTION_PREVIUOS = "actionprevious";
     public static final String ACTION_PLAY = "actionplay";
     public static final String ACTION_NEXT = "actionnext";
-//    public static Notification notification;
-//    public static NotificationManager notificationManager;
+    public static Notification notification;
+    public static NotificationManager notificationManager;
 
     public static Context getContext() {
         return mContext;
@@ -137,25 +137,22 @@
         }
     };
 
-/*
     public static void createNotification(Context context, MainPlayModel track, int playbutton, int pos, int size) {
         try {
-            getMediaBitmep(track,context,playbutton);
+            getMediaBitmep(track, context, playbutton);
         } catch (Exception e) {
             e.printStackTrace();
         }
     }
-*/
 
-/*
     private static void getMediaBitmep(MainPlayModel track, Context context, int playbutton) {
         class GetMedia extends AsyncTask<Void, Void, Void> {
             @Override
             protected Void doInBackground(Void... voids) {
                 try {
-                    if(track.getAudioFile().equalsIgnoreCase("")){
-                        myBitmap = BitmapFactory.decodeResource(context.getResources(),R.drawable.disclaimer);
-                    }else {
+                    if (track.getAudioFile().equalsIgnoreCase("")) {
+                        myBitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.disclaimer);
+                    } else {
                         URL url = new URL(track.getImageFile());
                         myBitmap = BitmapFactory.decodeStream(url.openConnection().getInputStream());
                     }
@@ -195,13 +192,7 @@
                 pendingIntentNext = PendingIntent.getBroadcast(context, 0, intentNext, PendingIntent.FLAG_UPDATE_CURRENT);
                 drw_next = R.drawable.ic_skip_next_black_24dp;
 //            }
-//            BitmapFactory.decodeResource(context.getResources(), R.drawable.square_app_icon)
-                try {
-//                byte[] encodeByte = Base64.decode(track.getImageFile(), Base64.DEFAULT);
-//                myBitmap = BitmapFactory.decodeByteArray(encodeByte, 0, encodeByte.length);
-                } catch (Exception e) {
-                    e.getMessage();
-                }
+
                 //create notification
                 notification = new NotificationCompat.Builder(context, CHANNEL_ID)
                         .setSmallIcon(R.drawable.ic_music_note)
@@ -231,9 +222,7 @@
         GetMedia st = new GetMedia();
         st.execute();
     }
-*/
 
-/*
     public static void createChannel(Context ctx) {
         try {
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
@@ -245,20 +234,17 @@
                     notificationManager.createNotificationChannel(channel);
                 }
             } else {
-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-                    notificationManager = ctx.getSystemService(NotificationManager.class);
-                }
+                notificationManager = ctx.getSystemService(NotificationManager.class);
             }
         } catch (Exception e) {
             e.printStackTrace();
         }
     }
-*/
 
- /*   public static void cancelNotification(Context ctx) {
+    public static void cancelNotification(Context ctx) {
         notificationManager = (NotificationManager) ctx.getSystemService(Context.NOTIFICATION_SERVICE);
         notificationManager.cancel(NOTIFICATION_ID); // Notification ID to cancel
-    }*/
+    }
 
     public static void getLatasteUpdate(Context context) {
         String appURI = "https://play.google.com/store/apps/details?id=com.brainwellnessspa";
Index: app/src/main/res/layout/fragment_apt_audio.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:tools=\"http://schemas.android.com/tools\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:clickable=\"true\"\r\n        android:background=\"@color/white\">\r\n\r\n\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\">\r\n\r\n            <androidx.recyclerview.widget.RecyclerView\r\n                android:id=\"@+id/rvAudioList\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginHorizontal=\"@dimen/_12sdp\"\r\n                android:nestedScrollingEnabled=\"true\"\r\n                android:overScrollMode=\"never\"\r\n                android:paddingTop=\"@dimen/_8sdp\"\r\n                android:paddingBottom=\"@dimen/_8sdp\" />\r\n\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:gravity=\"center\"\r\n                android:padding=\"@dimen/_60sdp\">\r\n\r\n                <ProgressBar\r\n                    android:id=\"@+id/progressBar\"\r\n                    android:layout_width=\"@dimen/_50sdp\"\r\n                    android:layout_height=\"@dimen/_50sdp\"\r\n                    android:indeterminateTint=\"@color/blue\"\r\n                    android:scaleType=\"centerInside\"\r\n                    android:visibility=\"gone\" />\r\n\r\n            </LinearLayout>\r\n\r\n            <FrameLayout\r\n                android:id=\"@+id/progressBarHolder\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:alpha=\"0.4\"\r\n                android:animateLayoutChanges=\"true\"\r\n                android:background=\"#C0000000\"\r\n                android:visibility=\"gone\" />\r\n        </RelativeLayout>\r\n    </FrameLayout>\r\n\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_apt_audio.xml	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/res/layout/fragment_apt_audio.xml	(date 1605711637990)
@@ -17,8 +17,6 @@
                 android:id="@+id/rvAudioList"
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content"
-                android:layout_marginHorizontal="@dimen/_12sdp"
-                android:nestedScrollingEnabled="true"
                 android:overScrollMode="never"
                 android:paddingTop="@dimen/_8sdp"
                 android:paddingBottom="@dimen/_8sdp" />
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/DashboardActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.NotificationManager;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.hardware.Sensor;\r\nimport android.hardware.SensorEvent;\r\nimport android.hardware.SensorEventListener;\r\nimport android.media.AudioManager;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.PowerManager;\r\nimport android.telephony.PhoneStateListener;\r\nimport android.telephony.TelephonyManager;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.navigation.ui.AppBarConfiguration;\r\nimport androidx.navigation.ui.NavigationUI;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.databinding.ActivityDashboardBinding;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.InvoiceModule.Activities.InvoiceActivity.invoiceToDashboard;\r\nimport static com.brainwellnessspa.Utility.MusicService.NOTIFICATION_ID;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\n\r\npublic class DashboardActivity extends AppCompatActivity implements AudioManager.OnAudioFocusChangeListener, SensorEventListener {\r\n    public static int player = 0;\r\n    ActivityDashboardBinding binding;\r\n    boolean doubleBackToExitPressedOnce = false;\r\n    String Goplaylist = \"\", PlaylistID = \"\", PlaylistName = \"\", PlaylistImage = \"\";\r\n    TelephonyManager mTelephonyMgr;\r\n    AudioManager mAudioManager;\r\n    BroadcastReceiver broadcastReceiver;\r\n    public static boolean audioPause = false;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_dashboard);\r\n        AppBarConfiguration appBarConfiguration = new AppBarConfiguration.Builder(\r\n                R.id.navigation_audio, R.id.navigation_playlist, R.id.navigation_search,\r\n                R.id.navigation_appointment, R.id.navigation_account).build();\r\n        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);\r\n//        NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration);\r\n        NavigationUI.setupWithNavController(binding.navView, navController);\r\n        mTelephonyMgr = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);\r\n        mTelephonyMgr.listen(mPhoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);\r\n        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);\r\n        try {\r\n            Intent playbackServiceIntent = new Intent(this, MusicService.class);\r\n            startService(playbackServiceIntent);\r\n        }catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);\r\n        PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,\r\n                \"com.brainwellnessspa::MyWakelockTag\");\r\n        wakeLock.acquire();\r\n        if (getIntent().hasExtra(\"Goplaylist\")) {\r\n            Goplaylist = getIntent().getStringExtra(\"Goplaylist\");\r\n            PlaylistID = getIntent().getStringExtra(\"PlaylistID\");\r\n            PlaylistName = getIntent().getStringExtra(\"PlaylistName\");\r\n            PlaylistImage = getIntent().getStringExtra(\"PlaylistImage\");\r\n        }\r\n        if (Goplaylist.equalsIgnoreCase(\"1\")) {\r\n            binding.navView.setSelectedItemId(R.id.navigation_playlist);\r\n            Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n            Bundle bundle = new Bundle();\r\n            bundle.putString(\"New\", \"0\");\r\n            bundle.putString(\"PlaylistID\", PlaylistID);\r\n            bundle.putString(\"PlaylistName\", PlaylistName);\r\n            bundle.putString(\"PlaylistImage\", PlaylistImage);\r\n            bundle.putString(\"MyDownloads\", \"0\");\r\n            myPlaylistsFragment.setArguments(bundle);\r\n            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, myPlaylistsFragment)\r\n                    .commit();\r\n        }\r\n\r\n        if (binding.navView.getSelectedItemId() == R.id.navigation_audio) {\r\n            ComeScreenAccount = 0;\r\n            comefromDownload = \"0\";\r\n        } else if (binding.navView.getSelectedItemId() == R.id.navigation_playlist) {\r\n            ComeScreenAccount = 0;\r\n            comefromDownload = \"0\";\r\n        } else if (binding.navView.getSelectedItemId() == R.id.navigation_search) {\r\n            ComeScreenAccount = 0;\r\n            comefromDownload = \"0\";\r\n        } else if (binding.navView.getSelectedItemId() == R.id.navigation_appointment) {\r\n            ComeScreenAccount = 0;\r\n            comefromDownload = \"0\";\r\n        } else if (binding.navView.getSelectedItemId() == R.id.navigation_account) {\r\n            ComeScreenAccount = 1;\r\n            comefromDownload = \"0\";\r\n        }\r\n//\r\n//        ConnectivityManager connMgr = (ConnectivityManager)\r\n//                getSystemService(Context.CONNECTIVITY_SERVICE);\r\n//// Checks if the device is on a metered network\r\n//        if (connMgr.isActiveNetworkMetered()) {\r\n//            // Checks user’s Data Saver settings.\r\n//            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n//                switch (connMgr.getRestrictBackgroundStatus()) {\r\n//                    case ConnectivityManager.RESTRICT_BACKGROUND_STATUS_ENABLED:\r\n//                        // Background data usage is blocked for this app. Wherever possible,\r\n//                        // the app should also use less data in the foreground.\r\n//\r\n//                    case ConnectivityManager.RESTRICT_BACKGROUND_STATUS_WHITELISTED:\r\n//                        // The app is allowed to bypass Data Saver. Nevertheless, wherever possible,\r\n//                        // the app should use less data in the foreground and background.\r\n//\r\n//                    case ConnectivityManager.RESTRICT_BACKGROUND_STATUS_DISABLED:\r\n//                        // Data Saver is disabled. Since the device is connected to a\r\n//                        // metered network, the app should use less data wherever possible.\r\n//                }\r\n//            }\r\n//        } else {\r\n//            // The device is not on a metered network.\r\n//            // Use data as required to perform syncs, downloads, and updates.\r\n//        }\r\n    }\r\n\r\n    private PhoneStateListener mPhoneStateListener = new PhoneStateListener() {\r\n        @Override\r\n        public void onCallStateChanged(int state, String incomingNumber) {\r\n            if (state == TelephonyManager.CALL_STATE_RINGING || state == TelephonyManager.CALL_STATE_OFFHOOK) {\r\n                if(!isPause){\r\n                if (isMediaStart && !audioPause) {\r\n                    pauseMedia();\r\n                    audioPause = true;\r\n                }\r\n                }  // Put here the code to stop your music\r\n            } else if (state == TelephonyManager.CALL_STATE_IDLE) {\r\n            }\r\n            super.onCallStateChanged(state, incomingNumber);\r\n        }\r\n    };\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (invoiceToDashboard == 1) {\r\n            finishAffinity();\r\n        }\r\n\r\n        if (binding.navView.getSelectedItemId() == R.id.navigation_audio) {\r\n            binding.navView.setSelectedItemId(R.id.navigation_audio);\r\n            if (doubleBackToExitPressedOnce) {\r\n                super.onBackPressed();\r\n                return;\r\n            }\r\n\r\n            this.doubleBackToExitPressedOnce = true;\r\n            BWSApplication.showToast(\"Press again to exit\", DashboardActivity.this);\r\n\r\n            new Handler().postDelayed(() -> doubleBackToExitPressedOnce = false, 2000);\r\n        } else {\r\n            super.onBackPressed();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        mTelephonyMgr.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE);\r\n//        BWSApplication.notificationManager.cancelAll();\r\n//        unregisterReceiver(broadcastReceiver);\r\n\r\n\r\n        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\r\n        notificationManager.cancel(NOTIFICATION_ID);\r\n    }\r\n\r\n    @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n                if (audioPause)\r\n                    resumeMedia();\r\n                audioPause = false;\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if(!isPause) {\r\n                    if (isMediaStart && !audioPause) {\r\n                        pauseMedia();\r\n                        audioPause = true;\r\n//                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n//                    binding.ivPause.setVisibility(View.GONE);\r\n                    }\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onSensorChanged(SensorEvent sensorEvent) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onAccuracyChanged(Sensor sensor, int i) {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/DashboardActivity.java	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/DashboardActivity.java	(date 1605711638003)
@@ -185,8 +185,8 @@
     protected void onDestroy() {
         super.onDestroy();
         mTelephonyMgr.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE);
-//        BWSApplication.notificationManager.cancelAll();
-//        unregisterReceiver(broadcastReceiver);
+        BWSApplication.notificationManager.cancelAll();
+        unregisterReceiver(broadcastReceiver);
 
 
         NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Search/ViewAllSearchFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Search;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.os.Handler;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.DownloadsLayoutBinding;\r\nimport com.brainwellnessspa.databinding.FragmentViewAllSearchBinding;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.comeAddPlaylist;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.myAudioId;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class ViewAllSearchFragment extends Fragment {\r\n    FragmentViewAllSearchBinding binding;\r\n    View view;\r\n    String UserID, AudioFlag, Name;\r\n    Handler handler3;\r\n    int startTime;\r\n    private long currentDuration = 0;\r\n    long myProgress = 0, diff = 0;\r\n    private Runnable UpdateSongTime3;\r\n    ArrayList<SearchPlaylistModel.ResponseData> PlaylistModel;\r\n    ArrayList<SuggestedModel.ResponseData> AudiolistModel;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_view_all_search, container, false);\r\n        view = binding.getRoot();\r\n        handler3 = new Handler();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n        if (getArguments() != null) {\r\n            Name = getArguments().getString(\"Name\");\r\n        }\r\n\r\n        if (getArguments() != null) {\r\n            AudiolistModel = getArguments().getParcelableArrayList(\"AudiolistModel\");\r\n        }\r\n\r\n        if (getArguments() != null) {\r\n            PlaylistModel = getArguments().getParcelableArrayList(\"PlaylistModel\");\r\n        }\r\n\r\n        view.setFocusableInTouchMode(true);\r\n        view.requestFocus();\r\n        view.setOnKeyListener((v, keyCode, event) -> {\r\n            if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {\r\n                callBack();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        binding.llBack.setOnClickListener(view1 -> {\r\n            callBack();\r\n        });\r\n\r\n        PrepareData();\r\n        return view;\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        handler3.removeCallbacks(UpdateSongTime3);\r\n        super.onPause();\r\n    }\r\n\r\n    private void callBack() {\r\n        Fragment fragment = new SearchFragment();\r\n        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n        fragmentManager1.beginTransaction()\r\n                .replace(R.id.flContainer, fragment)\r\n                .commit();\r\n        Bundle bundle = new Bundle();\r\n        fragment.setArguments(bundle);\r\n    }\r\n\r\n    public void PrepareData() {\r\n        binding.tvTitle.setText(Name);\r\n        try {\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n                } else {\r\n                    SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if (isMediaStart) {\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if (isMediaStart) {\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shareda = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shareda.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(0, 6, 0, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(0, 6, 0, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvMainAudio.setLayoutManager(layoutManager);\r\n        binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n        if (Name.equalsIgnoreCase(\"Recommended  Audios\")) {\r\n            SuggestionAudioListsAdpater suggestedAdpater = new SuggestionAudioListsAdpater(AudiolistModel, getActivity());\r\n            binding.rvMainAudio.setAdapter(suggestedAdpater);\r\n        } else if (Name.equalsIgnoreCase(\"Recommended Playlist\")) {\r\n            SuggestionPlayListsAdpater suggestedAdpater = new SuggestionPlayListsAdpater(PlaylistModel, getActivity());\r\n            binding.rvMainAudio.setAdapter(suggestedAdpater);\r\n        }\r\n\r\n    }\r\n\r\n    public class SuggestionAudioListsAdpater extends RecyclerView.Adapter<SuggestionAudioListsAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        String songId;\r\n        int ps = 0, nps = 0;\r\n        private ArrayList<SuggestedModel.ResponseData> AudiolistModel;\r\n\r\n        public SuggestionAudioListsAdpater(ArrayList<SuggestedModel.ResponseData> AudiolistModel, Context ctx) {\r\n            this.AudiolistModel = AudiolistModel;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            UpdateSongTime3 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n                        startTime = getStartTime();\r\n                        myProgress = currentDuration;\r\n                        currentDuration = getStartTime();\r\n                        if (currentDuration == 0 && isCompleteStop) {\r\n                            notifyDataSetChanged();\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        } else if (currentDuration >= 1 && !isPause) {\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                        } else if (currentDuration >= 1 && isPause) {\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        }\r\n\r\n                        if (currentDuration <= 555) {\r\n                            notifyDataSetChanged();\r\n                        }\r\n                        /*if(isPause && ps == 0){\r\n                            ps++;\r\n                            notifyDataSetChanged();\r\n                        }else if(!isPause && nps == 0){\r\n                            nps++;\r\n                            notifyDataSetChanged();\r\n                        }*/\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    handler3.postDelayed(this, 500);\r\n                }\r\n            };\r\n\r\n            holder.binding.tvTitle.setText(AudiolistModel.get(position).getName());\r\n            holder.binding.tvTime.setText(AudiolistModel.get(position).getAudioDuration());\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            Glide.with(getActivity()).load(AudiolistModel.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            SharedPreferences sharedzw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"Downloadlist\") &&\r\n                    !AudioFlag.equalsIgnoreCase(\"SubPlayList\") && !AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                if (myAudioId.equalsIgnoreCase(AudiolistModel.get(position).getID())) {\r\n                    songId = myAudioId;\r\n                    holder.binding.equalizerview.animateBars();\r\n                    holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n//            holder.binding.equalizerview.stopBars();\r\n//                        ps =0;\r\n//                        nps = 0;\r\n                } else {\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                }\r\n                handler3.postDelayed(UpdateSongTime3, 500);\r\n            } else {\r\n                holder.binding.equalizerview.setVisibility(View.GONE);\r\n                holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                handler3.removeCallbacks(UpdateSongTime3);\r\n            }\r\n            if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n            holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n                if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    try {\r\n                        player = 1;\r\n                        if (isPrepare || isMediaStart || isPause) {\r\n                            MusicService.stopMedia();\r\n                        }\r\n                        isPause = false;\r\n                        isMediaStart = false;\r\n                        isPrepare = false;\r\n                        isCompleteStop = false;\r\n                        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                        SuggestedModel.ResponseData mainPlayModel = new SuggestedModel.ResponseData();\r\n                        mainPlayModel.setID(\"0\");\r\n                        mainPlayModel.setName(\"Disclaimer\");\r\n                        mainPlayModel.setAudioFile(\"\");\r\n                        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                        mainPlayModel.setAudiomastercat(\"\");\r\n                        mainPlayModel.setAudioSubCategory(\"\");\r\n                        mainPlayModel.setImageFile(\"\");\r\n                        mainPlayModel.setLike(\"\");\r\n                        mainPlayModel.setDownload(\"\");\r\n                        mainPlayModel.setAudioDuration(\"00:48\");\r\n                        listModelList2.add(mainPlayModel);\r\n                        listModelList2.add(AudiolistModel.get(position));\r\n                        String json = gson.toJson(listModelList2);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchAudio\");\r\n                        editor.commit();\r\n                        Fragment fragment = new TransparentPlayerFragment();\r\n                        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                        fragmentManager1.beginTransaction()\r\n                                .add(R.id.flContainer, fragment)\r\n                                .commit();\r\n                    /*Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n                    i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                    ctx.startActivity(i);*/\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n                handler3.postDelayed(UpdateSongTime3, 500);\r\n                notifyDataSetChanged();\r\n            });\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || AudiolistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                    i.putExtra(\"AudioId\", AudiolistModel.get(position).getID());\r\n                    i.putExtra(\"PlaylistID\", \"\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return AudiolistModel.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SuggestionPlayListsAdpater extends RecyclerView.Adapter<SuggestionPlayListsAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        private ArrayList<SearchPlaylistModel.ResponseData> PlaylistModel;\r\n\r\n        public SuggestionPlayListsAdpater(ArrayList<SearchPlaylistModel.ResponseData> PlaylistModel, Context ctx) {\r\n            this.PlaylistModel = PlaylistModel;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(PlaylistModel.get(position).getName());\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n            holder.binding.equalizerview.setVisibility(View.GONE);\r\n            if (PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                    PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                            PlaylistModel.get(position).getTotalhour().equalsIgnoreCase(\"\")\r\n                            && PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                holder.binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n            } else {\r\n                if (PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() + \" Audio | \"\r\n                            + PlaylistModel.get(position).getTotalhour() + \"h 0m\");\r\n                } else {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() +\r\n                            \" Audios | \" + PlaylistModel.get(position).getTotalhour() + \"h \" + PlaylistModel.get(position).getTotalminute() + \"m\");\r\n                }\r\n            }\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(getActivity()).load(PlaylistModel.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    comefrom_search = 1;\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    Bundle bundle = new Bundle();\r\n                    bundle.putString(\"New\", \"0\");\r\n                    bundle.putString(\"PlaylistID\", PlaylistModel.get(position).getID());\r\n                    bundle.putString(\"PlaylistName\", PlaylistModel.get(position).getName());\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();\r\n                }\r\n            });\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    comeAddPlaylist = 0;\r\n                    Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                    i.putExtra(\"AudioId\", \"\");\r\n                    i.putExtra(\"PlaylistID\", PlaylistModel.get(position).getID());\r\n                    i.putExtra(\"PlaylistName\", PlaylistModel.get(position).getName());\r\n                    startActivity(i);\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return PlaylistModel.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Search/ViewAllSearchFragment.java	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Search/ViewAllSearchFragment.java	(date 1605711638020)
@@ -299,7 +299,10 @@
                     !AudioFlag.equalsIgnoreCase("SubPlayList") && !AudioFlag.equalsIgnoreCase("TopCategories")) {
                 if (myAudioId.equalsIgnoreCase(AudiolistModel.get(position).getID())) {
                     songId = myAudioId;
-                    holder.binding.equalizerview.animateBars();
+                    if (isPause) {
+                        holder.binding.equalizerview.stopBars();
+                    } else
+                        holder.binding.equalizerview.animateBars();
                     holder.binding.equalizerview.setVisibility(View.VISIBLE);
                     holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);
                     holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
Index: app/src/main/res/layout/audio_apt_list_layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:custom=\"http://schemas.android.com/apk/res-auto\"\r\n        android:id=\"@+id/llMainLayout\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginVertical=\"@dimen/_10sdp\"\r\n        android:orientation=\"horizontal\"\r\n        android:weightSum=\"1\">\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"@dimen/_0sdp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"0.2\"\r\n            android:gravity=\"center|start\"\r\n            android:padding=\"@dimen/_8sdp\">\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\">\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/ivRestaurantImage\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\" />\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/ivBackgroundImage\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_centerInParent=\"true\" />\r\n\r\n                <ImageView\r\n                    android:layout_width=\"@dimen/_18sdp\"\r\n                    android:layout_height=\"@dimen/_18sdp\"\r\n                    android:layout_centerInParent=\"true\"\r\n                    android:scaleType=\"fitXY\"\r\n                    android:src=\"@drawable/ic_round_play_icon\" />\r\n\r\n               <!-- <ImageView\r\n                    android:id=\"@+id/ivBackgroundImaged\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginRight=\"-6dp\" />-->\r\n\r\n                <es.claucookie.miniequalizerlibrary.EqualizerView\r\n                    android:id=\"@+id/equalizerview\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:padding=\"@dimen/_10sdp\"\r\n                    custom:animDuration=\"4800\"\r\n                    custom:foregroundColor=\"@color/white\" />\r\n\r\n            </RelativeLayout>\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"@dimen/_0sdp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:layout_weight=\"0.56\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvTitle\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"@dimen/_6sdp\"\r\n                android:ellipsize=\"end\"\r\n                android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                android:gravity=\"start\"\r\n                android:maxLines=\"1\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"@dimen/_13sdp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvTime\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"@dimen/_2sdp\"\r\n                android:ellipsize=\"end\"\r\n                android:fontFamily=\"@font/montserrat_regular\"\r\n                android:gravity=\"start\"\r\n                android:maxLines=\"2\"\r\n                android:textColor=\"@color/extra_light_gray\"\r\n                android:textSize=\"@dimen/_11sdp\"\r\n                android:visibility=\"gone\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <RelativeLayout\r\n            android:id=\"@+id/llDownload\"\r\n            android:layout_width=\"@dimen/_0sdp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_gravity=\"center\"\r\n            android:layout_weight=\"0.12\"\r\n            android:gravity=\"center\">\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:gravity=\"center\">\r\n\r\n                <ProgressBar\r\n                    android:id=\"@+id/pbProgress\"\r\n                    style=\"?android:attr/progressBarStyleHorizontal\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:background=\"@drawable/circular_shapesm\"\r\n                    android:indeterminate=\"false\"\r\n                    android:indeterminateTint=\"@color/dark_yellow\"\r\n                    android:max=\"100\"\r\n                    android:progressDrawable=\"@drawable/circular_progress_barsm\"\r\n                    android:visibility=\"gone\" />\r\n            </LinearLayout>\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:gravity=\"center\">\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/ivDownload\"\r\n                    android:layout_width=\"@dimen/_36sdp\"\r\n                    android:layout_height=\"@dimen/_36sdp\"\r\n                    android:padding=\"@dimen/_8sdp\"\r\n                    android:src=\"@drawable/ic_download_icon\" />\r\n\r\n            </LinearLayout>\r\n\r\n        </RelativeLayout>\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/llRemoveAudio\"\r\n            android:layout_width=\"@dimen/_0sdp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:layout_weight=\"0.12\"\r\n            android:gravity=\"center\"\r\n            android:padding=\"@dimen/_6sdp\">\r\n\r\n            <ImageView\r\n                android:id=\"@+id/ivArrange\"\r\n                android:layout_width=\"@dimen/_36sdp\"\r\n                android:layout_height=\"@dimen/_36sdp\"\r\n                android:padding=\"@dimen/_6sdp\"\r\n                android:src=\"@drawable/add_icon\" />\r\n\r\n        </LinearLayout>\r\n    </LinearLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/audio_apt_list_layout.xml	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/res/layout/audio_apt_list_layout.xml	(date 1605711638059)
@@ -6,6 +6,7 @@
         android:id="@+id/llMainLayout"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:paddingHorizontal="@dimen/_12sdp"
         android:layout_marginVertical="@dimen/_10sdp"
         android:orientation="horizontal"
         android:weightSum="1">
@@ -13,54 +14,61 @@
         <LinearLayout
             android:layout_width="@dimen/_0sdp"
             android:layout_height="wrap_content"
-            android:layout_weight="0.2"
+            android:layout_weight="0.18"
             android:gravity="center|start"
             android:padding="@dimen/_8sdp">
 
-            <RelativeLayout
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content">
+
+            <androidx.cardview.widget.CardView
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                custom:cardCornerRadius="@dimen/_10sdp">
+
+                <RelativeLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent">
 
-                <ImageView
-                    android:id="@+id/ivRestaurantImage"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content" />
+                    <ImageView
+                        android:id="@+id/ivRestaurantImage"
+                        android:layout_width="match_parent"
+                        android:layout_height="match_parent" />
 
-                <ImageView
-                    android:id="@+id/ivBackgroundImage"
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent"
-                    android:layout_centerInParent="true" />
+                    <ImageView
+                        android:id="@+id/ivBackgroundImage"
+                        android:layout_width="match_parent"
+                        android:layout_height="match_parent" />
 
-                <ImageView
-                    android:layout_width="@dimen/_18sdp"
-                    android:layout_height="@dimen/_18sdp"
-                    android:layout_centerInParent="true"
-                    android:scaleType="fitXY"
-                    android:src="@drawable/ic_round_play_icon" />
+                    <ImageView
+                        android:id="@+id/ivPlayIcon"
+                        android:layout_width="@dimen/_18sdp"
+                        android:layout_height="@dimen/_18sdp"
+                        android:layout_centerInParent="true"
+                        android:scaleType="fitXY"
+                        android:src="@drawable/ic_round_play_icon" />
 
-               <!-- <ImageView
-                    android:id="@+id/ivBackgroundImaged"
-                    android:layout_width="wrap_content"
-                    android:layout_height="wrap_content"
-                    android:layout_marginRight="-6dp" />-->
+                    <!-- <ImageView
+                         android:id="@+id/ivBackgroundImaged"
+                         android:layout_width="wrap_content"
+                         android:layout_height="wrap_content"
+                         android:layout_marginRight="-6dp" />-->
 
-                <es.claucookie.miniequalizerlibrary.EqualizerView
-                    android:id="@+id/equalizerview"
-                    android:layout_width="match_parent"
-                    android:layout_height="match_parent"
-                    android:padding="@dimen/_10sdp"
-                    custom:animDuration="4800"
-                    custom:foregroundColor="@color/white" />
-
-            </RelativeLayout>
+                    <es.claucookie.miniequalizerlibrary.EqualizerView
+                        android:id="@+id/equalizerview"
+                        android:layout_width="match_parent"
+                        android:layout_height="match_parent"
+                        android:padding="@dimen/_10sdp"
+                        custom:animDuration="4800"
+                        custom:foregroundColor="@color/white" />
+                </RelativeLayout>
+            </androidx.cardview.widget.CardView>
+
         </LinearLayout>
 
         <LinearLayout
             android:layout_width="@dimen/_0sdp"
             android:layout_height="wrap_content"
             android:layout_gravity="center"
-            android:layout_weight="0.56"
+            android:layout_weight="0.58"
             android:orientation="vertical">
 
             <TextView
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/DownloadAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.JsonSyntaxException;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.BigBoxLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\n\r\npublic class DownloadAdapter extends RecyclerView.Adapter<DownloadAdapter.MyViewHolder> {\r\n    Context ctx;\r\n    FragmentActivity activity;\r\n    String IsLock;\r\n    int index = -1;\r\n    private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;\r\n\r\n    public DownloadAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,\r\n                           String IsLock) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.activity = activity;\r\n        this.IsLock = IsLock;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public DownloadAdapter.MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        BigBoxLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.big_box_layout, parent, false);\r\n        return new DownloadAdapter.MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull DownloadAdapter.MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 20,\r\n                1, 1, 0.48f, 20);\r\n        holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n        if (index == position) {\r\n            holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n        } else\r\n            holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n        holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n        holder.binding.llMainLayout.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View v) {\r\n                holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n                index = position;\r\n                notifyDataSetChanged();\r\n                return true;\r\n            }\r\n        });\r\n        holder.binding.tvAddToPlaylist.setOnClickListener(view -> {\r\n            Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n            i.putExtra(\"AudioId\", listModelList.get(position).getID());\r\n            i.putExtra(\"PlaylistID\", \"\");\r\n            ctx.startActivity(i);\r\n        });\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n            try {\r\n                SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                if (queuePlay) {\r\n                    int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                    Gson gson = new Gson();\r\n                    String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                    if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                        Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                        }.getType();\r\n                        addToQueueModelList = gson.fromJson(json1, type1);\r\n                    }\r\n                    addToQueueModelList.remove(position1);\r\n                    SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared2.edit();\r\n                    String json = gson.toJson(addToQueueModelList);\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                    editor.commit();\r\n\r\n                }\r\n                if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    ctx.startActivity(i);\r\n                } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransFrag(position, listModelList);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n                        MainAudioModel.ResponseData.Detail mainPlayModel = new MainAudioModel.ResponseData.Detail();\r\n                        mainPlayModel.setID(\"0\");\r\n                        mainPlayModel.setName(\"Disclaimer\");\r\n                        mainPlayModel.setAudioFile(\"\");\r\n                        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                        mainPlayModel.setAudiomastercat(\"\");\r\n                        mainPlayModel.setAudioSubCategory(\"\");\r\n                        mainPlayModel.setImageFile(\"\");\r\n                        mainPlayModel.setLike(\"\");\r\n                        mainPlayModel.setDownload(\"\");\r\n                        mainPlayModel.setAudioDuration(\"00:48\");\r\n                        listModelList2.addAll(listModelList);\r\n                        listModelList2.add(position, mainPlayModel);\r\n                        callTransFrag(position, listModelList2);\r\n                    }\r\n                }\r\n            } catch (JsonSyntaxException e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callTransFrag(int position, ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {\r\n        try {\r\n            SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            if (queuePlay) {\r\n                int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                Gson gson = new Gson();\r\n                String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                    }.getType();\r\n                    addToQueueModelList = gson.fromJson(json1, type1);\r\n                }\r\n                addToQueueModelList.remove(position1);\r\n                SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared2.edit();\r\n                String json = gson.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                editor.commit();\r\n\r\n            }\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n           /* Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();*/\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            ArrayList<DownloadAudioDetails> downloadAudioDetails = new ArrayList<>();\r\n            for (int i = 0; i < listModelList.size(); i++) {\r\n                DownloadAudioDetails mainPlayModel = new DownloadAudioDetails();\r\n                mainPlayModel.setID(listModelList.get(i).getID());\r\n                mainPlayModel.setName(listModelList.get(i).getName());\r\n                mainPlayModel.setAudioFile(listModelList.get(i).getAudioFile());\r\n                mainPlayModel.setAudioDirection(listModelList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(listModelList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(listModelList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(listModelList.get(i).getImageFile());\r\n                mainPlayModel.setLike(listModelList.get(i).getLike());\r\n                mainPlayModel.setDownload(listModelList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(listModelList.get(i).getAudioDuration());\r\n                downloadAudioDetails.add(mainPlayModel);\r\n            }\r\n            String json = gson.toJson(downloadAudioDetails);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"DownloadListAudio\");\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            ctx.startActivity(i);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (4 > listModelList.size()) {\r\n            return listModelList.size();\r\n        } else {\r\n            return 4;\r\n        }\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        BigBoxLayoutBinding binding;\r\n\r\n        public MyViewHolder(BigBoxLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/DownloadAdapter.java	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/DownloadAdapter.java	(date 1605711638098)
@@ -79,6 +79,8 @@
         holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());
         holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());
         holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);
+        holder.binding.tvAddToPlaylist.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());
+        holder.binding.tvAddToPlaylist.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());
         Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)
                 .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);
 
Index: app/src/main/java/com/brainwellnessspa/Utility/MusicRefreshData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/Utility/MusicRefreshData.java	(date 1605711638273)
+++ app/src/main/java/com/brainwellnessspa/Utility/MusicRefreshData.java	(date 1605711638273)
@@ -0,0 +1,8 @@
+package com.brainwellnessspa.Utility;
+
+public interface MusicRefreshData {
+    void onMusicPrevious();
+    void onMusicPlay();
+    void onMusicPause();
+    void onMusicNext();
+}
Index: app/src/main/res/layout/activity_my_playlist.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/dark_blue_gray\">\r\n\r\n        <androidx.core.widget.NestedScrollView\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:overScrollMode=\"never\">\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                android:layout_marginBottom=\"@dimen/_26sdp\"\r\n                android:orientation=\"vertical\">\r\n\r\n                <RelativeLayout\r\n                    android:id=\"@+id/rlLayout\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"@dimen/_56sdp\">\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llBack\"\r\n                        android:layout_width=\"42dp\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_centerVertical=\"true\"\r\n                        android:gravity=\"center\">\r\n\r\n                        <ImageView\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:src=\"@drawable/ic_close_white_icon\"\r\n                            app:tint=\"@color/white\" />\r\n\r\n                    </LinearLayout>\r\n\r\n                </RelativeLayout>\r\n\r\n                <androidx.cardview.widget.CardView\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_gravity=\"center_horizontal\"\r\n                    android:layout_marginTop=\"@dimen/_26sdp\"\r\n                    app:cardCornerRadius=\"@dimen/_10sdp\">\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ivRestaurantImage\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\" />\r\n                </androidx.cardview.widget.CardView>\r\n\r\n                <TextView\r\n                    android:id=\"@+id/tvName\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_26sdp\"\r\n                    android:ellipsize=\"end\"\r\n                    android:fontFamily=\"@font/montserrat_medium\"\r\n                    android:gravity=\"center\"\r\n                    android:textColor=\"@color/white\"\r\n                    android:textSize=\"@dimen/_22sdp\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/tvDesc\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_6sdp\"\r\n                    android:ellipsize=\"end\"\r\n                    android:fontFamily=\"@font/montserrat_regular\"\r\n                    android:gravity=\"center\"\r\n                    android:maxLines=\"1\"\r\n                    android:textColor=\"#838383\"\r\n                    android:textSize=\"@dimen/_13sdp\"\r\n                    android:visibility=\"gone\" />\r\n\r\n                <TextView\r\n                    android:id=\"@+id/tvTime\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_6sdp\"\r\n                    android:ellipsize=\"end\"\r\n                    android:fontFamily=\"@font/montserrat_regular\"\r\n                    android:gravity=\"center\"\r\n                    android:textColor=\"#838383\"\r\n                    android:textSize=\"@dimen/_13sdp\" />\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llOptions\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:orientation=\"vertical\"\r\n                    android:visibility=\"visible\">\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvTitleDec\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:layout_marginTop=\"@dimen/_20sdp\"\r\n                        android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                        android:gravity=\"start\"\r\n                        android:text=\"@string/Description\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_16sdp\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                    <RelativeLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\">\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvSubDec\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                            android:layout_marginTop=\"@dimen/_10sdp\"\r\n                            android:fontFamily=\"@font/montserrat_regular\"\r\n                            android:gravity=\"start\"\r\n                            android:justificationMode=\"inter_word\"\r\n                            android:lineSpacingExtra=\"@dimen/_4sdp\"\r\n                            android:maxLines=\"3\"\r\n                            android:textColor=\"@color/white\"\r\n                            android:textSize=\"@dimen/_13sdp\" />\r\n\r\n                        <TextView\r\n                            android:id=\"@+id/tvReadMore\"\r\n                            android:layout_width=\"wrap_content\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_below=\"@id/tvSubDec\"\r\n                            android:layout_alignParentLeft=\"true\"\r\n                            android:layout_alignParentBottom=\"true\"\r\n                            android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                            android:layout_marginTop=\"@dimen/_2sdp\"\r\n                            android:text=\"Read More...\"\r\n                            android:textColor=\"#F89552\"\r\n                            android:visibility=\"gone\" />\r\n                    </RelativeLayout>\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvDire\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:layout_marginTop=\"@dimen/_20sdp\"\r\n                        android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                        android:gravity=\"start\"\r\n                        android:text=\"@string/Directions\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_16sdp\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvSubDire\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:layout_marginTop=\"@dimen/_10sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"start\"\r\n                        android:justificationMode=\"inter_word\"\r\n                        android:lineSpacingExtra=\"@dimen/_4sdp\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_13sdp\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                    <androidx.recyclerview.widget.RecyclerView\r\n                        android:id=\"@+id/rvDirlist\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:overScrollMode=\"never\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llLikes\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ivLike\"\r\n                        android:layout_width=\"@dimen/_56sdp\"\r\n                        android:layout_height=\"@dimen/_50sdp\"\r\n                        android:padding=\"@dimen/_15sdp\"\r\n                        android:src=\"@drawable/ic_like_white_icon\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvLikes\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"left\"\r\n                        android:text=\"@string/Liked_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llRename\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"@dimen/_56sdp\"\r\n                        android:layout_height=\"@dimen/_50sdp\"\r\n                        android:padding=\"@dimen/_15sdp\"\r\n                        android:src=\"@drawable/ic_edit_number_icon\"\r\n                        app:tint=\"@color/white\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvRename\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"left\"\r\n                        android:text=\"@string/Rename_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llFind\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"@dimen/_56sdp\"\r\n                        android:layout_height=\"@dimen/_50sdp\"\r\n                        android:padding=\"@dimen/_15sdp\"\r\n                        android:src=\"@drawable/ic_search_icon\"\r\n                        app:tint=\"@color/white\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvFind\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"left\"\r\n                        android:text=\"@string/Find_in_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llDelete\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"@dimen/_56sdp\"\r\n                        android:layout_height=\"@dimen/_50sdp\"\r\n                        android:padding=\"@dimen/_18sdp\"\r\n                        android:src=\"@drawable/ic_close_white_icon\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvDelete\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"left\"\r\n                        android:text=\"@string/Delete_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llDownload\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <RelativeLayout\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\">\r\n\r\n                        <ProgressBar\r\n                            android:id=\"@+id/pbProgress\"\r\n                            style=\"?android:attr/progressBarStyleHorizontal\"\r\n                            android:layout_width=\"@dimen/_55sdp\"\r\n                            android:layout_height=\"@dimen/_55sdp\"\r\n                            android:layout_centerInParent=\"true\"\r\n                            android:background=\"@drawable/circular_shapesm\"\r\n                            android:indeterminate=\"false\"\r\n                            android:indeterminateTint=\"@color/dark_yellow\"\r\n                            android:max=\"100\"\r\n                            android:progress=\"50\"\r\n                            android:progressDrawable=\"@drawable/circular_progress_barsm\"\r\n                            android:visibility=\"gone\" />\r\n\r\n                        <ImageView\r\n                            android:id=\"@+id/ivDownloads\"\r\n                            android:layout_width=\"@dimen/_56sdp\"\r\n                            android:layout_height=\"@dimen/_50sdp\"\r\n                            android:padding=\"@dimen/_15sdp\"\r\n                            android:src=\"@drawable/ic_download_white_icon\" />\r\n                    </RelativeLayout>\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvDownload\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"left\"\r\n                        android:text=\"@string/Download_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llAddPlaylist\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginTop=\"@dimen/_13sdp\"\r\n                    android:gravity=\"center_vertical\"\r\n                    android:visibility=\"gone\">\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ivAddPlaylist\"\r\n                        android:layout_width=\"@dimen/_56sdp\"\r\n                        android:layout_height=\"@dimen/_50sdp\"\r\n                        android:padding=\"@dimen/_15sdp\"\r\n                        android:src=\"@drawable/ic_playlist_white_icon\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvAddPlaylist\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_4sdp\"\r\n                        android:fontFamily=\"@font/montserrat_regular\"\r\n                        android:gravity=\"start\"\r\n                        android:text=\"@string/Add_playlist\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_15sdp\" />\r\n                </LinearLayout>\r\n            </LinearLayout>\r\n        </androidx.core.widget.NestedScrollView>\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:gravity=\"center\"\r\n            android:padding=\"@dimen/_60sdp\">\r\n\r\n            <ProgressBar\r\n                android:id=\"@+id/progressBar\"\r\n                android:layout_width=\"@dimen/_50sdp\"\r\n                android:layout_height=\"@dimen/_50sdp\"\r\n                android:indeterminateTint=\"@color/blue\"\r\n                android:scaleType=\"centerInside\"\r\n                android:visibility=\"gone\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <FrameLayout\r\n            android:id=\"@+id/progressBarHolder\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:alpha=\"0.4\"\r\n            android:animateLayoutChanges=\"true\"\r\n            android:background=\"#C0000000\"\r\n            android:visibility=\"gone\" />\r\n    </RelativeLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_my_playlist.xml	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/res/layout/activity_my_playlist.xml	(date 1605711638141)
@@ -5,7 +5,8 @@
         xmlns:app="http://schemas.android.com/apk/res-auto"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:background="@color/dark_blue_gray">
+        android:background="@color/dark_blue_gray"
+        android:clickable="true">
 
         <androidx.core.widget.NestedScrollView
             android:layout_width="match_parent"
Index: app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadPlaylistActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DownloadModule.Activities;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Filter;\r\nimport android.widget.Filterable;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityDownloadPlaylistBinding;\r\nimport com.brainwellnessspa.databinding.DownloadPlaylistLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.downloader.PRDownloader;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.myAudioId;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadIdOne;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.isPlayPlaylist;\r\n\r\npublic class DownloadPlaylistActivity extends AppCompatActivity {\r\n    ActivityDownloadPlaylistBinding binding;\r\n    PlayListsAdpater adpater;\r\n    String UserID, SearchFlag, AudioFlag, PlaylistID, PlaylistName, PlaylistImage, TotalAudio, Totalhour, Totalminute, PlaylistImageDetails;\r\n    EditText searchEditText;\r\n    Context ctx;\r\n    private List<DownloadPlaylistDetails> listModelList;\r\n    List<DownloadAudioDetails> playlistWiseAudiosDetails;\r\n    List<DownloadAudioDetails> playlistWiseAudioDetails = new ArrayList<>();\r\n    DownloadAudioDetails addDisclaimer = new DownloadAudioDetails();\r\n    List<DownloadAudioDetails> oneAudioDetailsList;\r\n    public static int comeDeletePlaylist = 0;\r\n    Handler handler3;\r\n    int startTime;\r\n    private long currentDuration = 0;\r\n    long myProgress = 0, diff = 0;\r\n    private Runnable UpdateSongTime3;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_download_playlist);\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        ctx = DownloadPlaylistActivity.this;\r\n        addDisclaimer();\r\n        ComeScreenAccount = 0;\r\n        handler3 = new Handler();\r\n        if (getIntent() != null) {\r\n            PlaylistID = getIntent().getStringExtra(\"PlaylistID\");\r\n            PlaylistName = getIntent().getStringExtra(\"PlaylistName\");\r\n            PlaylistImage = getIntent().getStringExtra(\"PlaylistImage\");\r\n            PlaylistImageDetails = getIntent().getStringExtra(\"PlaylistImageDetails\");\r\n            TotalAudio = getIntent().getStringExtra(\"TotalAudio\");\r\n            Totalhour = getIntent().getStringExtra(\"Totalhour\");\r\n            Totalminute = getIntent().getStringExtra(\"Totalminute\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(view -> finish());\r\n        PrepareData();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        handler3.removeCallbacks(UpdateSongTime3);\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        PrepareData();\r\n    }\r\n\r\n    public void PrepareData() {\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 210);\r\n            binding.llSpace.setLayoutParams(params);\r\n        } else {\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 20);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n        try {\r\n            SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n                if (UnlockAudioList.contains(audioID)) {\r\n                } else {\r\n                    SharedPreferences sharedm = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if (isMediaStart) {\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if (isMediaStart) {\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                comefromDownload = \"1\";\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n            if (isMediaStart) {\r\n                isPlayPlaylist = 1;\r\n                handler3.postDelayed(UpdateSongTime3,500);\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n            } else {\r\n                isPlayPlaylist = 0;\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n            }\r\n        } else {\r\n            isPlayPlaylist = 0;\r\n            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n        }\r\n        binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n        binding.tvLibraryName.setText(PlaylistName);\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                5, 3, 1f, 0);\r\n        binding.ivBanner.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivBanner.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivBanner.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        if (!PlaylistImageDetails.equalsIgnoreCase(\"\")) {\r\n            try {\r\n                Glide.with(ctx).load(PlaylistImageDetails).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivBanner);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            binding.ivBanner.setImageResource(R.drawable.audio_bg);\r\n        }\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        searchEditText.setHint(\"Search for audios\");\r\n        closeButton.setOnClickListener(v -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n\r\n        binding.llDelete.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                    BWSApplication.showToast(\"Currently this playlist is in player,so you can't delete this playlist as of now\", ctx);\r\n                } else {\r\n                    final Dialog dialog = new Dialog(ctx);\r\n                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                    dialog.setContentView(R.layout.logout_layout);\r\n                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));\r\n                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                    final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n                    final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                    final Button Btn = dialog.findViewById(R.id.Btn);\r\n                    tvTitle.setText(\"Remove playlist\");\r\n                    tvHeader.setText(\"Are you sure you want to remove the \" + PlaylistName + \" from downloads??\");\r\n                    Btn.setText(\"Confirm\");\r\n                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                            dialog.dismiss();\r\n                        }\r\n                        return false;\r\n                    });\r\n\r\n                    Btn.setOnClickListener(v -> {\r\n                        getDownloadData();\r\n                        playlistWiseAudiosDetails = GetPlaylistMedia(PlaylistID);\r\n                        finish();\r\n                        comeDeletePlaylist = 1;\r\n                        dialog.dismiss();\r\n                    });\r\n                    tvGoBack.setOnClickListener(v -> dialog.dismiss());\r\n                    dialog.show();\r\n                    dialog.setCancelable(false);\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n        if (TotalAudio.equalsIgnoreCase(\"\") || TotalAudio.equalsIgnoreCase(\"0\") &&\r\n                Totalhour.equalsIgnoreCase(\"\") && Totalminute.equalsIgnoreCase(\"\")) {\r\n            binding.tvLibraryDetail.setText(\"0 Audio | 0h 0m\");\r\n        } else {\r\n            if (Totalminute.equalsIgnoreCase(\"\")) {\r\n                binding.tvLibraryDetail.setText(TotalAudio + \" Audio | \" + Totalhour + \"h 0m\");\r\n            } else {\r\n                binding.tvLibraryDetail.setText(TotalAudio + \" Audio | \" + Totalhour + \"h \" + Totalminute + \"m\");\r\n            }\r\n        }\r\n\r\n        RecyclerView.LayoutManager playList = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists.setLayoutManager(playList);\r\n        binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());\r\n        getMedia(PlaylistID);\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                binding.searchView.clearFocus();\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                try {\r\n                    if (adpater != null) {\r\n                        adpater.getFilter().filter(search);\r\n                        SearchFlag = search;\r\n                        Log.e(\"searchsearch\", \"\" + search);\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        binding.tvTag.setVisibility(View.VISIBLE);\r\n        binding.tvTag.setText(\"Audios in Playlist\");\r\n        binding.tvPlaylist.setText(\"Playlist\");\r\n    }\r\n\r\n    private void getDownloadData() {\r\n        List<String> fileNameList, fileNameList1, audioFile, playlistDownloadId;\r\n        try {\r\n            SharedPreferences sharedy = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                fileNameList1 = gson.fromJson(jsony, type);\r\n                audioFile = gson.fromJson(json1, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 1; i < fileNameList1.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            fileNameList.remove(i);\r\n                            audioFile.remove(i);\r\n                            playlistDownloadId.remove(i);\r\n                        }\r\n                    }\r\n                }\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                String nameJson = gson.toJson(fileNameList);\r\n                String urlJson = gson.toJson(audioFile);\r\n                String playlistIdJson = gson.toJson(playlistDownloadId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                if (fileNameList.get(0).equalsIgnoreCase(filename) && playlistDownloadId.get(0).equalsIgnoreCase(PlaylistID)) {\r\n                    PRDownloader.cancel(downloadIdOne);\r\n                    filename = \"\";\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        finish();\r\n    }\r\n\r\n    private void getMedia(String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                adpater = new PlayListsAdpater(playlistWiseAudioDetails, ctx);\r\n                binding.rvPlayLists.setAdapter(adpater);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetPlaylistMedia(String playlistID) {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                deleteDownloadFile(getApplicationContext(), playlistID);\r\n                for (int i = 0; i < playlistWiseAudioDetails.size(); i++) {\r\n                    GetSingleMedia(playlistWiseAudioDetails.get(i).getAudioFile(), ctx.getApplicationContext(), playlistID);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    private void deleteDownloadFile(Context applicationContext, String PlaylistId) {\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(applicationContext)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deleteByPlaylistId(PlaylistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                notifyItemRemoved(position);\r\n                deletePlaylist(PlaylistID);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public void GetSingleMedia(String AudioFile, Context ctx, String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(AudioFile);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.size() == 1) {\r\n                        FileUtils.deleteDownloadedFile(ctx, oneAudioDetailsList.get(0).getName());\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia sts = new GetMedia();\r\n        sts.execute();\r\n    }\r\n\r\n    private void deletePlaylist(String playlistId) {\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deletePlaylist(playlistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public class PlayListsAdpater extends RecyclerView.Adapter<PlayListsAdpater.MyViewHolders> implements Filterable {\r\n        Context ctx;\r\n        String UserID,songId;\r\n        private List<DownloadAudioDetails> listModelList;\r\n        private List<DownloadAudioDetails> listFilterData;\r\n        int ps = 0,nps = 0;\r\n\r\n        public PlayListsAdpater(List<DownloadAudioDetails> listModelList, Context ctx) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolders onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.download_playlist_layout, parent, false);\r\n            return new MyViewHolders(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolders holder, int position) {\r\n            UpdateSongTime3 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n                        startTime = getStartTime();\r\n                        myProgress = currentDuration;\r\n                        currentDuration = getStartTime();\r\n                        if (currentDuration == 0 && isCompleteStop) {\r\n                            notifyDataSetChanged();\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        }  else if (currentDuration >= 1 && !isPause) {\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                        } else if (currentDuration >= 1 && isPause) {\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        }\r\n                        /*if(isPause && ps == 0){\r\n                            ps++;\r\n                            notifyDataSetChanged();\r\n                        }else if(!isPause && nps == 0){\r\n                            nps++;\r\n                            notifyDataSetChanged();\r\n                        }*/\r\n                        if(currentDuration <= 555){\r\n                            notifyDataSetChanged();\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    handler3.postDelayed(this, 500);\r\n                }\r\n            };\r\n            final List<DownloadAudioDetails> mData = listFilterData;\r\n            holder.binding.tvTitleA.setText(mData.get(position).getName());\r\n            holder.binding.tvTimeA.setText(mData.get(position).getAudioDuration());\r\n            String id = mData.get(position).getID();\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            holder.binding.ivBackgroundImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n//            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n//            holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n//            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n//                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n//            holder.binding.equalizerview.animateBars();\r\n//            holder.binding.equalizerview.stopBars();\r\n            SharedPreferences sharedzw = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n//            TODO appointment as it is audioflag changes (audioPlayz && AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\"))\r\n                if (audioPlayz && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pIDz.equalsIgnoreCase(PlaylistName)) {\r\n                    if(myAudioId.equalsIgnoreCase(mData.get(position).getID())){\r\n                        songId = myAudioId;\r\n                        holder.binding.equalizerview.animateBars();\r\n                        holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                        holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n//            holder.binding.equalizerview.stopBars();\r\n//                        ps =0;\r\n//                        nps = 0;\r\n                    }else{\r\n                        holder.binding.equalizerview.setVisibility(View.GONE);\r\n                        holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    }\r\n                    handler3.postDelayed(UpdateSongTime3,500);\r\n                }else{\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    handler3.removeCallbacks(UpdateSongTime3);\r\n                }\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                if (isPlayPlaylist == 1) {\r\n                    pauseMedia();\r\n                    isPlayPlaylist = 2;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                } else if (isPlayPlaylist == 2) {\r\n                    resumeMedia();\r\n                    isPlayPlaylist = 1;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                } else {\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                        if (isDisclaimer == 1) {\r\n                            if (isPause) {\r\n                                resumeMedia();\r\n                            } else\r\n                                BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransparentFrag(0, ctx, listModelList, \"\", PlaylistName);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        List<DownloadAudioDetails> listModelList2 = new ArrayList<>();\r\n                        listModelList2.add(addDisclaimer);\r\n                        listModelList2.addAll(listModelList);\r\n                        callTransparentFrag(0, ctx, listModelList2, \"\", PlaylistName);\r\n                    }\r\n                    isPlayPlaylist = 1;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                }\r\n                handler3.postDelayed(UpdateSongTime3,500);\r\n                notifyDataSetChanged();\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(holder.getAdapterPosition(), ctx, listModelList, \"\", PlaylistName);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    List<DownloadAudioDetails> listModelList2 = new ArrayList<>();\r\n                    if (position != 0) {\r\n                        listModelList2.addAll(listModelList);\r\n                        listModelList2.add(holder.getAdapterPosition(), addDisclaimer);\r\n                    } else {\r\n                        listModelList2.add(addDisclaimer);\r\n                        listModelList2.addAll(listModelList);\r\n                    }\r\n                    callTransparentFrag(holder.getAdapterPosition(), ctx, listModelList2, \"\", PlaylistName);\r\n                }\r\n                isPlayPlaylist = 1;\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                handler3.postDelayed(UpdateSongTime3,500);\r\n                notifyDataSetChanged();\r\n            });\r\n\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                holder.binding.llMore.setClickable(true);\r\n                holder.binding.llMore.setEnabled(true);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                holder.binding.llMore.setClickable(false);\r\n                holder.binding.llMore.setEnabled(false);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            holder.binding.llMore.setOnClickListener(view -> {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"You can see details after the disclaimer\", ctx);\r\n                    } else {\r\n                        Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                        i.putExtra(\"play\", \"playlist\");\r\n                        i.putExtra(\"ID\", mData.get(position).getID());\r\n                        i.putExtra(\"PlaylistAudioId\", \"\");\r\n                        i.putExtra(\"position\", position);\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(mData);\r\n                        i.putExtra(\"data\",json);\r\n                        i.putExtra(\"comeFrom\", \"myDownloadPlaylist\");\r\n                        startActivity(i);\r\n                    }\r\n                } else {\r\n                    Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                    i.putExtra(\"play\", \"playlist\");\r\n                    i.putExtra(\"ID\", mData.get(position).getID());\r\n                    i.putExtra(\"PlaylistAudioId\", \"\");\r\n                    i.putExtra(\"position\", position);\r\n                    Gson gson = new Gson();\r\n                    String json = gson.toJson(mData);\r\n                    i.putExtra(\"data\",json);\r\n                    i.putExtra(\"comeFrom\", \"myDownloadPlaylist\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listFilterData.size();\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        List<DownloadAudioDetails> filteredList = new ArrayList<>();\r\n                        for (DownloadAudioDetails row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.rvPlayLists.setVisibility(View.GONE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        Log.e(\"search\", SearchFlag);\r\n                        binding.tvTag.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.tvTag.setVisibility(View.VISIBLE);\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists.setVisibility(View.VISIBLE);\r\n                        listFilterData = (List<DownloadAudioDetails>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        public class MyViewHolders extends RecyclerView.ViewHolder {\r\n            DownloadPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolders(DownloadPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void addDisclaimer() {\r\n        addDisclaimer = new DownloadAudioDetails();\r\n        addDisclaimer.setID(\"0\");\r\n        addDisclaimer.setName(\"Disclaimer\");\r\n        addDisclaimer.setAudioFile(\"\");\r\n        addDisclaimer.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n        addDisclaimer.setAudiomastercat(\"\");\r\n        addDisclaimer.setAudioSubCategory(\"\");\r\n        addDisclaimer.setImageFile(\"\");\r\n        addDisclaimer.setLike(\"\");\r\n        addDisclaimer.setDownload(\"\");\r\n        addDisclaimer.setAudioDuration(\"00:48\");\r\n    }\r\n\r\n    private void callTransparentFrag(int position, Context ctx, List<DownloadAudioDetails> listModelList, String s, String playlistID) {\r\n        player = 1;\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isPause = false;\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isCompleteStop = false;\r\n\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(listModelList);\r\n        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, playlistID);\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"Downloadlist\");\r\n        editor.commit();\r\n        try {\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadPlaylistActivity.java	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadPlaylistActivity.java	(date 1605711638189)
@@ -598,7 +598,10 @@
                 if (audioPlayz && AudioFlag.equalsIgnoreCase("Downloadlist") && pIDz.equalsIgnoreCase(PlaylistName)) {
                     if(myAudioId.equalsIgnoreCase(mData.get(position).getID())){
                         songId = myAudioId;
-                        holder.binding.equalizerview.animateBars();
+                        if (isPause) {
+                            holder.binding.equalizerview.stopBars();
+                        } else
+                            holder.binding.equalizerview.animateBars();
                         holder.binding.equalizerview.setVisibility(View.VISIBLE);
                         holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);
                         holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
Index: app/src/main/res/layout/my_playlist_layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        xmlns:custom=\"http://schemas.android.com/apk/res-auto\"\r\n        android:id=\"@+id/llMainLayout\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        android:paddingHorizontal=\"@dimen/_10sdp\"\r\n        android:weightSum=\"1\">\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"@dimen/_0sdp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_gravity=\"center\"\r\n            android:layout_weight=\"0.18\"\r\n            android:gravity=\"center\"\r\n            android:padding=\"@dimen/_8sdp\">\r\n\r\n            <androidx.cardview.widget.CardView\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\"\r\n                app:cardCornerRadius=\"@dimen/_10sdp\">\r\n\r\n                <RelativeLayout\r\n                    android:id=\"@+id/rlImage\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\">\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ivRestaurantImage\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\" />\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ivBackgroundImage\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_centerInParent=\"true\" />\r\n\r\n                    <es.claucookie.miniequalizerlibrary.EqualizerView\r\n                        android:id=\"@+id/equalizerview\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:padding=\"@dimen/_10sdp\"\r\n                        custom:animDuration=\"4800\"\r\n                        custom:foregroundColor=\"@color/white\" />\r\n                </RelativeLayout>\r\n\r\n            </androidx.cardview.widget.CardView>\r\n\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/llCenterLayoutA\"\r\n            android:layout_width=\"@dimen/_0sdp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_gravity=\"center_vertical\"\r\n            android:layout_weight=\"0.69\"\r\n            android:gravity=\"center_vertical\"\r\n            android:orientation=\"vertical\"\r\n            android:visibility=\"visible\">\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvTitleA\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:ellipsize=\"end\"\r\n                android:fontFamily=\"@font/montserrat_medium\"\r\n                android:gravity=\"start\"\r\n                android:maxLines=\"1\"\r\n                android:textColor=\"@color/black\"\r\n                android:textSize=\"@dimen/_13sdp\" />\r\n\r\n            <TextView\r\n                android:id=\"@+id/tvTimeA\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"@dimen/_4sdp\"\r\n                android:fontFamily=\"@font/montserrat_medium\"\r\n                android:gravity=\"start\"\r\n                android:textColor=\"@color/extra_light_gray\"\r\n                android:textSize=\"@dimen/_13sdp\" />\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:id=\"@+id/llMore\"\r\n            android:layout_width=\"@dimen/_0sdp\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_gravity=\"center\"\r\n            android:layout_weight=\"0.13\"\r\n            android:gravity=\"center\"\r\n            android:padding=\"@dimen/_8sdp\"\r\n            android:visibility=\"visible\">\r\n\r\n            <ImageView\r\n                android:id=\"@+id/ivMore\"\r\n                android:layout_width=\"@dimen/_38sdp\"\r\n                android:layout_height=\"@dimen/_38sdp\"\r\n                android:padding=\"@dimen/_10sdp\"\r\n                android:src=\"@drawable/ic_menu_icon\" />\r\n\r\n        </LinearLayout>\r\n    </LinearLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/my_playlist_layout.xml	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/res/layout/my_playlist_layout.xml	(date 1605711638199)
@@ -4,6 +4,7 @@
     <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
         xmlns:app="http://schemas.android.com/apk/res-auto"
         xmlns:custom="http://schemas.android.com/apk/res-auto"
+        xmlns:vumeter="http://schemas.android.com/apk/res-auto"
         android:id="@+id/llMainLayout"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
@@ -47,6 +48,7 @@
                         android:padding="@dimen/_10sdp"
                         custom:animDuration="4800"
                         custom:foregroundColor="@color/white" />
+
                 </RelativeLayout>
 
             </androidx.cardview.widget.CardView>
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Search/SearchFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Search;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Activities.DashboardActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.DownloadsLayoutBinding;\r\nimport com.brainwellnessspa.databinding.FragmentSearchBinding;\r\nimport com.brainwellnessspa.databinding.GlobalSearchLayoutBinding;\r\nimport com.brainwellnessspa.databinding.PlaylistCustomLayoutBinding;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.myAudioId;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class SearchFragment extends Fragment {\r\n    FragmentSearchBinding binding;\r\n    String UserID, AudioFlag;\r\n    EditText searchEditText;\r\n    SerachListAdpater adpater;\r\n    public static int comefrom_search = 0;\r\n    Handler handler3;\r\n    int startTime;\r\n    private long currentDuration = 0;\r\n    long myProgress = 0, diff = 0;\r\n    private Runnable UpdateSongTime3;\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_search, container, false);\r\n        View view = binding.getRoot();\r\n        handler3 = new Handler();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        ComeScreenAccount = 0;\r\n        comefromDownload = \"0\";\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        closeButton.setOnClickListener(v -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.rvSerachList.setAdapter(null);\r\n            binding.rvSerachList.setVisibility(View.GONE);\r\n            binding.llError.setVisibility(View.GONE);\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                getActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n\r\n                } else {\r\n                    prepareSearchData(search, searchEditText);\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvSerachList.setLayoutManager(recentlyPlayed);\r\n        binding.rvSerachList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvDownloadsList.setLayoutManager(layoutManager);\r\n        binding.rvDownloadsList.setItemAnimator(new DefaultItemAnimator());\r\n        RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n        binding.rvPlayList.setItemAnimator(new DefaultItemAnimator());\r\n        binding.rvPlayList.setLayoutManager(manager);\r\n        prepareSuggestedData();\r\n\r\n        return view;\r\n    }\r\n\r\n    private void prepareSearchData(String search, EditText searchEditText) {\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SearchBothModel> listCall = APIClient.getClient().getSearchBoth(UserID, search);\r\n            listCall.enqueue(new Callback<SearchBothModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchBothModel> call, Response<SearchBothModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SearchBothModel listModel = response.body();\r\n                        if (!searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            if (listModel.getResponseData().size() == 0) {\r\n                                binding.rvSerachList.setVisibility(View.GONE);\r\n                                binding.llError.setVisibility(View.VISIBLE);\r\n                                binding.tvFound.setText(\"Couldn't find '\" + search + \"'. Try searching again\");\r\n                            } else {\r\n                                binding.llError.setVisibility(View.GONE);\r\n                                binding.rvSerachList.setVisibility(View.VISIBLE);\r\n                                adpater = new SerachListAdpater(listModel.getResponseData(), getActivity(), binding.rvSerachList, UserID);\r\n                                binding.rvSerachList.setAdapter(adpater);\r\n                            }\r\n                        } else if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            binding.rvSerachList.setAdapter(null);\r\n                            binding.rvSerachList.setVisibility(View.GONE);\r\n                            binding.llError.setVisibility(View.GONE);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchBothModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onPause() {\r\n        handler3.removeCallbacks(UpdateSongTime3);\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        ComeScreenAccount = 0;\r\n        comefromDownload = \"0\";\r\n        prepareSuggestedData();\r\n    }\r\n\r\n    private void prepareSuggestedData() {\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n        try {\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences shared11 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared11.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n                } else {\r\n                    SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if (isMediaStart) {\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if (isMediaStart) {\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shareda = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shareda.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(0, 6, 0, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(0, 6, 0, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SuggestedModel> listCall = APIClient.getClient().getSuggestedLists(UserID);\r\n            listCall.enqueue(new Callback<SuggestedModel>() {\r\n                @Override\r\n                public void onResponse(Call<SuggestedModel> call, Response<SuggestedModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SuggestedModel listModel = response.body();\r\n                        binding.tvSuggestedAudios.setText(R.string.Recommended_Audios);\r\n                        binding.tvSAViewAll.setVisibility(View.VISIBLE);\r\n                        SuggestionAudiosAdpater suggestedAdpater = new SuggestionAudiosAdpater(listModel.getResponseData(), getActivity());\r\n                        binding.rvDownloadsList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSAViewAll.setOnClickListener(view -> {\r\n                            Fragment fragment = new ViewAllSearchFragment();\r\n                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .replace(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                            Bundle bundle = new Bundle();\r\n                            bundle.putString(\"Name\", \"Recommended  Audios\");\r\n                            bundle.putParcelableArrayList(\"AudiolistModel\", listModel.getResponseData());\r\n                            fragment.setArguments(bundle);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SuggestedModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SearchPlaylistModel> listCall = APIClient.getClient().getSuggestedPlayLists(UserID);\r\n            listCall.enqueue(new Callback<SearchPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchPlaylistModel> call, Response<SearchPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SearchPlaylistModel listModel = response.body();\r\n                        binding.tvSuggestedPlaylist.setText(R.string.Recommendeds_Playlist);\r\n                        binding.tvSPViewAll.setVisibility(View.VISIBLE);\r\n\r\n                        SearchPlaylistAdapter suggestedAdpater = new SearchPlaylistAdapter(listModel.getResponseData());\r\n                        binding.rvPlayList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSPViewAll.setOnClickListener(view -> {\r\n                            Fragment fragment = new ViewAllSearchFragment();\r\n                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .replace(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                            Bundle bundle = new Bundle();\r\n                            bundle.putString(\"Name\", \"Recommended Playlist\");\r\n                            bundle.putParcelableArrayList(\"PlaylistModel\", listModel.getResponseData());\r\n                            fragment.setArguments(bundle);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    public class SerachListAdpater extends RecyclerView.Adapter<SerachListAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        String UserID, songId;\r\n        RecyclerView rvSerachList;\r\n        private List<SearchBothModel.ResponseData> modelList;\r\n\r\n        public SerachListAdpater(List<SearchBothModel.ResponseData> modelList, Context ctx,\r\n                                 RecyclerView rvSerachList, String UserID) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n            this.rvSerachList = rvSerachList;\r\n            this.UserID = UserID;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            GlobalSearchLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.global_search_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(modelList.get(position).getName());\r\n\r\n            if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            if (modelList.get(position).getIscategory().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.tvPart.setText(R.string.Audio);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n\r\n                UpdateSongTime3 = new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        try {\r\n                            startTime = getStartTime();\r\n                            myProgress = currentDuration;\r\n                            currentDuration = getStartTime();\r\n                            if (currentDuration == 0 && isCompleteStop) {\r\n                                notifyDataSetChanged();\r\n//                                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                            } else if (currentDuration >= 1 && !isPause) {\r\n//                                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                            } else if (currentDuration >= 1 && isPause) {\r\n//                                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                            }\r\n\r\n                            if(currentDuration <= 555){\r\n                                notifyDataSetChanged();\r\n                            }\r\n                        /*if(isPause && ps == 0){\r\n                            ps++;\r\n                            notifyDataSetChanged();\r\n                        }else if(!isPause && nps == 0){\r\n                            nps++;\r\n                            notifyDataSetChanged();\r\n                        }*/\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                        handler3.postDelayed(this, 500);\r\n                    }\r\n                };\r\n\r\n                SharedPreferences sharedzw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                if (!AudioFlag.equalsIgnoreCase(\"Downloadlist\") &&\r\n                        !AudioFlag.equalsIgnoreCase(\"SubPlayList\") && !AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                    if (myAudioId.equalsIgnoreCase(modelList.get(position).getID())) {\r\n                        songId = myAudioId;\r\n                        holder.binding.equalizerview.animateBars();\r\n                        holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                        holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n//            holder.binding.equalizerview.stopBars();\r\n//                        ps =0;\r\n//                        nps = 0;\r\n                    } else {\r\n                        holder.binding.equalizerview.setVisibility(View.GONE);\r\n                        holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    }\r\n                    handler3.postDelayed(UpdateSongTime3, 500);\r\n                } else {\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    handler3.removeCallbacks(UpdateSongTime3);\r\n                }\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                        i.putExtra(\"AudioId\", modelList.get(position).getID());\r\n                        i.putExtra(\"PlaylistID\", \"\");\r\n                        startActivity(i);\r\n                    }\r\n                });\r\n\r\n                holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        try {\r\n                            player = 1;\r\n                            if (isPrepare || isMediaStart || isPause) {\r\n                                MusicService.stopMedia();\r\n                            }\r\n                            isPause = false;\r\n                            isMediaStart = false;\r\n                            isPrepare = false;\r\n                            isCompleteStop = false;\r\n                            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                            SharedPreferences.Editor editor = shared.edit();\r\n                            Gson gson = new Gson();\r\n                            ArrayList<SearchBothModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                            SearchBothModel.ResponseData mainPlayModel = new SearchBothModel.ResponseData();\r\n                            mainPlayModel.setID(\"0\");\r\n                            mainPlayModel.setName(\"Disclaimer\");\r\n                            mainPlayModel.setAudioFile(\"\");\r\n                            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                            mainPlayModel.setAudiomastercat(\"\");\r\n                            mainPlayModel.setAudioSubCategory(\"\");\r\n                            mainPlayModel.setImageFile(\"\");\r\n                            mainPlayModel.setLike(\"\");\r\n                            mainPlayModel.setDownload(\"\");\r\n                            mainPlayModel.setAudioDuration(\"00:48\");\r\n                            listModelList2.add(mainPlayModel);\r\n\r\n                            listModelList2.add(modelList.get(position));\r\n                            String json = gson.toJson(listModelList2);\r\n                            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                            editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchModelAudio\");\r\n                            editor.commit();\r\n                            Fragment fragment = new TransparentPlayerFragment();\r\n                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .add(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                            /*Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n                            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                            ctx.startActivity(i);*/\r\n                            handler3.postDelayed(UpdateSongTime3, 500);\r\n                            notifyDataSetChanged();\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                });\r\n            } else if (modelList.get(position).getIscategory().equalsIgnoreCase(\"0\")) {\r\n                holder.binding.tvPart.setText(R.string.Playlist);\r\n                holder.binding.equalizerview.setVisibility(View.GONE);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                        i.putExtra(\"AudioId\", \"\");\r\n                        i.putExtra(\"PlaylistID\", modelList.get(position).getID());\r\n                        startActivity(i);\r\n                    }\r\n                });\r\n\r\n                holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        comefrom_search = 1;\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putString(\"New\", \"0\");\r\n                        bundle.putString(\"PlaylistID\", modelList.get(position).getID());\r\n                        bundle.putString(\"PlaylistName\", modelList.get(position).getName());\r\n                        bundle.putString(\"MyDownloads\", \"0\");\r\n                        myPlaylistsFragment.setArguments(bundle);\r\n                        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                        fragmentManager1.beginTransaction()\r\n                                .replace(R.id.flContainer, myPlaylistsFragment)\r\n                                .commit();\r\n                    }\r\n                });\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(getActivity()).load(modelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return modelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            GlobalSearchLayoutBinding binding;\r\n\r\n            public MyViewHolder(GlobalSearchLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SuggestionAudiosAdpater extends RecyclerView.Adapter<SuggestionAudiosAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        String songId;\r\n        private List<SuggestedModel.ResponseData> modelList;\r\n        int ps = 0, nps = 0;\r\n\r\n        public SuggestionAudiosAdpater(List<SuggestedModel.ResponseData> modelList, Context ctx) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            UpdateSongTime3 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n                        startTime = getStartTime();\r\n                        myProgress = currentDuration;\r\n                        currentDuration = getStartTime();\r\n                        if (currentDuration == 0 && isCompleteStop) {\r\n                            notifyDataSetChanged();\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        } else if (currentDuration >= 1 && !isPause) {\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                        } else if (currentDuration >= 1 && isPause) {\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        }\r\n\r\n                        if(currentDuration <= 555){\r\n                            notifyDataSetChanged();\r\n                        }\r\n                        /*if(isPause && ps == 0){\r\n                            ps++;\r\n                            notifyDataSetChanged();\r\n                        }else if(!isPause && nps == 0){\r\n                            nps++;\r\n                            notifyDataSetChanged();\r\n                        }*/\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    handler3.postDelayed(this, 500);\r\n                }\r\n            };\r\n\r\n            holder.binding.tvTitle.setText(modelList.get(position).getName());\r\n            holder.binding.tvTime.setText(modelList.get(position).getAudioDuration());\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(getActivity()).load(modelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            SharedPreferences sharedzw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"Downloadlist\") &&\r\n                    !AudioFlag.equalsIgnoreCase(\"SubPlayList\") && !AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                if (myAudioId.equalsIgnoreCase(modelList.get(position).getID())) {\r\n                    songId = myAudioId;\r\n                    holder.binding.equalizerview.animateBars();\r\n                    holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n//            holder.binding.equalizerview.stopBars();\r\n//                        ps =0;\r\n//                        nps = 0;\r\n                } else {\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                }\r\n                handler3.postDelayed(UpdateSongTime3, 500);\r\n            } else {\r\n                holder.binding.equalizerview.setVisibility(View.GONE);\r\n                holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                handler3.removeCallbacks(UpdateSongTime3);\r\n            }\r\n            holder.binding.llMainLayoutForPlayer.setOnClickListener(view -> {\r\n                try {\r\n                    player = 1;\r\n                    if (isPrepare || isMediaStart || isPause) {\r\n                        MusicService.stopMedia();\r\n                    }\r\n                    isPause = false;\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                    isCompleteStop = false;\r\n                    SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared.edit();\r\n                    Gson gson = new Gson();\r\n                    ArrayList<SuggestedModel.ResponseData> listModelList2 = new ArrayList<>();\r\n                    SuggestedModel.ResponseData mainPlayModel = new SuggestedModel.ResponseData();\r\n                    mainPlayModel.setID(\"0\");\r\n                    mainPlayModel.setName(\"Disclaimer\");\r\n                    mainPlayModel.setAudioFile(\"\");\r\n                    mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                    mainPlayModel.setAudiomastercat(\"\");\r\n                    mainPlayModel.setAudioSubCategory(\"\");\r\n                    mainPlayModel.setImageFile(\"\");\r\n                    mainPlayModel.setLike(\"\");\r\n                    mainPlayModel.setDownload(\"\");\r\n                    mainPlayModel.setAudioDuration(\"00:48\");\r\n                    listModelList2.add(mainPlayModel);\r\n\r\n                    listModelList2.add(modelList.get(position));\r\n                    String json = gson.toJson(listModelList2);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SearchAudio\");\r\n                    editor.commit();\r\n                    /*Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n                    i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                    ctx.startActivity(i);*/\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                    handler3.postDelayed(UpdateSongTime3, 500);\r\n                    notifyDataSetChanged();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            });\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                    i.putExtra(\"AudioId\", modelList.get(position).getID());\r\n                    i.putExtra(\"PlaylistID\", \"\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (10 > modelList.size()) {\r\n                return modelList.size();\r\n            } else {\r\n                return 10;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SearchPlaylistAdapter extends RecyclerView.Adapter<SearchPlaylistAdapter.MyViewHolder> {\r\n        private List<SearchPlaylistModel.ResponseData> modelList;\r\n        int index = -1;\r\n\r\n        public SearchPlaylistAdapter(List<SearchPlaylistModel.ResponseData> listModelList) {\r\n            this.modelList = listModelList;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            PlaylistCustomLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.playlist_custom_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                    1, 1, 0.38f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            holder.binding.tvAddToPlaylist.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.tvAddToPlaylist.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            MeasureRatio measureRatio1 = BWSApplication.measureRatio(getActivity(), 0,\r\n                    1, 1, 0.38f, 0);\r\n            holder.binding.rlMainLayout.getLayoutParams().height = (int) (measureRatio1.getHeight() * measureRatio1.getRatio());\r\n            holder.binding.rlMainLayout.getLayoutParams().width = (int) (measureRatio1.getWidthImg() * measureRatio1.getRatio());\r\n\r\n            holder.binding.tvPlaylistName.setText(modelList.get(position).getName());\r\n            Glide.with(getActivity()).load(modelList.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                    || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            if (index == position) {\r\n                holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n            } else\r\n                holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n            holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n            holder.binding.rlMainLayout.setOnLongClickListener(new View.OnLongClickListener() {\r\n                @Override\r\n                public boolean onLongClick(View v) {\r\n                    holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n                    index = position;\r\n                    notifyDataSetChanged();\r\n                    return true;\r\n                }\r\n            });\r\n            holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    Intent i = new Intent(getActivity(), AddPlaylistActivity.class);\r\n                    i.putExtra(\"AudioId\", \"\");\r\n                    i.putExtra(\"PlaylistID\", modelList.get(position).getID());\r\n                    startActivity(i);\r\n                }\r\n            });\r\n            holder.binding.rlMainLayout.setOnClickListener(view -> {\r\n                if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    comefrom_search = 1;\r\n                    Bundle bundle = new Bundle();\r\n                    Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    bundle.putString(\"New\", \"0\");\r\n                    bundle.putString(\"ComeFrom\", \"Search\");\r\n                    bundle.putString(\"PlaylistID\", modelList.get(position).getID());\r\n                    bundle.putString(\"PlaylistName\", modelList.get(position).getName());\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();\r\n                    /*Intent intent = new Intent(getActivity(), DashboardActivity.class);\r\n                    intent.putExtra(\"Goplaylist\",\"1\");\r\n                    intent.putExtra(\"PlaylistID\", modelList.get(position).getID());\r\n                    intent.putExtra(\"PlaylistName\", modelList.get(position).getName());\r\n                    intent.putExtra(\"PlaylistImage\",\"\");\r\n                    startActivity(intent);\r\n                    getActivity().finish();*/\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (6 > modelList.size()) {\r\n                return modelList.size();\r\n            } else {\r\n                return 6;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            PlaylistCustomLayoutBinding binding;\r\n\r\n            public MyViewHolder(PlaylistCustomLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Search/SearchFragment.java	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Search/SearchFragment.java	(date 1605711638221)
@@ -413,7 +413,7 @@
 //                                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
                             }
 
-                            if(currentDuration <= 555){
+                            if (currentDuration <= 555) {
                                 notifyDataSetChanged();
                             }
                         /*if(isPause && ps == 0){
@@ -438,7 +438,10 @@
                         !AudioFlag.equalsIgnoreCase("SubPlayList") && !AudioFlag.equalsIgnoreCase("TopCategories")) {
                     if (myAudioId.equalsIgnoreCase(modelList.get(position).getID())) {
                         songId = myAudioId;
-                        holder.binding.equalizerview.animateBars();
+                        if (isPause) {
+                            holder.binding.equalizerview.stopBars();
+                        } else
+                            holder.binding.equalizerview.animateBars();
                         holder.binding.equalizerview.setVisibility(View.VISIBLE);
                         holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);
                         holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
@@ -654,23 +657,13 @@
                         currentDuration = getStartTime();
                         if (currentDuration == 0 && isCompleteStop) {
                             notifyDataSetChanged();
-//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
                         } else if (currentDuration >= 1 && !isPause) {
-//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));
                         } else if (currentDuration >= 1 && isPause) {
-//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));
                         }
 
-                        if(currentDuration <= 555){
+                        if (currentDuration <= 555) {
                             notifyDataSetChanged();
                         }
-                        /*if(isPause && ps == 0){
-                            ps++;
-                            notifyDataSetChanged();
-                        }else if(!isPause && nps == 0){
-                            nps++;
-                            notifyDataSetChanged();
-                        }*/
                     } catch (Exception e) {
                         e.printStackTrace();
                     }
@@ -711,14 +704,14 @@
                     !AudioFlag.equalsIgnoreCase("SubPlayList") && !AudioFlag.equalsIgnoreCase("TopCategories")) {
                 if (myAudioId.equalsIgnoreCase(modelList.get(position).getID())) {
                     songId = myAudioId;
-                    holder.binding.equalizerview.animateBars();
+                    if (isPause) {
+                        holder.binding.equalizerview.stopBars();
+                    } else
+                        holder.binding.equalizerview.animateBars();
                     holder.binding.equalizerview.setVisibility(View.VISIBLE);
                     holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);
                     holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
                     holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);
-//            holder.binding.equalizerview.stopBars();
-//                        ps =0;
-//                        nps = 0;
                 } else {
                     holder.binding.equalizerview.setVisibility(View.GONE);
                     holder.binding.llMainLayout.setBackgroundResource(R.color.white);
Index: app/src/main/java/com/brainwellnessspa/DownloadModule/Adapters/AudioDownlaodsAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DownloadModule.Adapters;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Handler;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.downloader.PRDownloader;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.AudioDownloadsLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.myAudioId;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadIdOne;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadProgress;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\n\r\npublic class AudioDownlaodsAdapter extends RecyclerView.Adapter<AudioDownlaodsAdapter.MyViewHolder> {\r\n    public static String comefromDownload = \"0\";\r\n    FragmentActivity ctx;\r\n    String UserID, songId, AudioFlag;\r\n    FrameLayout progressBarHolder;\r\n    ProgressBar ImgV;\r\n    LinearLayout llError;\r\n    RecyclerView rvDownloadsList;\r\n    TextView tvFound;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    Runnable UpdateSongTime1;\r\n    List<String> fileNameList = new ArrayList<>(), playlistDownloadId = new ArrayList<>(), audiofilelist = new ArrayList<>();\r\n    private List<DownloadAudioDetails> listModelList;\r\n    private Handler handler1;\r\n    List<DownloadAudioDetails> downloadedSingleAudio;\r\n    Handler handler3;\r\n    int startTime;\r\n    private long currentDuration = 0;\r\n    long myProgress = 0;\r\n    private Runnable UpdateSongTime3;\r\n\r\n\r\n    public AudioDownlaodsAdapter(List<DownloadAudioDetails> listModelList, FragmentActivity ctx, String UserID,\r\n                                 FrameLayout progressBarHolder, ProgressBar ImgV, LinearLayout llError, RecyclerView rvDownloadsList, TextView tvFound) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.UserID = UserID;\r\n        this.progressBarHolder = progressBarHolder;\r\n        this.ImgV = ImgV;\r\n        this.llError = llError;\r\n        this.rvDownloadsList = rvDownloadsList;\r\n        this.tvFound = tvFound;\r\n        handler1 = new Handler();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        downloadedSingleAudio = new ArrayList<>();\r\n        downloadedSingleAudio = getMyMedia();\r\n        /*SharedPreferences sharedx = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type = new TypeToken<List<String>>() {\r\n            }.getType();\r\n//            fileNameList = gson.fromJson(json, type);\r\n        }*/\r\n        getDownloadData();\r\n\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        AudioDownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.audio_downloads_layout, parent, false);\r\n        return new MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        handler3 = new Handler();\r\n        UpdateSongTime1 = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                   /* downloadedSingleAudio = getMyMedia();\r\n                    for (int f = 0; f < listModelList.size(); f++) {\r\n                        if(downloadedSingleAudio.size()!=0) {\r\n                            for (int i = 0; i < downloadedSingleAudio.size(); i++) {\r\n                                if (downloadedSingleAudio.get(i).getName().equalsIgnoreCase(listModelList.get(position).getName())) {\r\n                                        if (downloadedSingleAudio.get(i).getDownloadProgress() <= 100) {\r\n                                            //disableName.add(mData.get(position).getName());\r\n                                            notifyItemChanged(position);\r\n                                        }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    downloadedSingleAudio = getMyMedia();*/\r\n\r\n//                        for (int f = 0; f < GlobalListModel.getPlaylistSongs().size(); f++) {\r\n                    if (fileNameList.size() != 0) {\r\n                        for (int i = 0; i < fileNameList.size(); i++) {\r\n                            if (fileNameList.get(i).equalsIgnoreCase(listModelList.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                                if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(listModelList.get(position).getName())) {\r\n                                    if (downloadProgress <= 100) {\r\n                                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                            notifyItemChanged(position);\r\n                                        }\r\n                                    } else {\r\n                                        holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                        getDownloadData();\r\n                                    }\r\n                                } else {\r\n//                                        notifyItemChanged(i);\r\n                                }\r\n                            }\r\n                        }\r\n//                            }\r\n                    }\r\n                    if (downloadProgress == 0) {\r\n                        notifyDataSetChanged();\r\n                        getDownloadData();\r\n                    }\r\n                    handler1.postDelayed(this, 3000);\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n        };\r\n        UpdateSongTime3 = new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    startTime = getStartTime();\r\n                    myProgress = currentDuration;\r\n                    currentDuration = getStartTime();\r\n                    if (currentDuration == 0 && isCompleteStop) {\r\n                        notifyDataSetChanged();\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                    } else if (currentDuration >= 1 && !isPause) {\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                    } else if (currentDuration >= 1 && isPause) {\r\n//                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                    }\r\n                        /*if(isPause && ps == 0){\r\n                            ps++;\r\n                            notifyDataSetChanged();\r\n                        }else if(!isPause && nps == 0){\r\n                            nps++;\r\n                            notifyDataSetChanged();\r\n                        }*/\r\n                    if(currentDuration <= 555){\r\n                        notifyDataSetChanged();\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                handler3.postDelayed(this, 500);\r\n            }\r\n        };\r\n\r\n        if (fileNameList.size() != 0) {\r\n            for (int i = 0; i < fileNameList.size(); i++) {\r\n                if (fileNameList.get(i).equalsIgnoreCase(listModelList.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                    if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(listModelList.get(position).getName())) {\r\n                        if (downloadProgress <= 100) {\r\n                            if (downloadProgress == 100) {\r\n                                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                            } else {\r\n                                holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            }\r\n                        } else {\r\n                            holder.binding.pbProgress.setVisibility(View.GONE);\r\n//                                handler1.removeCallbacks(UpdateSongTime1);\r\n                        }\r\n                        handler1.postDelayed(UpdateSongTime1, 3000);\r\n                    } else {\r\n                        holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                        handler1.postDelayed(UpdateSongTime1, 3000);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n        }\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        holder.binding.tvTime.setText(listModelList.get(position).getAudioDuration());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                1, 1, 0.12f, 0);\r\n        holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivBackgroundImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivBackgroundImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivBackgroundImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n        holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n        comefromDownload = \"1\";\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n\r\n        SharedPreferences sharedzw = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n//            TODO appointment as it is audioflag changes (audioPlayz && AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\"))\r\n        if (audioPlayz && AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            if (myAudioId.equalsIgnoreCase(listModelList.get(position).getID())) {\r\n                songId = myAudioId;\r\n                holder.binding.equalizerview.animateBars();\r\n                holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n//            holder.binding.equalizerview.stopBars();\r\n//                        ps =0;\r\n//                        nps = 0;\r\n            } else {\r\n                holder.binding.equalizerview.setVisibility(View.GONE);\r\n                holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n            }\r\n            handler3.postDelayed(UpdateSongTime3, 500);\r\n        } else {\r\n            holder.binding.equalizerview.setVisibility(View.GONE);\r\n            holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n            handler3.removeCallbacks(UpdateSongTime3);\r\n        }\r\n\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                i.putExtra(\"ComeFrom\", \"Plan\");\r\n                ctx.startActivity(i);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                comefromDownload = \"1\";\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n          /*      DownloadMedia downloadMedia = new DownloadMedia(ctx.getApplicationContext());\r\n                try {\r\n                    FileDescriptor fileDescriptor = FileUtils.getTempFileDescriptor(ctx.getApplicationContext(), downloadMedia.decrypt(listModelList.get(position).getName()));\r\n                    play2(fileDescriptor);\r\n                    playMedia();\r\n\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }*/\r\n                SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransFrag(position, listModelList);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    List<DownloadAudioDetails> listModelList2 = new ArrayList<>();\r\n                    DownloadAudioDetails mainPlayModel = new DownloadAudioDetails();\r\n                    mainPlayModel.setID(\"0\");\r\n                    mainPlayModel.setName(\"Disclaimer\");\r\n                    mainPlayModel.setAudioFile(\"\");\r\n                    mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                    mainPlayModel.setAudiomastercat(\"\");\r\n                    mainPlayModel.setAudioSubCategory(\"\");\r\n                    mainPlayModel.setImageFile(\"\");\r\n                    mainPlayModel.setLike(\"\");\r\n                    mainPlayModel.setDownload(\"\");\r\n                    mainPlayModel.setAudioDuration(\"00:48\");\r\n                    listModelList2.addAll(listModelList);\r\n                    listModelList2.add(position, mainPlayModel);\r\n                    callTransFrag(position, listModelList2);\r\n                }\r\n               /* try {\r\n                    SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    if (queuePlay) {\r\n                        int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                        Gson gson = new Gson();\r\n                        String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                            }.getType();\r\n                            addToQueueModelList = gson.fromJson(json1, type1);\r\n                        }\r\n                        addToQueueModelList.remove(position1);\r\n                        SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared2.edit();\r\n                        String json = gson.toJson(addToQueueModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                        editor.commit();\r\n\r\n                    }\r\n\r\n                    player = 1;\r\n                    if (isPrepare || isMediaStart || isPause) {\r\n                        stopMedia();\r\n                    }\r\n                    isPause = false;\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n\r\n                    isCompleteStop = false;\r\n\r\n                    SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared.edit();\r\n                    Gson gson = new Gson();\r\n                    ArrayList<DownloadAudioDetails> listModelList2 = new ArrayList<>();\r\n                    DownloadAudioDetails mainPlayModel = new DownloadAudioDetails();\r\n                    mainPlayModel.setID(\"0\");\r\n                    mainPlayModel.setName(\"Disclaimer\");\r\n                    mainPlayModel.setAudioFile(\"\");\r\n                    mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                    mainPlayModel.setAudiomastercat(\"\");\r\n                    mainPlayModel.setAudioSubCategory(\"\");\r\n                    mainPlayModel.setImageFile(\"\");\r\n                    mainPlayModel.setLike(\"\");\r\n                    mainPlayModel.setDownload(\"\");\r\n                    mainPlayModel.setAudioDuration(\"00:48\");\r\n                    listModelList2.addAll(listModelList);\r\n                    listModelList2.add(position,mainPlayModel);\r\n\r\n                    String json = gson.toJson(listModelList2);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"DownloadListAudio\");\r\n                    editor.commit();\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = ctx.getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }*/\r\n            }\r\n            handler3.postDelayed(UpdateSongTime3, 500);\r\n            notifyDataSetChanged();\r\n        });\r\n\r\n        holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n            try {\r\n                SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                String AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n                    String name = \"\";\r\n                    SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    Gson gson = new Gson();\r\n                    String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                    Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                    }.getType();\r\n                    ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                    if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                        arrayList.remove(0);\r\n                    }\r\n                    name = arrayList.get(0).getName();\r\n\r\n                    if (name.equalsIgnoreCase(listModelList.get(position).getName())) {\r\n                        BWSApplication.showToast(\"Currently this audio is in player,so you can't delete this audio as of now\", ctx);\r\n                    } else {\r\n                        deleteAudio(holder.getAdapterPosition());\r\n                    }\r\n                } else {\r\n                    deleteAudio(holder.getAdapterPosition());\r\n\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callTransFrag(int position, List<DownloadAudioDetails> listModelList) {\r\n        try {\r\n            SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            if (queuePlay) {\r\n                int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                Gson gson = new Gson();\r\n                String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                    }.getType();\r\n                    addToQueueModelList = gson.fromJson(json1, type1);\r\n                }\r\n                addToQueueModelList.remove(position1);\r\n                SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared2.edit();\r\n                String json = gson.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                editor.commit();\r\n\r\n            }\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = ctx.getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"DownloadListAudio\");\r\n            editor.commit();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void deleteAudio(int position) {\r\n        getDownloadData();\r\n        final Dialog dialog = new Dialog(ctx);\r\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n        dialog.setContentView(R.layout.logout_layout);\r\n        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));\r\n        dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n        final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n        final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n        final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n        final Button Btn = dialog.findViewById(R.id.Btn);\r\n        tvTitle.setText(\"Remove audio\");\r\n        tvHeader.setText(\"Are you sure you want to remove the \" + listModelList.get(position).getName() + \" from downloads?\");\r\n        Btn.setText(\"Confirm\");\r\n        dialog.setOnKeyListener((v, keyCode, event) -> {\r\n            if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                dialog.dismiss();\r\n            }\r\n            return false;\r\n        });\r\n\r\n        Btn.setOnClickListener(v -> {\r\n            String AudioFile = listModelList.get(position).getAudioFile();\r\n            String AudioName = listModelList.get(position).getName();\r\n            if (fileNameList.size() != 0) {\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(listModelList.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(listModelList.get(position).getName())) {\r\n                            if (downloadProgress <= 100) {\r\n                                PRDownloader.cancel(downloadIdOne);\r\n                            }\r\n                        } else {\r\n                            fileNameList.remove(i);\r\n                            playlistDownloadId.remove(i);\r\n                            audiofilelist.remove(i);\r\n                            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                            SharedPreferences.Editor editor = shared.edit();\r\n                            Gson gson = new Gson();\r\n                            String urlJson = gson.toJson(audiofilelist);\r\n                            String nameJson = gson.toJson(fileNameList);\r\n                            String playlistIdJson = gson.toJson(playlistDownloadId);\r\n                            editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                            editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                            editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                            editor.commit();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            deleteDownloadFile(ctx.getApplicationContext(), AudioFile, AudioName, position);\r\n            dialog.dismiss();\r\n        });\r\n        tvGoBack.setOnClickListener(v -> dialog.dismiss());\r\n        dialog.show();\r\n        dialog.setCancelable(false);\r\n    }\r\n\r\n    private List<DownloadAudioDetails> getMyMedia() {\r\n        downloadedSingleAudio = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadedSingleAudio = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(\"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return downloadedSingleAudio;\r\n    }\r\n\r\n    private void getDownloadData() {\r\n        try {\r\n            SharedPreferences sharedy = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String jsonx = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n                audiofilelist = gson.fromJson(jsonx, type);\r\n                if (fileNameList.size() != 0) {\r\n                    handler1.postDelayed(UpdateSongTime1, 3000);\r\n                } else {\r\n                    audiofilelist = new ArrayList<>();\r\n                    fileNameList = new ArrayList<>();\r\n                    playlistDownloadId = new ArrayList<>();\r\n                }\r\n            } else {\r\n                fileNameList = new ArrayList<>();\r\n                audiofilelist = new ArrayList<>();\r\n                playlistDownloadId = new ArrayList<>();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void deleteDownloadFile(Context applicationContext, String audioFile, String audioName, int position) {\r\n        FileUtils.deleteDownloadedFile(applicationContext, audioName);\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(applicationContext)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deleteByAudioFile(audioFile, \"\");\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                listModelList = new ArrayList<>();\r\n                listModelList = GetAllMedia(ctx);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetAllMedia(FragmentActivity ctx) {\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData(\"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadAudioDetailsList.size() != 0) {\r\n                    if (downloadAudioDetailsList.size() == 0) {\r\n                        tvFound.setVisibility(View.VISIBLE);\r\n                    } else {\r\n                        llError.setVisibility(View.GONE);\r\n                        AudioDownlaodsAdapter adapter = new AudioDownlaodsAdapter(downloadAudioDetailsList, ctx, UserID, progressBarHolder, ImgV, llError, rvDownloadsList, tvFound);\r\n                        rvDownloadsList.setAdapter(adapter);\r\n                    }\r\n                    llError.setVisibility(View.GONE);\r\n                    rvDownloadsList.setVisibility(View.VISIBLE);\r\n                } else {\r\n                    llError.setVisibility(View.VISIBLE);\r\n                    rvDownloadsList.setVisibility(View.GONE);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }\r\n\r\n    @Override\r\n    public int getItemViewType(int position) {\r\n        return position;\r\n    }\r\n\r\n    @Override\r\n    public long getItemId(int position) {\r\n        return position;\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return listModelList.size();\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        AudioDownloadsLayoutBinding binding;\r\n\r\n        public MyViewHolder(AudioDownloadsLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DownloadModule/Adapters/AudioDownlaodsAdapter.java	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/java/com/brainwellnessspa/DownloadModule/Adapters/AudioDownlaodsAdapter.java	(date 1605711638241)
@@ -262,7 +262,10 @@
         if (audioPlayz && AudioFlag.equalsIgnoreCase("DownloadListAudio")) {
             if (myAudioId.equalsIgnoreCase(listModelList.get(position).getID())) {
                 songId = myAudioId;
-                holder.binding.equalizerview.animateBars();
+                if (isPause) {
+                    holder.binding.equalizerview.stopBars();
+                } else
+                    holder.binding.equalizerview.animateBars();
                 holder.binding.equalizerview.setVisibility(View.VISIBLE);
                 holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);
                 holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);
Index: app/src/main/res/layout/activity_add_playlist.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        xmlns:tools=\"http://schemas.android.com/tools\"\r\n        android:layout_width=\"match_parent\"\r\n        android:id=\"@+id/flContainer\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/dark_blue_gray\">\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <RelativeLayout\r\n                android:id=\"@+id/rlLayout\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"@dimen/_56sdp\">\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llBack\"\r\n                    android:layout_width=\"42dp\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:layout_centerVertical=\"true\"\r\n                    android:gravity=\"center\">\r\n\r\n                    <ImageView\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:src=\"@drawable/ic_left_arrow_icon\"\r\n                        app:tint=\"@color/white\" />\r\n\r\n                </LinearLayout>\r\n\r\n                <TextView\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_centerVertical=\"true\"\r\n                    android:fontFamily=\"@font/montserrat_bold\"\r\n                    android:gravity=\"center\"\r\n                    android:text=\"@string/Add_to_Playlist\"\r\n                    android:textColor=\"@color/white\"\r\n                    android:textSize=\"@dimen/_15sdp\" />\r\n\r\n            </RelativeLayout>\r\n\r\n            <Button\r\n                android:id=\"@+id/btnAddPlatLists\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_gravity=\"center_horizontal\"\r\n                android:layout_marginTop=\"@dimen/_15sdp\"\r\n                android:layout_marginHorizontal=\"@dimen/_55sdp\"\r\n                android:background=\"@drawable/extra_round_cornor\"\r\n                android:fontFamily=\"@font/montserrat_medium\"\r\n                android:text=\"@string/New_PLaylist\"\r\n                android:textColor=\"@color/white\" />\r\n\r\n            <androidx.recyclerview.widget.RecyclerView\r\n                android:id=\"@+id/rvPlayLists\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"@dimen/_10sdp\"\r\n                android:layout_marginBottom=\"@dimen/_16sdp\"\r\n                android:overScrollMode=\"never\"\r\n                tools:listitem=\"@layout/add_play_list_layout\" />\r\n        </LinearLayout>\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:gravity=\"center\"\r\n            android:padding=\"@dimen/_60sdp\">\r\n\r\n            <ProgressBar\r\n                android:id=\"@+id/progressBar\"\r\n                android:layout_width=\"@dimen/_50sdp\"\r\n                android:layout_height=\"@dimen/_50sdp\"\r\n                android:indeterminateTint=\"@color/blue\"\r\n                android:scaleType=\"centerInside\"\r\n                android:visibility=\"gone\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <FrameLayout\r\n            android:id=\"@+id/progressBarHolder\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:alpha=\"0.4\"\r\n            android:animateLayoutChanges=\"true\"\r\n            android:background=\"#C0000000\"\r\n            android:visibility=\"gone\" />\r\n    </RelativeLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_add_playlist.xml	(revision 242d58f4d1f538a7c0029767eb6d186dedd467d8)
+++ app/src/main/res/layout/activity_add_playlist.xml	(date 1605711638285)
@@ -53,19 +53,48 @@
                 android:layout_gravity="center_horizontal"
                 android:layout_marginTop="@dimen/_15sdp"
                 android:layout_marginHorizontal="@dimen/_55sdp"
+                android:layout_marginBottom="@dimen/_8sdp"
                 android:background="@drawable/extra_round_cornor"
                 android:fontFamily="@font/montserrat_medium"
                 android:text="@string/New_PLaylist"
                 android:textColor="@color/white" />
 
-            <androidx.recyclerview.widget.RecyclerView
-                android:id="@+id/rvPlayLists"
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="@dimen/_10sdp"
-                android:layout_marginBottom="@dimen/_16sdp"
-                android:overScrollMode="never"
-                tools:listitem="@layout/add_play_list_layout" />
+            <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="match_parent">
+
+                <androidx.recyclerview.widget.RecyclerView
+                    android:id="@+id/rvPlayLists"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/_5sdp"
+                    android:layout_marginBottom="@dimen/_16sdp"
+                    android:overScrollMode="never"
+                    tools:listitem="@layout/add_play_list_layout" />
+
+                <LinearLayout
+                    android:id="@+id/llError"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:layout_centerInParent="true"
+                    android:gravity="center"
+                    android:orientation="vertical">
+
+                    <TextView
+                        android:id="@+id/tvFound"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_centerInParent="true"
+                        android:layout_marginHorizontal="@dimen/_20sdp"
+                        android:fontFamily="@font/montserrat_regular"
+                        android:gravity="center"
+                        android:lineSpacingExtra="@dimen/_4sdp"
+                        android:textColor="@color/white"
+                        android:textSize="@dimen/_16sdp" />
+
+                </LinearLayout>
+            </RelativeLayout>
+
         </LinearLayout>
 
         <LinearLayout
