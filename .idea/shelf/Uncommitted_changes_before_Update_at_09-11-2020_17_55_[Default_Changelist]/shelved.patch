Index: app/src/main/java/com/brainwellnessspa/BWSApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa;\r\n\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.app.Application;\r\nimport android.app.Notification;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.app.Service;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.provider.Settings;\r\nimport android.support.v4.media.session.MediaControllerCompat;\r\nimport android.support.v4.media.session.MediaSessionCompat;\r\nimport android.util.Base64;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.Gravity;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.core.app.NotificationManagerCompat;\r\nimport androidx.media.MediaSessionManager;\r\nimport androidx.room.migration.Migration;\r\nimport androidx.sqlite.db.SupportSQLiteDatabase;\r\n\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Services.NotificationActionService;\r\nimport com.brainwellnessspa.SplashModule.Models.VersionModel;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.AppSignatureHashHelper;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.CryptLib;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.Utility.NotificationDismissedReceiver;\r\nimport com.brainwellnessspa.Utility.PlaybackStatus;\r\nimport com.brainwellnessspa.Utility.Track;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Random;\r\nimport java.util.TimeZone;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\nimport javax.net.ssl.HttpsURLConnection;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static java.sql.DriverManager.println;\r\n\r\npublic class BWSApplication extends Application {\r\n    private static Context mContext;\r\n    private static BWSApplication BWSApplication;\r\n    private static List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    private static final int NOTIFICATION_ID = 101;\r\n    private static Bitmap myBitmap;\r\n    private static Service service;\r\n    private static Bitmap mCurrTrackCover;\r\n    public static MediaSessionCompat mMediaSession = null;\r\n    public static PendingIntent play_pauseAction = null;\r\n    public static boolean usesChronometer = false;\r\n    public static boolean showWhen = false;\r\n    public static Long notifWhen = 0L;\r\n    public static MediaSessionManager mediaSessionManager;\r\n    public static MediaSessionCompat mediaSession;\r\n    public static MediaControllerCompat.TransportControls transportControls;\r\n    private static Track track;\r\n    public static final String CHANNEL_ID = \"channel1\";\r\n    public static final String ACTION_PREVIUOS = \"actionprevious\";\r\n    public static final String ACTION_PLAY = \"actionplay\";\r\n    public static final String ACTION_NEXT = \"actionnext\";\r\n    public static Notification notification;\r\n    public static NotificationManager notificationManager;\r\n\r\n    public static Context getContext() {\r\n        return mContext;\r\n    }\r\n\r\n    public static MeasureRatio measureRatio(Context context, float outerMargin, float aspectX, float aspectY, float proportion, float innerMargin) {\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        try {\r\n            WindowManager windowmanager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\r\n            windowmanager.getDefaultDisplay().getMetrics(displayMetrics);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        float width = displayMetrics.widthPixels / displayMetrics.density;\r\n        float widthImg = ((width - outerMargin) * proportion) - innerMargin;\r\n        float height = widthImg * aspectY / aspectX;\r\n        //Log.e(\"width.........\", \"\" + context.getClass().getSimpleName()+\",\"+width);\r\n//        //Log.e(\"widthImg.........\", \"\" + context.getClass().getSimpleName()+\",\"+widthImg);\r\n//        //Log.e(\"height...........\", \"\" + context.getClass().getSimpleName()+\",\"+height);\r\n//        //Log.e(\"displayMetrics.density...........\", \"\" + context.getClass().getSimpleName()+\",\"+displayMetrics.density);\r\n        return new MeasureRatio(widthImg, height, displayMetrics.density, proportion);\r\n    }\r\n\r\n    public static final Migration MIGRATION_1_2 = new Migration(1, 2) {\r\n        @Override\r\n        public void migrate(SupportSQLiteDatabase database) {\r\n            database.execSQL(\"ALTER TABLE 'playlist_table' ADD COLUMN 'PlaylistImageDetails' TEXT\");\r\n        }\r\n    };\r\n\r\n    public static void createNotification(Context context, MainPlayModel track, int playbutton, int pos, int size) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\r\n            MediaSessionCompat mediaSessionCompat = new MediaSessionCompat(context, \"tag\");\r\n            PendingIntent pendingIntentPrevious;\r\n          /*  try {\r\n                byte[] encodeByte = Base64.decode(track.getImageFile(), Base64.DEFAULT);\r\n                myBitmap = BitmapFactory.decodeByteArray(encodeByte, 0, encodeByte.length);\r\n            } catch (Exception e) {\r\n                e.getMessage();\r\n            }*/\r\n            int drw_previous;\r\n            if (pos == 0) {\r\n                pendingIntentPrevious = null;\r\n                drw_previous = 0;\r\n            } else {\r\n                Intent intentPrevious = new Intent(context, NotificationActionService.class)\r\n                        .setAction(ACTION_PREVIUOS);\r\n                pendingIntentPrevious = PendingIntent.getBroadcast(context, 0,\r\n                        intentPrevious, PendingIntent.FLAG_UPDATE_CURRENT);\r\n                drw_previous = R.drawable.ic_skip_previous_black_24dp;\r\n            }\r\n\r\n            Intent intentPlay = new Intent(context, NotificationActionService.class).setAction(ACTION_PLAY);\r\n            PendingIntent pendingIntentPlay = PendingIntent.getBroadcast(context, 0, intentPlay, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n            PendingIntent pendingIntentNext;\r\n            int drw_next;\r\n            if (pos == size) {\r\n                pendingIntentNext = null;\r\n                drw_next = 0;\r\n            } else {\r\n                Intent intentNext = new Intent(context, NotificationActionService.class)\r\n                        .setAction(ACTION_NEXT);\r\n                pendingIntentNext = PendingIntent.getBroadcast(context, 0,\r\n                        intentNext, PendingIntent.FLAG_UPDATE_CURRENT);\r\n                drw_next = R.drawable.ic_skip_next_black_24dp;\r\n            }\r\n\r\n            //create notification\r\n            notification = new NotificationCompat.Builder(context, CHANNEL_ID)\r\n                    .setSmallIcon(R.drawable.ic_music_note)\r\n                    .setContentTitle(track.getName())\r\n                    .setContentText(track.getAudioDirection())\r\n                    .setLargeIcon(BitmapFactory.decodeResource(context.getResources(), R.drawable.logo_design))\r\n                    .setOnlyAlertOnce(true)//show notification for only first time\r\n                    .setShowWhen(false)\r\n                    .addAction(drw_previous, \"Previous\", pendingIntentPrevious)\r\n                    .addAction(playbutton, \"Play\", pendingIntentPlay)\r\n                    .addAction(drw_next, \"Next\", pendingIntentNext)\r\n                    .setStyle(new androidx.media.app.NotificationCompat.MediaStyle()\r\n                            .setShowActionsInCompactView(0, 1, 2)\r\n                            .setMediaSession(mediaSessionCompat.getSessionToken()))\r\n                    .setPriority(NotificationCompat.PRIORITY_LOW)\r\n                    .build();\r\n\r\n            notificationManagerCompat.notify(1, notification);\r\n\r\n        }\r\n    }\r\n\r\n    public static void createChannel(Context ctx) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            NotificationChannel channel = new NotificationChannel(CHANNEL_ID,\r\n                    \"KOD Dev\", NotificationManager.IMPORTANCE_LOW);\r\n\r\n            notificationManager = ctx.getSystemService(NotificationManager.class);\r\n            if (notificationManager != null) {\r\n                notificationManager.createNotificationChannel(channel);\r\n            }\r\n        } else {\r\n            NotificationChannel channel = new NotificationChannel(CHANNEL_ID,\r\n                    \"KOD Dev\", NotificationManager.IMPORTANCE_LOW);\r\n\r\n            notificationManager = ctx.getSystemService(NotificationManager.class);\r\n            if (notificationManager != null) {\r\n                notificationManager.createNotificationChannel(channel);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void getLatasteUpdate(Context context) {\r\n        String appURI = \"https://play.google.com/store/apps/details?id=com.brainwellnessspa\";\r\n        if (BWSApplication.isNetworkConnected(context)) {\r\n            Call<VersionModel> listCall = APIClient.getClient().getVersionDatas(String.valueOf(BuildConfig.VERSION_CODE), CONSTANTS.FLAG_ONE);\r\n            listCall.enqueue(new Callback<VersionModel>() {\r\n                @Override\r\n                public void onResponse(Call<VersionModel> call, Response<VersionModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        VersionModel versionModel = response.body();\r\n//                    if (versionModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                        if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"0\")) {\r\n                            AlertDialog.Builder builder = new AlertDialog.Builder(context);\r\n                            builder.setTitle(\"Update Brain Wellness Spa\");\r\n                            builder.setCancelable(false);\r\n                            builder.setMessage(\"Brain Wellness Spa recommends that you update to the latest version\")\r\n                                    .setPositiveButton(\"UPDATE\", (dialog, id) -> {\r\n                                        context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(appURI)));\r\n                                        dialog.cancel();\r\n                                    })\r\n                                    .setNegativeButton(\"NOT NOW\", (dialog, id) -> dialog.dismiss());\r\n                            builder.create().show();\r\n                        } else if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"1\")) {\r\n                            AlertDialog.Builder builder = new AlertDialog.Builder(context);\r\n                            builder.setTitle(\"Update Required\");\r\n                            builder.setCancelable(false);\r\n                            builder.setMessage(\"To keep using Brain Wellness Spa, download the latest version\")\r\n                                    .setCancelable(false)\r\n                                    .setPositiveButton(\"UPDATE\", (dialog, id) -> context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(appURI))));\r\n                            builder.create().show();\r\n                        } else if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"\")) {\r\n                        }\r\n                    }\r\n                    /*} else {\r\n                    }*/\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<VersionModel> call, Throwable t) {\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(context.getString(R.string.no_server_found), context);\r\n        }\r\n    }\r\n\r\n    public static String getKey(Context context) {\r\n        AppSignatureHashHelper appSignatureHashHelper = new AppSignatureHashHelper(context);\r\n        String key = appSignatureHashHelper.getAppSignatures().get(0);\r\n\r\n        SharedPreferences shared = context.getSharedPreferences(CONSTANTS.PREF_KEY_Splash, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putString(CONSTANTS.PREF_KEY_SplashKey, appSignatureHashHelper.getAppSignatures().get(0));\r\n        editor.commit();\r\n        return key;\r\n    }\r\n\r\n    public static void showToast(String message, Context context) {\r\n        Toast toast = new Toast(context);\r\n        View view = LayoutInflater.from(context).inflate(R.layout.toast_layout, null);\r\n        TextView tvMessage = view.findViewById(R.id.tvMessage);\r\n        tvMessage.setText(message);\r\n        toast.setGravity(Gravity.BOTTOM | Gravity.CENTER, 0, 35);\r\n        toast.setView(view);\r\n        toast.show();\r\n    }\r\n\r\n    public static String getProgressDisplayLine(long currentBytes, long totalBytes) {\r\n        return getBytesToMBString(currentBytes) + \"/\" + getBytesToMBString(totalBytes);\r\n    }\r\n\r\n    private static String getBytesToMBString(long bytes) {\r\n        return String.format(Locale.ENGLISH, \"%.2fMb\", bytes / (1024.00 * 1024.00));\r\n    }\r\n/*    public static List<DownloadAudioDetails> GetAllMedia(Context ctx) {\r\n\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }*/\r\n\r\n    public static synchronized BWSApplication getInstance() {\r\n        return BWSApplication;\r\n    }\r\n\r\n    public static void hideProgressBar(ProgressBar progressBar, FrameLayout progressBarHolder, Activity ctx) {\r\n        try {\r\n            progressBarHolder.setVisibility(View.GONE);\r\n            progressBar.setVisibility(View.GONE);\r\n            ctx.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void showProgressBar(ProgressBar progressBar, FrameLayout progressBarHolder, Activity ctx) {\r\n        try {\r\n            progressBarHolder.setVisibility(View.VISIBLE);\r\n            ctx.getWindow().setFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE, WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);\r\n            progressBar.setVisibility(View.VISIBLE);\r\n            progressBar.invalidate();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static boolean isEmailValid(String email) {\r\n        boolean isValid = false;\r\n        String expression = \"^[\\\\w\\\\.-]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,3}$\";\r\n        CharSequence inputStr = email;\r\n\r\n        Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);\r\n        Matcher matcher = pattern.matcher(inputStr);\r\n        if (matcher.matches()) {\r\n            isValid = true;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        mContext = this;\r\n        BWSApplication = this;\r\n    }\r\n\r\n    public static boolean isNetworkConnected(Context context) {\r\n        try {\r\n            ConnectivityManager mConnectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n            NetworkInfo mNetworkInfo = mConnectivityManager.getActiveNetworkInfo();\r\n            boolean flag = false;\r\n            ConnectivityManager manager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n//For 3G check\r\n            boolean is3g = manager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE)\r\n                    .isConnectedOrConnecting();\r\n//For WiFi Check\r\n            boolean isWifi = manager.getNetworkInfo(ConnectivityManager.TYPE_WIFI)\r\n                    .isConnectedOrConnecting();\r\n\r\n            flag = !(!is3g && !isWifi);\r\n            return flag;\r\n        } catch (NullPointerException e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static String securityKey() {\r\n        String key;\r\n        String DeviceId = Settings.Secure.getString(getContext().getContentResolver(), Settings.Secure.ANDROID_ID);\r\n        String AES = \"OsEUHhecSs4gRGcy2vMQs1s/XajBrLGADR71cKMRNtA=\";\r\n        String RSA = \"KlWxBHfKPGkkeTjkT7IEo32bZW8GlVCPq/nvVFuYfIY=\";\r\n        String TDES = \"1dpra0SZhVPpiUQvikMvkDxEp7qLLJL9pe9G6Apg01g=\";\r\n        String SHA1 = \"Ey8rBCHsqITEbh7KQKRmYObCGBXqFnvtL5GjMFQWHQo=\";\r\n        String MD5 = \"/qc2rO3RB8Z/XA+CmHY0tCaJch9a5BdlQW1xb7db+bg=\";\r\n\r\n        Calendar calendar = Calendar.getInstance();\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n        calendar.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n        calendar.setTime(new Date());\r\n        SimpleDateFormat outputFmt = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n        String dateAsString = outputFmt.format(calendar.getTime());\r\n        //        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n        //2019-11-21 06:45:32\r\n//        String currentDateandTime = sdf.format(new Date());\r\n        String finalKey = \"\";\r\n        HashMap<String, String> hash_map = new HashMap<String, String>();\r\n        hash_map.put(\"AES\", AES);\r\n        hash_map.put(\"RSA\", RSA);\r\n        hash_map.put(\"TDES\", TDES);\r\n        hash_map.put(\"SHA1\", SHA1);\r\n        hash_map.put(\"MD5\", MD5);\r\n\r\n        Random random = new Random();\r\n        List<String> keys = new ArrayList<String>(hash_map.keySet());\r\n        String randomKey = keys.get(random.nextInt(keys.size()));\r\n        String value = hash_map.get(randomKey);\r\n        key = DeviceId + \".\" + dateAsString + \".\" + randomKey + \".\" + value;\r\n\r\n        try {\r\n            finalKey = ProgramForAES(key);\r\n            System.out.println(finalKey);\r\n        } catch (Exception e) {\r\n        }\r\n        return finalKey;\r\n    }\r\n\r\n    public static String ProgramForAES(String baseString) {\r\n        String cipher = \"\";\r\n        try {\r\n            String key = \"5785abf057d4eea9e59151f75a6fadb724768053df2acdfabb68f2b946b972c6\";\r\n            CryptLib cryptLib = new CryptLib();\r\n            cipher = cryptLib.encryptPlainTextWithRandomIV(baseString, key);\r\n            println(\"cipherText\" + cipher);\r\n            String decryptedString = cryptLib.decryptCipherTextWithRandomIV(cipher, key);\r\n            println(\"decryptedString\" + decryptedString);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return cipher;\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/BWSApplication.java	(revision 6ebb54c97ce4988c6ddebbfe04db27dc061f653b)
+++ app/src/main/java/com/brainwellnessspa/BWSApplication.java	(date 1604924567297)
@@ -174,7 +174,7 @@
                     .setSmallIcon(R.drawable.ic_music_note)
                     .setContentTitle(track.getName())
                     .setContentText(track.getAudioDirection())
-                    .setLargeIcon(BitmapFactory.decodeResource(context.getResources(), R.drawable.logo_design))
+                    .setLargeIcon(BitmapFactory.decodeResource(context.getResources(), R.drawable.square_app_icon))
                     .setOnlyAlertOnce(true)//show notification for only first time
                     .setShowWhen(false)
                     .addAction(drw_previous, "Previous", pendingIntentPrevious)
@@ -187,7 +187,6 @@
                     .build();
 
             notificationManagerCompat.notify(1, notification);
-
         }
     }
 
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments;\r\n\r\nimport android.app.Activity;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.media.AudioAttributes;\r\nimport android.media.AudioManager;\r\nimport android.media.MediaPlayer;\r\nimport android.media.RingtoneManager;\r\nimport android.net.Uri;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.support.v4.media.session.MediaControllerCompat;\r\nimport android.support.v4.media.session.MediaSessionCompat;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.media.MediaSessionManager;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Activities.DashboardActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Services.OnClearFromRecentService;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.Utility.Playable;\r\nimport com.brainwellnessspa.Utility.PlaybackStatus;\r\nimport com.brainwellnessspa.Utility.Track;\r\nimport com.brainwellnessspa.databinding.FragmentTransparentPlayerBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPreparing;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isprogressbar;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class TransparentPlayerFragment extends Fragment implements SeekBar.OnSeekBarChangeListener, Playable/*, AudioManager.OnAudioFocusChangeListener*/ {\r\n    public static int isDisclaimer = 0;\r\n    public FragmentTransparentPlayerBinding binding;\r\n    String UserID, AudioFlag, IsRepeat, IsShuffle, audioFile, id, name;\r\n    public static String addToRecentPlayId = \"\";\r\n    int position = 0, startTime, listSize, myCount;\r\n    MainPlayModel mainPlayModel;\r\n    boolean isPlaying = false;\r\n    Boolean queuePlay, audioPlay;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<AddToQueueModel> addToQueueModelList;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    Activity activity;\r\n    Context ctx;\r\n    long myProgress = 0, diff = 0;\r\n    SharedPreferences shared;\r\n    String json;\r\n    Gson gson;\r\n    private long totalDuration, currentDuration = 0;\r\n    private Handler handler12;\r\n    private Runnable UpdateSongTime12 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                startTime = getStartTime();\r\n                binding.simpleSeekbar.setMax(100);\r\n                Time t = Time.valueOf(\"00:00:00\");\r\n                if (queuePlay) {\r\n                    if (listSize != 0) {\r\n                        if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        stopMedia();\r\n                    }\r\n                } else if (audioPlay) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                        }\r\n                    } else {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else\r\n                        totalDuration = t.getTime();\r\n                } else {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else {\r\n                        totalDuration = t.getTime();\r\n                    }\r\n                }\r\n                myProgress = currentDuration;\r\n                currentDuration = getStartTime();\r\n                diff = totalDuration - myProgress;\r\n\r\n//                Log.e(\"myProgress old!!!\",String.valueOf(myProgress));\r\n                if (myProgress == currentDuration && myProgress != 0 && !isPause && audioFile.equalsIgnoreCase(\"\")) {\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                    myCount++;\r\n                    Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                    if (myCount == 5) {\r\n                        Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                        callComplete();\r\n                        Log.e(\"calll complete errr\", \"eee\");\r\n                        myCount = 0;\r\n                    }\r\n                } else if (myProgress == currentDuration && myProgress != 0 && !isPause && diff < 500) {\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                    myCount++;\r\n                    Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                    if (myCount == 20) {\r\n                        Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                        callComplete();\r\n                        Log.e(\"calll complete errr\", \"eee\");\r\n                        myCount = 0;\r\n                    }\r\n                }\r\n                if (currentDuration == totalDuration && currentDuration != 0 && !isStop && !audioFile.equalsIgnoreCase(\"\")) {\r\n                    callComplete();\r\n                    Log.e(\"calll complete trans\", \"trans\");\r\n\r\n                }\r\n                if (currentDuration == totalDuration && currentDuration != 0 && !isStop && audioFile.equalsIgnoreCase(\"\")) {\r\n                    mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                        callComplete();\r\n                    });\r\n                }\r\n                int progress = (int) (getProgressPercentage(currentDuration, totalDuration));\r\n                if (player == 1) {\r\n                    if (currentDuration == 0 && isCompleteStop) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    } else if (currentDuration == 0 && !isPause) {\r\n                        binding.progressBar.setVisibility(View.VISIBLE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.GONE);\r\n                    } else if (currentDuration >= 1 && !isPause) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.VISIBLE);\r\n                        binding.ivPlay.setVisibility(View.GONE);\r\n                    } else if (currentDuration >= 1 && isPause) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    }\r\n                } else {\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.ivPause.setVisibility(View.GONE);\r\n                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n                //Log.d(\"Progress\", \"\"+progress);\r\n                if (isPause) {\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n                } else {\r\n                    binding.simpleSeekbar.setProgress(progress);\r\n                }\r\n                // Running this thread after 100 milliseconds\r\n                handler12.postDelayed(this, 100);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    };\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_transparent_player, container, false);\r\n        View view = binding.getRoot();\r\n        activity = getActivity();\r\n        ctx = getActivity();\r\n        mainPlayModelList = new ArrayList<>();\r\n        addToQueueModelList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        handler12 = new Handler();\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        gson = new Gson();\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n\r\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        params.setMargins(0, 0, 0, 130);\r\n        binding.llLayout.setLayoutParams(params);\r\n\r\n        if (comefromDownload.equalsIgnoreCase(\"1\")) {\r\n            LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            param.setMargins(0, 0, 0, 0);\r\n            binding.llLayout.setLayoutParams(param);\r\n        } else {\r\n            LinearLayout.LayoutParams paramm = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            paramm.setMargins(0, 0, 0, 130);\r\n            binding.llLayout.setLayoutParams(paramm);\r\n\r\n        }\r\n        if (isMediaStart) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete real\", \"real\");\r\n            });\r\n        }\r\n\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        SharedPreferences Status = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n    /*    mAudioManager = (AudioManager) ctx.getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        if (queuePlay) {\r\n            getPrepareShowData();\r\n        } else if (audioPlay) {\r\n            MakeArray();\r\n        }\r\n        if (listSize == 1) {\r\n            IsShuffle = \"\";\r\n        }\r\n\r\n        BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {\r\n            @Override\r\n            public void onReceive(Context context, Intent intent) {\r\n                String action = intent.getExtras().getString(\"actionname\");\r\n                switch (action) {\r\n                    case BWSApplication.ACTION_PREVIUOS:\r\n                        onTrackPrevious();\r\n                        break;\r\n                    case BWSApplication.ACTION_PLAY:\r\n                        if (isPlaying) {\r\n                            onTrackPause();\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                        } else {\r\n                            onTrackPlay();\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                            binding.ivPlay.setVisibility(View.GONE);\r\n                            binding.ivPause.setVisibility(View.VISIBLE);\r\n                        }\r\n                        break;\r\n                    case BWSApplication.ACTION_NEXT:\r\n                        onTrackNext();\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            BWSApplication.createChannel(getActivity());\r\n            getActivity().registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n            getActivity().startService(new Intent(getActivity().getBaseContext(), OnClearFromRecentService.class));\r\n        }else {\r\n            BWSApplication.createChannel(getActivity());\r\n            getActivity().registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n            getActivity().startService(new Intent(getActivity().getBaseContext(), OnClearFromRecentService.class));\r\n        }\r\n\r\n\r\n        binding.ivPause.setOnClickListener(view1 -> {\r\n            handler12.removeCallbacks(UpdateSongTime12);\r\n            binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n            if (isPlaying) {\r\n                onTrackPause();\r\n            } else {\r\n                onTrackPlay();\r\n            }\r\n            if (!isMediaStart) {\r\n//                callAsyncTask();\r\n                callMedia();\r\n            } else {\r\n                pauseMedia();\r\n                binding.ivPause.setVisibility(View.GONE);\r\n                binding.ivPlay.setVisibility(View.VISIBLE);\r\n            }\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        });\r\n\r\n        binding.ivPlay.setOnClickListener(view12 -> {\r\n            if (isPlaying) {\r\n                onTrackPause();\r\n            } else {\r\n                onTrackPlay();\r\n            }\r\n            if (!isMediaStart) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler12.postDelayed(UpdateSongTime12, 500);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                binding.ivPlay.setVisibility(View.GONE);\r\n                binding.ivPause.setVisibility(View.GONE);\r\n                callMedia();\r\n            } else if (isCompleteStop) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler12.postDelayed(UpdateSongTime12, 500);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                binding.ivPlay.setVisibility(View.GONE);\r\n                binding.ivPause.setVisibility(View.GONE);\r\n                callMedia();\r\n            } else {\r\n                resumeMedia();\r\n                binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                binding.ivPlay.setVisibility(View.GONE);\r\n                binding.ivPause.setVisibility(View.VISIBLE);\r\n                isPause = false;\r\n            }\r\n            player = 1;\r\n            handler12.postDelayed(UpdateSongTime12, 100);\r\n        });\r\n\r\n        return view;\r\n    }\r\n\r\n    private void MakeArray() {\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n//            if (isDisclaimer == 0 && disclaimerPlayed == 0) {\r\n//                addDeclaimer();\r\n//            }\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPrevious() {\r\n        position--;\r\n        BWSApplication.createNotification(getActivity(), mainPlayModelList.get(position),\r\n                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n//        title.setText(tracks.get(position).getTitle());\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPlay() {\r\n        BWSApplication.createNotification(getActivity(), mainPlayModelList.get(position),\r\n                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n//        binding.ivPlay.setImageResource(R.drawable.ic_all_pause_icon);\r\n//        binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n        isPlaying = true;\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPause() {\r\n        BWSApplication.createNotification(getActivity(), mainPlayModelList.get(position),\r\n                R.drawable.ic_play_arrow_black_24dp, position, mainPlayModelList.size() - 1);\r\n//        binding.ivPause.setImageResource(R.drawable.ic_play_icon);\r\n//        binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n        isPlaying = false;\r\n    }\r\n\r\n    @Override\r\n    public void onTrackNext() {\r\n//        position++;\r\n        BWSApplication.createNotification(getActivity(), mainPlayModelList.get(position),\r\n                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n//        title.setText(tracks.get(position).getTitle());\r\n\r\n    }\r\n\r\n    private void addToRecentPlay() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n//            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n//                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n//                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public void GetMedia(String url, Context ctx) {\r\n        try {\r\n            downloadAudioDetailsList = new ArrayList<>();\r\n            class GetMedia extends AsyncTask<Void, Void, Void> {\r\n                @Override\r\n                protected Void doInBackground(Void... voids) {\r\n                    downloadAudioDetailsList = DatabaseClient\r\n                            .getInstance(ctx)\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .getLastIdByuId(url);\r\n                    return null;\r\n                }\r\n\r\n                @Override\r\n                protected void onPostExecute(Void aVoid) {\r\n                    try {\r\n                        if (audioPlay) {\r\n                            if (listSize != 0) {\r\n                                binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                                binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                                try {\r\n                                    if (audioFile.equalsIgnoreCase(\"\")) {\r\n                                        Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                                    } else {\r\n                                        Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                                    }\r\n                                } catch (Exception e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (player == 1) {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n//                    binding.llProgress.setVisibility(View.GONE);\r\n                            if (isPause) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.VISIBLE);\r\n                                binding.simpleSeekbar.setProgress(oTime);\r\n                            } else if (isCompleteStop) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.VISIBLE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                            } else if (isMediaStart && !isPause) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                                binding.ivPause.setVisibility(View.VISIBLE);\r\n                                binding.ivPlay.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.progressBar.setVisibility(View.VISIBLE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.GONE);\r\n                                callMedia();\r\n                            }\r\n                        } else {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n\r\n//                    binding.llProgress.setVisibility(View.GONE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    super.onPostExecute(aVoid);\r\n\r\n                }\r\n            }\r\n\r\n            GetMedia st = new GetMedia();\r\n            st.execute();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void getPrepareShowData() {\r\n        handler12.postDelayed(UpdateSongTime12, 100);\r\n        try {\r\n            if (queuePlay) {\r\n                listSize = addToQueueModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (position == listSize) {\r\n                    position = position - 1;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = addToQueueModelList.get(position).getID();\r\n                    name = addToQueueModelList.get(position).getName();\r\n                    audioFile = addToQueueModelList.get(position).getAudioFile();\r\n                    GetMedia(audioFile, ctx);\r\n                    Glide.with(ctx).load(addToQueueModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    binding.tvTitle.setText(addToQueueModelList.get(position).getName());\r\n                    binding.tvSubTitle.setText(addToQueueModelList.get(position).getAudioDirection());\r\n                    handler12.postDelayed(UpdateSongTime12, 100);\r\n                }\r\n            } else if (audioPlay) {\r\n                listSize = mainPlayModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = mainPlayModelList.get(position).getID();\r\n                    name = mainPlayModelList.get(position).getName();\r\n                    audioFile = mainPlayModelList.get(position).getAudioFile();\r\n                    binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                    binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                    if (audioFile.equalsIgnoreCase(\"\")) {\r\n                        Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    } else {\r\n                        Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    }\r\n                    GetMedia(audioFile, ctx);\r\n                    handler12.postDelayed(UpdateSongTime12, 100);\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        isDisclaimer = 1;\r\n                        binding.simpleSeekbar.setClickable(false);\r\n                        binding.simpleSeekbar.setEnabled(false);\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        binding.simpleSeekbar.setClickable(true);\r\n                        binding.simpleSeekbar.setEnabled(true);\r\n                    }\r\n                }\r\n            }\r\n            startTime = getStartTime();\r\n\r\n            if (!audioFile.equalsIgnoreCase(\"\")) {\r\n                if (!id.equalsIgnoreCase(addToRecentPlayId)) {\r\n                    addToRecentPlay();\r\n                    Log.e(\"Api call recent\", id);\r\n                }\r\n            }\r\n            addToRecentPlayId = id;\r\n            Log.e(\"addToRecentPlayID\", addToRecentPlayId);\r\n            Log.e(\"new addToRecentPlayID\", id);\r\n            binding.llPlayearMain.setOnClickListener(view -> {\r\n                handler12.removeCallbacks(UpdateSongTime12);\r\n                if (player == 0) {\r\n                    player = 1;\r\n                }\r\n                if (!isPause && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isPause = false;\r\n                    isprogressbar = false;\r\n                } else if (isPause && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isPause = true;\r\n                    isprogressbar = false;\r\n                } else if (isCompleteStop && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isprogressbar = false;\r\n                } else if (binding.progressBar.getVisibility() == View.VISIBLE && (binding.ivPause.getVisibility() == View.GONE && binding.ivPlay.getVisibility() == View.GONE)) {\r\n                    isprogressbar = true;\r\n                }\r\n                SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(mainPlayModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                String json1 = gson.toJson(addToQueueModelList);\r\n                if (queuePlay) {\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n                }\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                editor.commit();\r\n                handler12.removeCallbacks(UpdateSongTime12);\r\n                Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                ctx.startActivity(i);\r\n            });\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if (download.equalsIgnoreCase(\"2\")) {\r\n            mediaPlayer = MediaPlayer.create(getActivity(), R.raw.brain_wellness_spa_declaimer);\r\n            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\r\n//            Uri uri = Uri.parse(\"android.resource://com.brainwellnessspa/\" + R.raw.brain_wellness_spa_declaimer);\r\n//            mediaPlayer.setDataSource(String.valueOf(uri));\r\n            mediaPlayer.start();\r\n            isPrepare = true;\r\n            isMediaStart = true;\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n        } else {\r\n            if (null == mediaPlayer) {\r\n                mediaPlayer = new MediaPlayer();\r\n                Log.e(\"Playinggggg\", \"Playinggggg\");\r\n            }\r\n            try {\r\n                if (mediaPlayer == null)\r\n                    mediaPlayer = new MediaPlayer();\r\n                if (mediaPlayer.isPlaying()) {\r\n                    Log.e(\"Playinggggg\", \"stoppppp\");\r\n                    mediaPlayer.stop();\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                }\r\n                isPreparing = true;\r\n                mediaPlayer = new MediaPlayer();\r\n                if (download.equalsIgnoreCase(\"1\")) {\r\n                    mediaPlayer.setDataSource(fileDescriptor);\r\n                } else {\r\n                    mediaPlayer.setDataSource(audioFile);\r\n                    Log.e(\"Playinggggxxxxx\", \"Startinggg1xxxxx\");\r\n                }\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                    mediaPlayer.setAudioAttributes(\r\n                            new AudioAttributes\r\n                                    .Builder()\r\n                                    .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                    .build());\r\n                    Log.e(\"Playinggggg11111111\", \"Startinggg111111111\");\r\n                }\r\n                mediaPlayer.prepareAsync();\r\n                isPrepare = true;\r\n            } catch (IllegalStateException | IOException e) {\r\n                FileDescriptor fileDescriptor1 = null;\r\n                setMediaPlayer(\"0\", fileDescriptor1);\r\n                e.printStackTrace();\r\n            }\r\n            if (!mediaPlayer.isPlaying()) {\r\n                mediaPlayer.setOnPreparedListener(mp -> {\r\n                    Log.e(\"Playinggggg\", \"Startinggg\");\r\n                    mediaPlayer.start();\r\n                    isMediaStart = true;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callMedia() {\r\n        binding.progressBar.setVisibility(View.VISIBLE);\r\n//        binding.llProgress.setVisibility(View.VISIBLE);\r\n        binding.ivPlay.setVisibility(View.GONE);\r\n        binding.ivPause.setVisibility(View.GONE);\r\n        FileDescriptor fileDescriptor = null;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n//        binding.llProgress.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            DownloadMedia downloadMedia = new DownloadMedia(ctx.getApplicationContext());\r\n            try {\r\n                byte[] decrypt = null;\r\n                decrypt = downloadMedia.decrypt(name);\r\n                if (decrypt != null) {\r\n                    fileDescriptor = FileUtils.getTempFileDescriptor(ctx.getApplicationContext(), decrypt);\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        setMediaPlayer(\"2\", fileDescriptor);\r\n                    } else {\r\n                        setMediaPlayer(\"1\", fileDescriptor);\r\n                    }\r\n                } else {\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        setMediaPlayer(\"2\", fileDescriptor);\r\n                    } else {\r\n                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                            setMediaPlayer(\"0\", fileDescriptor);\r\n//                mediaPlayer.setDataSource(audioFile);\r\n                        } else {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                        }\r\n                    }\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                setMediaPlayer(\"2\", fileDescriptor);\r\n            } else {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    setMediaPlayer(\"0\", fileDescriptor);\r\n//                mediaPlayer.setDataSource(audioFile);\r\n                } else {\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    binding.ivPause.setVisibility(View.GONE);\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getDownloadMedia(DownloadMedia downloadMedia) {\r\n        class getDownloadMedia extends AsyncTask<Void, Void, Void> {\r\n            FileDescriptor fileDescriptor = null;\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                try {\r\n                    byte[] decrypt = null;\r\n                    decrypt = downloadMedia.decrypt(name);\r\n                    if (decrypt != null) {\r\n                        fileDescriptor = FileUtils.getTempFileDescriptor(getActivity(), decrypt);\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (fileDescriptor != null) {\r\n                    setMediaPlayer(\"1\", fileDescriptor);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        setMediaPlayer(\"0\", fileDescriptor);\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getDownloadMedia st = new getDownloadMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callComplete() {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        if (audioPlay && (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty())) {\r\n            isDisclaimer = 0;\r\n            removeArray();\r\n        } else {\r\n            if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                if (position < (listSize - 1)) {\r\n                    position = position + 1;\r\n                } else {\r\n                    position = 0;\r\n                }\r\n                getPrepareShowData();\r\n            } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData();\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    } catch (Exception e) {\r\n                    }\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        position = 0;\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData();\r\n                    }\r\n                } else {\r\n                    if (listSize == 1) {\r\n\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData();\r\n                    }\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    } catch (Exception e) {\r\n                    }\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position < listSize - 1) {\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData();\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (position < (listSize - 1)) {\r\n                        int oldPosition = position;\r\n                        position = position + 1;\r\n                        if (oldPosition == position) {\r\n                            position++;\r\n                        }\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        if (listSize == 1) {\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n    }\r\n\r\n    private void removeArray() {\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        gson = new Gson();\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }\r\n        MakeArray();\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n    /*    handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler12.postDelayed(UpdateSongTime12, 100);\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n\r\n        int totalDuration = getEndTime();\r\n        int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n        // forward or backward to certain seconds\r\n        SeekTo(currentPosition);\r\n\r\n        oTime = binding.simpleSeekbar.getProgress();\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n\r\n        if (ComeScreenAccount == 1) {\r\n            binding.llLayout.setVisibility(View.GONE);\r\n        } else if (ComeScreenAccount == 0) {\r\n            binding.llLayout.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        handler12.postDelayed(UpdateSongTime12, 500);\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            mainPlayModelList = gson.fromJson(json, type);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        try {\r\n            if (queuePlay) {\r\n                position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                listSize = addToQueueModelList.size();\r\n                id = addToQueueModelList.get(position).getID();\r\n                name = addToQueueModelList.get(position).getName();\r\n                audioFile = addToQueueModelList.get(position).getAudioFile();\r\n            } else if (audioPlay) {\r\n                position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                listSize = mainPlayModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = mainPlayModelList.get(position).getID();\r\n                    name = mainPlayModelList.get(position).getName();\r\n                    audioFile = mainPlayModelList.get(position).getAudioFile();\r\n       /*         if (audioFile.equalsIgnoreCase(\"\")) {\r\n                    Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                } else {\r\n                    Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                }\r\n                binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                    isDisclaimer = 1;\r\n                    binding.simpleSeekbar.setClickable(false);\r\n                    binding.flProgress.setClickable(false);\r\n                    binding.flProgress.setEnabled(false);\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    binding.simpleSeekbar.setClickable(true);\r\n                    binding.flProgress.setClickable(true);\r\n                    binding.flProgress.setEnabled(true);\r\n                }*/\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (listSize == 1) {\r\n            position = 0;\r\n        }\r\n        SharedPreferences Status = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n      /*  if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if (isMediaStart && !isPause) {\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n        } else {\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n        }*/\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n        Log.e(\"Stop runnble\", \"stop\");\r\n        super.onPause();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java	(revision 6ebb54c97ce4988c6ddebbfe04db27dc061f653b)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java	(date 1604924692516)
@@ -331,16 +331,8 @@
                     case BWSApplication.ACTION_PLAY:
                         if (isPlaying) {
                             onTrackPause();
-                            binding.progressBar.setVisibility(View.GONE);
-//                binding.llProgress.setVisibility(View.GONE);
-                            binding.ivPlay.setVisibility(View.VISIBLE);
-                            binding.ivPause.setVisibility(View.GONE);
                         } else {
                             onTrackPlay();
-                            binding.progressBar.setVisibility(View.GONE);
-//                binding.llProgress.setVisibility(View.GONE);
-                            binding.ivPlay.setVisibility(View.GONE);
-                            binding.ivPause.setVisibility(View.VISIBLE);
                         }
                         break;
                     case BWSApplication.ACTION_NEXT:
@@ -722,8 +714,8 @@
     public void onTrackPlay() {
         BWSApplication.createNotification(getActivity(), mainPlayModelList.get(position),
                 R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);
-//        binding.ivPlay.setImageResource(R.drawable.ic_all_pause_icon);
-//        binding.tvTitle.setText(mainPlayModelList.get(position).getName());
+        binding.ivPlay.setImageResource(R.drawable.ic_all_pause_icon);
+        binding.tvTitle.setText(mainPlayModelList.get(position).getName());
         isPlaying = true;
     }
 
@@ -731,8 +723,8 @@
     public void onTrackPause() {
         BWSApplication.createNotification(getActivity(), mainPlayModelList.get(position),
                 R.drawable.ic_play_arrow_black_24dp, position, mainPlayModelList.size() - 1);
-//        binding.ivPause.setImageResource(R.drawable.ic_play_icon);
-//        binding.tvTitle.setText(mainPlayModelList.get(position).getName());
+        binding.ivPause.setImageResource(R.drawable.ic_play_icon);
+        binding.tvTitle.setText(mainPlayModelList.get(position).getName());
         isPlaying = false;
     }
 
