Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToPlaylist;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityAddAudioBinding;\r\nimport com.brainwellnessspa.databinding.DownloadsLayoutBinding;\r\nimport com.brainwellnessspa.databinding.GlobalSearchLayoutBinding;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\n\r\npublic class AddAudioActivity extends AppCompatActivity {\r\n    ActivityAddAudioBinding binding;\r\n    Context ctx;\r\n    String UserID, PlaylistID;\r\n    SerachListAdpater adpater;\r\n    EditText searchEditText;\r\n    Activity activity;\r\n    public static boolean addToSearch = false;\r\n    public static String MyPlaylistIds = \"\";\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_add_audio);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_add_audio);\r\n        ctx = AddAudioActivity.this;\r\n        activity = AddAudioActivity.this;\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            PlaylistID = getIntent().getStringExtra(CONSTANTS.PlaylistID);\r\n        }\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        closeButton.setOnClickListener(view -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.rvSerachList.setAdapter(null);\r\n            binding.rvSerachList.setVisibility(View.GONE);\r\n            binding.llError.setVisibility(View.GONE);\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                binding.searchView.clearFocus();\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n\r\n                } else {\r\n                    prepareSearchData(search, searchEditText);\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            callback();\r\n        });\r\n\r\n        RecyclerView.LayoutManager suggested = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvSuggestedList.setLayoutManager(suggested);\r\n        binding.rvSuggestedList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager serachList = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvSerachList.setLayoutManager(serachList);\r\n        binding.rvSerachList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        RecyclerView.LayoutManager manager = new LinearLayoutManager(ctx, LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayList.setItemAnimator(new DefaultItemAnimator());\r\n        binding.rvPlayList.setLayoutManager(manager);\r\n        prepareSuggestedData();\r\n    }\r\n\r\n    private void callback() {\r\n        finish();\r\n    }\r\n\r\n    private void prepareSearchData(String search, EditText searchEditText) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SearchBothModel> listCall = APIClient.getClient().getSearchBoth(UserID, search);\r\n            listCall.enqueue(new Callback<SearchBothModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchBothModel> call, Response<SearchBothModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SearchBothModel listModel = response.body();\r\n                        if (!searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            if (listModel.getResponseData().size() == 0) {\r\n                                binding.rvSerachList.setVisibility(View.GONE);\r\n                                binding.llError.setVisibility(View.VISIBLE);\r\n                                binding.tvFound.setText(\"Couldn't find '\" + search + \"'. Try searching again\");\r\n                            } else {\r\n                                binding.llError.setVisibility(View.GONE);\r\n                                binding.rvSerachList.setVisibility(View.VISIBLE);\r\n                                adpater = new SerachListAdpater(listModel.getResponseData(), activity, binding.rvSerachList, UserID);\r\n                                binding.rvSerachList.setAdapter(adpater);\r\n                            }\r\n                        } else if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n                            binding.rvSerachList.setAdapter(null);\r\n                            binding.rvSerachList.setVisibility(View.GONE);\r\n                            binding.llError.setVisibility(View.GONE);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchBothModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void prepareSuggestedData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SuggestedModel> listCall = APIClient.getClient().getSuggestedLists(UserID);\r\n            listCall.enqueue(new Callback<SuggestedModel>() {\r\n                @Override\r\n                public void onResponse(Call<SuggestedModel> call, Response<SuggestedModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SuggestedModel listModel = response.body();\r\n                        binding.tvSuggestedAudios.setText(R.string.Recommended_Audios);\r\n                        binding.tvSAViewAll.setVisibility(View.VISIBLE);\r\n                        SuggestedAdpater suggestedAdpater = new SuggestedAdpater(listModel.getResponseData(), ctx);\r\n                        binding.rvSuggestedList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSAViewAll.setOnClickListener(view -> {\r\n                            Intent i = new Intent(ctx, ViewSuggestedActivity.class);\r\n                            i.putExtra(\"Name\", \"Recommended  Audios\");\r\n                            i.putExtra(\"PlaylistID\", PlaylistID);\r\n                            i.putParcelableArrayListExtra(\"AudiolistModel\", listModel.getResponseData());\r\n                            startActivity(i);\r\n                            finish();\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SuggestedModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SearchPlaylistModel> listCall = APIClient.getClient().getSuggestedPlayLists(UserID);\r\n            listCall.enqueue(new Callback<SearchPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<SearchPlaylistModel> call, Response<SearchPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SearchPlaylistModel listModel = response.body();\r\n                        binding.tvSuggestedPlaylist.setText(R.string.Recommendeds_Playlist);\r\n                        binding.tvSPViewAll.setVisibility(View.VISIBLE);\r\n\r\n                        SuggestedPlayListsAdpater suggestedAdpater = new SuggestedPlayListsAdpater(listModel.getResponseData());\r\n                        binding.rvPlayList.setAdapter(suggestedAdpater);\r\n\r\n                        binding.tvSPViewAll.setOnClickListener(view -> {\r\n                            Intent i = new Intent(ctx, ViewSuggestedActivity.class);\r\n                            i.putExtra(\"Name\", \"Recommended Playlist\");\r\n                            i.putExtra(\"PlaylistID\", PlaylistID);\r\n                            i.putParcelableArrayListExtra(\"PlaylistModel\", listModel.getResponseData());\r\n                            startActivity(i);\r\n                            finish();\r\n                        });\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SearchPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callback();\r\n    }\r\n\r\n\r\n    public class SerachListAdpater extends RecyclerView.Adapter<SerachListAdpater.MyViewHolder> {\r\n        Context ctx;\r\n        String UserID;\r\n        RecyclerView rvSerachList;\r\n        private List<SearchBothModel.ResponseData> modelList;\r\n\r\n        public SerachListAdpater(List<SearchBothModel.ResponseData> modelList, Context ctx,\r\n                                 RecyclerView rvSerachList, String UserID) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n            this.rvSerachList = rvSerachList;\r\n            this.UserID = UserID;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            GlobalSearchLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.global_search_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(modelList.get(position).getName());\r\n\r\n            if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            if (modelList.get(position).getIscategory().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.tvPart.setText(R.string.Audio);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                            holder.binding.ivLock.setVisibility(View.GONE);\r\n                            String AudioID = modelList.get(position).getID();\r\n                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                                }else{\r\n                                    callAddSearchAudio(AudioID, \"0\", \"\");\r\n                                }\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                                || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                            Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                            i.putExtra(\"ComeFrom\", \"Plan\");\r\n                            startActivity(i);\r\n                        }\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                            holder.binding.ivLock.setVisibility(View.GONE);\r\n                            String AudioID = modelList.get(position).getID();\r\n                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                                }else{\r\n                                    callAddSearchAudio(AudioID, \"0\", \"\");\r\n                                }\r\n                            } else {\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else if (modelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                                || modelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                            holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                            BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                        }\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = modelList.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            }else{\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    }\r\n                });\r\n            } else if (modelList.get(position).getIscategory().equalsIgnoreCase(\"0\")) {\r\n                holder.binding.tvPart.setText(R.string.Playlist);\r\n                holder.binding.llRemoveAudio.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            }else{\r\n                                callAddSearchAudio(\"\", \"1\", modelList.get(position).getID());\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(\"\", \"1\", modelList.get(position).getID());\r\n                        }\r\n                    }\r\n                });\r\n\r\n               /* holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                    if (modelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    } else if (modelList.get(position).getIsLock().equalsIgnoreCase(\"0\") || modelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                        comefrom_search = 1;\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                        Bundle bundle = new Bundle();\r\n                        bundle.putString(\"New\", \"0\");\r\n                        bundle.putString(\"PlaylistID\", modelList.get(position).getID());\r\n                        bundle.putString(\"PlaylistName\", modelList.get(position).getName());\r\n                        bundle.putString(\"MyDownloads\", \"0\");\r\n                        myPlaylistsFragment.setArguments(bundle);\r\n                        FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                        fragmentManager1.beginTransaction()\r\n                                .replace(R.id.flContainer, myPlaylistsFragment)\r\n                                .commit();\r\n                    }\r\n                });*/\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(modelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return modelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            GlobalSearchLayoutBinding binding;\r\n\r\n            public MyViewHolder(GlobalSearchLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callAddSearchAudio(String AudioID, String s, String FromPlaylistId) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<AddToPlaylist> listCall = APIClient.getClient().getAddSearchAudioFromPlaylist(UserID, AudioID, PlaylistID, FromPlaylistId);\r\n            listCall.enqueue(new Callback<AddToPlaylist>() {\r\n                @Override\r\n                public void onResponse(Call<AddToPlaylist> call, Response<AddToPlaylist> response) {\r\n                    try {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            AddToPlaylist listModels = response.body();\r\n                            if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                                Gson gsonx = new Gson();\r\n                                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                                }.getType();\r\n                                ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();\r\n                                mainPlayModelListold = gsonx.fromJson(json, type);\r\n                                String id = mainPlayModelListold.get(pos).getID();\r\n                                ArrayList<MainPlayModel> mainPlayModelList = new ArrayList<>();\r\n                                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs = new ArrayList<>();\r\n                                if (audioPlay) {\r\n                                    if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                            MainPlayModel mainPlayModel = new MainPlayModel();\r\n                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                            mainPlayModelList.add(mainPlayModel);\r\n                                        }\r\n                                        for (int i = 0; i < listModels.getResponseData().size(); i++) {\r\n                                            SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                            mainPlayModel.setID(listModels.getResponseData().get(i).getID());\r\n                                            mainPlayModel.setName(listModels.getResponseData().get(i).getName());\r\n                                            mainPlayModel.setAudioFile(listModels.getResponseData().get(i).getAudioFile());\r\n                                            mainPlayModel.setPlaylistID(listModels.getResponseData().get(i).getPlaylistID());\r\n                                            mainPlayModel.setAudioDirection(listModels.getResponseData().get(i).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(listModels.getResponseData().get(i).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(listModels.getResponseData().get(i).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(listModels.getResponseData().get(i).getImageFile());\r\n                                            mainPlayModel.setLike(listModels.getResponseData().get(i).getLike());\r\n                                            mainPlayModel.setDownload(listModels.getResponseData().get(i).getDownload());\r\n                                            mainPlayModel.setAudioDuration(listModels.getResponseData().get(i).getAudioDuration());\r\n                                            playlistSongs.add(mainPlayModel);\r\n                                        }\r\n\r\n                                        for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                            if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {\r\n                                                pos = i;\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                        SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                        SharedPreferences.Editor editor = sharedd.edit();\r\n                                        Gson gson = new Gson();\r\n                                        String jsonx = gson.toJson(mainPlayModelList);\r\n                                        String json1 = gson.toJson(playlistSongs);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                        editor.commit();\r\n                                    }\r\n                                }\r\n                                if (s.equalsIgnoreCase(\"1\")) {\r\n                                    finish();\r\n                                }\r\n                            }else if (listModels.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                BWSApplication.showToast(listModels.getResponseMessage(), ctx);\r\n                            }\r\n\r\n                        }\r\n                    }catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AddToPlaylist> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(ctx.getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public class SuggestedAdpater extends RecyclerView.Adapter<SuggestedAdpater.MyViewHolder> {\r\n        private List<SuggestedModel.ResponseData> listModel;\r\n        Context ctx;\r\n\r\n        public SuggestedAdpater(List<SuggestedModel.ResponseData> listModel, Context ctx) {\r\n            this.listModel = listModel;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(listModel.get(position).getName());\r\n            holder.binding.tvTime.setText(listModel.get(position).getAudioDuration());\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(listModel.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n\r\n            if (listModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                    || listModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (listModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = listModel.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            }else{\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    }\r\n                } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        String AudioID = listModel.get(position).getID();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                            }else{\r\n                                callAddSearchAudio(AudioID, \"0\", \"\");\r\n                            }\r\n                        } else {\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else if (listModel.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || listModel.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                    }\r\n                } else if (listModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || listModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    String AudioID = listModel.get(position).getID();\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        }else{\r\n                            callAddSearchAudio(AudioID, \"0\", \"\");\r\n                        }\r\n                    } else {\r\n                        callAddSearchAudio(AudioID, \"0\", \"\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (10 > listModel.size()) {\r\n                return listModel.size();\r\n            } else {\r\n                return 10;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class SuggestedPlayListsAdpater extends RecyclerView.Adapter<SuggestedPlayListsAdpater.MyViewHolder> {\r\n        private List<SearchPlaylistModel.ResponseData> PlaylistModel;\r\n\r\n        public SuggestedPlayListsAdpater(List<SearchPlaylistModel.ResponseData> PlaylistModel) {\r\n            this.PlaylistModel = PlaylistModel;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            DownloadsLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.downloads_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(PlaylistModel.get(position).getName());\r\n            holder.binding.pbProgress.setVisibility(View.GONE);\r\n\r\n            if (PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                    PlaylistModel.get(position).getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                            PlaylistModel.get(position).getTotalhour().equalsIgnoreCase(\"\")\r\n                            && PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                holder.binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n            } else {\r\n                if (PlaylistModel.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() + \" Audio | \"\r\n                            + PlaylistModel.get(position).getTotalhour() + \"h 0m\");\r\n                } else {\r\n                    holder.binding.tvTime.setText(PlaylistModel.get(position).getTotalAudio() +\r\n                            \" Audios | \" + PlaylistModel.get(position).getTotalhour() + \"h \" + PlaylistModel.get(position).getTotalminute() + \"m\");\r\n                }\r\n            }\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(PlaylistModel.get(position).getImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            holder.binding.ivIcon.setImageResource(R.drawable.add_icon);\r\n            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n            if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n           /* holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\",\"Plan\");\r\n                        startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                   BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    addToSearch = true;\r\n                    MyPlaylistIds = PlaylistModel.get(position).getID();\r\n                    finish();\r\n                    *//*Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    Bundle bundle = new Bundle();\r\n                    bundle.putString(\"New\", \"0\");\r\n                    bundle.putString(\"PlaylistID\", PlaylistModel.get(position).getID());\r\n                    bundle.putString(\"PlaylistName\", PlaylistModel.get(position).getName());\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();*//*\r\n                }\r\n            });*/\r\n\r\n            holder.binding.llRemoveAudio.setOnClickListener(view -> {\r\n                if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"0\") || PlaylistModel.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall add after playing the disclaimer\", ctx);\r\n                        }else{\r\n                            callAddSearchAudio(\"\", \"1\", PlaylistModel.get(position).getID());\r\n                        }\r\n                    } else {\r\n                        callAddSearchAudio(\"\", \"1\", PlaylistModel.get(position).getID());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (10 > PlaylistModel.size()) {\r\n                return PlaylistModel.size();\r\n            } else {\r\n                return 10;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            DownloadsLayoutBinding binding;\r\n\r\n            public MyViewHolder(DownloadsLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java	(revision 40b3d5a2ab8a7bbee0d7f7a59b1fae5aa1c1fff2)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddAudioActivity.java	(date 1602849416570)
@@ -126,6 +126,7 @@
     }
 
     private void callback() {
+//        if (binding.searchView )
         finish();
     }
 
Index: app/src/main/java/com/brainwellnessspa/LoginModule/Activities/OtpActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.LoginModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.SystemClock;\r\nimport android.provider.Settings;\r\nimport android.text.Editable;\r\nimport android.text.Html;\r\nimport android.text.TextUtils;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.EditText;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.brainwellnessspa.Utility.SmsReceiver;\r\nimport com.facebook.appevents.AppEventsLogger;\r\nimport com.google.android.gms.auth.api.phone.SmsRetriever;\r\nimport com.google.android.gms.auth.api.phone.SmsRetrieverClient;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.iid.FirebaseInstanceId;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Activities.DashboardActivity;\r\nimport com.brainwellnessspa.LoginModule.Models.LoginModel;\r\nimport com.brainwellnessspa.LoginModule.Models.OtpModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.SplashModule.SplashScreenActivity;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityOtpBinding;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class OtpActivity extends AppCompatActivity implements\r\n        SmsReceiver.OTPReceiveListener {\r\n    ActivityOtpBinding binding;\r\n    private SmsReceiver smsReceiver;\r\n    String Name, Code, MobileNo;\r\n    private EditText[] editTexts;\r\n    boolean tvSendOTPbool = true;\r\n    Activity activity;\r\n    CountDownTimer countDownTimer;\r\n    private long mLastClickTime = 0;\r\n    public static int comeLogin = 0;\r\n    private BroadcastReceiver receiver;\r\n//    AppEventsLogger logger;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_otp);\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            MobileNo = getIntent().getStringExtra(CONSTANTS.MobileNo);\r\n            Name = getIntent().getStringExtra(CONSTANTS.Name);\r\n            Code = getIntent().getStringExtra(CONSTANTS.Code);\r\n        }\r\n\r\n        activity = OtpActivity.this;\r\n//        logger = AppEventsLogger.newLogger(this);\r\n        binding.tvSendCodeText.setText(\"We sent an SMS with a 4-digit code to \" + Code + MobileNo);\r\n\r\n        binding.llEditNumber.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            comeLogin = 1;\r\n            Intent i = new Intent(OtpActivity.this, LoginActivity.class);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            i.putExtra(CONSTANTS.MobileNo, MobileNo);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        editTexts = new EditText[]{binding.edtOTP1, binding.edtOTP2, binding.edtOTP3, binding.edtOTP4};\r\n        binding.edtOTP1.addTextChangedListener(new PinTextWatcher(0));\r\n        binding.edtOTP2.addTextChangedListener(new PinTextWatcher(1));\r\n        binding.edtOTP3.addTextChangedListener(new PinTextWatcher(2));\r\n        binding.edtOTP4.addTextChangedListener(new PinTextWatcher(3));\r\n        binding.edtOTP1.setOnKeyListener(new PinOnKeyListener(0));\r\n        binding.edtOTP2.setOnKeyListener(new PinOnKeyListener(1));\r\n        binding.edtOTP3.setOnKeyListener(new PinOnKeyListener(2));\r\n        binding.edtOTP4.setOnKeyListener(new PinOnKeyListener(3));\r\n        startSMSListener();\r\n        binding.txtError.setText(\"\");\r\n        binding.txtError.setVisibility(View.GONE);\r\n\r\n        binding.btnSendCode.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                SharedPreferences sharedPreferences2 = getSharedPreferences(CONSTANTS.Token, Context.MODE_PRIVATE);\r\n                String fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n                if (TextUtils.isEmpty(fcm_id)) {\r\n                    FirebaseInstanceId.getInstance().getInstanceId().addOnSuccessListener(activity, instanceIdResult -> {\r\n                        String newToken = instanceIdResult.getToken();\r\n                        Log.e(\"newToken\", newToken);\r\n                        SharedPreferences.Editor editor = getSharedPreferences(CONSTANTS.Token, Context.MODE_PRIVATE).edit();\r\n                        editor.putString(CONSTANTS.Token, newToken); //Friend\r\n                        editor.apply();\r\n                        editor.commit();\r\n                    });\r\n                    fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n                }\r\n                if (BWSApplication.isNetworkConnected(OtpActivity.this)) {\r\n                    BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    Call<OtpModel> listCall = APIClient.getClient().getAuthOtps(\r\n                            binding.edtOTP1.getText().toString() + \"\" +\r\n                                    binding.edtOTP2.getText().toString() + \"\" +\r\n                                    binding.edtOTP3.getText().toString() + \"\" +\r\n                                    binding.edtOTP4.getText().toString(), fcm_id, CONSTANTS.FLAG_ONE,\r\n                            Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID), MobileNo, CONSTANTS.FLAG_ZERO);\r\n                    listCall.enqueue(new Callback<OtpModel>() {\r\n                        @Override\r\n                        public void onResponse(Call<OtpModel> call, Response<OtpModel> response) {\r\n                            if (response.isSuccessful()) {\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                OtpModel otpModel = response.body();\r\n                                if (otpModel.getResponseData().getError().equalsIgnoreCase(\"0\") ||\r\n                                        otpModel.getResponseData().getError().equalsIgnoreCase(\"\")) {\r\n                                    SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n                                    SharedPreferences.Editor editor = shared.edit();\r\n                                    editor.putString(CONSTANTS.PREF_KEY_UserID, otpModel.getResponseData().getUserID());\r\n                                    editor.putString(CONSTANTS.PREF_KEY_MobileNo, otpModel.getResponseData().getPhoneNumber());\r\n                                    editor.commit();\r\n                                    BWSApplication.showToast(otpModel.getResponseMessage(), OtpActivity.this);\r\n                                    Intent i = new Intent(OtpActivity.this, DashboardActivity.class);\r\n                                    startActivity(i);\r\n                                    finish();\r\n                                } else if (otpModel.getResponseData().getError().equalsIgnoreCase(\"1\")) {\r\n                                    binding.txtError.setText(otpModel.getResponseMessage());\r\n                                    binding.txtError.setVisibility(View.VISIBLE);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onFailure(Call<OtpModel> call, Throwable t) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        }\r\n                    });\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), OtpActivity.this);\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n        binding.llResendSms.setOnClickListener(view -> prepareData());\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        comeLogin = 0;\r\n        Intent i = new Intent(OtpActivity.this, LoginActivity.class);\r\n        i.putExtra(\"Name\", Name);\r\n        i.putExtra(\"Code\", Code);\r\n        i.putExtra(CONSTANTS.MobileNo, MobileNo);\r\n        startActivity(i);\r\n        finish();\r\n    }\r\n\r\n    private void startSMSListener() {\r\n        try {\r\n            smsReceiver = new SmsReceiver();\r\n            smsReceiver.setOTPListener(this);\r\n\r\n            IntentFilter intentFilter = new IntentFilter();\r\n            intentFilter.addAction(SmsRetriever.SMS_RETRIEVED_ACTION);\r\n            this.registerReceiver(smsReceiver, intentFilter);\r\n\r\n            SmsRetrieverClient client = SmsRetriever.getClient(this);\r\n\r\n            Task<Void> task = client.startSmsRetriever();\r\n            task.addOnSuccessListener(aVoid -> {\r\n                // API successfully started\r\n            });\r\n\r\n            task.addOnFailureListener(e -> {\r\n                /* Fail to start API */\r\n            });\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onOTPReceived(String otp) {\r\n        String[] splited = new String[0];\r\n        if (otp.startsWith(\"[#] Your OTP is\")) {\r\n            splited = otp.split(\" \");\r\n        } else if (otp.startsWith(\"(#) Your OTP is\")) {\r\n            splited = otp.split(\" \");\r\n        } else if (otp.startsWith(\"<#> Your OTP is\")) {\r\n            splited = otp.split(\" \");\r\n        } else if (otp.startsWith(\"?<#?> Your OTP is\")) {\r\n            splited = otp.split(\" \");\r\n        } else {\r\n            splited = otp.split(\"is \");\r\n        }\r\n        String message = splited[7];\r\n        binding.edtOTP1.setText(String.valueOf(message.charAt(0)));\r\n        binding.edtOTP2.setText(String.valueOf(message.charAt(1)));\r\n        binding.edtOTP3.setText(String.valueOf(message.charAt(2)));\r\n        binding.edtOTP4.setText(String.valueOf(message.charAt(3)));\r\n\r\n        if (smsReceiver != null) {\r\n            unregisterReceiver(smsReceiver);\r\n            smsReceiver = null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onOTPTimeOut() {\r\n//        showToast(\"OTP Time out\");\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onOTPReceivedError(String error) {\r\n//        showToast(error);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        if (smsReceiver != null) {\r\n            unregisterReceiver(smsReceiver);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onResume() {\r\n        LocalBroadcastManager.getInstance(this).registerReceiver(receiver, new IntentFilter(\"otp\"));\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        LocalBroadcastManager.getInstance(this).unregisterReceiver(receiver);\r\n    }\r\n\r\n    void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(OtpActivity.this)) {\r\n            tvSendOTPbool = false;\r\n            binding.txtError.setText(\"\");\r\n            binding.txtError.setVisibility(View.GONE);\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<LoginModel> listCall = APIClient.getClient().getLoginDatas(MobileNo, Code, CONSTANTS.FLAG_ONE, CONSTANTS.FLAG_ONE, SplashScreenActivity.key);\r\n            listCall.enqueue(new Callback<LoginModel>() {\r\n                @Override\r\n                public void onResponse(Call<LoginModel> call, Response<LoginModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        LoginModel loginModel = response.body();\r\n                        if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                            countDownTimer = new CountDownTimer(30000, 1000) {\r\n                                public void onTick(long millisUntilFinished) {\r\n                                    binding.llResendSms.setEnabled(false);\r\n                                    binding.tvResendOTP.setText(Html.fromHtml(millisUntilFinished / 1000 + \"<font color=\\\"#999999\\\">\" + \" Resent SMS\" + \"</font>\"));\r\n                                }\r\n\r\n                                public void onFinish() {\r\n                                    binding.llResendSms.setEnabled(true);\r\n                                    binding.tvResendOTP.setText(getString(R.string.resent_sms));\r\n                                    binding.tvResendOTP.setTextColor(getResources().getColor(R.color.white));\r\n                                    binding.tvResendOTP.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\r\n                                    binding.tvResendOTP.getPaint().setMaskFilter(null);\r\n                                }\r\n                            }.start();\r\n                            binding.edtOTP1.requestFocus();\r\n                            binding.edtOTP1.setText(\"\");\r\n                            binding.edtOTP2.setText(\"\");\r\n                            binding.edtOTP3.setText(\"\");\r\n                            binding.edtOTP4.setText(\"\");\r\n                            tvSendOTPbool = true;\r\n                            BWSApplication.showToast(loginModel.getResponseMessage(), OtpActivity.this);\r\n                        } else {\r\n                            binding.txtError.setVisibility(View.VISIBLE);\r\n                            binding.txtError.setText(loginModel.getResponseMessage());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<LoginModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    BWSApplication.showToast(t.getMessage(), OtpActivity.this);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), OtpActivity.this);\r\n        }\r\n    }\r\n\r\n    public class PinTextWatcher implements TextWatcher {\r\n        private int currentIndex;\r\n        private boolean isFirst = false, isLast = false;\r\n        private String newTypedString = \"\";\r\n\r\n        PinTextWatcher(int currentIndex) {\r\n            this.currentIndex = currentIndex;\r\n\r\n            if (currentIndex == 0)\r\n                this.isFirst = true;\r\n            else if (currentIndex == editTexts.length - 1)\r\n                this.isLast = true;\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            newTypedString = s.subSequence(start, start + count).toString().trim();\r\n            String OTP1 = binding.edtOTP1.getText().toString().trim();\r\n            String OTP2 = binding.edtOTP2.getText().toString().trim();\r\n            String OTP3 = binding.edtOTP3.getText().toString().trim();\r\n            String OTP4 = binding.edtOTP4.getText().toString().trim();\r\n            if (!OTP1.isEmpty() && !OTP2.isEmpty() && !OTP3.isEmpty() && !OTP4.isEmpty()) {\r\n                binding.btnSendCode.setEnabled(true);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnSendCode.setEnabled(false);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            String text = newTypedString;\r\n            Log.e(\"OTP VERIFICATION\", \"\" + text);\r\n\r\n            /* Detect paste event and set first char */\r\n            if (text.length() > 1)\r\n                text = String.valueOf(text.charAt(0)); // TODO: We can fill out other EditTexts\r\n            editTexts[currentIndex].removeTextChangedListener(this);\r\n            editTexts[currentIndex].setText(text);\r\n            editTexts[currentIndex].setSelection(text.length());\r\n            editTexts[currentIndex].addTextChangedListener(this);\r\n\r\n            if (text.length() == 1) {\r\n                moveToNext();\r\n            } else if (text.length() == 0) {\r\n                if (!tvSendOTPbool) {\r\n                    editTexts[0].requestFocus();\r\n                } else {\r\n                    moveToPrevious();\r\n                }\r\n            }\r\n        }\r\n\r\n        private void moveToNext() {\r\n            if (!isLast)\r\n                editTexts[currentIndex + 1].requestFocus();\r\n\r\n            if (isAllEditTextsFilled() && isLast) { // isLast is optional\r\n                editTexts[currentIndex].clearFocus();\r\n                hideKeyboard();\r\n            }\r\n        }\r\n\r\n        private void moveToPrevious() {\r\n            if (!isFirst)\r\n                editTexts[currentIndex - 1].requestFocus();\r\n        }\r\n\r\n        private boolean isAllEditTextsFilled() {\r\n            for (EditText editText : editTexts)\r\n                if (editText.getText().toString().trim().length() == 0)\r\n                    return false;\r\n            return true;\r\n        }\r\n\r\n        private void hideKeyboard() {\r\n            if (getCurrentFocus() != null) {\r\n                InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);\r\n                inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PinOnKeyListener implements View.OnKeyListener {\r\n        private int currentIndex;\r\n\r\n        PinOnKeyListener(int currentIndex) {\r\n            this.currentIndex = currentIndex;\r\n        }\r\n\r\n        @Override\r\n        public boolean onKey(View v, int keyCode, KeyEvent event) {\r\n            if (keyCode == KeyEvent.KEYCODE_DEL && event.getAction() == KeyEvent.ACTION_DOWN) {\r\n                if (editTexts[currentIndex].getText().toString().isEmpty() && currentIndex != 0)\r\n                    editTexts[currentIndex - 1].requestFocus();\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LoginModule/Activities/OtpActivity.java	(revision 40b3d5a2ab8a7bbee0d7f7a59b1fae5aa1c1fff2)
+++ app/src/main/java/com/brainwellnessspa/LoginModule/Activities/OtpActivity.java	(date 1602850216408)
@@ -180,13 +180,10 @@
         try {
             smsReceiver = new SmsReceiver();
             smsReceiver.setOTPListener(this);
-
             IntentFilter intentFilter = new IntentFilter();
             intentFilter.addAction(SmsRetriever.SMS_RETRIEVED_ACTION);
             this.registerReceiver(smsReceiver, intentFilter);
-
             SmsRetrieverClient client = SmsRetriever.getClient(this);
-
             Task<Void> task = client.startSmsRetriever();
             task.addOnSuccessListener(aVoid -> {
                 // API successfully started
@@ -214,7 +211,7 @@
         } else {
             splited = otp.split("is ");
         }
-        String message = splited[7];
+        String message = splited[4];
         binding.edtOTP1.setText(String.valueOf(message.charAt(0)));
         binding.edtOTP2.setText(String.valueOf(message.charAt(1)));
         binding.edtOTP3.setText(String.valueOf(message.charAt(2)));
Index: app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutOtpActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.MembershipModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.SystemClock;\r\nimport android.provider.Settings;\r\nimport android.text.Editable;\r\nimport android.text.Html;\r\nimport android.text.TextUtils;\r\nimport android.text.TextWatcher;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.inputmethod.InputMethodManager;\r\nimport android.widget.EditText;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.brainwellnessspa.Utility.SmsReceiver;\r\nimport com.facebook.appevents.AppEventsLogger;\r\nimport com.google.android.gms.auth.api.phone.SmsRetriever;\r\nimport com.google.android.gms.auth.api.phone.SmsRetrieverClient;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.iid.FirebaseInstanceId;\r\nimport com.google.firebase.iid.InstanceIdResult;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.LoginModule.Models.OtpModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.MembershipPlanListModel;\r\nimport com.brainwellnessspa.MembershipModule.Models.SignUpModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.SplashModule.SplashScreenActivity;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityCheckoutOtpBinding;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class CheckoutOtpActivity extends AppCompatActivity implements\r\n        SmsReceiver.OTPReceiveListener {\r\n    String Name, Code, MobileNo;\r\n    private EditText[] editTexts;\r\n    boolean tvSendOTPbool = true;\r\n    Activity activity;\r\n    Context ctx;\r\n    String TrialPeriod;\r\n    private ArrayList<MembershipPlanListModel.Plan> listModelList;\r\n    int position;\r\n    ActivityCheckoutOtpBinding binding;\r\n    CountDownTimer countDownTimer;\r\n    private long mLastClickTime = 0;\r\n    public static int comeRegister = 0;\r\n    private SmsReceiver smsReceiver;\r\n    private BroadcastReceiver receiver;\r\n//    AppEventsLogger logger;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_checkout_otp);\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            MobileNo = getIntent().getStringExtra(CONSTANTS.MobileNo);\r\n            Name = getIntent().getStringExtra(CONSTANTS.Name);\r\n            Code = getIntent().getStringExtra(CONSTANTS.Code);\r\n//            TrialPeriod = getIntent().getStringExtra(\"TrialPeriod\");\r\n//            listModelList = getIntent().getParcelableArrayListExtra(\"PlanData\");\r\n//            position = getIntent().getIntExtra(\"position\", 0);\r\n        }\r\n        activity = CheckoutOtpActivity.this;\r\n        ctx = CheckoutOtpActivity.this;\r\n//        logger = AppEventsLogger.newLogger(this);\r\n        binding.tvSendCodeText.setText(\"We sent an SMS with a 4-digit code to \" + Code + MobileNo);\r\n        editTexts = new EditText[]{binding.edtOTP1, binding.edtOTP2, binding.edtOTP3, binding.edtOTP4};\r\n        binding.edtOTP1.addTextChangedListener(new PinTextWatcher(0));\r\n        binding.edtOTP2.addTextChangedListener(new PinTextWatcher(1));\r\n        binding.edtOTP3.addTextChangedListener(new PinTextWatcher(2));\r\n        binding.edtOTP4.addTextChangedListener(new PinTextWatcher(3));\r\n        binding.edtOTP1.setOnKeyListener(new PinOnKeyListener(0));\r\n        binding.edtOTP2.setOnKeyListener(new PinOnKeyListener(1));\r\n        binding.edtOTP3.setOnKeyListener(new PinOnKeyListener(2));\r\n        binding.edtOTP4.setOnKeyListener(new PinOnKeyListener(3));\r\n        startSMSListener();\r\n        binding.txtError.setText(\"\");\r\n        binding.txtError.setVisibility(View.GONE);\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            comeRegister = 0;\r\n            Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n            i.putExtra(\"MobileNo\", MobileNo);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.llEditNumber.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            comeRegister = 1;\r\n            Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n            i.putExtra(\"MobileNo\", MobileNo);\r\n            i.putExtra(\"Name\", Name);\r\n            i.putExtra(\"Code\", Code);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.btnSendCode.setOnClickListener(view -> {\r\n            SharedPreferences sharedPreferences2 = getSharedPreferences(CONSTANTS.Token, MODE_PRIVATE);\r\n            String fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n            if (TextUtils.isEmpty(fcm_id)) {\r\n                FirebaseInstanceId.getInstance().getInstanceId().addOnSuccessListener(activity, new OnSuccessListener<InstanceIdResult>() {\r\n                    @Override\r\n                    public void onSuccess(InstanceIdResult instanceIdResult) {\r\n                        String newToken = instanceIdResult.getToken();\r\n                        Log.e(\"newToken\", newToken);\r\n                        SharedPreferences.Editor editor = getSharedPreferences(CONSTANTS.Token, MODE_PRIVATE).edit();\r\n                        editor.putString(CONSTANTS.Token, newToken); //Friend\r\n                        editor.apply();\r\n                        editor.commit();\r\n                    }\r\n                });\r\n                fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n            }\r\n            if (BWSApplication.isNetworkConnected(CheckoutOtpActivity.this)) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                String deviceid = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);\r\n                Call<OtpModel> listCall = APIClient.getClient().getAuthOtps1(\r\n                        binding.edtOTP1.getText().toString() + \"\" +\r\n                                binding.edtOTP2.getText().toString() + \"\" +\r\n                                binding.edtOTP3.getText().toString() + \"\" +\r\n                                binding.edtOTP4.getText().toString(), fcm_id, CONSTANTS.FLAG_ONE, deviceid\r\n                        , MobileNo, CONSTANTS.FLAG_ONE);\r\n                listCall.enqueue(new Callback<OtpModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<OtpModel> call, Response<OtpModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            OtpModel otpModel = response.body();\r\n                            if (otpModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                                Intent i = new Intent(CheckoutOtpActivity.this, CheckoutPaymentActivity.class);\r\n                                i.putExtra(\"MobileNo\", MobileNo);\r\n                                startActivity(i);\r\n                                finish();\r\n                            } else if (otpModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                                binding.txtError.setText(otpModel.getResponseMessage());\r\n                                binding.txtError.setVisibility(View.VISIBLE);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<OtpModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n\r\n                    }\r\n                });\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getApplicationContext());\r\n            }\r\n        });\r\n\r\n        binding.llResendSms.setOnClickListener(view -> prepareData());\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        comeRegister = 0;\r\n        Intent i = new Intent(ctx, CheckoutGetCodeActivity.class);\r\n        i.putExtra(\"MobileNo\", MobileNo);\r\n        i.putExtra(\"Name\", Name);\r\n        i.putExtra(\"Code\", Code);\r\n        startActivity(i);\r\n        finish();\r\n    }\r\n\r\n    private void startSMSListener() {\r\n        try {\r\n            smsReceiver = new SmsReceiver();\r\n            smsReceiver.setOTPListener(this);\r\n\r\n            IntentFilter intentFilter = new IntentFilter();\r\n            intentFilter.addAction(SmsRetriever.SMS_RETRIEVED_ACTION);\r\n            this.registerReceiver(smsReceiver, intentFilter);\r\n\r\n            SmsRetrieverClient client = SmsRetriever.getClient(this);\r\n\r\n            Task<Void> task = client.startSmsRetriever();\r\n            task.addOnSuccessListener(aVoid -> {\r\n                // API successfully started\r\n            });\r\n\r\n            task.addOnFailureListener(e -> {\r\n                /* Fail to start API */\r\n            });\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onOTPReceived(String otp) {\r\n        String[] splited = new String[0];\r\n        if (otp.startsWith(\"[#] Your OTP is\")) {\r\n            splited = otp.split(\" \");\r\n        } else if (otp.startsWith(\"(#) Your OTP is\")) {\r\n            splited = otp.split(\" \");\r\n        } else {\r\n            splited = otp.split(\"is \");\r\n        }\r\n        String message = splited[7];\r\n        binding.edtOTP1.setText(String.valueOf(message.charAt(0)));\r\n        binding.edtOTP2.setText(String.valueOf(message.charAt(1)));\r\n        binding.edtOTP3.setText(String.valueOf(message.charAt(2)));\r\n        binding.edtOTP4.setText(String.valueOf(message.charAt(3)));\r\n\r\n        if (smsReceiver != null) {\r\n            unregisterReceiver(smsReceiver);\r\n            smsReceiver = null;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onOTPTimeOut() {\r\n//        showToast(\"OTP Time out\");\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onOTPReceivedError(String error) {\r\n//        showToast(error);\r\n    }\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        if (smsReceiver != null) {\r\n            unregisterReceiver(smsReceiver);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        LocalBroadcastManager.getInstance(this).registerReceiver(receiver, new IntentFilter(\"otp\"));\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        LocalBroadcastManager.getInstance(this).unregisterReceiver(receiver);\r\n    }\r\n\r\n    void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            tvSendOTPbool = false;\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SignUpModel> listCall = APIClient.getClient().getSignUpDatas(MobileNo, Code, CONSTANTS.FLAG_ONE, CONSTANTS.FLAG_ONE, SplashScreenActivity.key);\r\n            listCall.enqueue(new Callback<SignUpModel>() {\r\n                @Override\r\n                public void onResponse(Call<SignUpModel> call, Response<SignUpModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        SignUpModel loginModel = response.body();\r\n                        if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                            countDownTimer = new CountDownTimer(30000, 1000) {\r\n                                public void onTick(long millisUntilFinished) {\r\n                                    binding.llResendSms.setEnabled(false);\r\n                                    binding.tvResendOTP.setText(Html.fromHtml(millisUntilFinished / 1000 + \"<font color=\\\"#999999\\\">\" + \" Resent SMS\" + \"</font>\"));\r\n                                }\r\n\r\n                                public void onFinish() {\r\n                                    binding.llResendSms.setEnabled(true);\r\n                                    binding.tvResendOTP.setText(getString(R.string.resent_sms));\r\n                                    binding.tvResendOTP.setTextColor(getResources().getColor(R.color.dark_blue_gray));\r\n                                    binding.tvResendOTP.setLayerType(View.LAYER_TYPE_SOFTWARE, null);\r\n                                    binding.tvResendOTP.getPaint().setMaskFilter(null);\r\n                                }\r\n                            }.start();\r\n                            binding.edtOTP1.requestFocus();\r\n                            binding.edtOTP1.setText(\"\");\r\n                            binding.edtOTP2.setText(\"\");\r\n                            binding.edtOTP3.setText(\"\");\r\n                            binding.edtOTP4.setText(\"\");\r\n                            tvSendOTPbool = true;\r\n                            BWSApplication.showToast(loginModel.getResponseMessage(), getApplicationContext());\r\n                        } else if (loginModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodefail))) {\r\n                            binding.txtError.setVisibility(View.VISIBLE);\r\n                            binding.txtError.setText(loginModel.getResponseMessage());\r\n                        } else {\r\n                            binding.txtError.setVisibility(View.VISIBLE);\r\n                            binding.txtError.setText(loginModel.getResponseMessage());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SignUpModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    BWSApplication.showToast(t.getMessage(), getApplicationContext());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getApplicationContext());\r\n        }\r\n    }\r\n\r\n    public class PinTextWatcher implements TextWatcher {\r\n        private int currentIndex;\r\n        private boolean isFirst = false, isLast = false;\r\n        private String newTypedString = \"\";\r\n\r\n        PinTextWatcher(int currentIndex) {\r\n            this.currentIndex = currentIndex;\r\n\r\n            if (currentIndex == 0)\r\n                this.isFirst = true;\r\n            else if (currentIndex == editTexts.length - 1)\r\n                this.isLast = true;\r\n        }\r\n\r\n        @Override\r\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n        }\r\n\r\n        @Override\r\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n            newTypedString = s.subSequence(start, start + count).toString().trim();\r\n            String OTP1 = binding.edtOTP1.getText().toString().trim();\r\n            String OTP2 = binding.edtOTP2.getText().toString().trim();\r\n            String OTP3 = binding.edtOTP3.getText().toString().trim();\r\n            String OTP4 = binding.edtOTP4.getText().toString().trim();\r\n            if (!OTP1.isEmpty() && !OTP2.isEmpty() && !OTP3.isEmpty() && !OTP4.isEmpty()) {\r\n                binding.btnSendCode.setEnabled(true);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n            } else {\r\n                binding.btnSendCode.setEnabled(false);\r\n                binding.btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                binding.btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void afterTextChanged(Editable s) {\r\n            String text = newTypedString;\r\n            Log.e(\"OTP VERIFICATION\", \"\" + text);\r\n\r\n            /* Detect paste event and set first char */\r\n            if (text.length() > 1)\r\n                text = String.valueOf(text.charAt(0)); // TODO: We can fill out other EditTexts\r\n            editTexts[currentIndex].removeTextChangedListener(this);\r\n            editTexts[currentIndex].setText(text);\r\n            editTexts[currentIndex].setSelection(text.length());\r\n            editTexts[currentIndex].addTextChangedListener(this);\r\n\r\n            if (text.length() == 1) {\r\n                moveToNext();\r\n            } else if (text.length() == 0) {\r\n                if (!tvSendOTPbool) {\r\n                    editTexts[0].requestFocus();\r\n                } else {\r\n                    moveToPrevious();\r\n                }\r\n            }\r\n        }\r\n\r\n        private void moveToNext() {\r\n            if (!isLast)\r\n                editTexts[currentIndex + 1].requestFocus();\r\n\r\n            if (isAllEditTextsFilled() && isLast) { // isLast is optional\r\n                editTexts[currentIndex].clearFocus();\r\n                hideKeyboard();\r\n            }\r\n        }\r\n\r\n        private void moveToPrevious() {\r\n            if (!isFirst)\r\n                editTexts[currentIndex - 1].requestFocus();\r\n        }\r\n\r\n        private boolean isAllEditTextsFilled() {\r\n            for (EditText editText : editTexts)\r\n                if (editText.getText().toString().trim().length() == 0)\r\n                    return false;\r\n            return true;\r\n        }\r\n\r\n        private void hideKeyboard() {\r\n            if (getCurrentFocus() != null) {\r\n                InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(INPUT_METHOD_SERVICE);\r\n                inputMethodManager.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(), 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PinOnKeyListener implements View.OnKeyListener {\r\n        private int currentIndex;\r\n\r\n        PinOnKeyListener(int currentIndex) {\r\n            this.currentIndex = currentIndex;\r\n        }\r\n\r\n        @Override\r\n        public boolean onKey(View v, int keyCode, KeyEvent event) {\r\n            if (keyCode == KeyEvent.KEYCODE_DEL && event.getAction() == KeyEvent.ACTION_DOWN) {\r\n                if (editTexts[currentIndex].getText().toString().isEmpty() && currentIndex != 0)\r\n                    editTexts[currentIndex - 1].requestFocus();\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutOtpActivity.java	(revision 40b3d5a2ab8a7bbee0d7f7a59b1fae5aa1c1fff2)
+++ app/src/main/java/com/brainwellnessspa/MembershipModule/Activities/CheckoutOtpActivity.java	(date 1602849594326)
@@ -251,6 +251,7 @@
     public void onOTPReceivedError(String error) {
 //        showToast(error);
     }
+
     @Override
     protected void onDestroy() {
         super.onDestroy();
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 40b3d5a2ab8a7bbee0d7f7a59b1fae5aa1c1fff2)
+++ .idea/gradle.xml	(date 1602849244174)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/java/com/brainwellnessspa/Utility/MyFirebaseMessagingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.Utility;\r\n\r\n\r\nimport android.app.Notification;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.app.TaskStackBuilder;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.media.RingtoneManager;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.google.firebase.iid.FirebaseInstanceId;\r\nimport com.google.firebase.messaging.FirebaseMessaging;\r\nimport com.google.firebase.messaging.FirebaseMessagingService;\r\nimport com.google.firebase.messaging.RemoteMessage;\r\nimport com.brainwellnessspa.DashboardModule.Activities.DashboardActivity;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.ReminderModule.Activities.ReminderDetailsActivity;\r\n\r\nimport java.util.Random;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.ComeNotification;\r\n\r\npublic class MyFirebaseMessagingService extends FirebaseMessagingService {\r\n    public static final String NOTIFICATION_CHANNEL_ID = \"10001\";\r\n    NotificationManager notificationManager;\r\n    NotificationChannel notificationChannel;\r\n    private NotificationCompat.Builder notificationBuilder;\r\n    String title = \"\", image = \"\", message = \"\", flag = \"\", id = \"\";\r\n    TaskStackBuilder taskStackBuilder;\r\n    PendingIntent resultPendingIntent = null;\r\n    Intent resultIntent = null;\r\n    private static final String TAG = MyFirebaseMessagingService.class.getSimpleName();\r\n    private static final String TAGs = \"MyFirebaseIDService\";\r\n    public static String fcm_Tocken;\r\n    Context context;\r\n    public static String Notification_PlaylistId= \"\";\r\n    public static String Notification_PlaylistName= \"\";\r\n    MyFirebaseMessagingService activity;\r\n\r\n    @Override\r\n    public void onMessageReceived(RemoteMessage remoteMessage) {\r\n        super.onMessageReceived(remoteMessage);\r\n        FirebaseMessaging.getInstance().setAutoInitEnabled(true);\r\n//        Log.e(\"AAAAAAAAAAAAAAAAAAAAA\", \"\" + remoteMessage.toString());\r\n//        String tag = remoteMessage.getData().get(\"tag\");\r\n\r\n//        FirebaseMessaging.getInstance().subscribeToTopic(\"BWS\");\r\n\r\n//        image = getBitmapFromURL(img);\r\n\r\n        Random random = new Random();\r\n        int m = random.nextInt(9999 - 1000) + 1000;\r\n        if (remoteMessage == null)\r\n            return;\r\n        if (remoteMessage.getNotification() != null) {\r\n            Log.e(TAG, \"Notification Body: \" + remoteMessage.getNotification().getBody());\r\n            title = remoteMessage.getNotification().getTitle();\r\n            message = remoteMessage.getNotification().getBody();\r\n            String flag = remoteMessage.getNotification().getBody();\r\n            String id = remoteMessage.getData().get(\"id\");\r\n\r\n\r\n            Log.e(\"bundle.....\", \"\" + flag);\r\n            sendNotification(title, message, flag, id, String.valueOf(m));\r\n//                NotificationUtils notificationUtils = new NotificationUtils(this);\r\n//                notificationUtils.playNotificationSound();\r\n//            NotificationUtils.setNotification(remoteMessage.getNotification().getTitle(), remoteMessage.getNotification().getBody(), this);\r\n\r\n        }\r\n        if (remoteMessage.getData().size() > 0) {\r\n            Log.e(TAG, \"Data Payload: \" + remoteMessage.getData().toString());\r\n            try {\r\n                title = remoteMessage.getData().get(\"title\");\r\n                image = remoteMessage.getData().get(\"image\");\r\n                message = remoteMessage.getData().get(\"body\");\r\n                flag = remoteMessage.getData().get(\"flag\");\r\n                id = remoteMessage.getData().get(\"id\");\r\n                sendNotification(title, message, flag, id, String.valueOf(m));\r\n            } catch (Exception e) {\r\n                Log.e(TAG, \"Exception: \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onNewToken(@NonNull String token) {\r\n        super.onNewToken(token);\r\n\r\n        Intent registrationComplete = new Intent(CONSTANTS.REGISTRATION_COMPLETE);\r\n        registrationComplete.putExtra(\"token\", token);\r\n        LocalBroadcastManager.getInstance(this).sendBroadcast(registrationComplete);\r\n\r\n        if (token.isEmpty()) {\r\n            token = FirebaseInstanceId.getInstance().getToken();\r\n        }\r\n        FirebaseMessaging.getInstance().subscribeToTopic(\"all\");\r\n        SharedPreferences.Editor editor1 = getSharedPreferences(CONSTANTS.Token, MODE_PRIVATE).edit();\r\n        editor1.putString(CONSTANTS.Token, token); //Friend\r\n        editor1.apply();\r\n        editor1.commit();\r\n        fcm_Tocken = token;\r\n        sendRegistrationToServer(token);\r\n    }\r\n\r\n    private void sendRegistrationToServer(String token) {\r\n        SharedPreferences.Editor editor1 = getSharedPreferences(CONSTANTS.Token, MODE_PRIVATE).edit();\r\n        editor1.putString(CONSTANTS.Token, token); //Friend\r\n        editor1.apply();\r\n        editor1.commit();\r\n        Log.e(TAGs, \"sendRegistrationToServer: \" + token.toString());\r\n    }\r\n\r\n    private void sendNotification(String title, String message, String flag, String id, String m) {\r\n        context = MyFirebaseMessagingService.this;\r\n        activity = MyFirebaseMessagingService.this;\r\n        taskStackBuilder = TaskStackBuilder.create(this);\r\n        String channelId = context.getString(R.string.default_notification_channel_id);\r\n        CharSequence channelName = \"Name\";\r\n        int importance = 0;\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            importance = NotificationManager.IMPORTANCE_HIGH;\r\n        }\r\n        try {\r\n            if (flag != null && flag.equalsIgnoreCase(\"Playlist\")) {\r\n                /*Bundle bundle = new Bundle();\r\n                Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n                bundle.putString(\"New\", \"0\");\r\n                bundle.putString(\"PlaylistID\", PlaylistId);\r\n                bundle.putString(\"PlaylistName\", PlaylistName);\r\n                bundle.putString(\"PlaylistImage\", PlaylistImage);\r\n                bundle.putString(\"MyDownloads\", \"1\");\r\n                myPlaylistsFragment.setArguments(bundle);\r\n                comefrom_search = 3;\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, myPlaylistsFragment)\r\n                        .commit();*/\r\n                ComeNotification = 1;\r\n                resultIntent = new Intent(this, DashboardActivity.class);\r\n                resultIntent.putExtra(\"id\", id);\r\n                resultIntent.putExtra(CONSTANTS.title, title);\r\n                Notification_PlaylistId = id;\r\n                Notification_PlaylistName = title;\r\n                resultIntent.putExtra(\"body\", message);\r\n                taskStackBuilder.addParentStack(DashboardActivity.class);\r\n                taskStackBuilder.addNextIntentWithParentStack(resultIntent);\r\n                resultPendingIntent = taskStackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT);\r\n            } else {\r\n                resultIntent = new Intent(this, DashboardActivity.class);\r\n                taskStackBuilder.addParentStack(DashboardActivity.class);\r\n                taskStackBuilder.addNextIntentWithParentStack(resultIntent);\r\n                resultPendingIntent = taskStackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT);\r\n            }\r\n\r\n            Uri defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);\r\n            notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\r\n\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                notificationChannel = new NotificationChannel(channelId, channelName, importance);\r\n                notificationChannel.enableLights(true);\r\n                notificationChannel.enableVibration(true);\r\n                notificationChannel.setDescription(\"BWS Notification\");\r\n                notificationChannel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC);\r\n                notificationBuilder = new NotificationCompat.Builder(this, notificationChannel.getId());\r\n            } else {\r\n                notificationBuilder = new NotificationCompat.Builder(this, NOTIFICATION_CHANNEL_ID);\r\n            }\r\n\r\n            if (notificationManager != null) {\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                    notificationManager.createNotificationChannel(notificationChannel);\r\n                }\r\n            }\r\n\r\n            notificationBuilder.setSmallIcon(R.drawable.square_app_icon);\r\n            notificationBuilder.setPriority(NotificationCompat.PRIORITY_DEFAULT);\r\n            notificationBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText(message));\r\n            notificationBuilder.setContentTitle(title);\r\n            notificationBuilder.setDefaults(Notification.FLAG_INSISTENT |\r\n                    Notification.DEFAULT_VIBRATE | Notification.DEFAULT_SOUND |\r\n                    Notification.DEFAULT_LIGHTS | Notification.FLAG_AUTO_CANCEL);\r\n\r\n            notificationBuilder.setVibrate(new long[]{1000, 1000, 1000, 1000, 1000});\r\n            notificationBuilder.setContentText(message);\r\n            notificationBuilder.setColor(getResources().getColor(R.color.blue));\r\n            notificationBuilder.setAutoCancel(true);\r\n            notificationBuilder.setSound(defaultSoundUri);\r\n            notificationBuilder.setChannelId(channelId);\r\n            notificationBuilder.setContentIntent(resultPendingIntent);\r\n\r\n            Notification notification = notificationBuilder.build();\r\n            notification.flags = Notification.FLAG_INSISTENT;\r\n            notification.flags = Notification.DEFAULT_VIBRATE;\r\n            notification.flags = Notification.DEFAULT_SOUND;\r\n            notification.flags = Notification.DEFAULT_LIGHTS;\r\n            notification.flags = Notification.FLAG_AUTO_CANCEL;\r\n\r\n            if (notificationManager != null) {\r\n                notificationManager.notify(Integer.parseInt(m), notification);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            Toast.makeText(context, e.getMessage() + channelId, Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/Utility/MyFirebaseMessagingService.java	(revision 40b3d5a2ab8a7bbee0d7f7a59b1fae5aa1c1fff2)
+++ app/src/main/java/com/brainwellnessspa/Utility/MyFirebaseMessagingService.java	(date 1602849244108)
@@ -147,8 +147,8 @@
                 fragmentManager1.beginTransaction()
                         .replace(R.id.flContainer, myPlaylistsFragment)
                         .commit();*/
-                ComeNotification = 1;
                 resultIntent = new Intent(this, DashboardActivity.class);
+                ComeNotification = 1;
                 resultIntent.putExtra("id", id);
                 resultIntent.putExtra(CONSTANTS.title, title);
                 Notification_PlaylistId = id;
