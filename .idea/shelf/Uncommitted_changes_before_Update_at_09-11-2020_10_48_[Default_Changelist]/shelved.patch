Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/DashboardActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.media.AudioManager;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.telephony.PhoneStateListener;\r\nimport android.telephony.TelephonyManager;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.navigation.ui.AppBarConfiguration;\r\nimport androidx.navigation.ui.NavigationUI;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.databinding.ActivityDashboardBinding;\r\n\r\nimport static com.brainwellnessspa.InvoiceModule.Activities.InvoiceActivity.invoiceToDashboard;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class DashboardActivity extends AppCompatActivity implements AudioManager.OnAudioFocusChangeListener {\r\n    public static int player = 0;\r\n    ActivityDashboardBinding binding;\r\n    boolean doubleBackToExitPressedOnce = false;\r\n    String Goplaylist = \"\", PlaylistID = \"\", PlaylistName = \"\", PlaylistImage = \"\";\r\n    TelephonyManager mTelephonyMgr;\r\n    AudioManager mAudioManager;\r\n    public static boolean audioPause = false;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_dashboard);\r\n        AppBarConfiguration appBarConfiguration = new AppBarConfiguration.Builder(\r\n                R.id.navigation_audio, R.id.navigation_playlist, R.id.navigation_search,\r\n                R.id.navigation_appointment, R.id.navigation_account).build();\r\n        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);\r\n//        NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration);\r\n        NavigationUI.setupWithNavController(binding.navView, navController);\r\n        mTelephonyMgr = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);\r\n        mTelephonyMgr.listen(mPhoneStateListener, PhoneStateListener.LISTEN_CALL_STATE);\r\n        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);\r\n\r\n        if (getIntent().hasExtra(\"Goplaylist\")) {\r\n            Goplaylist = getIntent().getStringExtra(\"Goplaylist\");\r\n            PlaylistID = getIntent().getStringExtra(\"PlaylistID\");\r\n            PlaylistName = getIntent().getStringExtra(\"PlaylistName\");\r\n            PlaylistImage = getIntent().getStringExtra(\"PlaylistImage\");\r\n        }\r\n        if (Goplaylist.equalsIgnoreCase(\"1\")) {\r\n            binding.navView.setSelectedItemId(R.id.navigation_playlist);\r\n            Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n            Bundle bundle = new Bundle();\r\n            bundle.putString(\"New\", \"0\");\r\n            bundle.putString(\"PlaylistID\", PlaylistID);\r\n            bundle.putString(\"PlaylistName\", PlaylistName);\r\n            bundle.putString(\"PlaylistImage\", PlaylistImage);\r\n            bundle.putString(\"MyDownloads\", \"0\");\r\n            myPlaylistsFragment.setArguments(bundle);\r\n            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, myPlaylistsFragment)\r\n                    .commit();\r\n        }\r\n//\r\n//        ConnectivityManager connMgr = (ConnectivityManager)\r\n//                getSystemService(Context.CONNECTIVITY_SERVICE);\r\n//// Checks if the device is on a metered network\r\n//        if (connMgr.isActiveNetworkMetered()) {\r\n//            // Checks userâ€™s Data Saver settings.\r\n//            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n//                switch (connMgr.getRestrictBackgroundStatus()) {\r\n//                    case ConnectivityManager.RESTRICT_BACKGROUND_STATUS_ENABLED:\r\n//                        // Background data usage is blocked for this app. Wherever possible,\r\n//                        // the app should also use less data in the foreground.\r\n//\r\n//                    case ConnectivityManager.RESTRICT_BACKGROUND_STATUS_WHITELISTED:\r\n//                        // The app is allowed to bypass Data Saver. Nevertheless, wherever possible,\r\n//                        // the app should use less data in the foreground and background.\r\n//\r\n//                    case ConnectivityManager.RESTRICT_BACKGROUND_STATUS_DISABLED:\r\n//                        // Data Saver is disabled. Since the device is connected to a\r\n//                        // metered network, the app should use less data wherever possible.\r\n//                }\r\n//            }\r\n//        } else {\r\n//            // The device is not on a metered network.\r\n//            // Use data as required to perform syncs, downloads, and updates.\r\n//        }\r\n    }\r\n\r\n    private PhoneStateListener mPhoneStateListener = new PhoneStateListener() {\r\n        @Override\r\n        public void onCallStateChanged(int state, String incomingNumber) {\r\n            // Test for incoming call, dialing call, active or on hold\r\n            if (state == TelephonyManager.CALL_STATE_RINGING || state == TelephonyManager.CALL_STATE_OFFHOOK) {\r\n                if (isMediaStart && !audioPause) {\r\n                    pauseMedia();\r\n                    audioPause = true;\r\n                }  // Put here the code to stop your music\r\n            } else if (state == TelephonyManager.CALL_STATE_IDLE) {\r\n            }\r\n            super.onCallStateChanged(state, incomingNumber);\r\n        }\r\n    };\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (invoiceToDashboard == 1) {\r\n            finishAffinity();\r\n        }\r\n\r\n        if (binding.navView.getSelectedItemId() == R.id.navigation_audio) {\r\n            binding.navView.setSelectedItemId(R.id.navigation_audio);\r\n            if (doubleBackToExitPressedOnce) {\r\n                super.onBackPressed();\r\n                return;\r\n            }\r\n\r\n            this.doubleBackToExitPressedOnce = true;\r\n            BWSApplication.showToast(\"Press again to exit\", DashboardActivity.this);\r\n\r\n            new Handler().postDelayed(() -> doubleBackToExitPressedOnce = false, 2000);\r\n        } else {\r\n            super.onBackPressed();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        mTelephonyMgr.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE);\r\n    }\r\n\r\n    @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n                if(audioPause)\r\n                resumeMedia();\r\n                audioPause = false;\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if (isMediaStart && !audioPause) {\r\n                    pauseMedia();\r\n                    audioPause = true;\r\n//                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n//                    binding.ivPause.setVisibility(View.GONE);\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/DashboardActivity.java	(revision 566ec12fd5320c1b290efa33dff572f80c54b5d8)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/DashboardActivity.java	(date 1604898702286)
@@ -23,6 +23,8 @@
 import com.brainwellnessspa.Utility.MusicService;
 import com.brainwellnessspa.databinding.ActivityDashboardBinding;
 
+import static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;
+import static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;
 import static com.brainwellnessspa.InvoiceModule.Activities.InvoiceActivity.invoiceToDashboard;
 import static com.brainwellnessspa.Utility.MusicService.isMediaStart;
 import static com.brainwellnessspa.Utility.MusicService.isPause;
@@ -77,6 +79,23 @@
                     .replace(R.id.flContainer, myPlaylistsFragment)
                     .commit();
         }
+
+        if (binding.navView.getSelectedItemId() == R.id.navigation_audio) {
+            ComeScreenAccount = 0;
+            comefromDownload = "0";
+        } else if (binding.navView.getSelectedItemId() == R.id.navigation_playlist) {
+            ComeScreenAccount = 0;
+            comefromDownload = "0";
+        } else if (binding.navView.getSelectedItemId() == R.id.navigation_search) {
+            ComeScreenAccount = 0;
+            comefromDownload = "0";
+        } else if (binding.navView.getSelectedItemId() == R.id.navigation_appointment) {
+            ComeScreenAccount = 0;
+            comefromDownload = "0";
+        } else if (binding.navView.getSelectedItemId() == R.id.navigation_account) {
+            ComeScreenAccount = 1;
+            comefromDownload = "0";
+        }
 //
 //        ConnectivityManager connMgr = (ConnectivityManager)
 //                getSystemService(Context.CONNECTIVITY_SERVICE);
@@ -158,8 +177,8 @@
             case AudioManager.AUDIOFOCUS_GAIN:
             case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:
                 // Resume your media player here
-                if(audioPause)
-                resumeMedia();
+                if (audioPause)
+                    resumeMedia();
                 audioPause = false;
                 break;
             case AudioManager.AUDIOFOCUS_LOSS:
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Account/AccountFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Account;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.SystemClock;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.LikeModule.Activities.LikeActivity;\r\nimport com.bumptech.glide.Glide;\r\nimport com.downloader.PRDownloader;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.firebase.iid.FirebaseInstanceId;\r\nimport com.google.firebase.iid.InstanceIdResult;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.BillingOrderActivity;\r\nimport com.brainwellnessspa.BuildConfig;\r\nimport com.brainwellnessspa.DashboardModule.Models.LogoutModel;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity;\r\nimport com.brainwellnessspa.FaqModule.Activities.FaqActivity;\r\nimport com.brainwellnessspa.InvoiceModule.Activities.InvoiceActivity;\r\nimport com.brainwellnessspa.LoginModule.Activities.LoginActivity;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.ReminderModule.Activities.ReminderDetailsActivity;\r\nimport com.brainwellnessspa.ResourceModule.Activities.ResourceActivity;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.UserModule.Activities.UserProfileActivity;\r\nimport com.brainwellnessspa.UserModule.Models.ProfileViewModel;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.databinding.FragmentAccountBinding;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadIdOne;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.isDownloading;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class AccountFragment extends Fragment {\r\n    public static String IsLock = \"\";\r\n    public static int ComeScreenReminder = 0;\r\n    public static int ComeScreenAccount = 0;\r\n    public static boolean logout = false;\r\n    FragmentAccountBinding binding;\r\n    String UserID, MobileNo;\r\n    private long mLastClickTime = 0;\r\n\r\n    @SuppressLint({\"ClickableViewAccessibility\", \"SetTextI18n\"})\r\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_account, container, false);\r\n        View view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        MobileNo = (shared1.getString(CONSTANTS.PREF_KEY_MobileNo, \"\"));\r\n        ComeScreenAccount = 1;\r\n        comefromDownload = \"0\";\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 10,\r\n                1, 1, 0.2f, 10);\r\n        binding.civProfile.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.civProfile.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n\r\n        MeasureRatio measureRatios = BWSApplication.measureRatio(getActivity(), 10,\r\n                1, 1, 0.2f, 10);\r\n        binding.civLetter.getLayoutParams().height = (int) (measureRatios.getHeight() * measureRatios.getRatio());\r\n        binding.civLetter.getLayoutParams().width = (int) (measureRatios.getWidthImg() * measureRatios.getRatio());\r\n        profileViewData(getActivity());\r\n\r\n        binding.tvVersion.setText(\"Version \" + BuildConfig.VERSION_NAME);\r\n\r\n        binding.llDownloads.setOnClickListener(view12 -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            Intent i = new Intent(getActivity(), DownloadsActivity.class);\r\n            startActivity(i);\r\n        });\r\n\r\n        binding.llFavorites.setOnClickListener(view12 -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            Intent i = new Intent(getActivity(), LikeActivity.class);\r\n            startActivity(i);\r\n        });\r\n\r\n        binding.llInvoices.setOnClickListener(view14 -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Intent i = new Intent(getActivity(), InvoiceActivity.class);\r\n                i.putExtra(\"ComeFrom\", \"\");\r\n                startActivity(i);\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        });\r\n\r\n        binding.llBillingOrder.setOnClickListener(view15 -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Intent i = new Intent(getActivity(), BillingOrderActivity.class);\r\n                startActivity(i);\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        });\r\n\r\n        binding.llResource.setOnClickListener(view17 -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Intent i = new Intent(getActivity(), ResourceActivity.class);\r\n                startActivity(i);\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        });\r\n\r\n        binding.llReminder.setOnClickListener(view16 -> {\r\n            ComeScreenReminder = 1;\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Intent i = new Intent(getActivity(), ReminderDetailsActivity.class);\r\n                startActivity(i);\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        });\r\n        binding.llFaq.setOnClickListener(view18 -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Intent i = new Intent(getActivity(), FaqActivity.class);\r\n                startActivity(i);\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        });\r\n\r\n        binding.llLogout.setOnClickListener(view19 -> {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                final Dialog dialog = new Dialog(getActivity());\r\n                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                dialog.setContentView(R.layout.logout_layout);\r\n                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                final Button Btn = dialog.findViewById(R.id.Btn);\r\n\r\n                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                        dialog.hide();\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                });\r\n\r\n                Btn.setOnTouchListener((view1, event) -> {\r\n                    switch (event.getAction()) {\r\n                        case MotionEvent.ACTION_DOWN: {\r\n                            Button views = (Button) view1;\r\n                            views.getBackground().setColorFilter(0x77000000, PorterDuff.Mode.SRC_ATOP);\r\n                            view1.invalidate();\r\n                            break;\r\n                        }\r\n                        case MotionEvent.ACTION_UP:\r\n                            if (isMediaStart) {\r\n                                stopMedia();\r\n                                releasePlayer();\r\n                            }\r\n                            clearData(dialog);\r\n                        case MotionEvent.ACTION_CANCEL: {\r\n                            Button views = (Button) view1;\r\n                            views.getBackground().clearColorFilter();\r\n                            views.invalidate();\r\n                            break;\r\n                        }\r\n                    }\r\n                    return true;\r\n                });\r\n\r\n                tvGoBack.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View v) {\r\n                        dialog.hide();\r\n                    }\r\n                });\r\n                dialog.show();\r\n                dialog.setCancelable(false);\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        });\r\n        return view;\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        comefromDownload = \"0\";\r\n        profileViewData(getActivity());\r\n    }\r\n\r\n    void clearData(Dialog dialog) {\r\n        DeleteCall();\r\n        SharedPreferences sharedPreferences2 = getActivity().getSharedPreferences(CONSTANTS.Token, Context.MODE_PRIVATE);\r\n        String fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n        if (TextUtils.isEmpty(fcm_id)) {\r\n            FirebaseInstanceId.getInstance().getInstanceId().addOnSuccessListener(getActivity(), new OnSuccessListener<InstanceIdResult>() {\r\n                @Override\r\n                public void onSuccess(InstanceIdResult instanceIdResult) {\r\n                    String newToken = instanceIdResult.getToken();\r\n                    Log.e(\"newToken\", newToken);\r\n                    SharedPreferences.Editor editor = getActivity().getSharedPreferences(CONSTANTS.Token, Context.MODE_PRIVATE).edit();\r\n                    editor.putString(CONSTANTS.Token, newToken); //Friend\r\n                    editor.apply();\r\n                    editor.commit();\r\n                }\r\n            });\r\n            fcm_id = sharedPreferences2.getString(CONSTANTS.Token, \"\");\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<LogoutModel> listCall = APIClient.getClient().getLogout(UserID, fcm_id, CONSTANTS.FLAG_ONE);\r\n            listCall.enqueue(new Callback<LogoutModel>() {\r\n                @Override\r\n                public void onResponse(Call<LogoutModel> call, Response<LogoutModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        LogoutModel loginModel = response.body();\r\n                        dialog.hide();\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                            return;\r\n                        }\r\n                        mLastClickTime = SystemClock.elapsedRealtime();\r\n                        Intent i = new Intent(getActivity(), LoginActivity.class);\r\n                        startActivity(i);\r\n                    } else {\r\n                        BWSApplication.showToast(response.message(), getActivity());\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<LogoutModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    void DeleteCall() {\r\n        if (isMediaStart) {\r\n            stopMedia();\r\n            releasePlayer();\r\n        }\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGOUT, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editorcv = shared.edit();\r\n        editorcv.putString(CONSTANTS.PREF_KEY_LOGOUT_UserID, UserID);\r\n        editorcv.putString(CONSTANTS.PREF_KEY_LOGOUT_MobileNO, MobileNo);\r\n        editorcv.commit();\r\n\r\n        Log.e(\"Old UserId MobileNo\", UserID + \".....\" + MobileNo);\r\n\r\n        SharedPreferences preferences = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor edit = preferences.edit();\r\n        edit.remove(CONSTANTS.PREF_KEY_UserID);\r\n        edit.remove(CONSTANTS.PREF_KEY_MobileNo);\r\n        edit.remove(CONSTANTS.PREF_KEY_ExpDate);\r\n        edit.remove(CONSTANTS.PREF_KEY_IsLock);\r\n        edit.clear();\r\n        edit.commit();\r\n        SharedPreferences preferencesx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editx = preferencesx.edit();\r\n        editx.remove(CONSTANTS.PREF_KEY_IsRepeat);\r\n        editx.remove(CONSTANTS.PREF_KEY_IsShuffle);\r\n        editx.clear();\r\n        editx.commit();\r\n        PRDownloader.cancel(downloadIdOne);\r\n        filename = \"\";\r\n        logout = true;\r\n        SharedPreferences preferences11 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor edit1 = preferences11.edit();\r\n        edit1.remove(CONSTANTS.PREF_KEY_DownloadName);\r\n        edit1.remove(CONSTANTS.PREF_KEY_DownloadUrl);\r\n        edit1.remove(CONSTANTS.PREF_KEY_DownloadPlaylistId);\r\n        edit1.clear();\r\n        edit1.commit();\r\n        SharedPreferences shareds = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_CardID, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shareds.edit();\r\n        editor.remove(CONSTANTS.PREF_KEY_CardID);\r\n        editor.clear();\r\n        editor.commit();\r\n\r\n        SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editorr = sharedm.edit();\r\n        editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n        editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n        editorr.remove(CONSTANTS.PREF_KEY_position);\r\n        editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n        editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n        editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n        editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n        editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n        editorr.clear();\r\n        editorr.commit();\r\n    }\r\n\r\n\r\n    void profileViewData(Context ctx) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<ProfileViewModel> listCall = APIClient.getClient().getProfileView(UserID);\r\n            listCall.enqueue(new Callback<ProfileViewModel>() {\r\n                @SuppressLint(\"SetTextI18n\")\r\n                @Override\r\n                public void onResponse(Call<ProfileViewModel> call, Response<ProfileViewModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        ProfileViewModel viewModel = response.body();\r\n                        binding.tvViewProfile.setVisibility(View.VISIBLE);\r\n\r\n                        if (viewModel.getResponseData().getName().equalsIgnoreCase(\"\") ||\r\n                                viewModel.getResponseData().getName().equalsIgnoreCase(\" \") ||\r\n                                viewModel.getResponseData().getName() == null) {\r\n                            binding.tvName.setText(R.string.Guest);\r\n                        } else {\r\n                            binding.tvName.setText(viewModel.getResponseData().getName());\r\n                        }\r\n                        if (viewModel.getResponseData().getName().equalsIgnoreCase(\"\")) {\r\n                            String Letter = \"G\";\r\n                            String profilePicPath = viewModel.getResponseData().getImage();\r\n                            IsLock = viewModel.getResponseData().getIsLock();\r\n                            if (profilePicPath.equalsIgnoreCase(\"\")) {\r\n                                binding.civProfile.setVisibility(View.GONE);\r\n                                binding.rlLetter.setVisibility(View.VISIBLE);\r\n                                binding.tvLetter.setText(Letter);\r\n                            } else {\r\n                                binding.civProfile.setVisibility(View.VISIBLE);\r\n                                binding.rlLetter.setVisibility(View.GONE);\r\n                                Glide.with(ctx).load(profilePicPath).thumbnail(1f).dontAnimate().into(binding.civProfile);\r\n                            }\r\n                        } else {\r\n                            String Name = viewModel.getResponseData().getName();\r\n                            String Letter = Name.substring(0, 1);\r\n                            String profilePicPath = viewModel.getResponseData().getImage();\r\n                            IsLock = viewModel.getResponseData().getIsLock();\r\n                            if (profilePicPath.equalsIgnoreCase(\"\")) {\r\n                                binding.civProfile.setVisibility(View.GONE);\r\n                                binding.rlLetter.setVisibility(View.VISIBLE);\r\n                                binding.tvLetter.setText(Letter);\r\n                            } else {\r\n                                binding.civProfile.setVisibility(View.VISIBLE);\r\n                                binding.rlLetter.setVisibility(View.GONE);\r\n                                Glide.with(ctx).load(profilePicPath).thumbnail(1f).dontAnimate().into(binding.civProfile);\r\n                            }\r\n                        }\r\n\r\n\r\n                        binding.llUserProfile.setOnClickListener(view13 -> {\r\n//                            if (viewModel.getResponseData().getPatientid().equalsIgnoreCase(\"1\")){\r\n                            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                                return;\r\n                            }\r\n                            mLastClickTime = SystemClock.elapsedRealtime();\r\n                            Intent i = new Intent(getActivity(), UserProfileActivity.class);\r\n                            startActivity(i);\r\n                           /* }else if (viewModel.getResponseData().getPatientid().equalsIgnoreCase(\"0\")) {\r\n                                final Dialog dialog = new Dialog(ctx);\r\n                                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                dialog.setContentView(R.layout.patient_popup);\r\n                                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                final RelativeLayout rlGoBack = dialog.findViewById(R.id.rlGoBack);\r\n                                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                        dialog.dismiss();\r\n                                        return true;\r\n                                    }\r\n                                    return false;\r\n                                });\r\n\r\n                                rlGoBack.setOnClickListener(v -> {\r\n                                    dialog.dismiss();\r\n                                });\r\n                                dialog.show();\r\n                                dialog.setCancelable(false);\r\n                            }*/\r\n                        });\r\n\r\n                        if (viewModel.getResponseData().getOrderTotal().equalsIgnoreCase(\"\")) {\r\n                            binding.tvCrtPlan.setText(\"Premium Team Plan one\");\r\n                        } else {\r\n                            if (viewModel.getResponseData().getPlanperiod().equalsIgnoreCase(\"\")) {\r\n                                binding.tvCrtPlan.setText(\"Current plan: \" + viewModel.getResponseData().getOrderTotal());\r\n                            } else {\r\n                                binding.tvCrtPlan.setText(\"Current plan: \" + viewModel.getResponseData().getOrderTotal() + \" / \" +\r\n                                        viewModel.getResponseData().getPlanperiod());\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<ProfileViewModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Account/AccountFragment.java	(revision 566ec12fd5320c1b290efa33dff572f80c54b5d8)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Account/AccountFragment.java	(date 1604898499464)
@@ -70,6 +70,7 @@
 import static com.brainwellnessspa.Utility.MusicService.mediaPlayer;
 import static com.brainwellnessspa.Utility.MusicService.releasePlayer;
 import static com.brainwellnessspa.Utility.MusicService.stopMedia;
+import static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;
 
 public class AccountFragment extends Fragment {
     public static String IsLock = "";
@@ -247,6 +248,7 @@
     @Override
     public void onResume() {
         super.onResume();
+        ComeScreenAccount = 1;
         comefromDownload = "0";
         profileViewData(getActivity());
     }
Index: app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DownloadModule.Activities;\r\n\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ProgressBar;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.fragment.app.FragmentStatePagerAdapter;\r\n\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DownloadModule.Fragments.AudioDownloadsFragment;\r\nimport com.brainwellnessspa.DownloadModule.Fragments.PlaylistsDownlaodsFragment;\r\nimport com.brainwellnessspa.DownloadModule.Models.DownloadlistModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityDownloadsBinding;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\nimport static com.brainwellnessspa.DownloadModule.Activities.DownloadPlaylistActivity.comeDeletePlaylist;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\n\r\npublic class DownloadsActivity extends AppCompatActivity {\r\n    ActivityDownloadsBinding binding;\r\n    ArrayList<DownloadlistModel.Audio> audioList;\r\n    ArrayList<DownloadlistModel.Playlist> playlistList;\r\n    String UserID, AudioFlag;\r\n    public static boolean ComeFrom_Playlist = false;\r\n    Context ctx;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_downloads);\r\n        ctx = DownloadsActivity.this;\r\n        ComeScreenAccount = 0;\r\n        SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared2.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            comefromDownload = \"0\";\r\n            ComeScreenAccount = 1;\r\n            finish();\r\n        });\r\n        prepareData();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        comefromDownload = \"0\";\r\n        ComeScreenAccount = 1;\r\n        finish();\r\n    }\r\n\r\n    public void prepareData() {\r\n        callMembershipMediaPlayer();\r\n/*        if (BWSApplication.isNetworkConnected(this)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<DownloadlistModel> listCall = APIClient.getClient().getDownloadlistPlaylist(UserID);\r\n            listCall.enqueue(new Callback<DownloadlistModel>() {\r\n                @Override\r\n                public void onResponse(Call<DownloadlistModel> call, Response<DownloadlistModel> response) {\r\n                    if (response.isSuccessful()) {*/\r\n//                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n\r\n        audioList = new ArrayList<>();\r\n        playlistList = new ArrayList<>();\r\n\r\n\r\n//                        audioList = listModel.getResponseData().getAudio();\r\n//                        playlistList = listModel.getResponseData().getPlaylist();\r\n        binding.viewPager.setOffscreenPageLimit(2);\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(\"Audios\"));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(\"Playlists\"));\r\n        binding.tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);\r\n\r\n        TabAdapter adapter = new TabAdapter(getSupportFragmentManager(), ctx, binding.tabLayout.getTabCount(),\r\n                UserID, binding.progressBarHolder, binding.progressBar);\r\n        binding.viewPager.setAdapter(adapter);\r\n        binding.viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(binding.tabLayout));\r\n        if (ComeFrom_Playlist) {\r\n            binding.viewPager.setCurrentItem(1);\r\n            ComeFrom_Playlist = false;\r\n        } else {\r\n            binding.viewPager.setCurrentItem(0);\r\n        }\r\n        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                binding.viewPager.setCurrentItem(tab.getPosition());\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public void prepareData1() {\r\n        callMembershipMediaPlayer();\r\n    }\r\n\r\n    private void callMembershipMediaPlayer() {\r\n        try {\r\n            SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n                } else {\r\n                    SharedPreferences sharedm = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if (isMediaStart) {\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if (isMediaStart) {\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared22 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared22.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                comefromDownload = \"1\";\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public class TabAdapter extends FragmentStatePagerAdapter {\r\n        int totalTabs;\r\n        String UserID;\r\n        FrameLayout progressBarHolder;\r\n        ProgressBar ImgV;\r\n        private Context myContext;\r\n\r\n        public TabAdapter(FragmentManager fm, Context myContext, int totalTabs, String UserID, FrameLayout progressBarHolder, ProgressBar ImgV) {\r\n            super(fm);\r\n            this.myContext = myContext;\r\n            this.totalTabs = totalTabs;\r\n            this.UserID = UserID;\r\n            this.progressBarHolder = progressBarHolder;\r\n            this.ImgV = ImgV;\r\n        }\r\n\r\n        @Override\r\n        public Fragment getItem(int position) {\r\n            switch (position) {\r\n                case 0:\r\n                    Bundle bundle = new Bundle();\r\n                    AudioDownloadsFragment audioDownloadsFragment = new AudioDownloadsFragment();\r\n                    bundle.putString(\"UserID\", UserID);\r\n//                    bundle.putParcelableArrayList(\"audioDownloadsFragment\", audioList);\r\n                    audioDownloadsFragment.setArguments(bundle);\r\n                    return audioDownloadsFragment;\r\n                case 1:\r\n                    bundle = new Bundle();\r\n                    PlaylistsDownlaodsFragment playlistsDownlaodsFragment = new PlaylistsDownlaodsFragment();\r\n                    bundle.putString(\"UserID\", UserID);\r\n//                    bundle.putParcelableArrayList(\"playlistsDownlaodsFragment\", playlistList);\r\n                    playlistsDownlaodsFragment.setArguments(bundle);\r\n                    return playlistsDownlaodsFragment;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getCount() {\r\n            return totalTabs;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        prepareData1();\r\n        if (comeDeletePlaylist == 1) {\r\n            prepareData1();\r\n            comeDeletePlaylist = 0;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadsActivity.java	(revision 566ec12fd5320c1b290efa33dff572f80c54b5d8)
+++ app/src/main/java/com/brainwellnessspa/DownloadModule/Activities/DownloadsActivity.java	(date 1604898499479)
@@ -50,14 +50,15 @@
         binding = DataBindingUtil.setContentView(this, R.layout.activity_downloads);
         ctx = DownloadsActivity.this;
         ComeScreenAccount = 0;
+        comefromDownload = "1";
         SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);
         UserID = (shared2.getString(CONSTANTS.PREF_KEY_UserID, ""));
         SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
         AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
 
         binding.llBack.setOnClickListener(view -> {
-            comefromDownload = "0";
             ComeScreenAccount = 1;
+            comefromDownload = "0";
             finish();
         });
         prepareData();
@@ -65,8 +66,8 @@
 
     @Override
     public void onBackPressed() {
-        comefromDownload = "0";
         ComeScreenAccount = 1;
+        comefromDownload = "0";
         finish();
     }
 
Index: app/src/main/java/com/brainwellnessspa/LikeModule/Activities/LikeActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.LikeModule.Activities;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.fragment.app.FragmentStatePagerAdapter;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\n\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity;\r\nimport com.brainwellnessspa.LikeModule.Fragments.LikeAudiosFragment;\r\nimport com.brainwellnessspa.LikeModule.Fragments.LikePlaylistsFragment;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityLikeBinding;\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Callback;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class LikeActivity extends AppCompatActivity {\r\n    ActivityLikeBinding binding;\r\n    Activity activity;\r\n    String AudioFlag, UserID;\r\n    Context ctx;\r\n    public static boolean ComeFrom_LikePlaylist = false;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_like);\r\n        activity = LikeActivity.this;\r\n        ctx = LikeActivity.this;\r\n        ComeScreenAccount = 0;\r\n        SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared2.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        binding.llBack.setOnClickListener(view -> {\r\n            comefromDownload = \"0\";\r\n            ComeScreenAccount = 1;\r\n            finish();\r\n        });\r\n        if (ComeFrom_LikePlaylist) {\r\n            binding.viewPager.setCurrentItem(1);\r\n            ComeFrom_LikePlaylist = false;\r\n        } else {\r\n            binding.viewPager.setCurrentItem(0);\r\n        }\r\n        prepareData();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        RefreshData();\r\n    }\r\n\r\n    public void RefreshData() {\r\n        callMembershipMediaPlayer();\r\n    }\r\n\r\n    private void callMembershipMediaPlayer() {\r\n        try {\r\n            SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n                } else {\r\n                    SharedPreferences sharedm = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if (isMediaStart) {\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if (isMediaStart) {\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared22 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared22.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                comefromDownload = \"1\";\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void prepareData() {\r\n        callMembershipMediaPlayer();\r\n        binding.viewPager.setOffscreenPageLimit(2);\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(\"Audios\"));\r\n        binding.tabLayout.addTab(binding.tabLayout.newTab().setText(\"Playlists\"));\r\n        binding.tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);\r\n        TabAdapter adapter = new TabAdapter(getSupportFragmentManager(), ctx, binding.tabLayout.getTabCount());\r\n        binding.viewPager.setAdapter(adapter);\r\n        binding.viewPager.addOnPageChangeListener(new TabLayout.TabLayoutOnPageChangeListener(binding.tabLayout));\r\n\r\n        binding.tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                binding.viewPager.setCurrentItem(tab.getPosition());\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        comefromDownload = \"0\";\r\n        ComeScreenAccount = 1;\r\n        finish();\r\n    }\r\n\r\n    public class TabAdapter extends FragmentStatePagerAdapter {\r\n        int totalTabs;\r\n        private Context myContext;\r\n        Callback<LikesHistoryModel> likesHistoryModelCallback;\r\n\r\n        public TabAdapter(FragmentManager fm, Context myContext, int totalTabs) {\r\n            super(fm);\r\n            this.myContext = myContext;\r\n            this.totalTabs = totalTabs;\r\n        }\r\n\r\n        public TabAdapter(FragmentManager fm, Callback<LikesHistoryModel> likesHistoryModelCallback, int totalTabs) {\r\n            super(fm);\r\n            this.likesHistoryModelCallback = likesHistoryModelCallback;\r\n            this.totalTabs = totalTabs;\r\n        }\r\n\r\n        @Override\r\n        public Fragment getItem(int position) {\r\n            switch (position) {\r\n                case 0:\r\n                    LikeAudiosFragment likeAudiosFragment = new LikeAudiosFragment();\r\n                    Bundle bundle = new Bundle();\r\n                    likeAudiosFragment.setArguments(bundle);\r\n                    return likeAudiosFragment;\r\n                case 1:\r\n                    LikePlaylistsFragment likePlaylistsFragment = new LikePlaylistsFragment();\r\n                    bundle = new Bundle();\r\n                    likePlaylistsFragment.setArguments(bundle);\r\n                    return likePlaylistsFragment;\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getCount() {\r\n            return totalTabs;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LikeModule/Activities/LikeActivity.java	(revision 566ec12fd5320c1b290efa33dff572f80c54b5d8)
+++ app/src/main/java/com/brainwellnessspa/LikeModule/Activities/LikeActivity.java	(date 1604898702295)
@@ -54,6 +54,7 @@
         activity = LikeActivity.this;
         ctx = LikeActivity.this;
         ComeScreenAccount = 0;
+        comefromDownload = "1";
         SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);
         UserID = (shared2.getString(CONSTANTS.PREF_KEY_UserID, ""));
         binding.llBack.setOnClickListener(view -> {
@@ -73,6 +74,8 @@
     @Override
     protected void onResume() {
         super.onResume();
+        ComeScreenAccount = 0;
+        comefromDownload = "1";
         RefreshData();
     }
 
