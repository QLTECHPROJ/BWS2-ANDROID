Index: app/src/main/res/layout/fragment_sessions.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        xmlns:tools=\"http://schemas.android.com/tools\"\r\n        android:id=\"@+id/flSession\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/white\">\r\n\r\n        <androidx.core.widget.NestedScrollView\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:overScrollMode=\"never\">\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:orientation=\"vertical\">\r\n\r\n                <RelativeLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"@dimen/_200sdp\">\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ivRestaurantImage\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:scaleType=\"fitXY\" />\r\n\r\n                    <RelativeLayout\r\n                        android:id=\"@+id/rlLayout\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"@dimen/_56sdp\"\r\n                        android:layout_marginTop=\"@dimen/_33sdp\">\r\n\r\n                        <LinearLayout\r\n                            android:id=\"@+id/llBack\"\r\n                            android:layout_width=\"42dp\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_centerVertical=\"true\"\r\n                            android:gravity=\"center\">\r\n\r\n                            <ImageView\r\n                                android:layout_width=\"wrap_content\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:src=\"@drawable/ic_left_arrow_icon\"\r\n                                app:tint=\"@color/white\" />\r\n\r\n                        </LinearLayout>\r\n\r\n                        <TextView\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_centerVertical=\"true\"\r\n                            android:fontFamily=\"@font/montserrat_bold\"\r\n                            android:gravity=\"center\"\r\n                            android:textColor=\"@color/black\"\r\n                            android:textSize=\"@dimen/_15sdp\"\r\n                            android:visibility=\"gone\" />\r\n\r\n                    </RelativeLayout>\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvSessionTitle\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_alignParentBottom=\"true\"\r\n                        android:background=\"@drawable/transparent_gradient\"\r\n                        android:ellipsize=\"end\"\r\n                        android:fontFamily=\"@font/montserrat_bold\"\r\n                        android:gravity=\"start\"\r\n                        android:maxLines=\"2\"\r\n                        android:paddingHorizontal=\"@dimen/_16sdp\"\r\n                        android:paddingBottom=\"@dimen/_16sdp\"\r\n                        android:textColor=\"@color/white\"\r\n                        android:textSize=\"@dimen/_22sdp\" />\r\n\r\n                </RelativeLayout>\r\n\r\n                <TextView\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginLeft=\"@dimen/_16sdp\"\r\n                    android:layout_marginTop=\"@dimen/_20sdp\"\r\n                    android:layout_marginRight=\"@dimen/_16sdp\"\r\n                    android:fontFamily=\"@font/montserrat_bold\"\r\n                    android:gravity=\"start\"\r\n                    android:text=\"@string/Session\"\r\n                    android:textColor=\"@color/black\"\r\n                    android:textSize=\"@dimen/_15sdp\" />\r\n\r\n                <LinearLayout\r\n                    android:id=\"@+id/llSpace\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\">\r\n\r\n                    <androidx.recyclerview.widget.RecyclerView\r\n                        android:id=\"@+id/rvSessionList\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:paddingBottom=\"@dimen/_39sdp\"\r\n                        android:overScrollMode=\"never\" />\r\n                </LinearLayout>\r\n            </LinearLayout>\r\n        </androidx.core.widget.NestedScrollView>\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:gravity=\"center\"\r\n            android:padding=\"@dimen/_60sdp\">\r\n\r\n            <ProgressBar\r\n                android:id=\"@+id/progressBar\"\r\n                android:layout_width=\"@dimen/_50sdp\"\r\n                android:layout_height=\"@dimen/_50sdp\"\r\n                android:indeterminateTint=\"@color/blue\"\r\n                android:scaleType=\"centerInside\"\r\n                android:visibility=\"gone\" />\r\n\r\n        </LinearLayout>\r\n\r\n        <FrameLayout\r\n            android:id=\"@+id/progressBarHolder\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:alpha=\"0.4\"\r\n            android:animateLayoutChanges=\"true\"\r\n            android:background=\"#C0000000\"\r\n            android:visibility=\"gone\" />\r\n    </FrameLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_sessions.xml	(revision 510d8cd2fb59985c09c29f96bb961eb80aa3cdfc)
+++ app/src/main/res/layout/fragment_sessions.xml	(date 1602751099567)
@@ -3,11 +3,11 @@
 
     <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
         xmlns:app="http://schemas.android.com/apk/res-auto"
-        xmlns:tools="http://schemas.android.com/tools"
         android:id="@+id/flSession"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:background="@color/white">
+        android:background="@color/white"
+        android:clickable="true">
 
         <androidx.core.widget.NestedScrollView
             android:layout_width="match_parent"
@@ -27,19 +27,20 @@
                         android:id="@+id/ivRestaurantImage"
                         android:layout_width="match_parent"
                         android:layout_height="match_parent"
+                        android:clickable="false"
                         android:scaleType="fitXY" />
 
                     <RelativeLayout
                         android:id="@+id/rlLayout"
                         android:layout_width="match_parent"
-                        android:layout_height="@dimen/_56sdp"
-                        android:layout_marginTop="@dimen/_33sdp">
+                        android:layout_height="@dimen/_90sdp"
+                        android:paddingTop="@dimen/_33sdp">
 
                         <LinearLayout
                             android:id="@+id/llBack"
                             android:layout_width="42dp"
                             android:layout_height="match_parent"
-                            android:layout_centerVertical="true"
+                            android:layout_alignParentBottom="true"
                             android:gravity="center">
 
                             <ImageView
@@ -53,7 +54,7 @@
                         <TextView
                             android:layout_width="match_parent"
                             android:layout_height="wrap_content"
-                            android:layout_centerVertical="true"
+                            android:layout_alignParentBottom="true"
                             android:fontFamily="@font/montserrat_bold"
                             android:gravity="center"
                             android:textColor="@color/black"
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Playlist;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Filter;\r\nimport android.widget.Filterable;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.ItemTouchHelper;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardModel;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ReminderStatusPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Search.SearchFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.ReminderModule.Activities.ReminderActivity;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.ItemMoveCallback;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.StartDragListener;\r\nimport com.brainwellnessspa.databinding.FragmentMyPlaylistsBinding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenReminder;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity.MyPlaylistId;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity.addToPlayList;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.ComeFindAudio;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.comeRename;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.deleteFrg;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.ViewAllPlaylistFragment.GetPlaylistLibraryID;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isRemoved;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.newClick;\r\nimport static com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity.ComeFrom_Playlist;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadProgress;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class MyPlaylistsFragment extends Fragment implements StartDragListener {\r\n    public static int RefreshIconData = 0;\r\n    public static String RefreshNew = \"\";\r\n    public static int disclaimerPlayed = 0;\r\n    FragmentMyPlaylistsBinding binding;\r\n    String UserID, New, PlaylistID, PlaylistName = \"\", PlaylistImage, SearchFlag, MyDownloads = \"\", AudioFlag;\r\n    int RefreshIcon;\r\n    PlayListsAdpater adpater;\r\n    PlayListsAdpater2 adpater2;\r\n    View view;\r\n    EditText searchEditText;\r\n    ArrayList<String> changedAudio;\r\n    Activity activity;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongsList;\r\n    List<DownloadAudioDetails> oneAudioDetailsList, playlistWiseAudioDetails;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    DownloadPlaylistDetails downloadPlaylistDetails;\r\n    Dialog dialog;\r\n    List<String> fileNameList, playlistDownloadId, remainAudio;\r\n    ItemTouchHelper touchHelper;\r\n    Runnable UpdateSongTime2;\r\n    int SongListSize = 0, count;\r\n    private Handler handler1, handler2;\r\n//    private Runnable UpdateSongTime1 = new Runnable() {\r\n//        @Override\r\n//        public void run() {\r\n//            getMediaByPer(PlaylistID,SongListSize);\r\n//\r\n///*            if (fileNameList.size() != 0) {\r\n//                if (remainAudio.size() <= SongListSize) {\r\n//                    int total = SongListSize;\r\n//                    int remain = remainAudio.size();\r\n//                    int complate = total - remain;\r\n//                    long progressPercent = complate * 100 / total;\r\n//                    int downloadProgress1 = (int) progressPercent;\r\n//                    if (SongListSize == 1) {\r\n//                        if (downloadProgress <= 100) {\r\n//                            binding.pbProgress.setProgress(downloadProgress);\r\n//                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n//                            binding.ivDownloads.setVisibility(View.GONE);\r\n//                            if (downloadProgress == 100) {\r\n//                                getDownloadData();\r\n//                            }\r\n//                        }\r\n//                    } else if (downloadProgress1 <= 100) {\r\n//                        if (downloadProgress1 == 100) {\r\n//                            getDownloadData();\r\n//                            binding.pbProgress.setVisibility(View.GONE);\r\n//                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n//                        } else {\r\n//                            binding.pbProgress.setProgress(downloadProgress1);\r\n//                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n//                            binding.ivDownloads.setVisibility(View.GONE);\r\n//                        }\r\n//                    } else {\r\n//                        binding.pbProgress.setVisibility(View.GONE);\r\n//                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n//                    }\r\n//                }\r\n//                getDownloadData();\r\n//                handler1.postDelayed(this, 500);\r\n//            }else {\r\n//                binding.pbProgress.setVisibility(View.GONE);\r\n//                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                handler1.removeCallbacks(UpdateSongTime1);\r\n//                getDownloadData();\r\n//            }*/\r\n//            handler1.postDelayed(this, 500);\r\n//        }\r\n//    };\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_playlists, container, false);\r\n        view = binding.getRoot();\r\n//        handler1 = new Handler();\r\n        handler2 = new Handler();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        activity = getActivity();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        fileNameList = new ArrayList<>();\r\n        playlistDownloadId = new ArrayList<>();\r\n//        remainAudio = new ArrayList<>();\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        playlistSongsList = new ArrayList<>();\r\n        changedAudio = new ArrayList<>();\r\n        if (getArguments() != null) {\r\n            New = getArguments().getString(\"New\");\r\n            PlaylistID = getArguments().getString(\"PlaylistID\");\r\n            PlaylistName = getArguments().getString(\"PlaylistName\");\r\n            PlaylistImage = getArguments().getString(\"PlaylistImage\");\r\n            MyDownloads = getArguments().getString(\"MyDownloads\");\r\n        }\r\n\r\n        binding.llBack.setOnClickListener(view1 -> callBack());\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity()) && !MyDownloads.equalsIgnoreCase(\"1\")) {\r\n            binding.llMore.setVisibility(View.VISIBLE);\r\n            binding.llMore.setClickable(true);\r\n            binding.llMore.setEnabled(true);\r\n            binding.ivMore.setImageResource(R.drawable.ic_menu_icon);\r\n            binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            binding.llMore.setVisibility(View.VISIBLE);\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setImageResource(R.drawable.ic_menu_icon);\r\n            binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n        }\r\n\r\n        binding.llMore.setOnClickListener(view13 -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            handler2.removeCallbacks(UpdateSongTime2);\r\n            Intent i = new Intent(getActivity(), MyPlaylistActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            startActivity(i);\r\n\r\n        });\r\n\r\n        binding.tvSearch.setOnClickListener(view14 -> {\r\n            Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            startActivity(i);\r\n        });\r\n\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        searchClear(searchEditText);\r\n\r\n        closeButton.setOnClickListener(v -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                binding.searchView.clearFocus();\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                if (searchEditText.getText().toString().equalsIgnoreCase(\"\")) {\r\n\r\n                } else {\r\n                    try {\r\n                        if (adpater2 != null) {\r\n                            adpater2.getFilter().filter(search);\r\n                            SearchFlag = search;\r\n                            Log.e(\"searchsearch\", \"\" + search);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n        RecyclerView.LayoutManager playList = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists.setLayoutManager(playList);\r\n        binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        binding.llDownloads.setOnClickListener(view1 -> {\r\n            callDownload(\"\", \"\", \"\", playlistSongsList, 0, binding.llDownloads, binding.ivDownloads);\r\n        });\r\n\r\n        RefreshNew = New;\r\n        if (New.equalsIgnoreCase(\"1\")) {\r\n            binding.llAddAudio.setVisibility(View.VISIBLE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.INVISIBLE);\r\n            binding.llListing.setVisibility(View.GONE);\r\n            binding.btnAddAudio.setOnClickListener(view -> {\r\n                Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n                i.putExtra(\"PlaylistID\", PlaylistID);\r\n                startActivity(i);\r\n            });\r\n        } else if (New.equalsIgnoreCase(\"0\")) {\r\n            binding.llAddAudio.setVisibility(View.GONE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n            binding.llListing.setVisibility(View.VISIBLE);\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n        return view;\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail(String download) {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadPlaylistDetailsList.size() != 0 /*New.equalsIgnoreCase(\"1\") ||*/) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (RefreshIcon == 0) {\r\n                    enableDisableDownload(false, \"gray\");\r\n                } else if (download.equalsIgnoreCase(\"1\") /* New.equalsIgnoreCase(\"1\") ||*/) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (download.equalsIgnoreCase(\"0\") || download.equalsIgnoreCase(\"\") ||\r\n                        New.equalsIgnoreCase(\"0\") || RefreshIcon != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail2() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n   /*\r\n                    \"PlaylistDesc\": \"When life gets tough and you struggle through the days, download the Ultimate Self-development Bundle to help you in finding a new appreciation for life. Everyone can use a little help in all areas of their lives at times. There are 12 programs aimed to help your self-development:\",\r\n                    \"PlaylistMastercat\": \"Self-development\",\r\n                    \"PlaylistSubcat\": \"Self-expression, Focus, Discipline, Self-love, Mindset, Passion, Enthusiasm, Gratitude, Self-doubt, Inner Strength \",\r\n                    \"PlaylistImage\": \"https://brainwellnessspa.com.au/wp-content/uploads/2018/06/Ultimate self development bundle.jpg\",\r\n                    \"PlaylistSongs \" */\r\n                downloadAudioDetailsList = GetAllMedia();\r\n                playlistWiseAudioDetails = GetMedia();\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private void enableDisableDownload(boolean b, String color) {\r\n        if (b) {\r\n            binding.llDownloads.setClickable(true);\r\n            binding.llDownloads.setEnabled(true);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            binding.llDownloads.setClickable(false);\r\n            binding.llDownloads.setEnabled(false);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            if (color.equalsIgnoreCase(\"gray\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            } else if (color.equalsIgnoreCase(\"orange\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetAllMedia() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData1();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        view.setFocusableInTouchMode(true);\r\n        view.requestFocus();\r\n        view.setOnKeyListener((v, keyCode, event) -> {\r\n            binding.searchView.clearFocus();\r\n            if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                callBack();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        super.onResume();\r\n        if (deleteFrg == 1) {\r\n            callBack();\r\n            deleteFrg = 0;\r\n        } else if (addToPlayList) {\r\n            PlaylistID = MyPlaylistId;\r\n            prepareData(UserID, MyPlaylistId);\r\n            addToPlayList = false;\r\n        } else {\r\n            prepareData(UserID, PlaylistID);\r\n        }/* else if (addToSearch) {\r\n            prepareData(UserID, MyPlaylistIds);\r\n            addToSearch = false;\r\n        }*/\r\n        if (comeRename == 1) {\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n    }\r\n\r\n    private void callBack() {\r\n        binding.searchView.clearFocus();\r\n        if (comefrom_search == 2) {\r\n            Bundle bundle = new Bundle();\r\n            Fragment playlistFragment = new ViewAllPlaylistFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, playlistFragment)\r\n                    .commit();\r\n            bundle.putString(\"GetLibraryID\", GetPlaylistLibraryID);\r\n            bundle.putString(\"MyDownloads\", MyDownloads);\r\n            playlistFragment.setArguments(bundle);\r\n//            comefrom_search = 0;\r\n        } else if (comefrom_search == 1) {\r\n            Fragment fragment = new SearchFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, fragment)\r\n                    .commit();\r\n            comefrom_search = 0;\r\n        } else if (comefrom_search == 0) {\r\n            Fragment fragment = new PlaylistFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, fragment)\r\n                    .commit();\r\n            comefrom_search = 0;\r\n        } else if (comefrom_search == 3) {\r\n            Intent i = new Intent(getActivity(), DownloadsActivity.class);\r\n            ComeFrom_Playlist = true;\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            startActivity(i);\r\n            getActivity().finish();\r\n//            comefrom_search = 0;\r\n        }\r\n    }\r\n\r\n    private void searchClear(EditText searchEditText) {\r\n        if (ComeFindAudio == 1) {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n            ComeFindAudio = 0;\r\n        } else if (ComeFindAudio == 2) {\r\n            binding.searchView.requestFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n            ComeFindAudio = 0;\r\n        }\r\n\r\n    }\r\n\r\n    private void prepareData(String UserId, String PlaylistId) {\r\n        if (comefrom_search == 3) {\r\n            binding.llExtra.setVisibility(View.VISIBLE);\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(10, 8, 10, 260);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n\r\n        searchClear(searchEditText);\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        try {\r\n            if (IsLock.equalsIgnoreCase(\"1\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n            }\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                callAddTransFrag();\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                params.setMargins(10, 8, 10, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                params.setMargins(10, 8, 10, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            if (!MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                Call<SubPlayListModel> listCall = APIClient.getClient().getSubPlayLists(UserId, PlaylistId);\r\n                listCall.enqueue(new Callback<SubPlayListModel>() {\r\n                    @SuppressLint(\"ClickableViewAccessibility\")\r\n                    @Override\r\n                    public void onResponse(Call<SubPlayListModel> call, Response<SubPlayListModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                            SubPlayListModel listModel = response.body();\r\n                            try {\r\n                                if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"0\") ||\r\n                                        listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n\r\n                                } else if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"1\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                                }\r\n                            } catch (Exception e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                            getDownloadData();\r\n                            SongListSize = listModel.getResponseData().getPlaylistSongs().size();\r\n                            getMediaByPer(PlaylistId, SongListSize);\r\n                            if (listModel.getResponseData().getCreated().equalsIgnoreCase(\"1\")) {\r\n                                searchEditText.setHint(R.string.playlist_or_audio_search);\r\n                                binding.tvSearch.setHint(R.string.playlist_or_audio_search);\r\n//                                binding.tvSearch.setTextSize(14);\r\n                            } else {\r\n                                searchEditText.setHint(\"Search for audios\");\r\n                                binding.tvSearch.setHint(\"Search for audios\");\r\n                            }\r\n                            binding.rlSearch.setVisibility(View.VISIBLE);\r\n                            binding.llMore.setVisibility(View.VISIBLE);\r\n                            binding.llReminder.setVisibility(View.VISIBLE);\r\n                            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n                            binding.tvTag.setText(R.string.Audios_in_Playlist);\r\n                            binding.llReminder.setOnClickListener(view -> {\r\n                                if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"0\") ||\r\n                                        listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n                                    Intent i = new Intent(getActivity(), ReminderActivity.class);\r\n                                    ComeScreenReminder = 0;\r\n                                    i.putExtra(\"ComeFrom\", \"1\");\r\n                                    i.putExtra(\"PlaylistID\", PlaylistID);\r\n                                    i.putExtra(\"PlaylistName\", listModel.getResponseData().getPlaylistName());\r\n                                    i.putExtra(\"Time\", listModel.getResponseData().getReminderTime());\r\n                                    i.putExtra(\"Day\", listModel.getResponseData().getReminderDay());\r\n                                    startActivity(i);\r\n                                } else if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"1\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                                    dialog = new Dialog(activity);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.delete_payment_card);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(activity.getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                                    final TextView tvSubTitle = dialog.findViewById(R.id.tvSubTitle);\r\n                                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                                    final Button Btn = dialog.findViewById(R.id.Btn);\r\n                                    tvTitle.setText(\"Reminder off\");\r\n                                    tvSubTitle.setText(\"Are you sure you want to reminder off ?\");\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n                                    Btn.setOnTouchListener((view1, event) -> {\r\n                                        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                                            switch (event.getAction()) {\r\n                                                case MotionEvent.ACTION_DOWN: {\r\n                                                    Button views = (Button) view1;\r\n                                                    views.getBackground().setColorFilter(0x77000000, PorterDuff.Mode.SRC_ATOP);\r\n                                                    view1.invalidate();\r\n                                                    break;\r\n                                                }\r\n                                                case MotionEvent.ACTION_UP:\r\n                                                    Call<ReminderStatusPlaylistModel> listCall1 = APIClient.getClient().getReminderStatusPlaylist(UserID, PlaylistID, \"0\");/*set 1 or not 0 */\r\n                                                    listCall1.enqueue(new Callback<ReminderStatusPlaylistModel>() {\r\n                                                        @Override\r\n                                                        public void onResponse(Call<ReminderStatusPlaylistModel> call1, Response<ReminderStatusPlaylistModel> response1) {\r\n                                                            if (response1.isSuccessful()) {\r\n                                                                ReminderStatusPlaylistModel listModel1 = response1.body();\r\n//                                                                prepareData(UserID, PlaylistID);\r\n                                                                listModel.getResponseData().setIsReminder(listModel1.getResponseData().getIsCheck());\r\n                                                                binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n                                                                dialog.dismiss();\r\n                                                                BWSApplication.showToast(listModel1.getResponseMessage(), activity);\r\n                                                            }\r\n                                                        }\r\n\r\n                                                        @Override\r\n                                                        public void onFailure(Call<ReminderStatusPlaylistModel> call1, Throwable t) {\r\n                                                        }\r\n                                                    });\r\n\r\n\r\n                                                case MotionEvent.ACTION_CANCEL: {\r\n                                                    Button views = (Button) view1;\r\n                                                    views.getBackground().clearColorFilter();\r\n                                                    views.invalidate();\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n                                        }\r\n\r\n                                        return true;\r\n                                    });\r\n\r\n                                    tvGoBack.setOnClickListener(v -> {\r\n                                        dialog.dismiss();\r\n                                    });\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n\r\n                                }\r\n                            });\r\n                            playlistSongsList = listModel.getResponseData().getPlaylistSongs();\r\n                            downloadPlaylistDetails = new DownloadPlaylistDetails();\r\n                            downloadPlaylistDetails.setPlaylistID(listModel.getResponseData().getPlaylistID());\r\n                            downloadPlaylistDetails.setPlaylistName(listModel.getResponseData().getPlaylistName());\r\n                            downloadPlaylistDetails.setPlaylistDesc(listModel.getResponseData().getPlaylistDesc());\r\n                            downloadPlaylistDetails.setIsReminder(listModel.getResponseData().getIsReminder());\r\n                            downloadPlaylistDetails.setPlaylistMastercat(listModel.getResponseData().getPlaylistMastercat());\r\n                            downloadPlaylistDetails.setPlaylistSubcat(listModel.getResponseData().getPlaylistSubcat());\r\n                            downloadPlaylistDetails.setPlaylistImage(listModel.getResponseData().getPlaylistImage());\r\n                            downloadPlaylistDetails.setTotalAudio(listModel.getResponseData().getTotalAudio());\r\n                            downloadPlaylistDetails.setTotalDuration(listModel.getResponseData().getTotalDuration());\r\n                            downloadPlaylistDetails.setTotalhour(listModel.getResponseData().getTotalhour());\r\n                            downloadPlaylistDetails.setTotalminute(listModel.getResponseData().getTotalminute());\r\n                            downloadPlaylistDetails.setCreated(listModel.getResponseData().getCreated());\r\n                            downloadPlaylistDetails.setDownload(listModel.getResponseData().getDownload());\r\n                            downloadPlaylistDetails.setLike(listModel.getResponseData().getLike());\r\n\r\n                            setData(listModel.getResponseData());\r\n                            downloadAudioDetailsList = GetAllMedia();\r\n                            downloadPlaylistDetailsList = GetPlaylistDetail(listModel.getResponseData().getDownload());\r\n                            playlistWiseAudioDetails = GetMedia();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<SubPlayListModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                });\r\n            } else {\r\n                downloadPlaylistDetailsList = GetPlaylistDetail2();\r\n            }\r\n        } else {\r\n            downloadPlaylistDetailsList = GetPlaylistDetail2();\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private void callAddTransFrag() {\r\n        Fragment fragment = new TransparentPlayerFragment();\r\n        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n        fragmentManager1.beginTransaction()\r\n                .add(R.id.flContainer, fragment)\r\n                .commit();\r\n    }\r\n\r\n    private void getMediaByPer(String playlistID, int totalAudio) {\r\n        class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                count = DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getCountDownloadProgress(\"Compete\", playlistID);\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                downloadPlaylistDetailsList = GetPlaylistDetail(downloadPlaylistDetails.getDownload());\r\n\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    if (count <= totalAudio) {\r\n                        if (count == totalAudio) {\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        } else {\r\n                            long progressPercent = count * 100 / totalAudio;\r\n                            int downloadProgress1 = (int) progressPercent;\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            binding.pbProgress.setProgress(downloadProgress1);\r\n                            getMediaByPer(playlistID, totalAudio);\r\n//                             handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getMediaByPer st = new getMediaByPer();\r\n        st.execute();\r\n    }\r\n\r\n    private void getDownloadData() {\r\n        try {\r\n            SharedPreferences sharedy = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n               /* remainAudio = new ArrayList<>();\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 0; i < fileNameList.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            remainAudio.add(playlistDownloadId.get(i));\r\n                        }\r\n                    }\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        if (remainAudio.size() < SongListSize) {\r\n                            handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    }\r\n                    //\r\n                } else {\r\n                    fileNameList = new ArrayList<>();\r\n                    playlistDownloadId = new ArrayList<>();\r\n                    remainAudio = new ArrayList<>();\r\n                }*/\r\n            } else {\r\n                fileNameList = new ArrayList<>();\r\n                playlistDownloadId = new ArrayList<>();\r\n//                remainAudio = new ArrayList<>();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void setData(SubPlayListModel.ResponseData listModel) {\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                5, 3, 1f, 0);\r\n        binding.ivBanner.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivBanner.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivBanner.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        if (listModel.getPlaylistName().equalsIgnoreCase(\"\") ||\r\n                listModel.getPlaylistName() == null) {\r\n            binding.tvLibraryName.setText(R.string.My_Playlist);\r\n        } else {\r\n            binding.tvLibraryName.setText(listModel.getPlaylistName());\r\n        }\r\n        binding.tvPlaylist.setText(\"Playlist\");\r\n        if (!listModel.getPlaylistImage().equalsIgnoreCase(\"\")) {\r\n            try {\r\n                Glide.with(getActivity()).load(listModel.getPlaylistImage()).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivBanner);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            binding.ivBanner.setImageResource(R.drawable.audio_bg);\r\n        }\r\n\r\n        if (listModel.getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                listModel.getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                        listModel.getTotalhour().equalsIgnoreCase(\"\")\r\n                        && listModel.getTotalminute().equalsIgnoreCase(\"\")) {\r\n            binding.tvLibraryDetail.setText(\"0 Audio | 0h 0m\");\r\n        } else {\r\n            if (listModel.getTotalminute().equalsIgnoreCase(\"\")) {\r\n                binding.tvLibraryDetail.setText(listModel.getTotalAudio() + \" Audio | \"\r\n                        + listModel.getTotalhour() + \"h 0m\");\r\n            } else {\r\n                binding.tvLibraryDetail.setText(listModel.getTotalAudio() + \" Audio | \"\r\n                        + listModel.getTotalhour() + \"h \" + listModel.getTotalminute() + \"m\");\r\n            }\r\n        }\r\n        RefreshIcon = listModel.getPlaylistSongs().size();\r\n        RefreshIconData = listModel.getPlaylistSongs().size();\r\n\r\n        if (listModel.getPlaylistSongs().size() == 0) {\r\n            binding.llAddAudio.setVisibility(View.VISIBLE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.INVISIBLE);\r\n            binding.llListing.setVisibility(View.GONE);\r\n            binding.btnAddAudio.setOnClickListener(view -> {\r\n                Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n                i.putExtra(\"PlaylistID\", PlaylistID);\r\n                startActivity(i);\r\n            });\r\n        } else {\r\n            binding.llAddAudio.setVisibility(View.GONE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n            binding.llListing.setVisibility(View.VISIBLE);\r\n            try {\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    adpater2 = new PlayListsAdpater2(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated());\r\n                    binding.rvPlayLists.setAdapter(adpater2);\r\n                    binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                    binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                    enableDisableDownload(false, \"orange\");\r\n                    binding.llReminder.setClickable(false);\r\n                    binding.llReminder.setEnabled(false);\r\n                    binding.ivReminder.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                    binding.rlSearch.setVisibility(View.GONE);\r\n                } else {\r\n                    if (listModel.getCreated().equalsIgnoreCase(\"1\")) {\r\n                        adpater = new PlayListsAdpater(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated(), this);\r\n//                        SongListSize = listModel.getPlaylistSongs().size();\r\n                        ItemTouchHelper.Callback callback = new ItemMoveCallback(adpater);\r\n                        touchHelper = new ItemTouchHelper(callback);\r\n                        touchHelper.attachToRecyclerView(binding.rvPlayLists);\r\n                        binding.rvPlayLists.setAdapter(adpater);\r\n                    } else {\r\n                        adpater2 = new PlayListsAdpater2(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated());\r\n                        binding.rvPlayLists.setAdapter(adpater2);\r\n                    }\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callTransparentFrag(int position, Context ctx, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList,\r\n                                     String myPlaylist) {\r\n        SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        if (queuePlay) {\r\n            int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n            Gson gson = new Gson();\r\n            String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                }.getType();\r\n                addToQueueModelList = gson.fromJson(json1, type1);\r\n            }\r\n            addToQueueModelList.remove(position1);\r\n            SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared2.edit();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();\r\n\r\n        }\r\n        player = 1;\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isPause = false;\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isRemoved = false;\r\n        newClick = true;\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(listModelList);\r\n        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, myPlaylist);\r\n        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n        editor.commit();\r\n        try {\r\n            callAddTransFrag();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void callRemove(String id, String PlaylistAudioId, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData, int position) {\r\n        String AudioId = id;\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SucessModel> listCall = APIClient.getClient().getRemoveAudioFromPlaylist(UserID, AudioId, PlaylistID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SucessModel listModel = response.body();\r\n                        mData.remove(position);\r\n                        if (mData.size() == 0) {\r\n                            enableDisableDownload(false, \"gray\");\r\n                        }\r\n                        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (pos == position && position < mData.size() - 1) {\r\n//                                            pos = pos + 1;\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", getActivity());\r\n                                } else {\r\n                                    callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\");\r\n                                }\r\n                            } else if (pos == position && position == mData.size() - 1) {\r\n                                pos = 0;\r\n                                if (isDisclaimer == 1) {\r\n                                    BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", getActivity());\r\n                                } else {\r\n                                    callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\");\r\n                                }\r\n                            } else if (pos < position && pos < mData.size() - 1) {\r\n                                saveToPref(pos, mData);\r\n                            } else if (pos > position && pos == mData.size()) {\r\n                                pos = pos - 1;\r\n                                saveToPref(pos, mData);\r\n                            }/*else if(pos != position || pos > mData.size()){}*/\r\n\r\n//                                        callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\");\r\n                        }\r\n                        //      adpater.notifyItemRemoved(position);\r\n                        prepareData(UserID, PlaylistID);\r\n                        BWSApplication.showToast(listModel.getResponseMessage(), getActivity());\r\n                    }\r\n                }\r\n\r\n                private void saveToPref(int pos, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData) {\r\n                    SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shareddd.edit();\r\n                    Gson gson = new Gson();\r\n                    String json = gson.toJson(mData);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                    editor.commit();\r\n                    callAddTransFrag();\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private void callDownload(String id, String audioFile, String Name, ArrayList<SubPlayListModel.ResponseData.PlaylistSong>\r\n            playlistSongs, int position, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        if (id.isEmpty() && Name.isEmpty() && audioFile.isEmpty()) {\r\n            enableDisableDownload(false, \"orange\");\r\n            List<String> url = new ArrayList<>();\r\n            List<String> name = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs2 = new ArrayList<>();\r\n            playlistSongs2 = playlistSongs;\r\n            if (downloadAudioDetailsList.size() != 0) {\r\n                for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                    if (playlistSongs2.size() == 0) {\r\n                        break;\r\n                    } else {\r\n                        for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                            if (playlistSongs2.size() != 0) {\r\n                                if (playlistSongs2.get(x).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                    playlistSongs2.remove(x);\r\n                                }\r\n                                if (playlistSongs2.size() == 0) {\r\n                                    break;\r\n                                }\r\n                            } else break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (playlistSongs2.size() != 0) {\r\n                for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                    name.add(playlistSongs2.get(x).getName());\r\n                    url.add(playlistSongs2.get(x).getAudioFile());\r\n                    downloadPlaylistId.add(playlistSongs2.get(x).getPlaylistID());\r\n                }\r\n            }\r\n            byte[] encodedBytes = new byte[1024];\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url.addAll(audioFile1);\r\n                    name.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            if (url.size() != 0) {\r\n                DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url);\r\n                String nameJson = gson.toJson(name);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                fileNameList = name;\r\n                playlistDownloadId = downloadPlaylistId;\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                /*remainAudio = new ArrayList<>();\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                        remainAudio.add(playlistDownloadId.get(i));\r\n                    }\r\n                }*/\r\n                SongListSize = playlistSongs.size();\r\n//                handler1.postDelayed(UpdateSongTime1, 500);\r\n            }\r\n            binding.pbProgress.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setVisibility(View.GONE);\r\n//            String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n//            SaveMedia(EncodeBytes, dirPath, playlistSongs, i, llDownload);\r\n            getMediaByPer(PlaylistID, SongListSize);\r\n            savePlaylist();\r\n            saveAllMedia(playlistSongsList, encodedBytes);\r\n        } else {\r\n            disableDownload(llDownload, ivDownloads);\r\n            List<String> url = new ArrayList<>();\r\n            List<String> name = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url.addAll(audioFile1);\r\n                    name.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            url.add(audioFile);\r\n            name.add(Name);\r\n            downloadPlaylistId.add(\"\");\r\n            if (url.size() != 0) {\r\n                DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url);\r\n                String nameJson = gson.toJson(name);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                fileNameList = name;\r\n                playlistDownloadId = downloadPlaylistId;\r\n            }\r\n            String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n            SaveMedia(new byte[1024], dirPath, playlistSongs, position, llDownload, ivDownloads);\r\n            handler2.postDelayed(UpdateSongTime2, 200);\r\n        }\r\n    }\r\n\r\n    private void savePlaylist() {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertPlaylist(downloadPlaylistDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n                getMediaByPer(PlaylistID, SongListSize);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void saveAllMedia(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, byte[] encodedBytes) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                for (int i = 0; i < playlistSongs.size(); i++) {\r\n                    downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                    downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"0\");\r\n                    if (downloadAudioDetailsList.size() != 0) {\r\n                        for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                            if (playlistSongs.get(i).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                downloadAudioDetails.setIsDownload(\"Complete\");\r\n                                downloadAudioDetails.setDownloadProgress(100);\r\n                            } else {\r\n                                downloadAudioDetails.setIsDownload(\"pending\");\r\n                                downloadAudioDetails.setDownloadProgress(0);\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                    downloadAudioDetails.setPlaylistId(playlistSongs.get(i).getPlaylistID());\r\n                    DatabaseClient.getInstance(getActivity())\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .insertMedia(downloadAudioDetails);\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n\r\n                enableDisableDownload(false, \"orange\");\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void SaveMedia(byte[] encodeBytes, String dirPath, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, int i, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                downloadAudioDetails.setDownload(\"1\");\r\n                downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                downloadAudioDetails.setIsSingle(\"1\");\r\n                downloadAudioDetails.setPlaylistId(\"\");\r\n                downloadAudioDetails.setIsDownload(\"pending\");\r\n                downloadAudioDetails.setDownloadProgress(0);\r\n                DatabaseClient.getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                disableDownload(llDownload, ivDownloads);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public void GetMedia(String url, Context ctx, String download, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(url);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                        disableDownload(llDownload, ivDownloads);\r\n                    }\r\n                } else if (download.equalsIgnoreCase(\"1\")) {\r\n                    disableDownload(llDownload, ivDownloads);\r\n                } else {\r\n                    enableDownload(llDownload, ivDownloads);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetMedia() {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        SubPlayListModel responseData = new SubPlayListModel();\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> details = new ArrayList<>();\r\n                        SubPlayListModel.ResponseData listModel = new SubPlayListModel.ResponseData();\r\n                        listModel.setPlaylistID(downloadPlaylistDetailsList.get(0).getPlaylistID());\r\n                        listModel.setPlaylistName(downloadPlaylistDetailsList.get(0).getPlaylistName());\r\n                        listModel.setPlaylistDesc(downloadPlaylistDetailsList.get(0).getPlaylistDesc());\r\n                        listModel.setPlaylistMastercat(downloadPlaylistDetailsList.get(0).getPlaylistMastercat());\r\n                        listModel.setPlaylistSubcat(downloadPlaylistDetailsList.get(0).getPlaylistSubcat());\r\n                        listModel.setPlaylistImage(downloadPlaylistDetailsList.get(0).getPlaylistImage());\r\n                        listModel.setTotalAudio(downloadPlaylistDetailsList.get(0).getTotalAudio());\r\n                        listModel.setTotalDuration(downloadPlaylistDetailsList.get(0).getTotalDuration());\r\n                        listModel.setTotalhour(downloadPlaylistDetailsList.get(0).getTotalhour());\r\n                        listModel.setTotalminute(downloadPlaylistDetailsList.get(0).getTotalminute());\r\n                        listModel.setCreated(downloadPlaylistDetailsList.get(0).getCreated());\r\n                        listModel.setLike(downloadPlaylistDetailsList.get(0).getLike());\r\n                        listModel.setIsReminder(downloadPlaylistDetailsList.get(0).getIsReminder());\r\n                        if (playlistWiseAudioDetails.size() != 0) {\r\n                            for (int i = 0; i < playlistWiseAudioDetails.size(); i++) {\r\n                                SubPlayListModel.ResponseData.PlaylistSong detail = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                detail.setID(playlistWiseAudioDetails.get(i).getID());\r\n                                detail.setName(playlistWiseAudioDetails.get(i).getName());\r\n                                detail.setAudioFile(playlistWiseAudioDetails.get(i).getAudioFile());\r\n                                detail.setAudioDirection(playlistWiseAudioDetails.get(i).getAudioDirection());\r\n                                detail.setAudiomastercat(playlistWiseAudioDetails.get(i).getAudiomastercat());\r\n                                detail.setAudioSubCategory(playlistWiseAudioDetails.get(i).getAudioSubCategory());\r\n                                detail.setImageFile(playlistWiseAudioDetails.get(i).getImageFile());\r\n                                detail.setLike(playlistWiseAudioDetails.get(i).getLike());\r\n                                detail.setDownload(playlistWiseAudioDetails.get(i).getDownload());\r\n                                detail.setAudioDuration(playlistWiseAudioDetails.get(i).getAudioDuration());\r\n                                details.add(detail);\r\n                            }\r\n                            listModel.setPlaylistSongs(details);\r\n                        }\r\n                        setData(listModel);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    private void enableDownload(RelativeLayout llDownload, ImageView ivDownloads) {\r\n        llDownload.setClickable(true);\r\n        llDownload.setEnabled(true);\r\n        ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n        ivDownloads.setColorFilter(activity.getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n    }\r\n\r\n    private void disableDownload(RelativeLayout llDownload, ImageView ivDownloads) {\r\n        ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n        ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        llDownload.setClickable(false);\r\n        llDownload.setEnabled(false);\r\n    }\r\n\r\n    @Override\r\n    public void requestDrag(RecyclerView.ViewHolder viewHolder) {\r\n        touchHelper.startDrag(viewHolder);\r\n    }\r\n\r\n    public class PlayListsAdpater extends RecyclerView.Adapter<PlayListsAdpater.MyViewHolder> implements Filterable/*, StartDragListener*/, ItemMoveCallback.ItemTouchHelperContract {\r\n        Context ctx;\r\n        String UserID, Created, name;\r\n        StartDragListener startDragListener;\r\n        int isDownloading = 0;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                String Created, StartDragListener startDragListener) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n            this.startDragListener = startDragListener;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @SuppressLint(\"ClickableViewAccessibility\")\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n            UpdateSongTime2 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    for (int f = 0; f < listModelList.size(); f++) {\r\n                        if (fileNameList.size() != 0) {\r\n                            for (int i = 0; i < fileNameList.size(); i++) {\r\n                                if (fileNameList.get(i).equalsIgnoreCase(mData.get(f).getName())) {\r\n                                    if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(mData.get(f).getName())) {\r\n                                        if (downloadProgress <= 100) {\r\n                                            notifyItemChanged(f);\r\n                                         /*   holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.GONE);*/\r\n                                        } else {\r\n                                            holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                                            handler2.removeCallbacks(UpdateSongTime2);\r\n                                            getDownloadData();\r\n                                        }\r\n                                    } else {\r\n                                        notifyItemChanged(f);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (downloadProgress == 0) {\r\n                        notifyDataSetChanged();\r\n                        getDownloadData();\r\n                    }\r\n                    handler2.postDelayed(this, 300);\r\n                }\r\n            };\r\n            if (fileNameList.size() != 0) {\r\n             /*   for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                        isDownloading++;\r\n                        break;\r\n                    }else{\r\n                        holder.binding.pbProgress.setVisibility(View.GONE);\r\n                    }\r\n                }*/\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(mData.get(position).getName())) {\r\n                            if (downloadProgress <= 100) {\r\n                                if (downloadProgress == 100) {\r\n                                    holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                } else {\r\n                                    holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                    holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                                }\r\n                            } else {\r\n                                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                                handler2.removeCallbacks(UpdateSongTime2);\r\n                            }\r\n                        } else {\r\n                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                            handler2.postDelayed(UpdateSongTime2, 200);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n            }\r\n            holder.binding.tvTitleA.setText(mData.get(position).getName());\r\n            holder.binding.tvTitleB.setText(mData.get(position).getName());\r\n            holder.binding.tvTimeA.setText(mData.get(position).getAudioDuration());\r\n            holder.binding.tvTimeB.setText(mData.get(position).getAudioDuration());\r\n            holder.binding.llSort.setOnTouchListener((v, event) -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall sort after the disclaimer\", ctx);\r\n                    }\r\n                } else {\r\n                    if (event.getAction() ==\r\n                            MotionEvent.ACTION_DOWN) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                    if (event.getAction() ==\r\n                            MotionEvent.ACTION_UP) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n            String id = mData.get(position).getID();\r\n//            GetMedia(id, activity, mData.get(position).getDownload(), holder.binding.llDownload, holder.binding.ivDownloads);\r\n            for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                if (downloadAudioDetailsList.get(i).getAudioFile().equalsIgnoreCase(mData.get(position).getAudioFile())\r\n                        && downloadAudioDetailsList.get(i).getPlaylistId().equalsIgnoreCase(\"\")) {\r\n                    //disableName.add(mData.get(position).getName());\r\n                    disableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                    break;\r\n                }/* else {\r\n                    enableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                }*/\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(0, ctx, listModelList, \"myPlaylist\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    callTransparentFrag(0, ctx, listModelList, \"myPlaylist\");\r\n                }\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(position, ctx, listModelList, \"myPlaylist\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    callTransparentFrag(position, ctx, listModelList, \"myPlaylist\");\r\n                }\r\n            });\r\n            if (Created.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.llMore.setVisibility(View.GONE);\r\n                holder.binding.llCenterLayoutA.setVisibility(View.GONE);\r\n                holder.binding.llCenterLayoutB.setVisibility(View.VISIBLE);\r\n                holder.binding.llDownload.setVisibility(View.VISIBLE);\r\n                holder.binding.llRemove.setVisibility(View.VISIBLE);\r\n                holder.binding.llSort.setVisibility(View.VISIBLE);\r\n                binding.tvSearch.setVisibility(View.VISIBLE);\r\n                binding.searchView.setVisibility(View.GONE);\r\n            } else if (Created.equalsIgnoreCase(\"0\")) {\r\n                holder.binding.llMore.setVisibility(View.VISIBLE);\r\n                holder.binding.llCenterLayoutA.setVisibility(View.VISIBLE);\r\n                holder.binding.llCenterLayoutB.setVisibility(View.GONE);\r\n                holder.binding.llDownload.setVisibility(View.GONE);\r\n                holder.binding.llRemove.setVisibility(View.GONE);\r\n                holder.binding.llSort.setVisibility(View.GONE);\r\n                binding.tvSearch.setVisibility(View.GONE);\r\n                binding.searchView.setVisibility(View.VISIBLE);\r\n            }\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                holder.binding.llMore.setClickable(true);\r\n                holder.binding.llMore.setEnabled(true);\r\n                holder.binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                holder.binding.llMore.setClickable(false);\r\n                holder.binding.llMore.setEnabled(false);\r\n                holder.binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            }\r\n            holder.binding.llMore.setOnClickListener(view -> {\r\n                Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                i.putExtra(\"play\", \"myPlayList\");\r\n                i.putExtra(\"ID\", mData.get(position).getID());\r\n                i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                i.putExtra(\"position\", position);\r\n                i.putParcelableArrayListExtra(\"data\", mData);\r\n                i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                startActivity(i);\r\n                getActivity().finish();\r\n            });\r\n\r\n//            if (changedAudio != null) {\r\n//                callDragApi();\r\n//            }\r\n            holder.binding.llDownload.setOnClickListener(view -> {\r\n                name = mData.get(position).getName();\r\n                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                callDownload(mData.get(position).getID(), mData.get(position).getAudioFile(), mData.get(position).getName(), listFilterData, position, holder.binding.llDownload, holder.binding.ivDownloads);\r\n            });\r\n            try {\r\n                holder.binding.llRemove.setOnClickListener(view -> {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall remove after the disclaimer\", ctx);\r\n                        }\r\n                    } else {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                            BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                        } else {\r\n                            callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                        }\r\n                    }\r\n                });\r\n\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (listFilterData != null) {\r\n                return listFilterData.size();\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public void onRowMoved(int fromPosition, int toPosition) {\r\n            if (fromPosition < toPosition) {\r\n                for (int i = fromPosition; i < toPosition; i++) {\r\n                    Collections.swap(listModelList, i, i + 1);\r\n                }\r\n            } else {\r\n                for (int i = fromPosition; i > toPosition; i--) {\r\n                    Collections.swap(listModelList, i, i - 1);\r\n                }\r\n            }\r\n            changedAudio.clear();\r\n            for (int i = 0; i < listModelList.size(); i++) {\r\n                changedAudio.add(listModelList.get(i).getID());\r\n            }\r\n\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            if (audioPlay) {\r\n                if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (fromPosition == pos) {\r\n                            pos = toPosition;\r\n                        }/* else if (toPosition == pos) {\r\n                            if (action == 0) {\r\n                                pos = pos + 1;\r\n                            } else if (action == 1) {\r\n                                pos = pos - 1;\r\n                            }\r\n                        }*/ else if (fromPosition < pos && toPosition > pos) {\r\n                            pos = pos - 1;\r\n                        } else if ((fromPosition > pos && toPosition > pos) || (fromPosition < pos && toPosition < pos)) {\r\n                            pos = pos;\r\n                        } else if (fromPosition > pos && toPosition < pos) {\r\n                            pos = pos + 1;\r\n                        } else if (fromPosition > pos && toPosition == pos) {\r\n                            pos = pos + 1;\r\n                        } else if (fromPosition < pos && toPosition == pos) {\r\n                            pos = pos - 1;\r\n                        }\r\n                        SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shareddd.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(listModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                        editor.commit();\r\n                        callAddTransFrag();\r\n                    }\r\n                }\r\n            }\r\n            callDragApi();\r\n\r\n            notifyItemMoved(fromPosition, toPosition);\r\n\r\n         /* SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();*/\r\n\r\n        }\r\n\r\n\r\n        private void callDragApi() {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Call<CardModel> listCall = APIClient.getClient().setShortedAudio(UserID, PlaylistID, TextUtils.join(\",\", changedAudio));\r\n                listCall.enqueue(new Callback<CardModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<CardModel> call, Response<CardModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            CardModel listModel = response.body();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<CardModel> call, Throwable t) {\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onRowClear(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        binding.rvPlayLists.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolder(MyPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PlayListsAdpater2 extends RecyclerView.Adapter<PlayListsAdpater2.MyViewHolder2> implements Filterable {\r\n        Context ctx;\r\n        String UserID, Created;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater2(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                 String Created) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder2 onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout, parent, false);\r\n            return new MyViewHolder2(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder2 holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n            holder.binding.tvTitleA.setText(mData.get(position).getName());\r\n            holder.binding.tvTitleB.setText(mData.get(position).getName());\r\n            holder.binding.tvTimeA.setText(mData.get(position).getAudioDuration());\r\n            holder.binding.tvTimeB.setText(mData.get(position).getAudioDuration());\r\n            String id = mData.get(position).getID();\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n//            GetMedia(id, activity, mData.get(position).getDownload(), holder.binding.llDownload, holder.binding.ivDownloads);\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(0, ctx, listModelList, \"\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    callTransparentFrag(0, ctx, listModelList, \"\");\r\n                }\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(position, ctx, listModelList, \"\");\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    callTransparentFrag(position, ctx, listModelList, \"\");\r\n                }\r\n            });\r\n\r\n//            if (Created.equalsIgnoreCase(\"1\")) {\r\n//                holder.binding.llMore.setVisibility(View.GONE);\r\n//                holder.binding.llCenterLayoutA.setVisibility(View.GONE);\r\n//                holder.binding.llCenterLayoutB.setVisibility(View.VISIBLE);\r\n//                holder.binding.llDownload.setVisibility(View.VISIBLE);\r\n//                holder.binding.llRemove.setVisibility(View.VISIBLE);\r\n//                holder.binding.llSort.setVisibility(View.VISIBLE);\r\n//                binding.tvSearch.setVisibility(View.VISIBLE);\r\n//                binding.searchView.setVisibility(View.GONE);\r\n//            } else if (Created.equalsIgnoreCase(\"0\")) {\r\n            holder.binding.llMore.setVisibility(View.VISIBLE);\r\n            holder.binding.llCenterLayoutA.setVisibility(View.VISIBLE);\r\n            holder.binding.llCenterLayoutB.setVisibility(View.GONE);\r\n            holder.binding.llDownload.setVisibility(View.GONE);\r\n            holder.binding.llRemove.setVisibility(View.GONE);\r\n            holder.binding.llSort.setVisibility(View.GONE);\r\n            binding.tvSearch.setVisibility(View.GONE);\r\n            binding.searchView.setVisibility(View.VISIBLE);\r\n//            }\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                holder.binding.llMore.setClickable(true);\r\n                holder.binding.llMore.setEnabled(true);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                holder.binding.llMore.setClickable(false);\r\n                holder.binding.llMore.setEnabled(false);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            holder.binding.llMore.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"You can see details after the disclaimer\", ctx);\r\n                    } else {\r\n                        Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                        i.putExtra(\"play\", \"playlist\");\r\n                        i.putExtra(\"ID\", mData.get(position).getID());\r\n                        i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                        i.putExtra(\"position\", position);\r\n                        i.putParcelableArrayListExtra(\"data\", mData);\r\n                        i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                        startActivity(i);\r\n                    }\r\n                } else {\r\n                    Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                    i.putExtra(\"play\", \"playlist\");\r\n                    i.putExtra(\"ID\", mData.get(position).getID());\r\n                    i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                    i.putExtra(\"position\", position);\r\n                    i.putParcelableArrayListExtra(\"data\", mData);\r\n                    i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (listFilterData != null) {\r\n                return listFilterData.size();\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.tvFound.setText(\"Couldn't find \" + SearchFlag + \". Try searching again\");\r\n                        binding.rvPlayLists.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        public class MyViewHolder2 extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolder2(MyPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java	(revision 510d8cd2fb59985c09c29f96bb961eb80aa3cdfc)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java	(date 1602750541412)
@@ -202,7 +202,6 @@
         }
 
         binding.llBack.setOnClickListener(view1 -> callBack());
-
         if (BWSApplication.isNetworkConnected(getActivity()) && !MyDownloads.equalsIgnoreCase("1")) {
             binding.llMore.setVisibility(View.VISIBLE);
             binding.llMore.setClickable(true);
@@ -504,7 +503,7 @@
             params.setMargins(10, 8, 10, 260);
             binding.llSpace.setLayoutParams(params);
         }
-
+        binding.tvPlaylist.setText("Playlist");
         searchClear(searchEditText);
         SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);
         try {
Index: app/src/main/res/layout/fragment_my_playlists.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        android:id=\"@+id/flContainer\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/white\">\r\n\r\n        <RelativeLayout\r\n            android:id=\"@+id/rlMainLayouts\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:clickable=\"false\"\r\n            android:background=\"@color/white\"\r\n            android:enabled=\"false\">\r\n\r\n                <RelativeLayout\r\n                    android:id=\"@+id/rlMainLayout\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:background=\"@color/white\"\r\n                    android:layout_marginBottom=\"@dimen/_18sdp\"\r\n                    android:clickable=\"false\"\r\n                    android:enabled=\"false\">\r\n\r\n                    <RelativeLayout\r\n                        android:id=\"@+id/llMainLayout\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"@dimen/_210sdp\"\r\n                        android:clickable=\"false\"\r\n                        android:background=\"@color/white\"\r\n                        android:enabled=\"false\">\r\n\r\n                        <ImageView\r\n                            android:id=\"@+id/ivBanner\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_centerInParent=\"true\"\r\n                            android:clickable=\"false\"\r\n                            android:enabled=\"false\" />\r\n\r\n                        <RelativeLayout\r\n                            android:id=\"@+id/rlLayout\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"@dimen/_56sdp\"\r\n                            android:clickable=\"false\"\r\n                            android:enabled=\"false\"\r\n                            android:background=\"@drawable/top_transparent_gradient\">\r\n\r\n                            <LinearLayout\r\n                                android:id=\"@+id/llBack\"\r\n                                android:layout_width=\"42dp\"\r\n                                android:layout_height=\"match_parent\"\r\n                                android:layout_centerVertical=\"true\"\r\n                                android:gravity=\"center\">\r\n\r\n                                <ImageView\r\n                                    android:layout_width=\"wrap_content\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:src=\"@drawable/ic_left_arrow_icon\"\r\n                                    app:tint=\"@color/white\" />\r\n\r\n                            </LinearLayout>\r\n\r\n                            <LinearLayout\r\n                                android:id=\"@+id/llOptions\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"match_parent\"\r\n                                android:layout_alignParentRight=\"true\"\r\n                                android:layout_marginRight=\"@dimen/_10sdp\"\r\n                                android:layout_toRightOf=\"@id/llBack\"\r\n                                android:gravity=\"end\">\r\n\r\n                                <LinearLayout\r\n                                    android:id=\"@+id/llReminder\"\r\n                                    android:layout_width=\"42dp\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:gravity=\"center\"\r\n                                    android:visibility=\"gone\">\r\n\r\n                                    <ImageView\r\n                                        android:id=\"@+id/ivReminder\"\r\n                                        android:layout_width=\"wrap_content\"\r\n                                        android:layout_height=\"wrap_content\"\r\n                                        android:src=\"@drawable/ic_clock_icon\"\r\n                                        app:tint=\"@color/white\" />\r\n\r\n                                </LinearLayout>\r\n\r\n                                <RelativeLayout\r\n                                    android:id=\"@+id/llDownloads\"\r\n                                    android:layout_width=\"42dp\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:gravity=\"center\">\r\n\r\n                                    <ProgressBar\r\n                                        android:id=\"@+id/pbProgress\"\r\n                                        style=\"?android:attr/progressBarStyleHorizontal\"\r\n                                        android:layout_width=\"match_parent\"\r\n                                        android:layout_height=\"match_parent\"\r\n                                        android:layout_centerInParent=\"true\"\r\n                                        android:background=\"@drawable/circular_shapem\"\r\n                                        android:indeterminate=\"false\"\r\n                                        android:indeterminateTint=\"@color/dark_yellow\"\r\n                                        android:max=\"100\"\r\n                                        android:progressDrawable=\"@drawable/circular_progress_barm\"\r\n                                        android:visibility=\"gone\" />\r\n\r\n                                    <ImageView\r\n                                        android:id=\"@+id/ivDownloads\"\r\n                                        android:layout_width=\"wrap_content\"\r\n                                        android:layout_height=\"wrap_content\"\r\n                                        android:layout_centerInParent=\"true\" />\r\n\r\n                                </RelativeLayout>\r\n\r\n                                <LinearLayout\r\n                                    android:id=\"@+id/llMore\"\r\n                                    android:layout_width=\"42dp\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:gravity=\"center\"\r\n                                    android:visibility=\"gone\">\r\n\r\n                                    <ImageView\r\n                                        android:id=\"@+id/ivMore\"\r\n                                        android:layout_width=\"wrap_content\"\r\n                                        android:layout_height=\"wrap_content\"\r\n                                        android:src=\"@drawable/ic_menu_icon\"\r\n                                        app:tint=\"@color/white\" />\r\n\r\n                                </LinearLayout>\r\n                            </LinearLayout>\r\n                        </RelativeLayout>\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_alignParentBottom=\"true\"\r\n                            android:background=\"@drawable/transparent_gradient\"\r\n                            android:orientation=\"vertical\"\r\n                            android:clickable=\"false\"\r\n                            android:enabled=\"false\"\r\n                            android:paddingBottom=\"@dimen/_16sdp\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvPlaylist\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                                android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                                android:gravity=\"start\"\r\n                                android:text=\"Playlist\"\r\n                                android:clickable=\"false\"\r\n                                android:enabled=\"false\"\r\n                                android:textColor=\"@color/white\"\r\n                                android:textSize=\"@dimen/_15sdp\"\r\n                                android:visibility=\"gone\" />\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvLibraryName\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                                android:layout_marginTop=\"@dimen/_6sdp\"\r\n                                android:ellipsize=\"end\"\r\n                                android:fontFamily=\"@font/montserrat_bold\"\r\n                                android:gravity=\"start\"\r\n                                android:maxLines=\"1\"\r\n                                android:clickable=\"false\"\r\n                                android:enabled=\"false\"\r\n                                android:textColor=\"@color/white\"\r\n                                android:textSize=\"@dimen/_22sdp\" />\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvLibraryDetail\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                                android:layout_marginTop=\"@dimen/_6sdp\"\r\n                                android:fontFamily=\"@font/montserrat_medium\"\r\n                                android:gravity=\"start\"\r\n                                android:clickable=\"false\"\r\n                                android:enabled=\"false\"\r\n                                android:textColor=\"@color/white\"\r\n                                android:textSize=\"@dimen/_15sdp\" />\r\n\r\n                        </LinearLayout>\r\n                    </RelativeLayout>\r\n\r\n                    <ImageView\r\n                        android:id=\"@+id/ivPlaylistStatus\"\r\n                        android:layout_width=\"@dimen/_60sdp\"\r\n                        android:layout_height=\"@dimen/_60sdp\"\r\n                        android:layout_below=\"@id/llMainLayout\"\r\n                        android:layout_alignParentRight=\"true\"\r\n                        android:layout_marginTop=\"-33dp\"\r\n                        android:layout_marginRight=\"@dimen/_20sdp\"\r\n                        android:scaleType=\"fitXY\"\r\n                        android:src=\"@drawable/ic_blue_play_icon\"\r\n                        android:visibility=\"gone\" />\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llAddAudio\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"310dp\"\r\n                        android:layout_below=\"@id/llMainLayout\"\r\n                        android:layout_marginTop=\"@dimen/_51sdp\"\r\n                        android:gravity=\"center\"\r\n                        android:orientation=\"vertical\"\r\n                        android:visibility=\"gone\">\r\n\r\n                        <TextView\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginHorizontal=\"@dimen/_16sdp\"\r\n                            android:layout_marginTop=\"@dimen/_20sdp\"\r\n                            android:fontFamily=\"@font/montserrat_medium\"\r\n                            android:gravity=\"center\"\r\n                            android:text=\"Let's find some Audios for your playlist.\"\r\n                            android:textColor=\"@color/dark_blue_gray\"\r\n                            android:textSize=\"@dimen/_15sdp\" />\r\n\r\n                        <Button\r\n                            android:id=\"@+id/btnAddAudio\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:layout_marginHorizontal=\"@dimen/_55sdp\"\r\n                            android:layout_marginTop=\"@dimen/_30sdp\"\r\n                            android:layout_marginBottom=\"@dimen/_25sdp\"\r\n                            android:background=\"@drawable/extra_round_cornor\"\r\n                            android:fontFamily=\"@font/montserrat_bold\"\r\n                            android:paddingVertical=\"@dimen/_2sdp\"\r\n                            android:text=\"@string/Add_Audio\"\r\n                            android:textColor=\"@color/white\" />\r\n\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llListing\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"match_parent\"\r\n                        android:layout_below=\"@id/ivPlaylistStatus\"\r\n                        android:orientation=\"vertical\"\r\n                        android:visibility=\"visible\">\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"@dimen/_84sdp\">\r\n\r\n                            <RelativeLayout\r\n                                android:id=\"@+id/rlSearch\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"@dimen/_48sdp\"\r\n                                android:layout_gravity=\"center_vertical\"\r\n                                android:layout_marginLeft=\"@dimen/_16sdp\"\r\n                                android:layout_marginTop=\"@dimen/_15sdp\"\r\n                                android:layout_marginRight=\"@dimen/_16sdp\"\r\n                                android:layout_weight=\"2\"\r\n                                android:background=\"@drawable/rounded_extra_gray_corner\"\r\n                                android:visibility=\"visible\">\r\n\r\n                                <ImageView\r\n                                    android:id=\"@+id/button1\"\r\n                                    android:layout_width=\"@dimen/_16sdp\"\r\n                                    android:layout_height=\"@dimen/_16sdp\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:layout_marginLeft=\"@dimen/_14sdp\"\r\n                                    android:src=\"@drawable/ic_search_icon\"\r\n                                    app:tint=\"@color/dark_blue_gray\" />\r\n\r\n                                <TextView\r\n                                    android:id=\"@+id/tvSearch\"\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:layout_marginLeft=\"@dimen/_16sdp\"\r\n                                    android:layout_marginTop=\"@dimen/_20sdp\"\r\n                                    android:layout_marginRight=\"@dimen/_16sdp\"\r\n                                    android:layout_toRightOf=\"@id/button1\"\r\n                                    android:fontFamily=\"@font/montserrat_bold\"\r\n                                    android:gravity=\"start\"\r\n                                    android:text=\"\"\r\n                                    android:textColor=\"@color/light_gray\"\r\n                                    android:textSize=\"@dimen/_14sdp\"\r\n                                    android:visibility=\"gone\" />\r\n\r\n                                <androidx.appcompat.widget.SearchView\r\n                                    android:id=\"@+id/searchView\"\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:layout_centerVertical=\"true\"\r\n                                    android:layout_toRightOf=\"@id/button1\"\r\n                                    android:iconifiedByDefault=\"false\"\r\n                                    android:singleLine=\"true\"\r\n                                    android:theme=\"@style/WallSearchView\"\r\n                                    android:visibility=\"gone\"\r\n                                    app:queryBackground=\"@null\"\r\n                                    app:queryHint=\"\"\r\n                                    app:searchHintIcon=\"@null\"\r\n                                    app:searchIcon=\"@null\" />\r\n                            </RelativeLayout>\r\n                        </LinearLayout>\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:orientation=\"vertical\">\r\n\r\n                            <TextView\r\n                                android:id=\"@+id/tvTag\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginLeft=\"@dimen/_16sdp\"\r\n                                android:layout_marginTop=\"@dimen/_20sdp\"\r\n                                android:layout_marginRight=\"@dimen/_16sdp\"\r\n                                android:fontFamily=\"@font/montserrat_bold\"\r\n                                android:gravity=\"start\"\r\n                                android:text=\"@string/Audios_in_Playlist\"\r\n                                android:textColor=\"@color/black\"\r\n                                android:textSize=\"@dimen/_16sdp\"\r\n                                android:visibility=\"gone\" />\r\n\r\n                            <LinearLayout\r\n                                android:id=\"@+id/llSpace\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"match_parent\">\r\n\r\n                                <androidx.recyclerview.widget.RecyclerView\r\n                                    android:id=\"@+id/rvPlayLists\"\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"match_parent\"\r\n                                    android:overScrollMode=\"never\"\r\n                                    android:paddingBottom=\"@dimen/_30sdp\" />\r\n                            </LinearLayout>\r\n\r\n                            <LinearLayout\r\n                                android:id=\"@+id/llError\"\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginHorizontal=\"@dimen/_22sdp\"\r\n                                android:layout_marginTop=\"@dimen/_20sdp\"\r\n                                android:gravity=\"center\"\r\n                                android:orientation=\"vertical\"\r\n                                android:visibility=\"gone\">\r\n\r\n                                <TextView\r\n                                    android:id=\"@+id/tvFound\"\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:fontFamily=\"@font/montserrat_regular\"\r\n                                    android:gravity=\"center\"\r\n                                    android:textColor=\"@color/dark_blue_gray\"\r\n                                    android:textSize=\"@dimen/_15sdp\" />\r\n\r\n                                <TextView\r\n                                    android:layout_width=\"match_parent\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:layout_marginTop=\"@dimen/_4sdp\"\r\n                                    android:fontFamily=\"@font/montserrat_regular\"\r\n                                    android:gravity=\"center\"\r\n                                    android:text=\"@string/no_data_found\"\r\n                                    android:textColor=\"@color/dark_blue_gray\"\r\n                                    android:textSize=\"@dimen/_11sdp\"\r\n                                    android:visibility=\"gone\" />\r\n\r\n                            </LinearLayout>\r\n                        </LinearLayout>\r\n\r\n                    </LinearLayout>\r\n                </RelativeLayout>\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/llExtra\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"@dimen/_70sdp\"\r\n                android:layout_alignParentBottom=\"true\"\r\n                android:background=\"@color/white\"\r\n                android:orientation=\"horizontal\"\r\n                android:visibility=\"gone\"></LinearLayout>\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:gravity=\"center\"\r\n                android:padding=\"@dimen/_60sdp\">\r\n\r\n                <ProgressBar\r\n                    android:id=\"@+id/progressBar\"\r\n                    android:layout_width=\"@dimen/_50sdp\"\r\n                    android:layout_height=\"@dimen/_50sdp\"\r\n                    android:indeterminateTint=\"@color/blue\"\r\n                    android:scaleType=\"centerInside\"\r\n                    android:visibility=\"gone\" />\r\n\r\n            </LinearLayout>\r\n\r\n            <FrameLayout\r\n                android:id=\"@+id/progressBarHolder\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:alpha=\"0.4\"\r\n                android:animateLayoutChanges=\"true\"\r\n                android:background=\"#C0000000\"\r\n                android:visibility=\"gone\" />\r\n        </RelativeLayout>\r\n    </FrameLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_my_playlists.xml	(revision 510d8cd2fb59985c09c29f96bb961eb80aa3cdfc)
+++ app/src/main/res/layout/fragment_my_playlists.xml	(date 1602750541418)
@@ -6,13 +6,12 @@
         android:id="@+id/flContainer"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:background="@color/white">
+        android:clickable="true">
 
         <RelativeLayout
             android:id="@+id/rlMainLayouts"
             android:layout_width="match_parent"
             android:layout_height="match_parent"
-            android:clickable="false"
             android:background="@color/white"
             android:enabled="false">
 
@@ -21,15 +20,12 @@
                     android:layout_width="match_parent"
                     android:layout_height="match_parent"
                     android:background="@color/white"
-                    android:layout_marginBottom="@dimen/_18sdp"
-                    android:clickable="false"
-                    android:enabled="false">
+                    android:layout_marginBottom="@dimen/_18sdp">
 
                     <RelativeLayout
                         android:id="@+id/llMainLayout"
                         android:layout_width="match_parent"
                         android:layout_height="@dimen/_210sdp"
-                        android:clickable="false"
                         android:background="@color/white"
                         android:enabled="false">
 
@@ -37,16 +33,12 @@
                             android:id="@+id/ivBanner"
                             android:layout_width="match_parent"
                             android:layout_height="match_parent"
-                            android:layout_centerInParent="true"
-                            android:clickable="false"
-                            android:enabled="false" />
+                            android:layout_centerInParent="true" />
 
                         <RelativeLayout
                             android:id="@+id/rlLayout"
                             android:layout_width="match_parent"
                             android:layout_height="@dimen/_56sdp"
-                            android:clickable="false"
-                            android:enabled="false"
                             android:background="@drawable/top_transparent_gradient">
 
                             <LinearLayout
@@ -143,36 +135,29 @@
                             android:layout_alignParentBottom="true"
                             android:background="@drawable/transparent_gradient"
                             android:orientation="vertical"
-                            android:clickable="false"
-                            android:enabled="false"
                             android:paddingBottom="@dimen/_16sdp">
 
                             <TextView
                                 android:id="@+id/tvPlaylist"
                                 android:layout_width="match_parent"
                                 android:layout_height="wrap_content"
-                                android:layout_marginHorizontal="@dimen/_16sdp"
+                                android:paddingHorizontal="@dimen/_16sdp"
                                 android:fontFamily="@font/montserrat_semi_bold"
                                 android:gravity="start"
-                                android:text="Playlist"
-                                android:clickable="false"
-                                android:enabled="false"
                                 android:textColor="@color/white"
                                 android:textSize="@dimen/_15sdp"
-                                android:visibility="gone" />
+                                android:visibility="visible" />
 
                             <TextView
                                 android:id="@+id/tvLibraryName"
                                 android:layout_width="match_parent"
                                 android:layout_height="wrap_content"
-                                android:layout_marginHorizontal="@dimen/_16sdp"
-                                android:layout_marginTop="@dimen/_6sdp"
+                                android:paddingHorizontal="@dimen/_16sdp"
+                                android:paddingTop="@dimen/_6sdp"
                                 android:ellipsize="end"
                                 android:fontFamily="@font/montserrat_bold"
                                 android:gravity="start"
                                 android:maxLines="1"
-                                android:clickable="false"
-                                android:enabled="false"
                                 android:textColor="@color/white"
                                 android:textSize="@dimen/_22sdp" />
 
@@ -180,12 +165,10 @@
                                 android:id="@+id/tvLibraryDetail"
                                 android:layout_width="match_parent"
                                 android:layout_height="wrap_content"
-                                android:layout_marginHorizontal="@dimen/_16sdp"
-                                android:layout_marginTop="@dimen/_6sdp"
+                                android:paddingHorizontal="@dimen/_16sdp"
+                                android:paddingTop="@dimen/_6sdp"
                                 android:fontFamily="@font/montserrat_medium"
                                 android:gravity="start"
-                                android:clickable="false"
-                                android:enabled="false"
                                 android:textColor="@color/white"
                                 android:textSize="@dimen/_15sdp" />
 
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.media.AudioAttributes;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.SystemClock;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityPlayWellnessBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity.comeFromAddToQueue;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.disclaimer;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isRemoved;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadProgress;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.ToBackward;\r\nimport static com.brainwellnessspa.Utility.MusicService.ToForward;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isprogressbar;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class PlayWellnessActivity extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener/*, AudioManager.OnAudioFocusChangeListener, OnProgressListener*/ {\r\n    ActivityPlayWellnessBinding binding;\r\n    String IsRepeat = \"\", IsShuffle = \"\", UserID, PlaylistId = \"\", AudioFlag, id, name, url;\r\n    int startTime = 0, endTime = 0, position, listSize, myCount, progress;\r\n    Context ctx;\r\n    Activity activity;\r\n    Boolean queuePlay, audioPlay;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<AddToQueueModel> addToQueueModelList;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    long myProgress = 0;\r\n    private long mLastClickTime = 0, totalDuration, currentDuration = 0;\r\n    private Handler handler;\r\n    private Handler handler1;\r\n    //        private AudioManager mAudioManager;\r\n    private Runnable UpdateSongTime = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            Time t = Time.valueOf(\"00:00:00\");\r\n            String endtimetext = \"\";\r\n            if (queuePlay) {\r\n                if (listSize != 0) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (downloadAudioDetailsList.size() != 0) {\r\n                            endtimetext = downloadAudioDetailsList.get(0).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                } else {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    stopMedia();\r\n                }\r\n            } else if (audioPlay) {\r\n                if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                    if (downloadAudioDetailsList.size() != 0) {\r\n                        endtimetext = downloadAudioDetailsList.get(0).getAudioDuration();\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                        }\r\n                    } else {\r\n                        endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                } else {\r\n                    endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else {\r\n                        t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                    }\r\n                }\r\n            }\r\n            if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else\r\n                    totalDuration = t.getTime();\r\n            } else {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else\r\n                    totalDuration = t.getTime();\r\n            }\r\n            myProgress = currentDuration;\r\n            currentDuration = getStartTime();\r\n\r\n            Log.e(\"myProgress old!!!\", String.valueOf(myProgress));\r\n            if (myProgress == currentDuration && myProgress != 0 && !isPause) {\r\n//                Log.e(\"myProgress\", String.valueOf(myProgress));\r\n                myCount++;\r\n                Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                if (myCount == 50) {\r\n                    Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                    callComplete();\r\n                    myCount = 0;\r\n                }\r\n            }\r\n            progress = getProgressPercentage(currentDuration, totalDuration);\r\n            if (currentDuration == 0 && isprogressbar) {\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n            } else if (currentDuration > 1 && !isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                isprogressbar = false;\r\n            } else if (currentDuration >= 1 && isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                isprogressbar = false;\r\n            }\r\n            //Log.d(\"Progress\", \"\"+progress);\r\n            startTime = getStartTime();\r\n            if (currentDuration == totalDuration && currentDuration != 0 && !isStop) {\r\n                binding.tvStartTime.setText(endtimetext);\r\n                callComplete();\r\n            } else if (isPause) {\r\n                binding.simpleSeekbar.setProgress(oTime);\r\n                int timeeee = progressToTimer(oTime, (int) (totalDuration));\r\n                binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                        TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n            } else {\r\n                binding.simpleSeekbar.setProgress(progress);\r\n                binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(startTime),\r\n                        TimeUnit.MILLISECONDS.toSeconds(startTime) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(startTime))));\r\n            }\r\n            binding.simpleSeekbar.setMax(100);\r\n\r\n            // Running this thread after 100 milliseconds\r\n            handler.postDelayed(this, 100);\r\n        }\r\n    };\r\n    private Runnable UpdateSongTime1 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n                if (downloadProgress <= 100) {\r\n                    binding.pbProgress.setProgress(downloadProgress);\r\n                    binding.pbProgress.setVisibility(View.VISIBLE);\r\n                    binding.ivDownloads.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.pbProgress.setVisibility(View.GONE);\r\n                    binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                    handler1.removeCallbacks(UpdateSongTime1);\r\n                }\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }\r\n            handler1.postDelayed(this, 500);\r\n        }\r\n    };\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n//        overridePendingTransition(R.anim.enter, R.anim.exit);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_play_wellness);\r\n        handler = new Handler();\r\n        handler1 = new Handler();\r\n        ctx = PlayWellnessActivity.this;\r\n        activity = PlayWellnessActivity.this;\r\n        addToQueueModelList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        mainPlayModelList = new ArrayList<>();\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences Status = getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = gson.fromJson(json, type);\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                1, 1, 0.92f, 0);\r\n        binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n/*        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llMore.setClickable(true);\r\n                binding.llMore.setEnabled(true);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llViewQueue.setClickable(true);\r\n                binding.llViewQueue.setEnabled(true);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        getPrepareShowData(position);\r\n\r\n        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }\r\n        callRepeatShuffle();\r\n        if (isMediaStart) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n            });\r\n        }\r\n        binding.llBack.setOnClickListener(view -> {\r\n            callBack();\r\n        });\r\n\r\n        binding.llLike.setOnClickListener(view -> {\r\n            callLike();\r\n        });\r\n\r\n        binding.llRepeat.setOnClickListener(view -> callRepeat());\r\n\r\n        binding.llShuffle.setOnClickListener(view -> callShuffle());\r\n\r\n        binding.llDownload.setOnClickListener(view -> callDownload());\r\n\r\n        binding.llMore.setOnClickListener(view -> {\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            Intent i = new Intent(ctx, AddQueueActivity.class);\r\n            if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                i.putExtra(\"play\", \"TopCategories\");\r\n            } else\r\n                i.putExtra(\"play\", \"play\");\r\n            i.putExtra(\"ID\", id);\r\n            i.putExtra(\"position\", position);\r\n            i.putExtra(\"PlaylistAudioId\", \"\");\r\n            startActivity(i);\r\n//            finish();\r\n        });\r\n\r\n        binding.llViewQueue.setOnClickListener(view -> {\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n//            pauseMedia();\r\n            if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n                isPause = false;\r\n            }\r\n            SharedPreferences ViewQueue = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = ViewQueue.edit();\r\n            Gson gsonx = new Gson();\r\n            String jsonx = gsonx.toJson(addToQueueModelList);\r\n            if (queuePlay) {\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, jsonx);\r\n            }\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, ViewQueueActivity.class);\r\n            i.putExtra(\"ComeFromQueue\", \"0\");\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.llPlay.setOnClickListener(v -> {\r\n            if (!isMediaStart) {\r\n                callMedia();\r\n            } else {\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                resumeMedia();\r\n                isPause = false;\r\n            }\r\n            handler.postDelayed(UpdateSongTime, 100);\r\n        });\r\n\r\n        binding.llPause.setOnClickListener(view -> {\r\n            handler.removeCallbacks(UpdateSongTime);\r\n            binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n            pauseMedia();\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        });\r\n\r\n        binding.llForwardSec.setOnClickListener(v -> {\r\n            ToForward(ctx);\r\n            setProgressBar();\r\n            if (!binding.llPlay.isEnabled()) {\r\n                binding.llPlay.setEnabled(true);\r\n            }\r\n        });\r\n\r\n        binding.llBackWordSec.setOnClickListener(v -> {\r\n            ToBackward(ctx);\r\n            setProgressBar();\r\n            if (!binding.llPlay.isEnabled()) {\r\n                binding.llPlay.setEnabled(true);\r\n            }\r\n        });\r\n\r\n        binding.llnext.setOnClickListener(view -> {\r\n            stopMedia();\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isPause = false;\r\n            if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                // repeat is on play same song again\r\n                if (position < listSize - 1) {\r\n                    position = position + 1;\r\n                } else {\r\n                    position = 0;\r\n                }\r\n                getPrepareShowData(position);\r\n            }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (listSize == 0) {\r\n                            stopMedia();\r\n                        } else if (listSize == 1) {\r\n                            stopMedia();\r\n                        } else {\r\n                            Random random = new Random();\r\n                            position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (position < listSize - 1) {\r\n                            getPrepareShowData(position);\r\n                        } else {\r\n                            if (listSize == 0) {\r\n                                savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                                stopMedia();\r\n                            } else {\r\n                                position = 0;\r\n                                getPrepareShowData(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    if (position < listSize - 1) {\r\n                        position = position + 1;\r\n                        getPrepareShowData(position);\r\n                    } else if (listSize != 1) {\r\n                        position = 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        binding.llprev.setOnClickListener(view -> {\r\n            stopMedia();\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isPause = false;\r\n            if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                // repeat is on play same song again\r\n                if (position > 0) {\r\n                    position = position - 1;\r\n                    getPrepareShowData(position);\r\n                } else if (listSize != 1) {\r\n                    position = listSize - 1;\r\n                    getPrepareShowData(position);\r\n                }\r\n            }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (listSize == 0) {\r\n                            stopMedia();\r\n                        } else if (listSize == 1) {\r\n                            stopMedia();\r\n                        } else {\r\n                            Random random = new Random();\r\n                            position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        addToQueueModelList.remove(position);\r\n                        listSize = addToQueueModelList.size();\r\n                        if (position > 0) {\r\n                            getPrepareShowData(position - 1);\r\n                        } else {\r\n                            if (listSize == 0) {\r\n                                savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                                binding.llPlay.setVisibility(View.VISIBLE);\r\n                                binding.llPause.setVisibility(View.GONE);\r\n                                stopMedia();\r\n                            } else {\r\n                                position = 0;\r\n                                getPrepareShowData(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                } else {\r\n                    if (position > 0) {\r\n                        position = position - 1;\r\n\r\n                        getPrepareShowData(position);\r\n                    } else if (listSize != 1) {\r\n                        position = listSize - 1;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callRepeatShuffle() {\r\n        if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llShuffle.setClickable(true);\r\n                binding.llShuffle.setEnabled(true);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llShuffle.setClickable(true);\r\n                binding.llShuffle.setEnabled(true);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n        if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.llRepeat.setClickable(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.llRepeat.setClickable(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                IsRepeat = \"0\";\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.llRepeat.setClickable(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void setProgressBar() {\r\n        Time t = Time.valueOf(\"00:00:00\");\r\n        String endtimetext = \"\";\r\n        if (queuePlay) {\r\n            if (listSize != 0) {\r\n                endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n            } else {\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                stopMedia();\r\n            }\r\n        } else if (audioPlay) {\r\n            endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n        }\r\n        totalDuration = t.getTime();\r\n        currentDuration = getStartTime();\r\n\r\n        int progress = getProgressPercentage(currentDuration, totalDuration);\r\n        //Log.d(\"Progress\", \"\"+progress);\r\n        startTime = getStartTime();\r\n        if (currentDuration == totalDuration) {\r\n            binding.tvStartTime.setText(endtimetext);\r\n        } else if (isPause) {\r\n            binding.simpleSeekbar.setProgress(progress);\r\n            int timeeee = progressToTimer(progress, (int) (totalDuration));\r\n            binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                    TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        } else {\r\n            binding.simpleSeekbar.setProgress(progress);\r\n            binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(startTime),\r\n                    TimeUnit.MILLISECONDS.toSeconds(startTime) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(startTime))));\r\n        }\r\n    }\r\n\r\n    private void callDownload() {\r\n        if(!url.equalsIgnoreCase(\"\")) {\r\n            disableDownload();\r\n            byte[] EncodeBytes = new byte[1024];\r\n            List<String> url1 = new ArrayList<>();\r\n            List<String> name1 = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url1.addAll(audioFile1);\r\n                    name1.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            url1.add(url);\r\n            name1.add(name);\r\n            downloadPlaylistId.add(\"\");\r\n            if (url1.size() != 0) {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url1);\r\n                String nameJson = gson.toJson(name1);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n            }\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n            downloadMedia.encrypt1(url1, name1, downloadPlaylistId);\r\n            if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n                handler1.postDelayed(UpdateSongTime1, 500);\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }\r\n            SaveMedia(EncodeBytes, FileUtils.getFilePath(getApplicationContext(), name));\r\n   /*     if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<DownloadPlaylistModel> listCall = APIClient.getClient().getDownloadlistPlaylist(UserID, id, PlaylistId);\r\n            listCall.enqueue(new Callback<DownloadPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<DownloadPlaylistModel> call, Response<DownloadPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        DownloadPlaylistModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")\r\n                                || model.getResponseData().getFlag().equalsIgnoreCase(\"\")) {\r\n                            binding.llDownloads.setClickable(true);\r\n                            binding.llDownloads.setEnabled(true);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                            binding.llDownloads.setClickable(false);\r\n                            binding.llDownloads.setEnabled(false);\r\n                        }\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<DownloadPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }*/\r\n        }\r\n    }\r\n\r\n    private void SaveMedia(byte[] EncodeBytes, String dirPath) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                if (queuePlay) {\r\n                    downloadAudioDetails.setID(addToQueueModelList.get(position).getID());\r\n                    downloadAudioDetails.setName(addToQueueModelList.get(position).getName());\r\n                    downloadAudioDetails.setAudioFile(addToQueueModelList.get(position).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(addToQueueModelList.get(position).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(addToQueueModelList.get(position).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(addToQueueModelList.get(position).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(addToQueueModelList.get(position).getImageFile());\r\n                    downloadAudioDetails.setLike(addToQueueModelList.get(position).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(addToQueueModelList.get(position).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                } else if (audioPlay) {\r\n                    downloadAudioDetails.setID(mainPlayModelList.get(position).getID());\r\n                    downloadAudioDetails.setName(mainPlayModelList.get(position).getName());\r\n                    downloadAudioDetails.setAudioFile(mainPlayModelList.get(position).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(mainPlayModelList.get(position).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(mainPlayModelList.get(position).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(mainPlayModelList.get(position).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(mainPlayModelList.get(position).getImageFile());\r\n                    downloadAudioDetails.setLike(mainPlayModelList.get(position).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(mainPlayModelList.get(position).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                }\r\n\r\n                DatabaseClient.getInstance(getApplicationContext())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                disableDownload();\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void disableDownload() {\r\n        binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        binding.llDownload.setClickable(false);\r\n        binding.llDownload.setEnabled(false);\r\n    }\r\n\r\n    private void callShuffle() {\r\n        if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                IsShuffle = \"1\";\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"1\");\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                editor.commit();\r\n                IsRepeat = \"\";\r\n                if (queuePlay) {\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n//                BWSApplication.showToast(\"Shuffle mode has been turned on\", ctx);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n//            BWSApplication.showToast(\"Shuffle mode has been turned off\", ctx);\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n    }\r\n\r\n    private void callRepeat() {\r\n\r\n        if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"0\");\r\n            if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            }\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            IsRepeat = \"0\";\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n//            BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"1\");\r\n            IsRepeat = \"1\";\r\n            if (listSize == 1) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                IsRepeat = \"\";\r\n//                BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n//                BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            editor.commit();\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n        } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n            IsRepeat = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            editor.commit();\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n//            BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n        }\r\n    }\r\n\r\n    private void callLike() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(id, UserID);\r\n            listCall.enqueue(new Callback<AudioLikeModel>() {\r\n                @Override\r\n                public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        AudioLikeModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                        }\r\n                        if (queuePlay) {\r\n                            addToQueueModelList.get(position).setLike(model.getResponseData().getFlag());\r\n                        } else\r\n                            mainPlayModelList.get(position).setLike(model.getResponseData().getFlag());\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(mainPlayModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                        String json1 = gson.toJson(addToQueueModelList);\r\n                        if (queuePlay) {\r\n                            editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n                        }\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                        editor.commit();\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AudioLikeModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void addToRecentPlay() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public void GetMedia(String AudioFile, Context ctx, String download, String PlayListId) {\r\n\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getaudioByPlaylist(AudioFile, \"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if(!AudioFile.equalsIgnoreCase(\"\")) {\r\n                    if (downloadAudioDetailsList.size() != 0) {\r\n                        if (downloadAudioDetailsList.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                            binding.llDownload.setClickable(false);\r\n                            binding.llDownload.setEnabled(false);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                        } else/* if (!mainPlayModelList.get(position).getDownload().equalsIgnoreCase(\"\")) */ {\r\n                            binding.llDownload.setClickable(true);\r\n                            binding.llDownload.setEnabled(true);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                        }\r\n                    } else if (download.equalsIgnoreCase(\"1\")) {\r\n                        binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                        binding.llDownload.setClickable(false);\r\n                        binding.llDownload.setEnabled(false);\r\n                        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                    } else/* if (!mainPlayModelList.get(position).getDownload().equalsIgnoreCase(\"\")) */ {\r\n                        binding.llDownload.setClickable(true);\r\n                        binding.llDownload.setEnabled(true);\r\n                        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n                        binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                    }\r\n                }\r\n           /* if (!isMediaStart) {\r\n             callMedia();\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n            } else {*/\r\n                if (isPause) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n                    int timeeee = progressToTimer(oTime, (int) (totalDuration));\r\n                    binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                            TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n//                    resumeMedia();\r\n                } else if (isMediaStart && !isPause) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                    binding.progressBar.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    callMedia();\r\n                }\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void getPrepareShowData(int position) {\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        if (queuePlay) {\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setClickable(false);\r\n        }\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n        } else if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n        }\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.llShuffle.setClickable(false);\r\n            IsShuffle = \"\";\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }*/ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llShuffle.setEnabled(true);\r\n            binding.llnext.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.llShuffle.setClickable(true);\r\n            if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n            if (listSize == 1) {\r\n                position = 0;\r\n            }\r\n            id = addToQueueModelList.get(position).getID();\r\n            name = addToQueueModelList.get(position).getName();\r\n            url = addToQueueModelList.get(position).getAudioFile();\r\n            GetMedia(url, ctx, addToQueueModelList.get(position).getDownload(), addToQueueModelList.get(position).getPlaylistID());\r\n            binding.tvName.setText(addToQueueModelList.get(position).getName());\r\n            binding.tvDireName.setText(R.string.Directions);\r\n            binding.tvDireName.setText(R.string.Directions);\r\n            if (addToQueueModelList.get(position).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                binding.llDirection.setVisibility(View.GONE);\r\n            } else {\r\n                binding.llDirection.setVisibility(View.VISIBLE);\r\n                binding.tvDireDesc.setText(addToQueueModelList.get(position).getAudioDirection());\r\n            }\r\n            binding.tvTitle.setText(addToQueueModelList.get(position).getAudiomastercat());\r\n            binding.tvDesc.setText(addToQueueModelList.get(position).getAudioSubCategory());\r\n            if (addToQueueModelList.get(position).getPlaylistID() == null) {\r\n                addToQueueModelList.get(position).setPlaylistID(\"\");\r\n            }\r\n            Glide.with(getApplicationContext()).load(addToQueueModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n            if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n            } else if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n            }\r\n            binding.tvSongTime.setText(addToQueueModelList.get(position).getAudioDuration());\r\n\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            startTime = getStartTime();\r\n\r\n        } else if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n            if (listSize == 2) {\r\n                if (mainPlayModelList.get(0).getAudioFile().equalsIgnoreCase(\"\") && !disclaimer) {\r\n                    disclaimer = true;\r\n                    position = 0;\r\n                }\r\n            }\r\n            id = mainPlayModelList.get(position).getID();\r\n            name = mainPlayModelList.get(position).getName();\r\n            url = mainPlayModelList.get(position).getAudioFile();\r\n            if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n                isDisclaimer = 1;\r\n                callAllDisable(false);\r\n\r\n            } else {\r\n                isDisclaimer = 0;\r\n                callAllDisable(true);\r\n            }\r\n            if (mainPlayModelList.get(position).getPlaylistID() == null) {\r\n                mainPlayModelList.get(position).setPlaylistID(\"\");\r\n            }\r\n            GetMedia(url, ctx, mainPlayModelList.get(position).getDownload(), mainPlayModelList.get(position).getPlaylistID());\r\n            binding.tvName.setText(mainPlayModelList.get(position).getName());\r\n            if (mainPlayModelList.get(position).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                binding.llDirection.setVisibility(View.GONE);\r\n            } else {\r\n                binding.llDirection.setVisibility(View.VISIBLE);\r\n                binding.tvDireDesc.setText(mainPlayModelList.get(position).getAudioDirection());\r\n            }\r\n            binding.tvTitle.setText(mainPlayModelList.get(position).getAudiomastercat());\r\n            binding.tvDesc.setText(mainPlayModelList.get(position).getAudioSubCategory());\r\n            if(url.equalsIgnoreCase(\"\")){\r\n                Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n            }else {\r\n                Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n            }\r\n\r\n            if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n            } else if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n            }\r\n            binding.tvSongTime.setText(mainPlayModelList.get(position).getAudioDuration());\r\n            startTime = getStartTime();\r\n        }\r\n        if(!url.equalsIgnoreCase(\"\")) {\r\n            addToRecentPlay();\r\n        }\r\n\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n    }\r\n\r\n    private void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if (null == mediaPlayer) {\r\n            mediaPlayer = new MediaPlayer();\r\n            Log.e(\"Playinggggg\", \"Playinggggg\");\r\n        }\r\n        try {\r\n            if (mediaPlayer == null)\r\n                mediaPlayer = new MediaPlayer();\r\n            if (mediaPlayer.isPlaying()) {\r\n                Log.e(\"Playinggggg\", \"stoppppp\");\r\n                mediaPlayer.stop();\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n                isPause = false;\r\n            }\r\n            mediaPlayer = new MediaPlayer();\r\n            if (download.equalsIgnoreCase(\"1\")) {\r\n                mediaPlayer.setDataSource(fileDescriptor);\r\n            } else {\r\n                mediaPlayer.setDataSource(url);\r\n            }\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                mediaPlayer.setAudioAttributes(\r\n                        new AudioAttributes\r\n                                .Builder()\r\n                                .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                .build());\r\n            }\r\n            mediaPlayer.prepareAsync();\r\n            isPause = false;\r\n            isPrepare = true;\r\n        } catch (IllegalStateException | IOException e) {\r\n            FileDescriptor fileDescriptor1 = null;\r\n            setMediaPlayer(\"0\", fileDescriptor1);\r\n            e.printStackTrace();\r\n        }\r\n        if (!mediaPlayer.isPlaying()) {\r\n            mediaPlayer.setOnPreparedListener(mp -> {\r\n                Log.e(\"Playinggggg\", \"Startinggg\");\r\n                mediaPlayer.start();\r\n                isMediaStart = true;\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n            });\r\n        }\r\n    }\r\n\r\n    private void callMedia() {\r\n        FileDescriptor fileDescriptor = null;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            binding.llProgressBar.setVisibility(View.VISIBLE);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            isPause = false;\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n            getDownloadMedia(downloadMedia);\r\n\r\n        } else {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                setMediaPlayer(\"0\", fileDescriptor);\r\n            } else {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getDownloadMedia(DownloadMedia downloadMedia) {\r\n        class getDownloadMedia extends AsyncTask<Void, Void, Void> {\r\n            FileDescriptor fileDescriptor = null;\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                try {\r\n                    byte[] decrypt = null;\r\n                    decrypt = downloadMedia.decrypt(name);\r\n                    if (decrypt != null) {\r\n                        fileDescriptor = FileUtils.getTempFileDescriptor(getApplicationContext(), decrypt);\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (fileDescriptor != null) {\r\n                    setMediaPlayer(\"1\", fileDescriptor);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        setMediaPlayer(\"0\", fileDescriptor);\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getDownloadMedia st = new getDownloadMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callComplete() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        if (audioPlay) {\r\n            if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n                isDisclaimer = 0;\r\n                disclaimerPlayed = 1;\r\n                isRemoved = true;\r\n                mainPlayModelList.remove(0);\r\n            }\r\n        }\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        isPause = false;\r\n        if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            if (position < (listSize - 1)) {\r\n                position = position + 1;\r\n            } else {\r\n                position = 0;\r\n            }\r\n            getPrepareShowData(position);\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            getPrepareShowData(position);\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            // shuffle is on - play a random song\r\n            if (queuePlay) {\r\n                addToQueueModelList.remove(position);\r\n                listSize = addToQueueModelList.size();\r\n                if (listSize == 0) {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    stopMedia();\r\n                } else if (listSize == 1) {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    stopMedia();\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            } else {\r\n                if (listSize == 1) {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    stopMedia();\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            }\r\n        } else {\r\n            if (queuePlay) {\r\n                addToQueueModelList.remove(position);\r\n                listSize = addToQueueModelList.size();\r\n                if (position < listSize - 1) {\r\n                    getPrepareShowData(position);\r\n                } else {\r\n                    if (listSize == 0) {\r\n                        savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        stopMedia();\r\n                    } else {\r\n                        position = 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            } else {\r\n                if (position < (listSize - 1)) {\r\n                    position = position + 1;\r\n                    getPrepareShowData(position);\r\n                } else {\r\n                    if (listSize == 1) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        stopMedia();\r\n                    } else {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llnext.setEnabled(false);\r\n                binding.llnext.setClickable(false);\r\n                binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llprev.setEnabled(false);\r\n                binding.llprev.setClickable(false);\r\n                binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }*/ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llnext.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        callRepeatShuffle();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callBack();\r\n    }\r\n\r\n    private void callBack() {\r\n//        handler.removeCallbacks(UpdateSongTime);\r\n        handler1.removeCallbacks(UpdateSongTime1);\r\n        player = 1;\r\n        if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n            isPause = false;\r\n        }\r\n//        pauseMedia();\r\n        SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared2.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(addToQueueModelList);\r\n        if (queuePlay) {\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n        }\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        finish();\r\n//        overridePendingTransition(R.anim.enter, R.anim.exit);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n//        releasePlayer();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = gson.fromJson(json, type);\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llMore.setClickable(true);\r\n                binding.llMore.setEnabled(true);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llViewQueue.setClickable(true);\r\n                binding.llViewQueue.setEnabled(true);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (queuePlay) {\r\n            position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            listSize = addToQueueModelList.size();\r\n            if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n            } else if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n            }\r\n        } else if (audioPlay) {\r\n            position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            listSize = mainPlayModelList.size();\r\n            if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n            } else if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n            }\r\n            if (listSize == 2) {\r\n                if (mainPlayModelList.get(0).getAudioFile().equalsIgnoreCase(\"\") && !disclaimer) {\r\n                    disclaimer = true;\r\n                    position = 0;\r\n                }\r\n            }\r\n            url = mainPlayModelList.get(position).getAudioFile();\r\n            if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n                isDisclaimer = 1;\r\n                callAllDisable(false);\r\n\r\n            } else {\r\n                isDisclaimer = 0;\r\n                callAllDisable(true);\r\n            }\r\n        }\r\n        if (comeFromAddToQueue) {\r\n            getPrepareShowData(position);\r\n            comeFromAddToQueue = false;\r\n        }\r\n        if (listSize == 1) {\r\n            position = 0;\r\n        }\r\n       /* if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if ((isMediaStart && isPlaying()) && !isPause) {\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.VISIBLE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        } else {\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        }*/\r\n        super.onResume();\r\n    }\r\n\r\n    private void callAllDisable(boolean b) {\r\n        if (b) {\r\n            binding.llnext.setClickable(true);\r\n            binding.llnext.setEnabled(true);\r\n            binding.llnext.setAlpha(1f);\r\n            binding.llprev.setClickable(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llprev.setAlpha(1f);\r\n            binding.llForwardSec.setClickable(true);\r\n            binding.llForwardSec.setEnabled(true);\r\n            binding.llForwardSec.setAlpha(1f);\r\n            binding.llBackWordSec.setClickable(true);\r\n            binding.llBackWordSec.setEnabled(true);\r\n            binding.llBackWordSec.setAlpha(1f);\r\n            binding.llMore.setClickable(true);\r\n            binding.llMore.setEnabled(true);\r\n            binding.llMore.setAlpha(1f);\r\n            binding.llViewQueue.setClickable(true);\r\n            binding.llViewQueue.setEnabled(true);\r\n            binding.llViewQueue.setAlpha(1f);\r\n            binding.llDownload.setClickable(true);\r\n            binding.llDownload.setEnabled(true);\r\n            binding.llDownload.setAlpha(1f);\r\n            binding.llRepeat.setClickable(true);\r\n            binding.llRepeat.setEnabled(true);\r\n            binding.llRepeat.setAlpha(1f);\r\n            binding.llShuffle.setClickable(true);\r\n            binding.llShuffle.setEnabled(true);\r\n            binding.llShuffle.setAlpha(1f);\r\n            binding.llLike.setClickable(true);\r\n            binding.llLike.setEnabled(true);\r\n            binding.llLike.setAlpha(1f);\r\n            binding.rlSeekbar.setClickable(true);\r\n            binding.rlSeekbar.setEnabled(true);\r\n            binding.simpleSeekbar.setClickable(true);\r\n            binding.simpleSeekbar.setEnabled(true);\r\n//            binding.simpleSeekbar.set\r\n        } else {\r\n            binding.llnext.setClickable(false);\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setAlpha(0.7f);\r\n            binding.llprev.setClickable(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setAlpha(0.7f);\r\n            binding.llForwardSec.setClickable(false);\r\n            binding.llForwardSec.setEnabled(false);\r\n            binding.llForwardSec.setAlpha(0.7f);\r\n            binding.llBackWordSec.setClickable(false);\r\n            binding.llBackWordSec.setEnabled(false);\r\n            binding.llBackWordSec.setAlpha(0.7f);\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.llMore.setAlpha(0.7f);\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.llViewQueue.setAlpha(0.7f);\r\n            binding.llDownload.setClickable(false);\r\n            binding.llDownload.setEnabled(false);\r\n            binding.llDownload.setAlpha(0.7f);\r\n            binding.llRepeat.setClickable(false);\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setAlpha(0.7f);\r\n            binding.llShuffle.setClickable(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.llShuffle.setAlpha(0.7f);\r\n            binding.llLike.setClickable(false);\r\n            binding.llLike.setEnabled(false);\r\n            binding.llLike.setAlpha(0.7f);\r\n            binding.rlSeekbar.setClickable(false);\r\n            binding.rlSeekbar.setEnabled(false);\r\n            binding.simpleSeekbar.setClickable(false);\r\n            binding.simpleSeekbar.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n     /*   handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void onPointerCaptureChanged(boolean hasCapture) {\r\n\r\n    }\r\n /*   @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n                resumeMedia();\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if (isMediaStart) {\r\n                    pauseMedia();\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }*/\r\n\r\n/*    @Override\r\n    public void onProgress(Progress progress) {\r\n        if(!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)){\r\n            handler.postDelayed(UpdateSongTime1, 10);\r\n        }else{\r\n            handler.removeCallbacks(UpdateSongTime1);\r\n        }\r\n    }*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java	(revision 510d8cd2fb59985c09c29f96bb961eb80aa3cdfc)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java	(date 1602750182524)
@@ -1152,52 +1152,56 @@
             startTime = getStartTime();
 
         } else if (audioPlay) {
-            listSize = mainPlayModelList.size();
-            if (listSize == 2) {
-                if (mainPlayModelList.get(0).getAudioFile().equalsIgnoreCase("") && !disclaimer) {
-                    disclaimer = true;
-                    position = 0;
-                }
-            }
-            id = mainPlayModelList.get(position).getID();
-            name = mainPlayModelList.get(position).getName();
-            url = mainPlayModelList.get(position).getAudioFile();
-            if (url.equalsIgnoreCase("") || url.isEmpty()) {
-                isDisclaimer = 1;
-                callAllDisable(false);
+            try {
+                listSize = mainPlayModelList.size();
+                if (listSize == 2) {
+                    if (mainPlayModelList.get(0).getAudioFile().equalsIgnoreCase("") && !disclaimer) {
+                        disclaimer = true;
+                        position = 0;
+                    }
+                }
+                id = mainPlayModelList.get(position).getID();
+                name = mainPlayModelList.get(position).getName();
+                url = mainPlayModelList.get(position).getAudioFile();
+                if (url.equalsIgnoreCase("") || url.isEmpty()) {
+                    isDisclaimer = 1;
+                    callAllDisable(false);
 
-            } else {
-                isDisclaimer = 0;
-                callAllDisable(true);
-            }
-            if (mainPlayModelList.get(position).getPlaylistID() == null) {
-                mainPlayModelList.get(position).setPlaylistID("");
-            }
-            GetMedia(url, ctx, mainPlayModelList.get(position).getDownload(), mainPlayModelList.get(position).getPlaylistID());
-            binding.tvName.setText(mainPlayModelList.get(position).getName());
-            if (mainPlayModelList.get(position).getAudioDirection().equalsIgnoreCase("")) {
-                binding.llDirection.setVisibility(View.GONE);
-            } else {
-                binding.llDirection.setVisibility(View.VISIBLE);
-                binding.tvDireDesc.setText(mainPlayModelList.get(position).getAudioDirection());
-            }
-            binding.tvTitle.setText(mainPlayModelList.get(position).getAudiomastercat());
-            binding.tvDesc.setText(mainPlayModelList.get(position).getAudioSubCategory());
-            if(url.equalsIgnoreCase("")){
-                Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)
-                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);
-            }else {
-                Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)
-                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);
-            }
+                } else {
+                    isDisclaimer = 0;
+                    callAllDisable(true);
+                }
+                if (mainPlayModelList.get(position).getPlaylistID() == null) {
+                    mainPlayModelList.get(position).setPlaylistID("");
+                }
+                GetMedia(url, ctx, mainPlayModelList.get(position).getDownload(), mainPlayModelList.get(position).getPlaylistID());
+                binding.tvName.setText(mainPlayModelList.get(position).getName());
+                if (mainPlayModelList.get(position).getAudioDirection().equalsIgnoreCase("")) {
+                    binding.llDirection.setVisibility(View.GONE);
+                } else {
+                    binding.llDirection.setVisibility(View.VISIBLE);
+                    binding.tvDireDesc.setText(mainPlayModelList.get(position).getAudioDirection());
+                }
+                binding.tvTitle.setText(mainPlayModelList.get(position).getAudiomastercat());
+                binding.tvDesc.setText(mainPlayModelList.get(position).getAudioSubCategory());
+                if(url.equalsIgnoreCase("")){
+                    Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)
+                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);
+                }else {
+                    /*TODO */                Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)
+                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);
+                }
 
-            if (mainPlayModelList.get(position).getLike().equalsIgnoreCase("1")) {
-                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);
-            } else if (mainPlayModelList.get(position).getLike().equalsIgnoreCase("0")) {
-                binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);
-            }
-            binding.tvSongTime.setText(mainPlayModelList.get(position).getAudioDuration());
-            startTime = getStartTime();
+                if (mainPlayModelList.get(position).getLike().equalsIgnoreCase("1")) {
+                    binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);
+                } else if (mainPlayModelList.get(position).getLike().equalsIgnoreCase("0")) {
+                    binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);
+                }
+                binding.tvSongTime.setText(mainPlayModelList.get(position).getAudioDuration());
+                startTime = getStartTime();
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
         }
         if(!url.equalsIgnoreCase("")) {
             addToRecentPlay();
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.media.AudioAttributes;\r\nimport android.media.AudioManager;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.FragmentTransparentPlayerBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPreparing;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isprogressbar;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class TransparentPlayerFragment extends Fragment implements SeekBar.OnSeekBarChangeListener/*, AudioManager.OnAudioFocusChangeListener*/ {\r\n    public FragmentTransparentPlayerBinding binding;\r\n    String UserID, AudioFlag, IsRepeat, IsShuffle, audioFile, id, name;\r\n    int position = 0, startTime, listSize,myCount,progress;\r\n    MainPlayModel mainPlayModel;\r\n    Boolean queuePlay, audioPlay;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<AddToQueueModel> addToQueueModelList;\r\n    boolean downloadPlay = false;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    Activity activity;\r\n    Context ctx;\r\n    private long mLastClickTime = 0, totalDuration, currentDuration = 0;\r\n    private Handler handler;\r\n    long myProgress=0;\r\n    SharedPreferences shared;\r\n    public static int isDisclaimer = 0;\r\n    public static boolean disclaimer = false,isPlayingDisclaimer = false;\r\n    public static boolean isRemoved = false,newClick = false;\r\n\r\n    //        private AudioManager mAudioManager;\r\n    private Runnable UpdateSongTime = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                startTime = getStartTime();\r\n                binding.simpleSeekbar.setMax(100);\r\n                Time t = Time.valueOf(\"00:00:00\");\r\n                if (queuePlay) {\r\n                    if (listSize != 0) {\r\n                        if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        stopMedia();\r\n                    }\r\n                } else if (audioPlay) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                        }\r\n                    } else {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else\r\n                        totalDuration = t.getTime();\r\n                } else {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else {\r\n                        totalDuration = t.getTime();\r\n                    }\r\n                }\r\n                myProgress = currentDuration;\r\n                currentDuration = getStartTime();\r\n\r\n                Log.e(\"myProgress old!!!\",String.valueOf(myProgress));\r\n                if(myProgress == currentDuration && myProgress!=0 && !isPause){\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                    myCount++;\r\n                    Log.e(\"myCount\",String.valueOf(myCount));\r\n\r\n                    if(myCount == 50){\r\n                        Log.e(\"myCount complete\",String.valueOf(myCount));\r\n                        callComplete();\r\n                        myCount = 0;\r\n                    }\r\n                }\r\n\r\n                int progress = (int) (getProgressPercentage(currentDuration, totalDuration));\r\n                if (player == 1) {\r\n                    if (currentDuration == 0 && (!isPause || !isStop)) {\r\n                        binding.progressBar.setVisibility(View.VISIBLE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.GONE);\r\n                    } else if (currentDuration > 1 && !isPause) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.VISIBLE);\r\n                        binding.ivPlay.setVisibility(View.GONE);\r\n                    } else if (currentDuration >= 1 && isPause) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    }\r\n                } else {\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.ivPause.setVisibility(View.GONE);\r\n                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n                }\r\n                long diff = totalDuration - currentDuration;\r\n                if (currentDuration == totalDuration && currentDuration != 0 && !isStop) {\r\n                    callComplete();\r\n                }\r\n                //Log.d(\"Progress\", \"\"+progress);\r\n                if (isPause) {\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n                } else {\r\n                    binding.simpleSeekbar.setProgress(progress);\r\n                }\r\n                // Running this thread after 100 milliseconds\r\n                handler.postDelayed(this, 100);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    };\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_transparent_player, container, false);\r\n        View view = binding.getRoot();\r\n        activity = getActivity();\r\n        ctx = getActivity();\r\n        mainPlayModelList = new ArrayList<>();\r\n        addToQueueModelList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        handler = new Handler();\r\n          shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        Gson gson = new Gson();\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n\r\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        params.setMargins(0, 0, 0, 130);\r\n        binding.llLayout.setLayoutParams(params);\r\n\r\n        if (comefromDownload.equalsIgnoreCase(\"1\")) {\r\n            LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            param.setMargins(0, 0, 0, 0);\r\n            binding.llLayout.setLayoutParams(param);\r\n        } else {\r\n            LinearLayout.LayoutParams paramm = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            paramm.setMargins(0, 0, 0, 130);\r\n            binding.llLayout.setLayoutParams(paramm);\r\n\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        SharedPreferences Status = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n    /*    mAudioManager = (AudioManager) ctx.getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        if (queuePlay) {\r\n            getPrepareShowData();\r\n        } else if (audioPlay) {\r\n            if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n                Type type = new TypeToken<MainAudioModel.ResponseData.Detail>() {\r\n                }.getType();\r\n                MainAudioModel.ResponseData.Detail arrayList = gson.fromJson(json, type);\r\n//            listSize = arrayList.size();\r\n//            for (int i = 0; i < listSize; i++) {\r\n\r\n                if(!isRemoved || newClick/* && !isPlayingDisclaimer && newClick*/) {\r\n                    addDeclaimer();\r\n                }\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.getID());\r\n                mainPlayModel.setName(arrayList.getName());\r\n                mainPlayModel.setAudioFile(arrayList.getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.getImageFile());\r\n                mainPlayModel.setLike(arrayList.getLike());\r\n                mainPlayModel.setDownload(arrayList.getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n                //}\r\n                SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = sharedz.edit();\r\n                Gson gsonz = new Gson();\r\n                String jsonz = gsonz.toJson(mainPlayModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n                editor.commit();\r\n                getPrepareShowData();\r\n\r\n            } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n                Type type = new TypeToken<ViewAllAudioListModel.ResponseData.Detail>() {\r\n                }.getType();\r\n                ViewAllAudioListModel.ResponseData.Detail arrayList = gson.fromJson(json, type);\r\n//            listSize = arrayList.size();\r\n//                for (int i = 0; i < listSize; i++) {\r\n                if(!isRemoved || newClick/* && !isPlayingDisclaimer && newClick*/) {\r\n                    addDeclaimer();\r\n                }\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.getID());\r\n                mainPlayModel.setName(arrayList.getName());\r\n                mainPlayModel.setAudioFile(arrayList.getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.getImageFile());\r\n                mainPlayModel.setLike(arrayList.getLike());\r\n                mainPlayModel.setDownload(arrayList.getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n//                }\r\n                SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = sharedz.edit();\r\n                Gson gsonz = new Gson();\r\n                String jsonz = gsonz.toJson(mainPlayModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n                editor.commit();\r\n                getPrepareShowData();\r\n            } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                Type type = new TypeToken<AppointmentDetailModel.Audio>() {\r\n                }.getType();\r\n                AppointmentDetailModel.Audio arrayList = gson.fromJson(json, type);\r\n//            listSize = arrayList.size();\r\n//                for (int i = 0; i < listSize; i++) {\r\n                if(!isRemoved || newClick/* && !isPlayingDisclaimer && newClick*/) {\r\n                    addDeclaimer();\r\n                }\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.getID());\r\n                mainPlayModel.setName(arrayList.getName());\r\n                mainPlayModel.setAudioFile(arrayList.getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.getImageFile());\r\n                mainPlayModel.setLike(arrayList.getLike());\r\n                mainPlayModel.setDownload(arrayList.getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n//                }\r\n                SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = sharedz.edit();\r\n                Gson gsonz = new Gson();\r\n                String jsonz = gsonz.toJson(mainPlayModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n                editor.commit();\r\n                getPrepareShowData();\r\n            } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n                Type type = new TypeToken<DownloadAudioDetails>() {\r\n                }.getType();\r\n                DownloadAudioDetails arrayList = gson.fromJson(json, type);\r\n//                listSize = arrayList.size();\r\n//                for (int i = 0; i < listSize; i++) {\r\n                if(!isRemoved || newClick/* && !isPlayingDisclaimer && newClick*/) {\r\n                    addDeclaimer();\r\n                }\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.getID());\r\n                mainPlayModel.setName(arrayList.getName());\r\n                mainPlayModel.setAudioFile(arrayList.getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.getImageFile());\r\n                mainPlayModel.setLike(arrayList.getLike());\r\n                mainPlayModel.setDownload(arrayList.getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n                downloadPlay = true;\r\n//                }\r\n                SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = sharedz.edit();\r\n                Gson gsonz = new Gson();\r\n                String jsonz = gsonz.toJson(mainPlayModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n                editor.commit();\r\n                getPrepareShowData();\r\n            } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n                Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n                }.getType();\r\n                ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n                listSize = arrayList.size();\r\n                if(!isRemoved || newClick/* && !isPlayingDisclaimer && newClick*/) {\r\n                    addDeclaimer();\r\n                }\r\n                for (int i = 0; i < listSize; i++) {\r\n                    mainPlayModel = new MainPlayModel();\r\n                    mainPlayModel.setID(arrayList.get(i).getID());\r\n                    mainPlayModel.setName(arrayList.get(i).getName());\r\n                    mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                    mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                    mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                    mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                    mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                    mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                    mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                    mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                    mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                    mainPlayModelList.add(mainPlayModel);\r\n                    downloadPlay = true;\r\n                }\r\n                SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = sharedz.edit();\r\n                Gson gsonz = new Gson();\r\n                String jsonz = gsonz.toJson(mainPlayModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n                editor.commit();\r\n                getPrepareShowData();\r\n            } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n                }.getType();\r\n                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n                listSize = arrayList.size();\r\n                if(!isRemoved || newClick/* && !isPlayingDisclaimer && newClick*/) {\r\n                    addDeclaimer();\r\n                }\r\n                for (int i = 0; i < listSize; i++) {\r\n                    mainPlayModel = new MainPlayModel();\r\n                    mainPlayModel.setID(arrayList.get(i).getID());\r\n                    mainPlayModel.setName(arrayList.get(i).getName());\r\n                    mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                    mainPlayModel.setPlaylistID(\"\");\r\n                    mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                    mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                    mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                    mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                    mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                    mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                    mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                    mainPlayModelList.add(mainPlayModel);\r\n                }\r\n                SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = sharedz.edit();\r\n                Gson gsonz = new Gson();\r\n                String jsonz = gsonz.toJson(mainPlayModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n                editor.commit();\r\n                getPrepareShowData();\r\n            } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n                }.getType();\r\n                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n                listSize = arrayList.size();\r\n                if(isDisclaimer == 0 && disclaimerPlayed == 0){\r\n                    addDeclaimer();\r\n                }\r\n                for (int i = 0; i < listSize; i++) {\r\n                    mainPlayModel = new MainPlayModel();\r\n                    mainPlayModel.setID(arrayList.get(i).getID());\r\n                    mainPlayModel.setName(arrayList.get(i).getName());\r\n                    mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                    mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                    mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                    mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                    mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                    mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                    mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                    mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                    mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                    mainPlayModelList.add(mainPlayModel);\r\n                }\r\n                SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = sharedz.edit();\r\n                Gson gsonz = new Gson();\r\n                String jsonz = gsonz.toJson(mainPlayModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n                editor.commit();\r\n                getPrepareShowData();\r\n            }\r\n        }\r\n        if (listSize == 1) {\r\n            IsShuffle = \"\";\r\n        }\r\n        binding.ivPause.setOnClickListener(view1 -> {\r\n            handler.removeCallbacks(UpdateSongTime);\r\n            binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n            if (!isMediaStart) {\r\n//                callAsyncTask();\r\n                callMedia();\r\n            } else {\r\n                pauseMedia();\r\n                binding.ivPause.setVisibility(View.GONE);\r\n                binding.ivPlay.setVisibility(View.VISIBLE);\r\n            }\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        });\r\n\r\n        binding.ivPlay.setOnClickListener(view12 -> {\r\n            if (!isMediaStart) {\r\n                callMedia();\r\n            } else {\r\n                resumeMedia();\r\n                binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                binding.ivPlay.setVisibility(View.GONE);\r\n                binding.ivPause.setVisibility(View.VISIBLE);\r\n                isPause = false;\r\n            }\r\n            player = 1;\r\n            handler.postDelayed(UpdateSongTime, 100);\r\n        });\r\n\r\n        return view;\r\n    }\r\n\r\n    private void addDeclaimer() {\r\n        mainPlayModel = new MainPlayModel();\r\n        mainPlayModel.setID(\"0\");\r\n        mainPlayModel.setName(\"Disclaimer\");\r\n        mainPlayModel.setAudioFile(\"\");\r\n        mainPlayModel.setPlaylistID(\"\");\r\n        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n        mainPlayModel.setAudiomastercat(\"\");\r\n        mainPlayModel.setAudioSubCategory(\"\");\r\n        mainPlayModel.setImageFile(\"\");\r\n        mainPlayModel.setLike(\"\");\r\n        mainPlayModel.setDownload(\"\");\r\n        mainPlayModel.setAudioDuration(\"0:48\");\r\n        mainPlayModelList.add(mainPlayModel);\r\n    }\r\n\r\n    private void addToRecentPlay() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n//            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n//                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n//                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public void GetMedia(String url, Context ctx) {\r\n\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(url);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (player == 1) {\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n//                    binding.llProgress.setVisibility(View.GONE);\r\n                    if (isPause) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        binding.simpleSeekbar.setProgress(oTime);\r\n                    } else if (isMediaStart && !isPause) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.VISIBLE);\r\n                        binding.ivPlay.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.VISIBLE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.GONE);\r\n                        callMedia();\r\n                    }\r\n                } else {\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n//                    binding.llProgress.setVisibility(View.GONE);\r\n                    binding.ivPause.setVisibility(View.GONE);\r\n                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void getPrepareShowData() {\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n            if (listSize == 1) {\r\n                position = 0;\r\n            }\r\n            if (position == listSize) {\r\n                position = position - 1;\r\n            }\r\n            if (listSize != 0) {\r\n                id = addToQueueModelList.get(position).getID();\r\n                name = addToQueueModelList.get(position).getName();\r\n                audioFile = addToQueueModelList.get(position).getAudioFile();\r\n                GetMedia(audioFile, ctx);\r\n                Glide.with(ctx).load(addToQueueModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                binding.tvTitle.setText(addToQueueModelList.get(position).getName());\r\n                binding.tvSubTitle.setText(addToQueueModelList.get(position).getAudioDirection());\r\n                handler.postDelayed(UpdateSongTime, 100);\r\n            }\r\n        } else if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n            if(listSize == 2){\r\n                if(mainPlayModelList.get(0).getAudioFile().equalsIgnoreCase(\"\") && !disclaimer){\r\n                    disclaimer = true;\r\n                    position = 0;\r\n                }\r\n            }\r\n            if (listSize == 1) {\r\n                position = 0;\r\n            }\r\n            if (listSize != 0) {\r\n                id = mainPlayModelList.get(position).getID();\r\n                name = mainPlayModelList.get(position).getName();\r\n                audioFile = mainPlayModelList.get(position).getAudioFile();\r\n                if(audioFile.equalsIgnoreCase(\"\")){\r\n                    Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                }else {\r\n                    Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                }\r\n                binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                GetMedia(audioFile, ctx);\r\n                handler.postDelayed(UpdateSongTime, 100);\r\n            }\r\n            if(audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()){\r\n                isDisclaimer = 1;\r\n                binding.simpleSeekbar.setClickable(false);\r\n                binding.simpleSeekbar.setEnabled(false);\r\n            }else{\r\n                isDisclaimer = 0;\r\n                binding.simpleSeekbar.setClickable(true);\r\n                binding.simpleSeekbar.setEnabled(true);\r\n            }\r\n        }\r\n        if (isMediaStart) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n            });\r\n        }\r\n        startTime = getStartTime();\r\n\r\n        if(!audioFile.equalsIgnoreCase(\"\")) {\r\n            addToRecentPlay();\r\n        }\r\n        binding.llPlayearMain.setOnClickListener(view -> {\r\n            if (player == 0) {\r\n                player = 1;\r\n            }\r\n            if (!isPause && binding.progressBar.getVisibility() == View.GONE) {\r\n                isPause = false;\r\n                isprogressbar = false;\r\n            } else if (isPause && binding.progressBar.getVisibility() == View.GONE) {\r\n                isPause = true;\r\n                isprogressbar = false;\r\n            } else if (binding.progressBar.getVisibility() == View.VISIBLE && (binding.ivPause.getVisibility() == View.GONE && binding.ivPlay.getVisibility() == View.GONE)) {\r\n                isprogressbar = true;\r\n            }\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n            String json1 = gson.toJson(addToQueueModelList);\r\n            if (queuePlay) {\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n            }\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            ctx.startActivity(i);\r\n\r\n//            simpleNotification();\r\n        });\r\n    }\r\n\r\n    private void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if(download.equalsIgnoreCase(\"2\")) {\r\n                mediaPlayer = MediaPlayer.create(getActivity(), R.raw.brain_wellness_spa_declaimer);\r\n                mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\r\n//            Uri uri = Uri.parse(\"android.resource://com.brainwellnessspa/\" + R.raw.brain_wellness_spa_declaimer);\r\n//            mediaPlayer.setDataSource(String.valueOf(uri));\r\n                mediaPlayer.start();\r\n                isPrepare = true;\r\n                isPlayingDisclaimer = true;\r\n                isMediaStart = true;\r\n        }else {\r\n            if (null == mediaPlayer) {\r\n                mediaPlayer = new MediaPlayer();\r\n                Log.e(\"Playinggggg\", \"Playinggggg\");\r\n            }\r\n            try {\r\n                if (mediaPlayer == null)\r\n                    mediaPlayer = new MediaPlayer();\r\n                if (mediaPlayer.isPlaying()) {\r\n                    Log.e(\"Playinggggg\", \"stoppppp\");\r\n                    mediaPlayer.stop();\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                }\r\n                isPreparing = true;\r\n                mediaPlayer = new MediaPlayer();\r\n                if (download.equalsIgnoreCase(\"1\")) {\r\n                    mediaPlayer.setDataSource(fileDescriptor);\r\n                } else {\r\n                    mediaPlayer.setDataSource(audioFile);\r\n                    Log.e(\"Playinggggxxxxx\", \"Startinggg1xxxxx\");\r\n                }\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                    mediaPlayer.setAudioAttributes(\r\n                            new AudioAttributes\r\n                                    .Builder()\r\n                                    .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                    .build());\r\n                    Log.e(\"Playinggggg11111111\", \"Startinggg111111111\");\r\n                }\r\n                mediaPlayer.prepareAsync();\r\n                isPrepare = true;\r\n            } catch (IllegalStateException | IOException e) {\r\n                FileDescriptor fileDescriptor1 = null;\r\n                setMediaPlayer(\"0\", fileDescriptor1);\r\n                e.printStackTrace();\r\n            }\r\n            if (!mediaPlayer.isPlaying()) {\r\n                mediaPlayer.setOnPreparedListener(mp -> {\r\n                    Log.e(\"Playinggggg\", \"Startinggg\");\r\n                    mediaPlayer.start();\r\n                    isMediaStart = true;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callMedia() {\r\n        binding.progressBar.setVisibility(View.VISIBLE);\r\n//        binding.llProgress.setVisibility(View.VISIBLE);\r\n        binding.ivPlay.setVisibility(View.GONE);\r\n        binding.ivPause.setVisibility(View.GONE);\r\n        FileDescriptor fileDescriptor = null;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n//        binding.llProgress.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            DownloadMedia downloadMedia = new DownloadMedia(ctx.getApplicationContext());\r\n            try {\r\n                byte[] decrypt = null;\r\n                decrypt = downloadMedia.decrypt(name);\r\n                if (decrypt != null) {\r\n                    fileDescriptor = FileUtils.getTempFileDescriptor(ctx.getApplicationContext(), decrypt);\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        setMediaPlayer(\"2\",fileDescriptor);\r\n                    } else {\r\n                        setMediaPlayer(\"1\", fileDescriptor);\r\n                    }\r\n                } else {\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        setMediaPlayer(\"2\",fileDescriptor);\r\n                    } else {\r\n                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                            setMediaPlayer(\"0\", fileDescriptor);\r\n//                mediaPlayer.setDataSource(audioFile);\r\n                        } else {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                        }\r\n                    }\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                setMediaPlayer(\"2\",fileDescriptor);\r\n            } else {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    setMediaPlayer(\"0\", fileDescriptor);\r\n//                mediaPlayer.setDataSource(audioFile);\r\n                } else {\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    binding.ivPause.setVisibility(View.GONE);\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callComplete() {\r\n        if (audioPlay) {\r\n            if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                isDisclaimer = 0;\r\n                disclaimerPlayed = 1;\r\n                isRemoved = true;\r\n                isPlayingDisclaimer = false;\r\n                mainPlayModelList.remove(0);\r\n                position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            }\r\n        }\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            if (position < (listSize - 1)) {\r\n                position = position + 1;\r\n            } else {\r\n                position = 0;\r\n            }\r\n            getPrepareShowData();\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            getPrepareShowData();\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            // shuffle is on - play a random song\r\n            if (queuePlay) {\r\n                addToQueueModelList.remove(position);\r\n                listSize = addToQueueModelList.size();\r\n                if (listSize == 0) {\r\n                    stopMedia();\r\n                } else if (listSize == 1) {\r\n                    position = 0;\r\n                    getPrepareShowData();\r\n                } else {\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    getPrepareShowData();\r\n                }\r\n            } else {\r\n                if (listSize == 1) {\r\n\r\n                } else {\r\n                    int oldPosition = position;\r\n                    Random random = new Random();\r\n                    position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    if (oldPosition == position) {\r\n                        Random random1 = new Random();\r\n                        position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                    }\r\n                    getPrepareShowData();\r\n                }\r\n            }\r\n        } else {\r\n            if (queuePlay) {\r\n                addToQueueModelList.remove(position);\r\n                listSize = addToQueueModelList.size();\r\n                if (position < listSize - 1) {\r\n                    getPrepareShowData();\r\n                } else {\r\n                    if (listSize == 0) {\r\n                        savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                        stopMedia();\r\n                    } else {\r\n                        position = 0;\r\n                        getPrepareShowData();\r\n                    }\r\n                }\r\n            } else {\r\n                if(listSize == 1) {\r\n                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    binding.ivPause.setVisibility(View.GONE);\r\n                    stopMedia();\r\n                }else if (position < (listSize - 1)) {\r\n                    position = position + 1;\r\n                    getPrepareShowData();\r\n                } else {\r\n                    if (listSize == 1) {\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        stopMedia();\r\n                    } else {\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n    }\r\n\r\n    private void callAsyncTask() {\r\n/*        class SaveTask extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                play(Uri.parse(audioFile));\r\n                playMedia();\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llProgress.setVisibility(View.VISIBLE);\r\n                binding.ivPlay.setVisibility(View.GONE);\r\n                binding.ivPause.setVisibility(View.GONE);\r\n\r\n                return null;\r\n            }\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n                binding.ivPlay.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgress.setVisibility(View.GONE);\r\n                binding.ivPause.setVisibility(View.VISIBLE);\r\n            }\r\n        }\r\n\r\n        SaveTask st = new SaveTask();\r\n        st.execute();*/\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n    /*    handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n\r\n        int totalDuration = getEndTime();\r\n        int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n        // forward or backward to certain seconds\r\n        SeekTo(currentPosition);\r\n\r\n        oTime = binding.simpleSeekbar.getProgress();\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (queuePlay) {\r\n            position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            listSize = addToQueueModelList.size();\r\n        } else if (audioPlay) {\r\n            position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            listSize = mainPlayModelList.size();\r\n        }\r\n\r\n        if (listSize == 1) {\r\n            position = 0;\r\n        }\r\n        if(audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()){\r\n            isDisclaimer = 1;\r\n            binding.ivPlay.setClickable(false);\r\n            binding.ivPlay.setEnabled(false);\r\n            binding.ivPause.setClickable(false);\r\n            binding.ivPause.setEnabled(false);\r\n            binding.simpleSeekbar.setClickable(false);\r\n            binding.flProgress.setClickable(false);\r\n            binding.flProgress.setEnabled(false);\r\n            binding.ivPlay.setColorFilter(getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            binding.ivPause.setColorFilter(getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n        }else{\r\n            isDisclaimer = 0;\r\n            binding.ivPlay.setClickable(true);\r\n            binding.ivPlay.setEnabled(true);\r\n            binding.ivPause.setClickable(true);\r\n            binding.ivPause.setEnabled(true);\r\n            binding.simpleSeekbar.setClickable(true);\r\n            binding.flProgress.setClickable(true);\r\n            binding.flProgress.setEnabled(true);\r\n            binding.ivPlay.setColorFilter(getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n            binding.ivPause.setColorFilter(getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n        }\r\n        SharedPreferences Status = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n      /*  if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if (isMediaStart && !isPause) {\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n        } else {\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n        }*/\r\n        super.onResume();\r\n    }\r\n\r\n   /* @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n                resumeMedia();\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if (isMediaStart) {\r\n                    pauseMedia();\r\n//                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n//                    binding.ivPause.setVisibility(View.GONE);\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java	(revision 510d8cd2fb59985c09c29f96bb961eb80aa3cdfc)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java	(date 1602750182397)
@@ -512,7 +512,7 @@
     }
 
     private void addDeclaimer() {
-        mainPlayModel = new MainPlayModel();
+       /* mainPlayModel = new MainPlayModel();
         mainPlayModel.setID("0");
         mainPlayModel.setName("Disclaimer");
         mainPlayModel.setAudioFile("");
@@ -524,7 +524,7 @@
         mainPlayModel.setLike("");
         mainPlayModel.setDownload("");
         mainPlayModel.setAudioDuration("0:48");
-        mainPlayModelList.add(mainPlayModel);
+        mainPlayModelList.add(mainPlayModel);*/
     }
 
     private void addToRecentPlay() {
Index: app/src/main/res/layout/fragment_playlist.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<layout>\r\n\r\n    <FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        android:id=\"@+id/flContainer\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:background=\"@color/white\">\r\n\r\n        <RelativeLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\">\r\n\r\n            <androidx.core.widget.NestedScrollView\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:overScrollMode=\"never\">\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginBottom=\"@dimen/_18sdp\"\r\n                    android:orientation=\"vertical\">\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvExplore\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:layout_marginLeft=\"@dimen/_16sdp\"\r\n                        android:layout_marginTop=\"@dimen/_10sdp\"\r\n                        android:layout_marginRight=\"@dimen/_16sdp\"\r\n                        android:layout_marginBottom=\"@dimen/_6sdp\"\r\n                        android:fontFamily=\"@font/montserrat_bold\"\r\n                        android:gravity=\"start\"\r\n                        android:text=\"@string/Playlist\"\r\n                        android:textColor=\"@color/black\"\r\n                        android:textSize=\"@dimen/_30sdp\" />\r\n\r\n                    <LinearLayout\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:orientation=\"horizontal\"\r\n                        android:weightSum=\"1\">\r\n\r\n                        <LinearLayout\r\n                            android:id=\"@+id/rlCreatePlaylist\"\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_marginTop=\"@dimen/_8sdp\"\r\n                            android:layout_weight=\"0.45\"\r\n                            android:orientation=\"vertical\"\r\n                            android:gravity=\"center_horizontal\"\r\n                            android:visibility=\"visible\">\r\n\r\n                            <RelativeLayout\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_marginLeft=\"@dimen/_16sdp\"\r\n                                android:layout_marginRight=\"@dimen/_9sdp\">\r\n\r\n                                <ImageView\r\n                                    android:layout_width=\"wrap_content\"\r\n                                    android:layout_height=\"wrap_content\"\r\n                                    android:scaleType=\"fitXY\"\r\n                                    app:layout_constraintDimensionRatio=\"1:1\"\r\n                                    android:src=\"@drawable/ic_create_playlist\" />\r\n\r\n                                <ImageView\r\n                                    android:id=\"@+id/ivLock\"\r\n                                    android:layout_width=\"@dimen/_24sdp\"\r\n                                    android:layout_height=\"@dimen/_24sdp\"\r\n                                    android:layout_marginStart=\"@dimen/_8sdp\"\r\n                                    android:layout_marginLeft=\"@dimen/_8sdp\"\r\n                                    android:layout_marginTop=\"@dimen/_10sdp\"\r\n                                    android:contentDescription=\"TODO\"\r\n                                    android:src=\"@drawable/ic_lock_icon\"\r\n                                    android:visibility=\"gone\"\r\n                                    app:layout_constraintLeft_toLeftOf=\"parent\"\r\n                                    app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n                            </RelativeLayout>\r\n                            <TextView\r\n                                android:layout_width=\"match_parent\"\r\n                                android:layout_height=\"wrap_content\"\r\n                                android:layout_alignParentBottom=\"true\"\r\n                                android:fontFamily=\"@font/montserrat_semi_bold\"\r\n                                android:gravity=\"start\"\r\n                                android:layout_marginLeft=\"@dimen/_16sdp\"\r\n                                android:layout_marginRight=\"@dimen/_9sdp\"\r\n                                android:maxLines=\"2\"\r\n                                android:paddingLeft=\"@dimen/_13sdp\"\r\n                                android:paddingTop=\"@dimen/_8sdp\"\r\n                                android:paddingRight=\"@dimen/_13sdp\"\r\n                                android:paddingBottom=\"@dimen/_8sdp\"\r\n                                android:text=\"@string/Add_playlist1\"\r\n                                android:textColor=\"@color/black\"\r\n                                android:textSize=\"@dimen/_15sdp\" />\r\n                        </LinearLayout>\r\n\r\n                        <LinearLayout\r\n                            android:layout_width=\"0dp\"\r\n                            android:layout_height=\"match_parent\"\r\n                            android:layout_marginLeft=\"@dimen/_9sdp\"\r\n                            android:layout_marginRight=\"@dimen/_16sdp\"\r\n                            android:layout_weight=\"0.60\"\r\n                            android:gravity=\"center_horizontal\" />\r\n\r\n                    </LinearLayout>\r\n\r\n                    <LinearLayout\r\n                        android:id=\"@+id/llSpace\"\r\n                        android:layout_width=\"match_parent\"\r\n                        android:layout_height=\"wrap_content\">\r\n\r\n                        <androidx.recyclerview.widget.RecyclerView\r\n                            android:id=\"@+id/rvMainPlayList\"\r\n                            android:layout_width=\"match_parent\"\r\n                            android:layout_height=\"wrap_content\"\r\n                            android:overScrollMode=\"never\"\r\n                            android:paddingBottom=\"@dimen/_80sdp\" />\r\n\r\n                    </LinearLayout>\r\n\r\n                </LinearLayout>\r\n            </androidx.core.widget.NestedScrollView>\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:gravity=\"center\"\r\n                android:padding=\"@dimen/_60sdp\">\r\n\r\n                <ProgressBar\r\n                    android:id=\"@+id/progressBar\"\r\n                    android:layout_width=\"@dimen/_50sdp\"\r\n                    android:layout_height=\"@dimen/_50sdp\"\r\n                    android:indeterminateTint=\"@color/blue\"\r\n                    android:scaleType=\"centerInside\"\r\n                    android:visibility=\"gone\" />\r\n\r\n            </LinearLayout>\r\n\r\n            <FrameLayout\r\n                android:id=\"@+id/progressBarHolder\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"match_parent\"\r\n                android:alpha=\"0.4\"\r\n                android:animateLayoutChanges=\"true\"\r\n                android:background=\"#C0000000\"\r\n                android:visibility=\"gone\" />\r\n        </RelativeLayout>\r\n\r\n    </FrameLayout>\r\n</layout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_playlist.xml	(revision 510d8cd2fb59985c09c29f96bb961eb80aa3cdfc)
+++ app/src/main/res/layout/fragment_playlist.xml	(date 1602749490624)
@@ -40,15 +40,13 @@
                     <LinearLayout
                         android:layout_width="match_parent"
                         android:layout_height="wrap_content"
-                        android:orientation="horizontal"
-                        android:weightSum="1">
+                        android:orientation="horizontal">
 
                         <LinearLayout
                             android:id="@+id/rlCreatePlaylist"
-                            android:layout_width="0dp"
-                            android:layout_height="match_parent"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
                             android:layout_marginTop="@dimen/_8sdp"
-                            android:layout_weight="0.45"
                             android:orientation="vertical"
                             android:gravity="center_horizontal"
                             android:visibility="visible">
@@ -98,14 +96,6 @@
                                 android:textSize="@dimen/_15sdp" />
                         </LinearLayout>
 
-                        <LinearLayout
-                            android:layout_width="0dp"
-                            android:layout_height="match_parent"
-                            android:layout_marginLeft="@dimen/_9sdp"
-                            android:layout_marginRight="@dimen/_16sdp"
-                            android:layout_weight="0.60"
-                            android:gravity="center_horizontal" />
-
                     </LinearLayout>
 
                     <LinearLayout
