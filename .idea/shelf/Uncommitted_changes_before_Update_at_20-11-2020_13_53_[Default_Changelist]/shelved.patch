Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/MyPlaylistActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.SystemClock;\r\nimport android.text.Editable;\r\nimport android.text.Selection;\r\nimport android.text.TextWatcher;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.PlaylistLikeModel;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Adapters.DirectionAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Models.RenamePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Playlist.PlaylistFragment;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.ActivityMyPlaylistBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.RefreshIconData;\r\n\r\npublic class MyPlaylistActivity extends AppCompatActivity {\r\n    public static int deleteFrg = 0;\r\n    public static int ComeFindAudio = 0;\r\n    ActivityMyPlaylistBinding binding;\r\n    String UserID, PlaylistID, Download = \"\", Liked = \"\";\r\n    Context ctx;\r\n    Activity activity;\r\n    public static int comeAddPlaylist = 0;\r\n    public static int comeRename = 0;\r\n    private long mLastClickTime = 0;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    List<DownloadAudioDetails> playlistWiseAudioDetails;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    DownloadPlaylistDetails downloadPlaylistDetails;\r\n    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongsList;\r\n    List<String> fileNameList, playlistDownloadId, remainAudio;\r\n    int SongListSize = 0, count;\r\n  /*  private Handler handler1;\r\n    private Runnable UpdateSongTime1 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n*//*            if (fileNameList.size() != 0) {\r\n                if (remainAudio.size() <= SongListSize) {\r\n                    int total = SongListSize;\r\n                    int remain = remainAudio.size();\r\n                    int complate = total - remain;\r\n                    long progressPercent = complate * 100 / total;\r\n                    int downloadProgress1 = (int) progressPercent;\r\n                    if (SongListSize == 1) {\r\n                        if (downloadProgress <= 100) {\r\n                            binding.pbProgress.setProgress(downloadProgress);\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            if(downloadProgress == 100){\r\n                                getDownloadData();\r\n                            }\r\n                        }\r\n                    } else if (downloadProgress1 <= 100) {\r\n                        if(downloadProgress1 == 100){\r\n                            getDownloadData();\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        }else{\r\n                            binding.pbProgress.setProgress(downloadProgress1);\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                getDownloadData();\r\n                handler1.postDelayed(this, 500);\r\n            }else{\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n                getDownloadData();\r\n            }*//*\r\n//            getMediaByPer(PlaylistID,SongListSize);\r\n        }\r\n    };*/\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_my_playlist);\r\n        ctx = MyPlaylistActivity.this;\r\n        activity = MyPlaylistActivity.this;\r\n//        handler1 = new Handler();\r\n        fileNameList = new ArrayList<>();\r\n        playlistDownloadId = new ArrayList<>();\r\n        remainAudio = new ArrayList<>();\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        playlistSongsList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        if (getIntent().getExtras() != null) {\r\n            PlaylistID = getIntent().getStringExtra(CONSTANTS.PlaylistID);\r\n        }\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            Liked = getIntent().getStringExtra(\"Liked\");\r\n        }\r\n        getPrepareData();\r\n        downloadAudioDetailsList = GetAllMedia();\r\n        downloadPlaylistDetailsList = GetPlaylistDetail();\r\n        binding.llBack.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                ComeFindAudio = 1;\r\n//                handler1.removeCallbacks(UpdateSongTime1);\r\n                finish();\r\n            }\r\n        });\r\n        binding.llDownload.setOnClickListener(view -> callDownload());\r\n    }\r\n\r\n    /*  private void getMediaByPer(String playlistID, int totalAudio) {\r\n          class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n\r\n              @Override\r\n              protected Void doInBackground(Void... voids) {\r\n                  count= DatabaseClient.getInstance(ctx)\r\n                          .getaudioDatabase()\r\n                          .taskDao()\r\n                          .getCountDownloadProgress(\"Complete\",playlistID);\r\n\r\n                  return null;\r\n              }\r\n\r\n              @Override\r\n              protected void onPostExecute(Void aVoid) {\r\n                  downloadPlaylistDetailsList = GetPlaylistDetail();\r\n                  if(downloadPlaylistDetailsList.size()!=0) {\r\n                      if (count < totalAudio) {\r\n                          long progressPercent = count * 100 / totalAudio;\r\n                          int downloadProgress1 = (int) progressPercent;\r\n                          binding.pbProgress.setVisibility(View.VISIBLE);\r\n                          binding.ivDownloads.setVisibility(View.GONE);\r\n                          binding.pbProgress.setProgress(downloadProgress1);\r\n                          handler1.postDelayed(UpdateSongTime1, 300);\r\n                      } else {\r\n                          binding.pbProgress.setVisibility(View.GONE);\r\n                          binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                          handler1.removeCallbacks(UpdateSongTime1);\r\n                      }\r\n                  }\r\n                  super.onPostExecute(aVoid);\r\n              }\r\n          }\r\n\r\n          getMediaByPer st = new getMediaByPer();\r\n          st.execute();\r\n      }*/\r\n/*\r\n    private void getDownloadData() {\r\n        try {\r\n            SharedPreferences sharedy = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n                remainAudio = new ArrayList<>();\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 0; i < fileNameList.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            remainAudio.add(playlistDownloadId.get(i));\r\n                        }\r\n                    }\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        if (remainAudio.size() < SongListSize) {\r\n                            handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    }\r\n                    //\r\n                }else {\r\n                    fileNameList = new ArrayList<>();\r\n                    playlistDownloadId = new ArrayList<>();\r\n                    remainAudio = new ArrayList<>();\r\n                }\r\n            } else {\r\n                fileNameList = new ArrayList<>();\r\n                playlistDownloadId = new ArrayList<>();\r\n                remainAudio = new ArrayList<>();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n*/\r\n    public List<DownloadAudioDetails> GetAllMedia() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData1();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }\r\n\r\n    private void callDownload() {\r\n        List<String> url = new ArrayList<>();\r\n        List<String> name = new ArrayList<>();\r\n        List<String> downloadPlaylistId = new ArrayList<>();\r\n        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs2 = new ArrayList<>();\r\n        playlistSongs2 = playlistSongsList;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                if (playlistSongs2.size() == 0) {\r\n                    break;\r\n                } else {\r\n                    for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                        if (playlistSongs2.size() != 0) {\r\n                            if (playlistSongs2.get(x).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                playlistSongs2.remove(x);\r\n                            }\r\n                            if (playlistSongs2.size() == 0) {\r\n                                break;\r\n                            }\r\n                        } else break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (int x = 0; x < playlistSongs2.size(); x++) {\r\n            name.add(playlistSongs2.get(x).getName());\r\n            url.add(playlistSongs2.get(x).getAudioFile());\r\n            downloadPlaylistId.add(playlistSongs2.get(x).getPlaylistID());\r\n        }\r\n        enableDisableDownload(false, \"orange\");\r\n        byte[] encodedBytes = new byte[1024];\r\n\r\n        SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n        Gson gson1 = new Gson();\r\n        String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n        String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n        String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n            Type type = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> fileNameList = gson1.fromJson(json, type);\r\n            List<String> audioFile = gson1.fromJson(json1, type);\r\n            List<String> playlistId1 = gson1.fromJson(json2, type);\r\n            if (fileNameList.size() != 0) {\r\n                url.addAll(audioFile);\r\n                name.addAll(fileNameList);\r\n                downloadPlaylistId.addAll(playlistId1);\r\n            }\r\n        }\r\n\r\n        if (url.size() != 0) {\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n            downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String urlJson = gson.toJson(url);\r\n            String nameJson = gson.toJson(name);\r\n            String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n            fileNameList = name;\r\n            playlistDownloadId = downloadPlaylistId;\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n            editor.commit();\r\n        }\r\n        SongListSize = playlistSongsList.size();\r\n        savePlaylist();\r\n        saveAllMedia(playlistSongsList, encodedBytes);\r\n\r\n    }\r\n\r\n    private void savePlaylist() {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertPlaylist(downloadPlaylistDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n//                getMediaByPer(PlaylistID,SongListSize);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void saveAllMedia(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, byte[] encodedBytes) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                for (int i = 0; i < playlistSongs.size(); i++) {\r\n                    downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                    downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"0\");\r\n                    downloadAudioDetails.setPlaylistId(playlistSongs.get(i).getPlaylistID());\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                    DatabaseClient.getInstance(ctx)\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .insertMedia(downloadAudioDetails);\r\n                }\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n                enableDisableDownload(false, \"orange\");\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        ComeFindAudio = 1;\r\n//        handler1.removeCallbacks(UpdateSongTime1);\r\n        finish();\r\n    }\r\n\r\n    private void getPrepareData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SubPlayListModel> listCall = APIClient.getClient().getSubPlayLists(UserID, PlaylistID);\r\n            listCall.enqueue(new Callback<SubPlayListModel>() {\r\n                @Override\r\n                public void onResponse(Call<SubPlayListModel> call, Response<SubPlayListModel> response) {\r\n                    try {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            SubPlayListModel model = response.body();\r\n                            playlistSongsList = model.getResponseData().getPlaylistSongs();\r\n                            downloadPlaylistDetails = new DownloadPlaylistDetails();\r\n                            downloadPlaylistDetails.setPlaylistID(model.getResponseData().getPlaylistID());\r\n                            downloadPlaylistDetails.setPlaylistName(model.getResponseData().getPlaylistName());\r\n                            downloadPlaylistDetails.setPlaylistDesc(model.getResponseData().getPlaylistDesc());\r\n                            downloadPlaylistDetails.setIsReminder(model.getResponseData().getIsReminder());\r\n                            downloadPlaylistDetails.setPlaylistMastercat(model.getResponseData().getPlaylistMastercat());\r\n                            downloadPlaylistDetails.setPlaylistSubcat(model.getResponseData().getPlaylistSubcat());\r\n                            downloadPlaylistDetails.setPlaylistImage(model.getResponseData().getPlaylistImage());\r\n                            downloadPlaylistDetails.setPlaylistImageDetails(model.getResponseData().getPlaylistImageDetail());\r\n                            downloadPlaylistDetails.setTotalAudio(model.getResponseData().getTotalAudio());\r\n                            downloadPlaylistDetails.setTotalDuration(model.getResponseData().getTotalDuration());\r\n                            downloadPlaylistDetails.setTotalhour(model.getResponseData().getTotalhour());\r\n                            downloadPlaylistDetails.setTotalminute(model.getResponseData().getTotalminute());\r\n                            downloadPlaylistDetails.setCreated(model.getResponseData().getCreated());\r\n                            downloadPlaylistDetails.setDownload(model.getResponseData().getDownload());\r\n                            downloadPlaylistDetails.setLike(model.getResponseData().getLike());\r\n                            binding.tvName.setText(model.getResponseData().getPlaylistName());\r\n                            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 20,\r\n                                    1, 1, 0.54f, 20);\r\n                            binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n                            binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n                            binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n                            if (!model.getResponseData().getPlaylistImage().equalsIgnoreCase(\"\")) {\r\n                                Glide.with(ctx).load(model.getResponseData().getPlaylistImage()).thumbnail(0.05f)\r\n                                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                            } else {\r\n                                binding.ivRestaurantImage.setImageResource(R.drawable.ic_playlist_bg);\r\n                            }\r\n\r\n//                            getDownloadData();\r\n                            SongListSize = model.getResponseData().getPlaylistSongs().size();\r\n//                            getMediaByPer(PlaylistID,SongListSize);\r\n//                            SongListSize = model.getResponseData().getPlaylistSongs().size();\r\n                            Download = model.getResponseData().getDownload();\r\n                            binding.llAddPlaylist.setVisibility(View.VISIBLE);\r\n//                            getDownloadData();\r\n                            binding.llAddPlaylist.setOnClickListener(view -> {\r\n                                comeAddPlaylist = 1;\r\n                                if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                                    return;\r\n                                }\r\n                                mLastClickTime = SystemClock.elapsedRealtime();\r\n                                Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                                i.putExtra(\"AudioId\", \"\");\r\n                                i.putExtra(\"PlaylistID\", model.getResponseData().getPlaylistID());\r\n                                startActivity(i);\r\n                                finish();\r\n                            });\r\n                            if (model.getResponseData().getCreated().equalsIgnoreCase(\"1\")) {\r\n                                binding.llOptions.setVisibility(View.GONE);\r\n                                binding.llRename.setVisibility(View.VISIBLE);\r\n                                binding.llDelete.setVisibility(View.VISIBLE);\r\n                                binding.llFind.setVisibility(View.GONE);\r\n                                binding.llLikes.setVisibility(View.VISIBLE);\r\n                            } else if (model.getResponseData().getCreated().equalsIgnoreCase(\"0\")) {\r\n                                binding.llOptions.setVisibility(View.VISIBLE);\r\n                                binding.llRename.setVisibility(View.GONE);\r\n                                binding.llDelete.setVisibility(View.GONE);\r\n                                binding.llLikes.setVisibility(View.VISIBLE);\r\n\r\n                                if (Liked.equalsIgnoreCase(\"1\")) {\r\n                                    binding.llFind.setVisibility(View.GONE);\r\n                                } else if (Liked.equalsIgnoreCase(\"0\") || Liked.equalsIgnoreCase(\"\")) {\r\n                                    binding.llFind.setVisibility(View.VISIBLE);\r\n                                }\r\n                            }\r\n                            if (model.getResponseData().getLike().equalsIgnoreCase(\"1\")) {\r\n                                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                            } else if (model.getResponseData().getLike().equalsIgnoreCase(\"0\") ||\r\n                                    model.getResponseData().getLike().equalsIgnoreCase(\"\")) {\r\n                                binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);\r\n                            }\r\n                            binding.llLikes.setOnClickListener(v -> CallPlaylistLike(PlaylistID));\r\n                            binding.llFind.setOnClickListener(view -> {\r\n                                ComeFindAudio = 2;\r\n                                finish();\r\n                            });\r\n                            if (model.getResponseData().getPlaylistMastercat().equalsIgnoreCase(\"\")) {\r\n                                binding.tvDesc.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.tvDesc.setVisibility(View.VISIBLE);\r\n                                binding.tvDesc.setText(model.getResponseData().getPlaylistMastercat());\r\n                            }\r\n\r\n                            if (model.getResponseData().getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                                    model.getResponseData().getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                                            model.getResponseData().getTotalhour().equalsIgnoreCase(\"\")\r\n                                            && model.getResponseData().getTotalminute().equalsIgnoreCase(\"\")) {\r\n                                binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n                            } else {\r\n                                if (model.getResponseData().getTotalminute().equalsIgnoreCase(\"\")) {\r\n                                    binding.tvTime.setText(model.getResponseData().getTotalAudio() + \" Audio | \"\r\n                                            + model.getResponseData().getTotalhour() + \"h 0m\");\r\n                                } else {\r\n                                    binding.tvTime.setText(model.getResponseData().getTotalAudio() + \" Audio | \"\r\n                                            + model.getResponseData().getTotalhour() + \"h \" + model.getResponseData().getTotalminute() + \"m\");\r\n                                }\r\n                            }\r\n\r\n                            if (model.getResponseData().getPlaylistDesc().equalsIgnoreCase(\"\")) {\r\n                                binding.tvTitleDec.setVisibility(View.GONE);\r\n                                binding.tvSubDec.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.tvTitleDec.setVisibility(View.VISIBLE);\r\n                                binding.tvSubDec.setVisibility(View.VISIBLE);\r\n                            }\r\n\r\n                            binding.tvSubDec.setText(model.getResponseData().\r\n\r\n                                    getPlaylistDesc());\r\n                            int linecount = binding.tvSubDec.getLineCount();\r\n                            if (linecount >= 4) {\r\n                                binding.tvReadMore.setVisibility(View.VISIBLE);\r\n                            } else {\r\n                                binding.tvReadMore.setVisibility(View.GONE);\r\n                            }\r\n\r\n                            binding.tvReadMore.setOnClickListener(new View.OnClickListener() {\r\n                                @Override\r\n                                public void onClick(View view) {\r\n                                    final Dialog dialog = new Dialog(ctx);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.full_desc_layout);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvDesc = dialog.findViewById(R.id.tvDesc);\r\n                                    final RelativeLayout tvClose = dialog.findViewById(R.id.tvClose);\r\n                                    tvDesc.setText(model.getResponseData().getPlaylistDesc());\r\n\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n\r\n                                    tvClose.setOnClickListener(v -> dialog.dismiss());\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n                                }\r\n                            });\r\n\r\n                    /*    if (model.getResponseData().getDownload().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                            binding.tvDownload.setTextColor(getResources().getColor(R.color.light_gray));\r\n                            binding.llDownload.setClickable(false);\r\n                            binding.llDownload.setEnabled(false);\r\n                        } else if (!model.getResponseData().getDownload().equalsIgnoreCase(\"\")) {\r\n                            binding.llDownload.setClickable(true);\r\n                            binding.llDownload.setEnabled(true);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n                            binding.tvDownload.setTextColor(getResources().getColor(R.color.white));\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                        }*/\r\n\r\n                            binding.llDownload.setVisibility(View.VISIBLE);\r\n/*                          binding.llDownload.setOnClickListener(view -> {\r\n                                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                    BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                    Call<DownloadPlaylistModel> listCall13 = null;\r\n                                    listCall13 = APIClient.getClient().getDownloadlistPlaylist(UserID, \"\", PlaylistID);\r\n                                    listCall13.enqueue(new Callback<DownloadPlaylistModel>() {\r\n                                        @Override\r\n                                        public void onResponse(Call<DownloadPlaylistModel> call13, Response<DownloadPlaylistModel> response13) {\r\n                                            if (response13.isSuccessful()) {\r\n                                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                DownloadPlaylistModel model1 = response13.body();\r\n                                                BWSApplication.showToast(model1.getResponseMessage(), ctx);\r\n                                            }\r\n                                        }\r\n\r\n                                        @Override\r\n                                        public void onFailure(Call<DownloadPlaylistModel> call13, Throwable t) {\r\n                                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        }\r\n                                    });\r\n\r\n                                } else {\r\n                                    Toast.makeText(getApplicationContext(), getString(R.string.no_server_found), Toast.LENGTH_SHORT).show();\r\n                                }\r\n                            });\r\n*/\r\n\r\n                            String[] elements = model.getResponseData().getPlaylistSubcat().split(\",\");\r\n                            List<String> direction = Arrays.asList(elements);\r\n                            DirectionAdapter directionAdapter = new DirectionAdapter(direction, ctx);\r\n                            RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(ctx, LinearLayoutManager.HORIZONTAL, false);\r\n                            binding.rvDirlist.setLayoutManager(recentlyPlayed);\r\n                            binding.rvDirlist.setItemAnimator(new\r\n                                    DefaultItemAnimator());\r\n                            binding.rvDirlist.setAdapter(directionAdapter);\r\n                            String PlaylistID = model.getResponseData().getPlaylistID();\r\n                            binding.llRename.setOnClickListener(view -> {\r\n                                final Dialog dialog = new Dialog(ctx);\r\n                                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                dialog.setContentView(R.layout.create_palylist);\r\n                                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                final EditText edtCreate = dialog.findViewById(R.id.edtCreate);\r\n                                final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                                final TextView tvHeading = dialog.findViewById(R.id.tvHeading);\r\n                                final Button btnSendCode = dialog.findViewById(R.id.btnSendCode);\r\n                                tvHeading.setText(R.string.Rename_your_playlist);\r\n                                btnSendCode.setText(R.string.Save);\r\n                                edtCreate.requestFocus();\r\n                                edtCreate.setText(model.getResponseData().getPlaylistName());\r\n                                int position1 = edtCreate.getText().length();\r\n                                Editable editObj = edtCreate.getText();\r\n                                Selection.setSelection(editObj, position1);\r\n                                btnSendCode.setEnabled(true);\r\n                                btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                        dialog.dismiss();\r\n                                        return true;\r\n                                    }\r\n                                    return false;\r\n                                });\r\n\r\n                                TextWatcher popupTextWatcher = new TextWatcher() {\r\n                                    @Override\r\n                                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                                        String number = edtCreate.getText().toString().trim();\r\n                                        if (!number.isEmpty()) {\r\n                                            btnSendCode.setEnabled(true);\r\n                                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                            btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                                        } else {\r\n                                            btnSendCode.setEnabled(false);\r\n                                            btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                            btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n                                        }\r\n                                    }\r\n\r\n                                    @Override\r\n                                    public void afterTextChanged(Editable s) {\r\n                                    }\r\n                                };\r\n\r\n\r\n                                edtCreate.addTextChangedListener(popupTextWatcher);\r\n\r\n                                btnSendCode.setOnClickListener(view1 -> {\r\n                                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                        BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                        Call<RenamePlaylistModel> listCall1 = APIClient.getClient().getRenamePlaylist(UserID, PlaylistID, edtCreate.getText().toString());\r\n                                        listCall1.enqueue(new Callback<RenamePlaylistModel>() {\r\n                                            @Override\r\n                                            public void onResponse(Call<RenamePlaylistModel> call1, Response<RenamePlaylistModel> response1) {\r\n                                                try {\r\n                                                    if (response1.isSuccessful()) {\r\n                                                        comeRename = 1;\r\n                                                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                        RenamePlaylistModel listModel = response1.body();\r\n                                                        BWSApplication.showToast(listModel.getResponseMessage(), ctx);\r\n                                                        dialog.dismiss();\r\n                                                        finish();\r\n                                                    }\r\n                                                } catch (Exception e) {\r\n                                                    e.printStackTrace();\r\n                                                }\r\n                                            }\r\n\r\n                                            @Override\r\n                                            public void onFailure(Call<RenamePlaylistModel> call1, Throwable t) {\r\n                                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                                    }\r\n\r\n                                });\r\n                                tvCancel.setOnClickListener(v -> dialog.dismiss());\r\n                                dialog.show();\r\n                                dialog.setCancelable(false);\r\n                            });\r\n\r\n                            binding.llDelete.setOnClickListener(view -> {\r\n                                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                                    BWSApplication.showToast(\"Currently this playlist is in player,so you can't delete this playlist as of now\", ctx);\r\n                                } else {\r\n                                    final Dialog dialog = new Dialog(ctx);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.delete_playlist);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                                    final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n                                    final RelativeLayout tvconfirm = dialog.findViewById(R.id.tvconfirm);\r\n                                    tvHeader.setText(\"Are you sure you want to delete \" + model.getResponseData().getPlaylistName() + \"  playlist?\");\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            Fragment playlistFragment = new PlaylistFragment();\r\n                                            FragmentManager fragmentManager1 = getSupportFragmentManager();\r\n                                            fragmentManager1.beginTransaction()\r\n                                                    .add(R.id.flContainer, playlistFragment)\r\n                                                    .commit();\r\n                                            Bundle bundle = new Bundle();\r\n                                            playlistFragment.setArguments(bundle);\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n\r\n                                    tvconfirm.setOnClickListener(v -> {\r\n                                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                            Call<SucessModel> listCall12 = APIClient.getClient().getDeletePlaylist(UserID, PlaylistID);\r\n                                            listCall12.enqueue(new Callback<SucessModel>() {\r\n                                                @Override\r\n                                                public void onResponse(Call<SucessModel> call12, Response<SucessModel> response12) {\r\n                                                    try {\r\n                                                        if (response12.isSuccessful()) {\r\n                                                            deleteFrg = 1;\r\n                                                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                            SucessModel listModel = response12.body();\r\n                                                            dialog.dismiss();\r\n                                                            BWSApplication.showToast(listModel.getResponseMessage(), ctx);\r\n                                                            finish();\r\n                                                        }\r\n                                                    } catch (Exception e) {\r\n                                                        e.printStackTrace();\r\n                                                    }\r\n                                                }\r\n\r\n                                                @Override\r\n                                                public void onFailure(Call<SucessModel> call12, Throwable t) {\r\n                                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                                                }\r\n                                            });\r\n                                        } else {\r\n                                            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                                        }\r\n                                    });\r\n\r\n                                    tvGoBack.setOnClickListener(v -> dialog.dismiss());\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n                                }\r\n                            });\r\n\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SubPlayListModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public void CallPlaylistLike(String PlaylistID) {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<PlaylistLikeModel> listCall = APIClient.getClient().getPlaylistLike(PlaylistID, UserID);\r\n            listCall.enqueue(new Callback<PlaylistLikeModel>() {\r\n                @Override\r\n                public void onResponse(Call<PlaylistLikeModel> call, Response<PlaylistLikeModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        try {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            PlaylistLikeModel model = response.body();\r\n                            if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n                                binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);\r\n                            } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                            }\r\n                            BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<PlaylistLikeModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (RefreshIconData == 0) {\r\n                    enableDisableDownload(false, \"gray\");\r\n                } else if (Download.equalsIgnoreCase(\"1\")) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (Download.equalsIgnoreCase(\"0\") || Download.equalsIgnoreCase(\"\") ||\r\n                        RefreshIconData != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                } else if (downloadPlaylistDetailsList.size() == 0 && RefreshIconData != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                }\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private void enableDisableDownload(boolean b, String color) {\r\n        if (b) {\r\n            binding.llDownload.setClickable(true);\r\n            binding.llDownload.setEnabled(true);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.tvDownload.setTextColor(getResources().getColor(R.color.white));\r\n        } else {\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.llDownload.setClickable(false);\r\n            binding.llDownload.setEnabled(false);\r\n            if (color.equalsIgnoreCase(\"gray\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            } else if (color.equalsIgnoreCase(\"orange\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n            }\r\n            binding.tvDownload.setTextColor(getResources().getColor(R.color.white));\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/MyPlaylistActivity.java	(revision 7e371c210fcb71103e9ce5c0c7fbf93961ad8111)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/MyPlaylistActivity.java	(date 1605859705408)
@@ -423,6 +423,7 @@
                         if (response.isSuccessful()) {
                             BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
                             SubPlayListModel model = response.body();
+                            binding.llDownload.setVisibility(View.VISIBLE);
                             playlistSongsList = model.getResponseData().getPlaylistSongs();
                             downloadPlaylistDetails = new DownloadPlaylistDetails();
                             downloadPlaylistDetails.setPlaylistID(model.getResponseData().getPlaylistID());
@@ -581,7 +582,7 @@
                             binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);
                         }*/
 
-                            binding.llDownload.setVisibility(View.VISIBLE);
+
 /*                          binding.llDownload.setOnClickListener(view -> {
                                 if (BWSApplication.isNetworkConnected(ctx)) {
                                     BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddQueueActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.SystemClock;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Adapters.DirectionAdapter;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.DirectionModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.databinding.ActivityQueueBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.ComeFindAudio;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class AddQueueActivity extends AppCompatActivity {\r\n    public static boolean comeFromAddToQueue = false;\r\n    ActivityQueueBinding binding;\r\n    String play, UserID, PlaylistId, AudioId, Like, Download, IsRepeat, IsShuffle, myPlaylist = \"\", comeFrom = \"\", audioFileName,\r\n            AudioFile = \"\", PlaylistAudioId = \"\", AudioFlag;\r\n    Context ctx;\r\n    Activity activity;\r\n    ArrayList<String> queue;\r\n    ArrayList<AddToQueueModel> addToQueueModelList;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData;\r\n    ArrayList<DownloadAudioDetails> mDataDownload;\r\n    MainPlayModel mainPlayMode;\r\n    AddToQueueModel addToQueueModel;\r\n    int position, listSize;\r\n    Boolean queuePlay, audioPlay;\r\n    List<DownloadAudioDetails> oneAudioDetailsList;\r\n    SharedPreferences shared;\r\n    //    Handler handler1;\r\n//    List<String> fileNameList;\r\n    private long mLastClickTime = 0;\r\n/*\r\n    private Runnable UpdateSongTime1 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(audioFileName)) {\r\n                if (downloadProgress <= 100) {\r\n                    binding.pbProgress.setProgress(downloadProgress);\r\n                    binding.pbProgress.setVisibility(View.VISIBLE);\r\n                    binding.ivDownloads.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.pbProgress.setVisibility(View.GONE);\r\n                    binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                    handler1.removeCallbacks(UpdateSongTime1);\r\n                }\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }\r\n            handler1.postDelayed(this, 500);\r\n        }\r\n    };\r\n*/\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_queue);\r\n        ctx = AddQueueActivity.this;\r\n        activity = AddQueueActivity.this;\r\n        oneAudioDetailsList = new ArrayList<>();\r\n//        handler1 = new Handler();\r\n//        fileNameList = new ArrayList<>();\r\n        addToQueueModelList = new ArrayList<>();\r\n        mainPlayModelList = new ArrayList<>();\r\n        mData = new ArrayList<>();\r\n        /*SharedPreferences sharedx = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n        Gson gson1 = new Gson();\r\n        String json11 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n        if (!json11.equalsIgnoreCase(String.valueOf(gson1))) {\r\n            Type type = new TypeToken<List<String>>() {\r\n            }.getType();\r\n//            fileNameList = gson1.fromJson(json11, type);\r\n        }*/\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        myPlaylist = shared.getString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        PlaylistId = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n            }.getType();\r\n            mainPlayModelList = gson.fromJson(json, type);\r\n        }\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        SharedPreferences Status = getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            AudioId = getIntent().getStringExtra(CONSTANTS.ID);\r\n            position = getIntent().getIntExtra(CONSTANTS.position, 0);\r\n        }\r\n        if (getIntent().hasExtra(\"PlaylistAudioId\")) {\r\n            PlaylistAudioId = getIntent().getStringExtra(\"PlaylistAudioId\");\r\n        }\r\n      /*  if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(audioFileName)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }*/\r\n        if (getIntent().hasExtra(\"play\")) {\r\n            play = getIntent().getStringExtra(\"play\");\r\n        } else {\r\n            play = \"\";\r\n        }\r\n\r\n        if (getIntent().hasExtra(\"comeFrom\")) {\r\n            comeFrom = getIntent().getStringExtra(\"comeFrom\");\r\n            position = getIntent().getIntExtra(\"position\", 0);\r\n            if (comeFrom.equalsIgnoreCase(\"myDownloadPlaylist\")) {\r\n                String js1 = getIntent().getStringExtra(\"data\");\r\n                Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n                }.getType();\r\n                mDataDownload = gson.fromJson(js1, type);\r\n            } else {\r\n                mData = getIntent().getParcelableArrayListExtra(\"data\");\r\n            }\r\n        } else {\r\n            comeFrom = \"\";\r\n        }\r\n\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n        } else if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n        }\r\n        if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llShuffle.setClickable(true);\r\n                binding.llShuffle.setEnabled(true);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llShuffle.setClickable(true);\r\n                binding.llShuffle.setEnabled(true);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n\r\n        if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setClickable(false);\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.llRepeat.setClickable(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                IsRepeat = \"0\";\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            if (queuePlay) {\r\n                binding.llRepeat.setEnabled(false);\r\n                binding.llRepeat.setClickable(false);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llRepeat.setClickable(true);\r\n                binding.llRepeat.setEnabled(true);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n        binding.llLike.setOnClickListener(view ->\r\n                callLike());\r\n\r\n\r\n        binding.llDownload.setOnClickListener(view ->\r\n                callDownload());\r\n\r\n\r\n        binding.llAddQueue.setOnClickListener(view ->\r\n                callAddToQueue());\r\n\r\n        binding.llRepeat.setOnClickListener(view -> callRepeat());\r\n\r\n        binding.llShuffle.setOnClickListener(view -> callShuffle());\r\n\r\n        binding.llRemovePlaylist.setOnClickListener(view -> {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistId) && mainPlayModelList.size() == 1) {\r\n                BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n            } else {\r\n                callRemoveFromPlayList();\r\n            }\r\n        });\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            /*  Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.putExtra(\"Like\", Like);\r\n            i.putExtra(\"Download\", Download);\r\n            startActivity(i);*/\r\n            callBack();\r\n        });\r\n        prepareData();\r\n    }\r\n\r\n    private void callBack() {\r\n        ComeFindAudio = 1;\r\n        if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n            finish();\r\n        } else {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n//            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n//            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n//            startActivity(i);\r\n      /*      SharedPreferences shared11 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared11.edit();\r\n            Gson gson11 = new Gson();\r\n            String json11 = gson11.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, json11);\r\n            editor.commit();*/\r\n            finish();\r\n        }\r\n    }\r\n\r\n    private void callShuffle() {\r\n        if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n\r\n            } else {\r\n                IsShuffle = \"1\";\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"1\");\r\n                if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                }\r\n                editor.commit();\r\n                IsRepeat = \"\";\r\n                if (queuePlay) {\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n//                BWSApplication.showToast(\"Shuffle mode has been turned on\", ctx);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n//            BWSApplication.showToast(\"Shuffle mode has been turned off\", ctx);\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n    }\r\n\r\n    private void callRepeat() {\r\n\r\n        if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"0\");\r\n            if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            }\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            IsRepeat = \"0\";\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n//            BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"1\");\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            IsRepeat = \"1\";\r\n            if (listSize == 1) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                IsRepeat = \"\";\r\n                IsShuffle = \"\";\r\n//                BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n//                BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            editor.commit();\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n        } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n            editor.commit();\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            IsRepeat = \"\";\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n//            BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n        }\r\n    }\r\n\r\n    private void callAddToQueue() {\r\n        addToQueueModel = new AddToQueueModel();\r\n        int i = position;\r\n\r\n        if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n            if (comeFrom.equalsIgnoreCase(\"myDownloadPlaylist\")) {\r\n                AudioFile = mDataDownload.get(i).getAudioFile();\r\n                if (AudioFile.equalsIgnoreCase(\"\")) {\r\n                    i = i + 1;\r\n                    AudioFile = mDataDownload.get(i).getAudioFile();\r\n                }\r\n                PlaylistId = \"\";\r\n                addToQueueModel.setID(mDataDownload.get(i).getID());\r\n                addToQueueModel.setName(mDataDownload.get(i).getName());\r\n                addToQueueModel.setAudioFile(mDataDownload.get(i).getAudioFile());\r\n                addToQueueModel.setPlaylistID(\"\");\r\n                addToQueueModel.setAudioDirection(mDataDownload.get(i).getAudioDirection());\r\n                addToQueueModel.setAudiomastercat(mDataDownload.get(i).getAudiomastercat());\r\n                addToQueueModel.setAudioSubCategory(mDataDownload.get(i).getAudioSubCategory());\r\n                addToQueueModel.setImageFile(mDataDownload.get(i).getImageFile());\r\n                addToQueueModel.setLike(mDataDownload.get(i).getLike());\r\n                addToQueueModel.setDownload(mDataDownload.get(i).getDownload());\r\n                addToQueueModel.setAudioDuration(mDataDownload.get(i).getAudioDuration());\r\n            } else {\r\n                AudioFile = mData.get(i).getAudioFile();\r\n                if (AudioFile.equalsIgnoreCase(\"\")) {\r\n                    i = i + 1;\r\n                    AudioFile = mData.get(i).getAudioFile();\r\n                }\r\n                PlaylistId = mData.get(i).getPlaylistID();\r\n                addToQueueModel.setID(mData.get(i).getID());\r\n                addToQueueModel.setName(mData.get(i).getName());\r\n                addToQueueModel.setAudioFile(mData.get(i).getAudioFile());\r\n                addToQueueModel.setPlaylistID(mData.get(i).getPlaylistID());\r\n                addToQueueModel.setAudioDirection(mData.get(i).getAudioDirection());\r\n                addToQueueModel.setAudiomastercat(mData.get(i).getAudiomastercat());\r\n                addToQueueModel.setAudioSubCategory(mData.get(i).getAudioSubCategory());\r\n                addToQueueModel.setImageFile(mData.get(i).getImageFile());\r\n                addToQueueModel.setLike(mData.get(i).getLike());\r\n                addToQueueModel.setDownload(mData.get(i).getDownload());\r\n                addToQueueModel.setAudioDuration(mData.get(i).getAudioDuration());\r\n            }\r\n        } else {\r\n            AudioFile = mainPlayModelList.get(i).getAudioFile();\r\n            if (AudioFile.equalsIgnoreCase(\"\")) {\r\n                i = i + 1;\r\n                AudioFile = mainPlayModelList.get(i).getAudioFile();\r\n            }\r\n            PlaylistId = mainPlayModelList.get(i).getPlaylistID();\r\n            addToQueueModel.setID(mainPlayModelList.get(i).getID());\r\n            addToQueueModel.setName(mainPlayModelList.get(i).getName());\r\n            addToQueueModel.setAudioFile(mainPlayModelList.get(i).getAudioFile());\r\n            addToQueueModel.setPlaylistID(mainPlayModelList.get(i).getPlaylistID());\r\n            addToQueueModel.setAudioDirection(mainPlayModelList.get(i).getAudioDirection());\r\n            addToQueueModel.setAudiomastercat(mainPlayModelList.get(i).getAudiomastercat());\r\n            addToQueueModel.setAudioSubCategory(mainPlayModelList.get(i).getAudioSubCategory());\r\n            addToQueueModel.setImageFile(mainPlayModelList.get(i).getImageFile());\r\n            addToQueueModel.setLike(mainPlayModelList.get(i).getLike());\r\n            addToQueueModel.setDownload(mainPlayModelList.get(i).getDownload());\r\n            addToQueueModel.setAudioDuration(mainPlayModelList.get(i).getAudioDuration());\r\n        }\r\n        if (addToQueueModelList.size() == 0) {\r\n            BWSApplication.showToast(\"Added to the queue\", ctx);\r\n            addToQueueModelList.add(addToQueueModel);\r\n        } else {\r\n            for (int x = 0; x < addToQueueModelList.size(); x++) {\r\n                if (addToQueueModelList.get(x).getAudioFile().equals(addToQueueModel.getAudioFile())) {\r\n                    if (queuePlay && addToQueueModelList.get(position).getAudioFile().equals(addToQueueModel.getAudioFile())) {\r\n                        BWSApplication.showToast(\"Added to the queue\", ctx);\r\n                        addToQueueModelList.add(addToQueueModel);\r\n                        break;\r\n                    } else {\r\n                        addToQueueModel = new AddToQueueModel();\r\n                        BWSApplication.showToast(\"Audio already in queue\", ctx);\r\n                        break;\r\n                    }\r\n                } else if (x == (addToQueueModelList.size() - 1)) {\r\n                    BWSApplication.showToast(\"Added to the queue\", ctx);\r\n                    addToQueueModelList.add(addToQueueModel);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(addToQueueModelList);\r\n        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n        editor.commit();\r\n    }\r\n\r\n    private void callRemoveFromPlayList() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRemoveAudioFromPlaylist(UserID, AudioId, PlaylistId);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    try {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            SucessModel listModel = response.body();\r\n                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n\r\n                            if (audioPlay) {\r\n                                if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                                    Gson gson12 = new Gson();\r\n                                    String json12 = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson12));\r\n                                    Type type1 = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n                                    }.getType();\r\n                                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList1 = gson12.fromJson(json12, type1);\r\n\r\n                                    if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n                                        mData.remove(position);\r\n                                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                                        if (pID.equalsIgnoreCase(PlaylistId)) {\r\n                                            if (mData.size() != 0) {\r\n                                                if (pos == position && position < mData.size() - 1) {\r\n                                                    pos = pos;\r\n                                                    if (isPrepare || isMediaStart || isPause) {\r\n                                                        stopMedia();\r\n                                                    }\r\n                                                    isPause = false;\r\n                                                    isMediaStart = false;\r\n                                                    isPrepare = false;\r\n                                                } else if (pos == position && position == mData.size() - 1) {\r\n                                                    pos = 0;\r\n                                                    if (isPrepare || isMediaStart || isPause) {\r\n                                                        stopMedia();\r\n                                                    }\r\n                                                    isPause = false;\r\n                                                    isMediaStart = false;\r\n                                                    isPrepare = false;\r\n                                                } else if (pos < position && pos < mData.size() - 1) {\r\n                                                    pos = pos;\r\n                                                } else if (pos > position && pos == mData.size()) {\r\n                                                    pos = pos - 1;\r\n                                                }\r\n\r\n                                                SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                                SharedPreferences.Editor editor = sharedd.edit();\r\n                                                Gson gson = new Gson();\r\n                                                String json = gson.toJson(mData);\r\n                                                editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                                                editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistId);\r\n                                                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, myPlaylist);\r\n                                                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                                editor.commit();\r\n                                                Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n                                                }.getType();\r\n                                                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n                                                listSize = arrayList.size();\r\n                                                for (int i = 0; i < listSize; i++) {\r\n                                                    MainPlayModel mainPlayModel = new MainPlayModel();\r\n                                                    mainPlayModel.setID(arrayList.get(i).getID());\r\n                                                    mainPlayModel.setName(arrayList.get(i).getName());\r\n                                                    mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                                                    mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                                                    mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                                                    mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                                                    mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                                                    mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                                                    mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                                                    mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                                                    mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                                                    mainPlayModelList.add(mainPlayModel);\r\n                                                }\r\n                                                SharedPreferences sharedz = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                                SharedPreferences.Editor editor1 = sharedz.edit();\r\n                                                Gson gsonz = new Gson();\r\n                                                String jsonz = gsonz.toJson(mainPlayModelList);\r\n                                                editor1.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n                                                editor1.commit();\r\n                                            }\r\n                                            comeFromAddToQueue = true;\r\n                                        }\r\n                                    } else {\r\n                                        mainPlayModelList.remove(pos);\r\n                                        arrayList1.remove(pos);\r\n                                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                                        if (pID.equalsIgnoreCase(PlaylistId)) {\r\n                                            if (mainPlayModelList.size() != 0) {\r\n                                                if (pos < mainPlayModelList.size() - 1) {\r\n                                                    pos = pos;\r\n                                                } else if (pos == mainPlayModelList.size() - 1) {\r\n                                                    pos = 0;\r\n                                                } else if (pos > mainPlayModelList.size()) {\r\n                                                    pos = pos - 1;\r\n                                                }\r\n                                                if (isPrepare || isMediaStart || isPause) {\r\n                                                    stopMedia();\r\n                                                }\r\n                                                isPause = false;\r\n                                                isMediaStart = false;\r\n                                                isPrepare = false;\r\n                                                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = new ArrayList<>();\r\n                                                for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                                    SubPlayListModel.ResponseData.PlaylistSong mainPlayModel = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                                    mainPlayModel.setID(mainPlayModelList.get(i).getID());\r\n                                                    mainPlayModel.setName(mainPlayModelList.get(i).getName());\r\n                                                    mainPlayModel.setAudioFile(mainPlayModelList.get(i).getAudioFile());\r\n                                                    mainPlayModel.setPlaylistID(mainPlayModelList.get(i).getPlaylistID());\r\n                                                    mainPlayModel.setAudioDirection(mainPlayModelList.get(i).getAudioDirection());\r\n                                                    mainPlayModel.setAudiomastercat(mainPlayModelList.get(i).getAudiomastercat());\r\n                                                    mainPlayModel.setAudioSubCategory(mainPlayModelList.get(i).getAudioSubCategory());\r\n                                                    mainPlayModel.setImageFile(mainPlayModelList.get(i).getImageFile());\r\n                                                    mainPlayModel.setLike(mainPlayModelList.get(i).getLike());\r\n                                                    mainPlayModel.setDownload(mainPlayModelList.get(i).getDownload());\r\n                                                    mainPlayModel.setAudioDuration(mainPlayModelList.get(i).getAudioDuration());\r\n                                                    arrayList.add(mainPlayModel);\r\n                                                }\r\n                                                SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                                SharedPreferences.Editor editor = sharedd.edit();\r\n                                                Gson gson = new Gson();\r\n                                                String json = gson.toJson(mainPlayModelList);\r\n                                                String json1 = gson.toJson(arrayList);\r\n                                                editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                                editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                                                editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistId);\r\n                                                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, myPlaylist);\r\n                                                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                                                editor.commit();\r\n                                                comeFromAddToQueue = true;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            finish();\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void callDownload() {\r\n      /*  if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<DownloadPlaylistModel> listCall = APIClient.getClient().getDownloadlistPlaylist(UserID, AudioId, PlaylistId);\r\n            listCall.enqueue(new Callback<DownloadPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<DownloadPlaylistModel> call, Response<DownloadPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                        DownloadPlaylistModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")\r\n                                || model.getResponseData().getFlag().equalsIgnoreCase(\"\")) {\r\n                            binding.llDownload.setClickable(true);\r\n                            binding.llDownload.setEnabled(true);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            Download = \"0\";\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                            binding.llDownload.setClickable(false);\r\n                            binding.llDownload.setEnabled(false);\r\n                            Download = \"1\";\r\n                        }\r\n                        mainPlayModelList.get(position).setDownload(Download);\r\n\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<DownloadPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }*/\r\n        int i = position;\r\n        String audioFile = \"\", Name = \"\";\r\n        if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n            if (comeFrom.equalsIgnoreCase(\"myDownloadPlaylist\")) {\r\n                Name = mDataDownload.get(i).getName();\r\n                audioFile = mDataDownload.get(i).getAudioFile();\r\n                if (audioFile.equalsIgnoreCase(\"\")) {\r\n                    i = i + 1;\r\n                    Name = mDataDownload.get(i).getName();\r\n                    audioFile = mDataDownload.get(i).getAudioFile();\r\n                }\r\n            } else {\r\n                Name = mData.get(i).getName();\r\n                audioFile = mData.get(i).getAudioFile();\r\n                if (audioFile.equalsIgnoreCase(\"\")) {\r\n                    i = i + 1;\r\n                    Name = mData.get(i).getName();\r\n                    audioFile = mData.get(i).getAudioFile();\r\n                }\r\n            }\r\n        } else {\r\n            Name = mainPlayModelList.get(i).getName();\r\n            audioFile = mainPlayModelList.get(i).getAudioFile();\r\n            if (audioFile.equalsIgnoreCase(\"\")) {\r\n                i = i + 1;\r\n                Name = mainPlayModelList.get(i).getName();\r\n                audioFile = mainPlayModelList.get(i).getAudioFile();\r\n            }\r\n        }\r\n        List<String> url1 = new ArrayList<>();\r\n        List<String> name1 = new ArrayList<>();\r\n        List<String> downloadPlaylistId = new ArrayList<>();\r\n        SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n        Gson gson1 = new Gson();\r\n        String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n        String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n        String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n            Type type = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> fileNameList = gson1.fromJson(json, type);\r\n            List<String> audioFile1 = gson1.fromJson(json1, type);\r\n            List<String> playlistId1 = gson1.fromJson(json2, type);\r\n            if (fileNameList.size() != 0) {\r\n                url1.addAll(audioFile1);\r\n                name1.addAll(fileNameList);\r\n                downloadPlaylistId.addAll(playlistId1);\r\n            }\r\n        }\r\n        url1.add(audioFile);\r\n        name1.add(Name);\r\n        downloadPlaylistId.add(\"\");\r\n        if (url1.size() != 0) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String urlJson = gson.toJson(url1);\r\n            String nameJson = gson.toJson(name1);\r\n            String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n            editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n            editor.commit();\r\n        }\r\n//        fileNameList = url1;\r\n        callDisableDownload();\r\n        DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n        downloadMedia.encrypt1(url1, name1, downloadPlaylistId);\r\n        /*if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(audioFileName)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }*/\r\n        String dirPath = FileUtils.getFilePath(getApplicationContext(), Name);\r\n        SaveMedia(new byte[1024], dirPath, i);\r\n    }\r\n\r\n    private void SaveMedia(byte[] encodeBytes, String dirPath, int i) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n\r\n                if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n                    downloadAudioDetails.setID(mData.get(i).getID());\r\n                    downloadAudioDetails.setName(mData.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(mData.get(i).getAudioFile());\r\n                    downloadAudioDetails.setPlaylistId(mData.get(i).getPlaylistID());\r\n                    downloadAudioDetails.setAudioDirection(mData.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(mData.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(mData.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(mData.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(mData.get(i).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(mData.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                } else {\r\n                    downloadAudioDetails.setID(mainPlayModelList.get(i).getID());\r\n                    downloadAudioDetails.setName(mainPlayModelList.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(mainPlayModelList.get(i).getAudioFile());\r\n                    downloadAudioDetails.setPlaylistId(mainPlayModelList.get(i).getPlaylistID());\r\n                    downloadAudioDetails.setAudioDirection(mainPlayModelList.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(mainPlayModelList.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(mainPlayModelList.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(mainPlayModelList.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(mainPlayModelList.get(i).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(mainPlayModelList.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                }\r\n                SharedPreferences sharedx1 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                AudioFlag = sharedx1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                boolean audioPlay = sharedx1.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                int position = sharedx1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                Gson gsonx = new Gson();\r\n                String json11 = sharedx1.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                String jsonw = sharedx1.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gsonx));\r\n                Type type1 = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n                }.getType();\r\n                Gson gson1 = new Gson();\r\n                ArrayList<DownloadAudioDetails> arrayList = gson1.fromJson(jsonw, type1);\r\n                ArrayList<MainPlayModel> arrayList2 = gson1.fromJson(json11, type1);\r\n\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n                    arrayList.add(downloadAudioDetails);\r\n                    MainPlayModel mainPlayModel1 = new MainPlayModel();\r\n                    mainPlayModel1.setID(downloadAudioDetails.getID());\r\n                    mainPlayModel1.setName(downloadAudioDetails.getName());\r\n                    mainPlayModel1.setAudioFile(downloadAudioDetails.getAudioFile());\r\n                    mainPlayModel1.setAudioDirection(downloadAudioDetails.getAudioDirection());\r\n                    mainPlayModel1.setAudiomastercat(downloadAudioDetails.getAudiomastercat());\r\n                    mainPlayModel1.setAudioSubCategory(downloadAudioDetails.getAudioSubCategory());\r\n                    mainPlayModel1.setImageFile(downloadAudioDetails.getImageFile());\r\n                    mainPlayModel1.setLike(downloadAudioDetails.getLike());\r\n                    mainPlayModel1.setDownload(downloadAudioDetails.getDownload());\r\n                    mainPlayModel1.setAudioDuration(downloadAudioDetails.getAudioDuration());\r\n                    arrayList2.add(mainPlayModel1);\r\n                }\r\n                SharedPreferences sharedd = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = sharedd.edit();\r\n                Gson gson = new Gson();\r\n                String jsonx = gson.toJson(arrayList2);\r\n                String json1q1 = gson.toJson(arrayList);\r\n                editor.putString(CONSTANTS.PREF_KEY_modelList, json1q1);\r\n                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"DownloadListAudio\");\r\n                editor.commit();\r\n                DatabaseClient.getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                callDisableDownload();\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callLike() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(AudioId, UserID);\r\n            listCall.enqueue(new Callback<AudioLikeModel>() {\r\n                @Override\r\n                public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        try {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            AudioLikeModel model = response.body();\r\n                            if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n                                binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);\r\n                                Like = \"0\";\r\n                            } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                                Like = \"1\";\r\n                            }\r\n                            SharedPreferences sharedxx = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            boolean audioPlay = sharedxx.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                            int pos = sharedxx.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                            AudioFlag = sharedxx.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n                                if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n\r\n                                } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                                    SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                    AudioFlag = sharedx.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                    Gson gsonx = new Gson();\r\n                                    String json = sharedx.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gsonx));\r\n                                    Type type1 = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n                                    }.getType();\r\n                                    ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gsonx.fromJson(json, type1);\r\n                                    LikesHistoryModel.ResponseData.Audio mainPlayModel = new LikesHistoryModel.ResponseData.Audio();\r\n                                    MainPlayModel mainPlayModel1 = new MainPlayModel();\r\n                                    if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n                                        if (comeFrom.equalsIgnoreCase(\"myDownloadPlaylist\")) {\r\n                                            mainPlayModel.setID(mDataDownload.get(position).getID());\r\n                                            mainPlayModel.setName(mDataDownload.get(position).getName());\r\n                                            mainPlayModel.setAudioFile(mDataDownload.get(position).getAudioFile());\r\n                                            mainPlayModel.setAudioDirection(mDataDownload.get(position).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(mDataDownload.get(position).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(mDataDownload.get(position).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(mDataDownload.get(position).getImageFile());\r\n                                            mainPlayModel.setLike(\"1\");\r\n                                            mainPlayModel.setDownload(mDataDownload.get(position).getDownload());\r\n                                            mainPlayModel.setAudioDuration(mDataDownload.get(position).getAudioDuration());\r\n\r\n                                            mainPlayModel1.setID(mDataDownload.get(position).getID());\r\n                                            mainPlayModel1.setName(mDataDownload.get(position).getName());\r\n                                            mainPlayModel1.setAudioFile(mDataDownload.get(position).getAudioFile());\r\n                                            mainPlayModel1.setAudioDirection(mDataDownload.get(position).getAudioDirection());\r\n                                            mainPlayModel1.setAudiomastercat(mDataDownload.get(position).getAudiomastercat());\r\n                                            mainPlayModel1.setAudioSubCategory(mDataDownload.get(position).getAudioSubCategory());\r\n                                            mainPlayModel1.setImageFile(mDataDownload.get(position).getImageFile());\r\n                                            mainPlayModel1.setLike(\"1\");\r\n                                            mainPlayModel1.setDownload(mDataDownload.get(position).getDownload());\r\n                                            mainPlayModel1.setAudioDuration(mDataDownload.get(position).getAudioDuration());\r\n                                        } else {\r\n                                            mainPlayModel.setID(mData.get(position).getID());\r\n                                            mainPlayModel.setName(mData.get(position).getName());\r\n                                            mainPlayModel.setAudioFile(mData.get(position).getAudioFile());\r\n                                            mainPlayModel.setAudioDirection(mData.get(position).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(mData.get(position).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(mData.get(position).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(mData.get(position).getImageFile());\r\n                                            mainPlayModel.setLike(\"1\");\r\n                                            mainPlayModel.setDownload(mData.get(position).getDownload());\r\n                                            mainPlayModel.setAudioDuration(mData.get(position).getAudioDuration());\r\n\r\n                                            mainPlayModel1.setID(mData.get(position).getID());\r\n                                            mainPlayModel1.setName(mData.get(position).getName());\r\n                                            mainPlayModel1.setAudioFile(mData.get(position).getAudioFile());\r\n                                            mainPlayModel1.setAudioDirection(mData.get(position).getAudioDirection());\r\n                                            mainPlayModel1.setAudiomastercat(mData.get(position).getAudiomastercat());\r\n                                            mainPlayModel1.setAudioSubCategory(mData.get(position).getAudioSubCategory());\r\n                                            mainPlayModel1.setImageFile(mData.get(position).getImageFile());\r\n                                            mainPlayModel1.setLike(\"1\");\r\n                                            mainPlayModel1.setDownload(mData.get(position).getDownload());\r\n                                            mainPlayModel1.setAudioDuration(mData.get(position).getAudioDuration());\r\n                                        }\r\n                                    } else {\r\n                                        mainPlayModel.setID(mainPlayModelList.get(position).getID());\r\n                                        mainPlayModel.setName(mainPlayModelList.get(position).getName());\r\n                                        mainPlayModel.setAudioFile(mainPlayModelList.get(position).getAudioFile());\r\n                                        mainPlayModel.setAudioDirection(mainPlayModelList.get(position).getAudioDirection());\r\n                                        mainPlayModel.setAudiomastercat(mainPlayModelList.get(position).getAudiomastercat());\r\n                                        mainPlayModel.setAudioSubCategory(mainPlayModelList.get(position).getAudioSubCategory());\r\n                                        mainPlayModel.setImageFile(mainPlayModelList.get(position).getImageFile());\r\n                                        mainPlayModel.setLike(\"1\");\r\n                                        mainPlayModel.setDownload(mainPlayModelList.get(position).getDownload());\r\n                                        mainPlayModel.setAudioDuration(mainPlayModelList.get(position).getAudioDuration());\r\n\r\n                                        mainPlayModel1.setID(mainPlayModelList.get(position).getID());\r\n                                        mainPlayModel1.setName(mainPlayModelList.get(position).getName());\r\n                                        mainPlayModel1.setAudioFile(mainPlayModelList.get(position).getAudioFile());\r\n                                        mainPlayModel1.setAudioDirection(mainPlayModelList.get(position).getAudioDirection());\r\n                                        mainPlayModel1.setAudiomastercat(mainPlayModelList.get(position).getAudiomastercat());\r\n                                        mainPlayModel1.setAudioSubCategory(mainPlayModelList.get(position).getAudioSubCategory());\r\n                                        mainPlayModel1.setImageFile(mainPlayModelList.get(position).getImageFile());\r\n                                        mainPlayModel1.setLike(\"1\");\r\n                                        mainPlayModel1.setDownload(mainPlayModelList.get(position).getDownload());\r\n                                        mainPlayModel1.setAudioDuration(mainPlayModelList.get(position).getAudioDuration());\r\n                                    }\r\n                                    arrayList.add(arrayList.size(), mainPlayModel);\r\n                                    mainPlayModelList.add(mainPlayModelList.size(), mainPlayModel1);\r\n                                    SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                    SharedPreferences.Editor editor = sharedd.edit();\r\n                                    Gson gson = new Gson();\r\n                                    String jsonx = gson.toJson(mainPlayModelList);\r\n                                    String json1 = gson.toJson(arrayList);\r\n                                    editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                    editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                    editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"LikeAudioList\");\r\n                                    editor.commit();\r\n                                }\r\n                            }\r\n                            if (queuePlay) {\r\n                                addToQueueModelList.get(position).setLike(Like);\r\n                            } else\r\n                                mainPlayModelList.get(position).setLike(Like);\r\n                            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            SharedPreferences.Editor editor = shared.edit();\r\n                            Gson gson = new Gson();\r\n                            String json = gson.toJson(mainPlayModelList);\r\n                            editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                            String json1 = gson.toJson(addToQueueModelList);\r\n                            if (queuePlay) {\r\n                                editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n                            }\r\n                            editor.commit();\r\n                            BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AudioLikeModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callBack();\r\n    }\r\n\r\n    private void prepareData() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n            Call<DirectionModel> listCall = APIClient.getClient().getAudioDetailLists(UserID, AudioId);\r\n            listCall.enqueue(new Callback<DirectionModel>() {\r\n                @Override\r\n                public void onResponse(Call<DirectionModel> call, Response<DirectionModel> response) {\r\n                    try {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                            if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n                                binding.llOptions.setVisibility(View.VISIBLE);\r\n                                binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n                                binding.llOptions.setVisibility(View.VISIBLE);\r\n                                binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n                                binding.llOptions.setVisibility(View.VISIBLE);\r\n                                binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                                binding.llOptions.setVisibility(View.VISIBLE);\r\n                                binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n                                binding.llOptions.setVisibility(View.VISIBLE);\r\n                                binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                            } else if (play.equalsIgnoreCase(\"TopCategories\")) {\r\n                                binding.llOptions.setVisibility(View.VISIBLE);\r\n                                binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                            } else if (play.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n                                binding.llOptions.setVisibility(View.VISIBLE);\r\n                                binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                            } else if (play.equalsIgnoreCase(\"playlist\")) {\r\n                                binding.llOptions.setVisibility(View.VISIBLE);\r\n                                binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                            } else if (play.equalsIgnoreCase(\"myPlayList\")) {\r\n                                binding.llOptions.setVisibility(View.VISIBLE);\r\n                                binding.llRemovePlaylist.setVisibility(View.VISIBLE);\r\n                            } else {\r\n                                binding.llOptions.setVisibility(View.VISIBLE);\r\n                                binding.llRemovePlaylist.setVisibility(View.GONE);\r\n                            }\r\n\r\n                            DirectionModel directionModel = response.body();\r\n                            int ix = position;\r\n                            if (!comeFrom.equalsIgnoreCase(\"\")) {\r\n\r\n                                if (comeFrom.equalsIgnoreCase(\"myDownloadPlaylist\")) {\r\n                                    AudioFile = mDataDownload.get(ix).getAudioFile();\r\n                                    PlaylistId = \"\";\r\n                                    audioFileName = mDataDownload.get(ix).getName();\r\n                                } else {\r\n                                    AudioFile = mData.get(ix).getAudioFile();\r\n                                    PlaylistId = mData.get(ix).getPlaylistID();\r\n                                    audioFileName = mData.get(ix).getName();\r\n                                }\r\n                            } else {\r\n                                AudioFile = mainPlayModelList.get(ix).getAudioFile();\r\n                                PlaylistId = mainPlayModelList.get(ix).getPlaylistID();\r\n                                audioFileName = mainPlayModelList.get(ix).getName();\r\n                            }\r\n                        /*if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(audioFileName)) {\r\n                            handler1.postDelayed(UpdateSongTime1, 500);\r\n                        } else {\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        }*/\r\n                            if (PlaylistId == null) {\r\n                                PlaylistId = \"\";\r\n                            } else {\r\n                                PlaylistId = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                            }\r\n                            GetMedia(AudioFile, activity, directionModel.getResponseData().get(0).getDownload(), PlaylistId);\r\n                            binding.cvImage.setVisibility(View.VISIBLE);\r\n                            binding.llLike.setVisibility(View.VISIBLE);\r\n                            binding.llAddPlaylist.setVisibility(View.VISIBLE);\r\n                            binding.llAddQueue.setVisibility(View.VISIBLE);\r\n                            binding.llDownload.setVisibility(View.VISIBLE);\r\n                            binding.llShuffle.setVisibility(View.VISIBLE);\r\n                            binding.llRepeat.setVisibility(View.VISIBLE);\r\n                            binding.llViewQueue.setVisibility(View.VISIBLE);\r\n                            Glide.with(ctx).load(directionModel.getResponseData().get(0).getImageFile()).thumbnail(0.05f)\r\n                                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n\r\n                            if (directionModel.getResponseData().get(0).getAudioDescription().equalsIgnoreCase(\"\")) {\r\n                                binding.tvTitleDec.setVisibility(View.GONE);\r\n                                binding.tvSubDec.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.tvTitleDec.setVisibility(View.VISIBLE);\r\n                                binding.tvSubDec.setVisibility(View.VISIBLE);\r\n                            }\r\n\r\n                            binding.tvSubDec.setText(directionModel.getResponseData().get(0).getAudioDescription());\r\n                            int linecount = binding.tvSubDec.getLineCount();\r\n                            if (linecount >= 4) {\r\n                                binding.tvReadMore.setVisibility(View.VISIBLE);\r\n                            } else {\r\n                                binding.tvReadMore.setVisibility(View.GONE);\r\n                            }\r\n\r\n                            SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                                binding.llViewQueue.setClickable(true);\r\n                                binding.llViewQueue.setEnabled(true);\r\n                                binding.ivViewQueue.setColorFilter(getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n                            } else {\r\n                                binding.llViewQueue.setClickable(false);\r\n                                binding.llViewQueue.setEnabled(false);\r\n                                binding.ivViewQueue.setColorFilter(getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n                            }\r\n                            binding.tvReadMore.setOnClickListener(view -> {\r\n                                final Dialog dialog = new Dialog(ctx);\r\n                                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                dialog.setContentView(R.layout.full_desc_layout);\r\n                                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));\r\n                                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                final TextView tvDesc = dialog.findViewById(R.id.tvDesc);\r\n                                final RelativeLayout tvClose = dialog.findViewById(R.id.tvClose);\r\n                                tvDesc.setText(directionModel.getResponseData().get(0).getAudioDescription());\r\n\r\n                                dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                    if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                        dialog.dismiss();\r\n                                        return true;\r\n                                    }\r\n                                    return false;\r\n                                });\r\n\r\n                                tvClose.setOnClickListener(v -> dialog.dismiss());\r\n                                dialog.show();\r\n                                dialog.setCancelable(false);\r\n                            });\r\n\r\n                            Like = directionModel.getResponseData().get(0).getLike();\r\n                            Download = directionModel.getResponseData().get(0).getDownload();\r\n                            binding.tvName.setText(directionModel.getResponseData().get(0).getName());\r\n                            if (directionModel.getResponseData().get(0).getAudiomastercat().equalsIgnoreCase(\"\")) {\r\n                                binding.tvDesc.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.tvDesc.setVisibility(View.VISIBLE);\r\n                                binding.tvDesc.setText(directionModel.getResponseData().get(0).getAudiomastercat());\r\n                            }\r\n                            binding.tvDuration.setText(directionModel.getResponseData().get(0).getAudioDuration());\r\n\r\n                            if (directionModel.getResponseData().get(0).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                                binding.tvSubDire.setText(\"\");\r\n                                binding.tvSubDire.setVisibility(View.GONE);\r\n                                binding.tvDire.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.tvSubDire.setText(directionModel.getResponseData().get(0).getAudioDirection());\r\n                                binding.tvSubDire.setVisibility(View.VISIBLE);\r\n                                binding.tvDire.setVisibility(View.VISIBLE);\r\n                            }\r\n\r\n                            if (directionModel.getResponseData().get(0).getLike().equalsIgnoreCase(\"1\")) {\r\n                                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                            } else if (!directionModel.getResponseData().get(0).getLike().equalsIgnoreCase(\"0\")) {\r\n                                binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);\r\n                            }\r\n\r\n                            binding.llAddPlaylist.setOnClickListener(view -> {\r\n                                if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                                    return;\r\n                                }\r\n                                mLastClickTime = SystemClock.elapsedRealtime();\r\n                                Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                                i.putExtra(\"AudioId\", AudioId);\r\n                                i.putExtra(\"PlaylistID\", \"\");\r\n                                startActivity(i);\r\n                            });\r\n\r\n                            binding.llViewQueue.setOnClickListener(view -> {\r\n                                if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                                    return;\r\n                                }\r\n                                mLastClickTime = SystemClock.elapsedRealtime();\r\n                                Intent i = new Intent(ctx, ViewQueueActivity.class);\r\n                                i.putExtra(\"ComeFromQueue\", \"1\");\r\n                                i.putExtra(\"ID\", AudioId);\r\n                                i.putExtra(\"play\", play);\r\n                                startActivity(i);\r\n                                finish();\r\n                            });\r\n\r\n                            if (directionModel.getResponseData().get(0).getAudioSubCategory().equalsIgnoreCase(\"\")) {\r\n                                binding.rvDirlist.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.rvDirlist.setVisibility(View.VISIBLE);\r\n                                String[] elements = directionModel.getResponseData().get(0).getAudioSubCategory().split(\",\");\r\n                                List<String> direction = Arrays.asList(elements);\r\n\r\n                                DirectionAdapter directionAdapter = new DirectionAdapter(direction, ctx);\r\n                                RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(ctx, LinearLayoutManager.HORIZONTAL, false);\r\n                                binding.rvDirlist.setLayoutManager(recentlyPlayed);\r\n                                binding.rvDirlist.setItemAnimator(new DefaultItemAnimator());\r\n                                binding.rvDirlist.setAdapter(directionAdapter);\r\n                            }\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<DirectionModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);\r\n                    BWSApplication.showToast(t.getMessage(), ctx);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n\r\n    }\r\n\r\n    public void GetMedia(String AudioFile, Context ctx, String download, String PlayListId) {\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getaudioByPlaylist(AudioFile, PlayListId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                        callDisableDownload();\r\n                    }\r\n                } else if (download.equalsIgnoreCase(\"1\")) {\r\n                    callDisableDownload();\r\n                } else {\r\n                    binding.llDownload.setClickable(true);\r\n                    binding.llDownload.setEnabled(true);\r\n                    binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callDisableDownload() {\r\n        binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        binding.tvDownloads.setTextColor(activity.getResources().getColor(R.color.white));\r\n        binding.llDownload.setClickable(false);\r\n        binding.llDownload.setEnabled(false);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddQueueActivity.java	(revision 7e371c210fcb71103e9ce5c0c7fbf93961ad8111)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/AddQueueActivity.java	(date 1605859252498)
@@ -1039,199 +1039,195 @@
             listCall.enqueue(new Callback<DirectionModel>() {
                 @Override
                 public void onResponse(Call<DirectionModel> call, Response<DirectionModel> response) {
-                    try {
-                        if (response.isSuccessful()) {
-                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
-                            if (AudioFlag.equalsIgnoreCase("MainAudioList")) {
-                                binding.llOptions.setVisibility(View.VISIBLE);
-                                binding.llRemovePlaylist.setVisibility(View.GONE);
-                            } else if (AudioFlag.equalsIgnoreCase("SearchModelAudio")) {
-                                binding.llOptions.setVisibility(View.VISIBLE);
-                                binding.llRemovePlaylist.setVisibility(View.GONE);
-                            } else if (AudioFlag.equalsIgnoreCase("ViewAllAudioList")) {
-                                binding.llOptions.setVisibility(View.VISIBLE);
-                                binding.llRemovePlaylist.setVisibility(View.GONE);
-                            } else if (AudioFlag.equalsIgnoreCase("TopCategories")) {
-                                binding.llOptions.setVisibility(View.VISIBLE);
-                                binding.llRemovePlaylist.setVisibility(View.GONE);
-                            } else if (AudioFlag.equalsIgnoreCase("SearchAudio")) {
-                                binding.llOptions.setVisibility(View.VISIBLE);
-                                binding.llRemovePlaylist.setVisibility(View.GONE);
-                            } else if (play.equalsIgnoreCase("TopCategories")) {
-                                binding.llOptions.setVisibility(View.VISIBLE);
-                                binding.llRemovePlaylist.setVisibility(View.GONE);
-                            } else if (play.equalsIgnoreCase("ViewAllAudioList")) {
-                                binding.llOptions.setVisibility(View.VISIBLE);
-                                binding.llRemovePlaylist.setVisibility(View.GONE);
-                            } else if (play.equalsIgnoreCase("playlist")) {
-                                binding.llOptions.setVisibility(View.VISIBLE);
-                                binding.llRemovePlaylist.setVisibility(View.GONE);
-                            } else if (play.equalsIgnoreCase("myPlayList")) {
-                                binding.llOptions.setVisibility(View.VISIBLE);
-                                binding.llRemovePlaylist.setVisibility(View.VISIBLE);
-                            } else {
-                                binding.llOptions.setVisibility(View.VISIBLE);
-                                binding.llRemovePlaylist.setVisibility(View.GONE);
-                            }
+                    if (response.isSuccessful()) {
+                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, activity);
+                        if (AudioFlag.equalsIgnoreCase("MainAudioList")) {
+                            binding.llOptions.setVisibility(View.VISIBLE);
+                            binding.llRemovePlaylist.setVisibility(View.GONE);
+                        } else if (AudioFlag.equalsIgnoreCase("SearchModelAudio")) {
+                            binding.llOptions.setVisibility(View.VISIBLE);
+                            binding.llRemovePlaylist.setVisibility(View.GONE);
+                        } else if (AudioFlag.equalsIgnoreCase("ViewAllAudioList")) {
+                            binding.llOptions.setVisibility(View.VISIBLE);
+                            binding.llRemovePlaylist.setVisibility(View.GONE);
+                        } else if (AudioFlag.equalsIgnoreCase("TopCategories")) {
+                            binding.llOptions.setVisibility(View.VISIBLE);
+                            binding.llRemovePlaylist.setVisibility(View.GONE);
+                        } else if (AudioFlag.equalsIgnoreCase("SearchAudio")) {
+                            binding.llOptions.setVisibility(View.VISIBLE);
+                            binding.llRemovePlaylist.setVisibility(View.GONE);
+                        } else if (play.equalsIgnoreCase("TopCategories")) {
+                            binding.llOptions.setVisibility(View.VISIBLE);
+                            binding.llRemovePlaylist.setVisibility(View.GONE);
+                        } else if (play.equalsIgnoreCase("ViewAllAudioList")) {
+                            binding.llOptions.setVisibility(View.VISIBLE);
+                            binding.llRemovePlaylist.setVisibility(View.GONE);
+                        } else if (play.equalsIgnoreCase("playlist")) {
+                            binding.llOptions.setVisibility(View.VISIBLE);
+                            binding.llRemovePlaylist.setVisibility(View.GONE);
+                        } else if (play.equalsIgnoreCase("myPlayList")) {
+                            binding.llOptions.setVisibility(View.VISIBLE);
+                            binding.llRemovePlaylist.setVisibility(View.VISIBLE);
+                        } else {
+                            binding.llOptions.setVisibility(View.VISIBLE);
+                            binding.llRemovePlaylist.setVisibility(View.GONE);
+                        }
 
-                            DirectionModel directionModel = response.body();
-                            int ix = position;
-                            if (!comeFrom.equalsIgnoreCase("")) {
+                        DirectionModel directionModel = response.body();
+                        int ix = position;
+                        if (!comeFrom.equalsIgnoreCase("")) {
 
-                                if (comeFrom.equalsIgnoreCase("myDownloadPlaylist")) {
-                                    AudioFile = mDataDownload.get(ix).getAudioFile();
-                                    PlaylistId = "";
-                                    audioFileName = mDataDownload.get(ix).getName();
-                                } else {
-                                    AudioFile = mData.get(ix).getAudioFile();
-                                    PlaylistId = mData.get(ix).getPlaylistID();
-                                    audioFileName = mData.get(ix).getName();
-                                }
-                            } else {
-                                AudioFile = mainPlayModelList.get(ix).getAudioFile();
-                                PlaylistId = mainPlayModelList.get(ix).getPlaylistID();
-                                audioFileName = mainPlayModelList.get(ix).getName();
-                            }
+                            if (comeFrom.equalsIgnoreCase("myDownloadPlaylist")) {
+                                AudioFile = mDataDownload.get(ix).getAudioFile();
+                                PlaylistId = "";
+                                audioFileName = mDataDownload.get(ix).getName();
+                            } else {
+                                AudioFile = mData.get(ix).getAudioFile();
+                                PlaylistId = mData.get(ix).getPlaylistID();
+                                audioFileName = mData.get(ix).getName();
+                            }
+                        } else {
+                            AudioFile = mainPlayModelList.get(ix).getAudioFile();
+                            PlaylistId = mainPlayModelList.get(ix).getPlaylistID();
+                            audioFileName = mainPlayModelList.get(ix).getName();
+                        }
                         /*if (!filename.equalsIgnoreCase("") && filename.equalsIgnoreCase(audioFileName)) {
                             handler1.postDelayed(UpdateSongTime1, 500);
                         } else {
                             binding.pbProgress.setVisibility(View.GONE);
                             handler1.removeCallbacks(UpdateSongTime1);
                         }*/
-                            if (PlaylistId == null) {
-                                PlaylistId = "";
-                            } else {
-                                PlaylistId = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, "");
-                            }
-                            GetMedia(AudioFile, activity, directionModel.getResponseData().get(0).getDownload(), PlaylistId);
-                            binding.cvImage.setVisibility(View.VISIBLE);
-                            binding.llLike.setVisibility(View.VISIBLE);
-                            binding.llAddPlaylist.setVisibility(View.VISIBLE);
-                            binding.llAddQueue.setVisibility(View.VISIBLE);
-                            binding.llDownload.setVisibility(View.VISIBLE);
-                            binding.llShuffle.setVisibility(View.VISIBLE);
-                            binding.llRepeat.setVisibility(View.VISIBLE);
-                            binding.llViewQueue.setVisibility(View.VISIBLE);
-                            Glide.with(ctx).load(directionModel.getResponseData().get(0).getImageFile()).thumbnail(0.05f)
-                                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);
+                        if (PlaylistId == null) {
+                            PlaylistId = "";
+                        } else {
+                            PlaylistId = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, "");
+                        }
+                        GetMedia(AudioFile, activity, directionModel.getResponseData().get(0).getDownload(), PlaylistId);
+                        binding.cvImage.setVisibility(View.VISIBLE);
+                        binding.llLike.setVisibility(View.VISIBLE);
+                        binding.llAddPlaylist.setVisibility(View.VISIBLE);
+                        binding.llAddQueue.setVisibility(View.VISIBLE);
+                        binding.llDownload.setVisibility(View.VISIBLE);
+                        binding.llShuffle.setVisibility(View.VISIBLE);
+                        binding.llRepeat.setVisibility(View.VISIBLE);
+                        binding.llViewQueue.setVisibility(View.VISIBLE);
+                        Glide.with(ctx).load(directionModel.getResponseData().get(0).getImageFile()).thumbnail(0.05f)
+                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);
 
-                            if (directionModel.getResponseData().get(0).getAudioDescription().equalsIgnoreCase("")) {
-                                binding.tvTitleDec.setVisibility(View.GONE);
-                                binding.tvSubDec.setVisibility(View.GONE);
-                            } else {
-                                binding.tvTitleDec.setVisibility(View.VISIBLE);
-                                binding.tvSubDec.setVisibility(View.VISIBLE);
-                            }
+                        if (directionModel.getResponseData().get(0).getAudioDescription().equalsIgnoreCase("")) {
+                            binding.tvTitleDec.setVisibility(View.GONE);
+                            binding.tvSubDec.setVisibility(View.GONE);
+                        } else {
+                            binding.tvTitleDec.setVisibility(View.VISIBLE);
+                            binding.tvSubDec.setVisibility(View.VISIBLE);
+                        }
 
-                            binding.tvSubDec.setText(directionModel.getResponseData().get(0).getAudioDescription());
-                            int linecount = binding.tvSubDec.getLineCount();
-                            if (linecount >= 4) {
-                                binding.tvReadMore.setVisibility(View.VISIBLE);
-                            } else {
-                                binding.tvReadMore.setVisibility(View.GONE);
-                            }
+                        binding.tvSubDec.setText(directionModel.getResponseData().get(0).getAudioDescription());
+                        int linecount = binding.tvSubDec.getLineCount();
+                        if (linecount >= 4) {
+                            binding.tvReadMore.setVisibility(View.VISIBLE);
+                        } else {
+                            binding.tvReadMore.setVisibility(View.GONE);
+                        }
 
-                            SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
-                            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
-                            if (!AudioFlag.equalsIgnoreCase("0")) {
-                                binding.llViewQueue.setClickable(true);
-                                binding.llViewQueue.setEnabled(true);
-                                binding.ivViewQueue.setColorFilter(getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);
-                            } else {
-                                binding.llViewQueue.setClickable(false);
-                                binding.llViewQueue.setEnabled(false);
-                                binding.ivViewQueue.setColorFilter(getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);
-                            }
-                            binding.tvReadMore.setOnClickListener(view -> {
-                                final Dialog dialog = new Dialog(ctx);
-                                dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
-                                dialog.setContentView(R.layout.full_desc_layout);
-                                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));
-                                dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
-                                final TextView tvDesc = dialog.findViewById(R.id.tvDesc);
-                                final RelativeLayout tvClose = dialog.findViewById(R.id.tvClose);
-                                tvDesc.setText(directionModel.getResponseData().get(0).getAudioDescription());
+                        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
+                        AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
+                        if (!AudioFlag.equalsIgnoreCase("0")) {
+                            binding.llViewQueue.setClickable(true);
+                            binding.llViewQueue.setEnabled(true);
+                            binding.ivViewQueue.setColorFilter(getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);
+                        } else {
+                            binding.llViewQueue.setClickable(false);
+                            binding.llViewQueue.setEnabled(false);
+                            binding.ivViewQueue.setColorFilter(getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);
+                        }
+                        binding.tvReadMore.setOnClickListener(view -> {
+                            final Dialog dialog = new Dialog(ctx);
+                            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
+                            dialog.setContentView(R.layout.full_desc_layout);
+                            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.dark_blue_gray)));
+                            dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
+                            final TextView tvDesc = dialog.findViewById(R.id.tvDesc);
+                            final RelativeLayout tvClose = dialog.findViewById(R.id.tvClose);
+                            tvDesc.setText(directionModel.getResponseData().get(0).getAudioDescription());
 
-                                dialog.setOnKeyListener((v, keyCode, event) -> {
-                                    if (keyCode == KeyEvent.KEYCODE_BACK) {
-                                        dialog.dismiss();
-                                        return true;
-                                    }
-                                    return false;
-                                });
+                            dialog.setOnKeyListener((v, keyCode, event) -> {
+                                if (keyCode == KeyEvent.KEYCODE_BACK) {
+                                    dialog.dismiss();
+                                    return true;
+                                }
+                                return false;
+                            });
 
-                                tvClose.setOnClickListener(v -> dialog.dismiss());
-                                dialog.show();
-                                dialog.setCancelable(false);
-                            });
+                            tvClose.setOnClickListener(v -> dialog.dismiss());
+                            dialog.show();
+                            dialog.setCancelable(false);
+                        });
 
-                            Like = directionModel.getResponseData().get(0).getLike();
-                            Download = directionModel.getResponseData().get(0).getDownload();
-                            binding.tvName.setText(directionModel.getResponseData().get(0).getName());
-                            if (directionModel.getResponseData().get(0).getAudiomastercat().equalsIgnoreCase("")) {
-                                binding.tvDesc.setVisibility(View.GONE);
-                            } else {
-                                binding.tvDesc.setVisibility(View.VISIBLE);
-                                binding.tvDesc.setText(directionModel.getResponseData().get(0).getAudiomastercat());
-                            }
-                            binding.tvDuration.setText(directionModel.getResponseData().get(0).getAudioDuration());
+                        Like = directionModel.getResponseData().get(0).getLike();
+                        Download = directionModel.getResponseData().get(0).getDownload();
+                        binding.tvName.setText(directionModel.getResponseData().get(0).getName());
+                        if (directionModel.getResponseData().get(0).getAudiomastercat().equalsIgnoreCase("")) {
+                            binding.tvDesc.setVisibility(View.GONE);
+                        } else {
+                            binding.tvDesc.setVisibility(View.VISIBLE);
+                            binding.tvDesc.setText(directionModel.getResponseData().get(0).getAudiomastercat());
+                        }
+                        binding.tvDuration.setText(directionModel.getResponseData().get(0).getAudioDuration());
 
-                            if (directionModel.getResponseData().get(0).getAudioDirection().equalsIgnoreCase("")) {
-                                binding.tvSubDire.setText("");
-                                binding.tvSubDire.setVisibility(View.GONE);
-                                binding.tvDire.setVisibility(View.GONE);
-                            } else {
-                                binding.tvSubDire.setText(directionModel.getResponseData().get(0).getAudioDirection());
-                                binding.tvSubDire.setVisibility(View.VISIBLE);
-                                binding.tvDire.setVisibility(View.VISIBLE);
-                            }
+                        if (directionModel.getResponseData().get(0).getAudioDirection().equalsIgnoreCase("")) {
+                            binding.tvSubDire.setText("");
+                            binding.tvSubDire.setVisibility(View.GONE);
+                            binding.tvDire.setVisibility(View.GONE);
+                        } else {
+                            binding.tvSubDire.setText(directionModel.getResponseData().get(0).getAudioDirection());
+                            binding.tvSubDire.setVisibility(View.VISIBLE);
+                            binding.tvDire.setVisibility(View.VISIBLE);
+                        }
 
-                            if (directionModel.getResponseData().get(0).getLike().equalsIgnoreCase("1")) {
-                                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);
-                            } else if (!directionModel.getResponseData().get(0).getLike().equalsIgnoreCase("0")) {
-                                binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);
-                            }
+                        if (directionModel.getResponseData().get(0).getLike().equalsIgnoreCase("1")) {
+                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);
+                        } else if (!directionModel.getResponseData().get(0).getLike().equalsIgnoreCase("0")) {
+                            binding.ivLike.setImageResource(R.drawable.ic_like_white_icon);
+                        }
 
-                            binding.llAddPlaylist.setOnClickListener(view -> {
-                                if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {
-                                    return;
-                                }
-                                mLastClickTime = SystemClock.elapsedRealtime();
-                                Intent i = new Intent(ctx, AddPlaylistActivity.class);
-                                i.putExtra("AudioId", AudioId);
-                                i.putExtra("PlaylistID", "");
-                                startActivity(i);
-                            });
+                        binding.llAddPlaylist.setOnClickListener(view -> {
+                            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {
+                                return;
+                            }
+                            mLastClickTime = SystemClock.elapsedRealtime();
+                            Intent i = new Intent(ctx, AddPlaylistActivity.class);
+                            i.putExtra("AudioId", AudioId);
+                            i.putExtra("PlaylistID", "");
+                            startActivity(i);
+                        });
 
-                            binding.llViewQueue.setOnClickListener(view -> {
-                                if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {
-                                    return;
-                                }
-                                mLastClickTime = SystemClock.elapsedRealtime();
-                                Intent i = new Intent(ctx, ViewQueueActivity.class);
-                                i.putExtra("ComeFromQueue", "1");
-                                i.putExtra("ID", AudioId);
-                                i.putExtra("play", play);
-                                startActivity(i);
-                                finish();
-                            });
+                        binding.llViewQueue.setOnClickListener(view -> {
+                            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {
+                                return;
+                            }
+                            mLastClickTime = SystemClock.elapsedRealtime();
+                            Intent i = new Intent(ctx, ViewQueueActivity.class);
+                            i.putExtra("ComeFromQueue", "1");
+                            i.putExtra("ID", AudioId);
+                            i.putExtra("play", play);
+                            startActivity(i);
+                            finish();
+                        });
 
-                            if (directionModel.getResponseData().get(0).getAudioSubCategory().equalsIgnoreCase("")) {
-                                binding.rvDirlist.setVisibility(View.GONE);
-                            } else {
-                                binding.rvDirlist.setVisibility(View.VISIBLE);
-                                String[] elements = directionModel.getResponseData().get(0).getAudioSubCategory().split(",");
-                                List<String> direction = Arrays.asList(elements);
+                        if (directionModel.getResponseData().get(0).getAudioSubCategory().equalsIgnoreCase("")) {
+                            binding.rvDirlist.setVisibility(View.GONE);
+                        } else {
+                            binding.rvDirlist.setVisibility(View.VISIBLE);
+                            String[] elements = directionModel.getResponseData().get(0).getAudioSubCategory().split(",");
+                            List<String> direction = Arrays.asList(elements);
 
-                                DirectionAdapter directionAdapter = new DirectionAdapter(direction, ctx);
-                                RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(ctx, LinearLayoutManager.HORIZONTAL, false);
-                                binding.rvDirlist.setLayoutManager(recentlyPlayed);
-                                binding.rvDirlist.setItemAnimator(new DefaultItemAnimator());
-                                binding.rvDirlist.setAdapter(directionAdapter);
-                            }
+                            DirectionAdapter directionAdapter = new DirectionAdapter(direction, ctx);
+                            RecyclerView.LayoutManager recentlyPlayed = new LinearLayoutManager(ctx, LinearLayoutManager.HORIZONTAL, false);
+                            binding.rvDirlist.setLayoutManager(recentlyPlayed);
+                            binding.rvDirlist.setItemAnimator(new DefaultItemAnimator());
+                            binding.rvDirlist.setAdapter(directionAdapter);
                         }
-                    } catch (Exception e) {
-                        e.printStackTrace();
                     }
                 }
 
Index: .idea/shelf/Uncommitted_changes_before_Update_at_13-11-2020_10_11__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_13-11-2020_10_11__Default_Changelist_.xml	(revision 7e371c210fcb71103e9ce5c0c7fbf93961ad8111)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_13-11-2020_10_11__Default_Changelist_.xml	(revision 7e371c210fcb71103e9ce5c0c7fbf93961ad8111)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_13-11-2020_10_11_[Default_Changelist]" date="1605242486257" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13-11-2020_10_11_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 13-11-2020 10:11 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_13-11-2020_10_11_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_13-11-2020_10_11_[Default_Changelist]/shelved.patch	(revision 7e371c210fcb71103e9ce5c0c7fbf93961ad8111)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_13-11-2020_10_11_[Default_Changelist]/shelved.patch	(revision 7e371c210fcb71103e9ce5c0c7fbf93961ad8111)
@@ -1,40 +0,0 @@
-Index: app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments;\r\n\r\nimport android.app.Activity;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.SharedPreferences;\r\nimport android.media.AudioAttributes;\r\nimport android.media.AudioManager;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Services.OnClearFromRecentService;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.Playable;\r\nimport com.brainwellnessspa.databinding.FragmentTransparentPlayerBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.BWSApplication.ACTION_PLAY;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPreparing;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isprogressbar;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class TransparentPlayerFragment extends Fragment implements SeekBar.OnSeekBarChangeListener, Playable/*, AudioManager.OnAudioFocusChangeListener*/ {\r\n    public static int isDisclaimer = 0;\r\n    public static String addToRecentPlayId = \"\", myAudioId;\r\n    public static ArrayList<MainPlayModel> mainPlayModelList;\r\n    public static FragmentTransparentPlayerBinding binding;\r\n    public static String  UserID, AudioFlag, IsRepeat, IsShuffle, audioFile, id, name;\r\n    public static int position = 0, startTime, listSize, myCount;\r\n    public static MainPlayModel mainPlayModel;\r\n    public static boolean isPlaying = false;\r\n    public static Boolean queuePlay, audioPlay,playPause;\r\n    public static ArrayList<AddToQueueModel> addToQueueModelList;\r\n    public static List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    public static Activity activity;\r\n    public static Context ctx;\r\n    public static long myProgress = 0, diff = 0;\r\n    public static SharedPreferences shared;\r\n    public static String json;\r\n    public static Gson gson;\r\n    public static BroadcastReceiver broadcastReceiver;\r\n    public static long totalDuration, currentDuration = 0;\r\n    public static Handler handler12;\r\n    public static Context context;\r\n    public static Runnable UpdateSongTime12 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                startTime = getStartTime();\r\n                binding.simpleSeekbar.setMax(100);\r\n                Time t = Time.valueOf(\"00:00:00\");\r\n                if (queuePlay) {\r\n                    if (listSize != 0) {\r\n                        if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        stopMedia();\r\n                    }\r\n                } else if (audioPlay) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                        }\r\n                    } else {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else\r\n                        totalDuration = t.getTime();\r\n                } else {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else {\r\n                        totalDuration = t.getTime();\r\n                    }\r\n                }\r\n                myProgress = currentDuration;\r\n                currentDuration = getStartTime();\r\n                diff = totalDuration - myProgress;\r\n\r\n//                Log.e(\"myProgress old!!!\",String.valueOf(myProgress));\r\n                if (myProgress == currentDuration && myProgress != 0 && !isPause && audioFile.equalsIgnoreCase(\"\")) {\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                    myCount++;\r\n                    Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                    if (myCount == 5) {\r\n                        Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                        callComplete();\r\n                        Log.e(\"calll complete errr\", \"eee\");\r\n                        myCount = 0;\r\n                    }\r\n                } else if (myProgress == currentDuration && myProgress != 0 && !isPause && diff < 500) {\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                    myCount++;\r\n                    Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                    if (myCount == 20) {\r\n                        Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                        callComplete();\r\n                        Log.e(\"calll complete errr\", \"eee\");\r\n                        myCount = 0;\r\n                    }\r\n                }\r\n                if (currentDuration == totalDuration && currentDuration != 0 && !isStop && !audioFile.equalsIgnoreCase(\"\")) {\r\n                    callComplete();\r\n                    Log.e(\"calll complete trans\", \"trans\");\r\n\r\n                }\r\n                if (currentDuration == totalDuration && currentDuration != 0 && !isStop && audioFile.equalsIgnoreCase(\"\")) {\r\n                    mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                        callComplete();\r\n                    });\r\n                }\r\n                int progress = (int) (getProgressPercentage(currentDuration, totalDuration));\r\n                if (player == 1) {\r\n                    if (currentDuration == 0 && isCompleteStop) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    } else if (currentDuration == 0 && !isPause) {\r\n                        binding.progressBar.setVisibility(View.VISIBLE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.GONE);\r\n                    } else if (currentDuration >= 1 && !isPause) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.VISIBLE);\r\n                        binding.ivPlay.setVisibility(View.GONE);\r\n                    } else if (currentDuration >= 1 && isPause) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    }\r\n                } else {\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.ivPause.setVisibility(View.GONE);\r\n                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n                //Log.d(\"Progress\", \"\"+progress);\r\n                if (isPause) {\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n                } else {\r\n                    binding.simpleSeekbar.setProgress(progress);\r\n                }\r\n                // Running this thread after 100 milliseconds\r\n                handler12.postDelayed(this, 100);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    };\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_transparent_player, container, false);\r\n        View view = binding.getRoot();\r\n        activity = getActivity();\r\n        ctx = getActivity();\r\n        mainPlayModelList = new ArrayList<>();\r\n        addToQueueModelList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        handler12 = new Handler();\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        gson = new Gson();\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        params.setMargins(0, 0, 0, 130);\r\n        binding.llLayout.setLayoutParams(params);\r\n\r\n        if (comefromDownload.equalsIgnoreCase(\"1\")) {\r\n            LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            param.setMargins(0, 0, 0, 0);\r\n            binding.llLayout.setLayoutParams(param);\r\n        } else {\r\n            LinearLayout.LayoutParams paramm = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            paramm.setMargins(0, 0, 0, 130);\r\n            binding.llLayout.setLayoutParams(paramm);\r\n\r\n        }\r\n        if (isMediaStart) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete real\", \"real\");\r\n            });\r\n        }\r\n\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        SharedPreferences Status = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n    /*    mAudioManager = (AudioManager) ctx.getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        if (queuePlay) {\r\n            getPrepareShowData();\r\n        } else if (audioPlay) {\r\n            MakeArray();\r\n        }\r\n        if (listSize == 1) {\r\n            IsShuffle = \"\";\r\n        }\r\n\r\n\r\n        broadcastReceiver = new BroadcastReceiver() {\r\n            @Override\r\n            public void onReceive(Context context, Intent intent) {\r\n                String action = intent.getExtras().getString(\"actionname\");\r\n                switch (action) {\r\n                    case BWSApplication.ACTION_PREVIUOS:\r\n                        onTrackPrevious();\r\n                        break;\r\n                    case ACTION_PLAY:\r\n                        if (isPlaying) {\r\n                            onTrackPause();\r\n                        } else {\r\n                            onTrackPlay();\r\n                        }\r\n                        break;\r\n                    case BWSApplication.ACTION_NEXT:\r\n                        onTrackNext();\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n\r\n          /*if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            BWSApplication.createChannel(ctx);\r\n            ctx.registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n            ctx.startService(new Intent(ctx.getBaseContext(), OnClearFromRecentService.class));\r\n        }else {*/\r\n        BWSApplication.createChannel(ctx);\r\n        ctx.registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        ctx.startService(new Intent(activity.getBaseContext(), OnClearFromRecentService.class));\r\n//        }\r\n        binding.ivPause.setOnClickListener(view1 -> {\r\n            callPause();\r\n        });\r\n\r\n        binding.ivPlay.setOnClickListener(view12 -> {\r\n            callPlay();\r\n        });\r\n\r\n        return view;\r\n    }\r\n\r\n    private void callPlay() {\r\n        if (isPlaying) {\r\n            onTrackPause();\r\n        } else {\r\n            onTrackPlay();\r\n        }\r\n        if (!isMediaStart) {\r\n            isCompleteStop = false;\r\n            isprogressbar = true;\r\n            handler12.postDelayed(UpdateSongTime12, 500);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            callMedia();\r\n        } else if (isCompleteStop) {\r\n            isCompleteStop = false;\r\n            isprogressbar = true;\r\n            handler12.postDelayed(UpdateSongTime12, 500);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            callMedia();\r\n        } else {\r\n            resumeMedia();\r\n            binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n            isPause = false;\r\n        }\r\n        player = 1;\r\n        handler12.postDelayed(UpdateSongTime12, 100);\r\n    }\r\n\r\n    private void callPause() {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n        binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n        if (isPlaying) {\r\n            onTrackPause();\r\n        } else {\r\n            onTrackPlay();\r\n        }\r\n        if (!isMediaStart) {\r\n//                callAsyncTask();\r\n            callMedia();\r\n        } else {\r\n            pauseMedia();\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.VISIBLE);\r\n        }\r\n        oTime = binding.simpleSeekbar.getProgress();\r\n    }\r\n\r\n    private static void MakeArray() {\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n//            if (isDisclaimer == 0 && disclaimerPlayed == 0) {\r\n//                addDeclaimer();\r\n//            }\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPrevious() {\r\n        if (!audioFile.equalsIgnoreCase(\"\")) {\r\n            if (isPlaying) {\r\n                onTrackPause();\r\n            } else {\r\n                onTrackPlay();\r\n            }\r\n            isPlaying = false;\r\n            callPrev();\r\n            BWSApplication.createChannel(ctx);\r\n            ctx.registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n            ctx.startService(new Intent(activity.getBaseContext(), OnClearFromRecentService.class));\r\n        }\r\n\r\n\r\n//        position--;\r\n//        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n//                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n//        binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPlay() {\r\n//        if (isPlaying) {\r\n//            BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n//                    R.drawable.ic_play_arrow_black_24dp, position, mainPlayModelList.size() - 1);\r\n//            binding.ivPause.setImageResource(R.drawable.ic_play_icon);\r\n//            binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n//            isPlaying = false;\r\n//        } else {\r\n        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n//            binding.ivPlay.setImageResource(R.drawable.ic_all_pause_icon);\r\n        if (!isMediaStart) {\r\n            isCompleteStop = false;\r\n            isprogressbar = true;\r\n            handler12.postDelayed(UpdateSongTime12, 500);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            callMedia();\r\n        } else if (isCompleteStop) {\r\n            isCompleteStop = false;\r\n            isprogressbar = true;\r\n            handler12.postDelayed(UpdateSongTime12, 500);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            callMedia();\r\n        } else {\r\n            resumeMedia();\r\n            binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n            isPause = false;\r\n        }\r\n        player = 1;\r\n        handler12.postDelayed(UpdateSongTime12, 100);\r\n        binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n        isPlaying = true;\r\n//        }\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPause() {\r\n//        if (isPlaying) {\r\n        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n                R.drawable.ic_play_arrow_black_24dp, position, mainPlayModelList.size() - 1);\r\n//            binding.ivPause.setImageResource(R.drawable.ic_play_icon);\r\n        isPlaying = false;\r\n        if (!isMediaStart) {\r\n//                callAsyncTask();\r\n            callMedia();\r\n        } else {\r\n            pauseMedia();\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.VISIBLE);\r\n        }\r\n//        } else {\r\n//            BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n//                    R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n//            binding.ivPlay.setImageResource(R.drawable.ic_all_pause_icon);\r\n//            binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n//            isPlaying = true;\r\n//        }\r\n    }\r\n\r\n    @Override\r\n    public void onTrackNext() {\r\n        if (!audioFile.equalsIgnoreCase(\"\")) {\r\n            if (isPlaying) {\r\n                onTrackPause();\r\n            } else {\r\n                onTrackPlay();\r\n            }\r\n            isPlaying = false;\r\n            callNext();\r\n            try {\r\n            BWSApplication.createChannel(ctx);\r\n            ctx.registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n            ctx.startService(new Intent(activity.getBaseContext(), OnClearFromRecentService.class));\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n//        position++;\r\n//        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n//                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n//        binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n    }\r\n\r\n    private void callPrev() {\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isPause = false;\r\n        isCompleteStop = false;\r\n        if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            // repeat is on play same song again\r\n            if (position > 0) {\r\n                position = position - 1;\r\n                getPrepareShowData();\r\n            } else if (listSize != 1) {\r\n                position = listSize - 1;\r\n                getPrepareShowData();\r\n            }\r\n        }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            // shuffle is on - play a random song\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        stopMedia();\r\n                    } else {\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        getPrepareShowData();\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                Random random = new Random();\r\n                position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                getPrepareShowData();\r\n            }\r\n        } else {\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position > 0) {\r\n                        position = position - 1;\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData();\r\n                        }\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                if (position > 0) {\r\n                    position = position - 1;\r\n\r\n                    getPrepareShowData();\r\n                } else if (listSize != 1) {\r\n                    position = listSize - 1;\r\n                    getPrepareShowData();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callNext() {\r\n\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isPause = false;\r\n        isCompleteStop = false;\r\n        if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            // repeat is on play same song again\r\n            if (position < listSize - 1) {\r\n                position = position + 1;\r\n            } else {\r\n                position = 0;\r\n            }\r\n            getPrepareShowData();\r\n        }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            // shuffle is on - play a random song\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else {\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        getPrepareShowData();\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                Random random = new Random();\r\n                position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                getPrepareShowData();\r\n            }\r\n        } else {\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position < listSize - 1) {\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData();\r\n                        }\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                if (position < listSize - 1) {\r\n                    position = position + 1;\r\n                    getPrepareShowData();\r\n                } else if (listSize != 1) {\r\n                    position = 0;\r\n                    getPrepareShowData();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void addToRecentPlay() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n//            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n//                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n//                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public static void GetMedia(String url, Context ctx) {\r\n        try {\r\n            downloadAudioDetailsList = new ArrayList<>();\r\n            class GetMedia extends AsyncTask<Void, Void, Void> {\r\n                @Override\r\n                protected Void doInBackground(Void... voids) {\r\n                    downloadAudioDetailsList = DatabaseClient\r\n                            .getInstance(ctx)\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .getLastIdByuId(url);\r\n                    return null;\r\n                }\r\n\r\n                @Override\r\n                protected void onPostExecute(Void aVoid) {\r\n                    try {\r\n                        if (audioPlay) {\r\n                            if (listSize != 0) {\r\n                                binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                                binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                                try {\r\n                                    if (audioFile.equalsIgnoreCase(\"\")) {\r\n                                        Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                                    } else {\r\n                                        Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                                    }\r\n                                } catch (Exception e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (player == 1) {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n//                    binding.llProgress.setVisibility(View.GONE);\r\n                            if (isPause) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.VISIBLE);\r\n                                binding.simpleSeekbar.setProgress(oTime);\r\n                            } else if (isCompleteStop) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.VISIBLE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                            } else if (isMediaStart && !isPause) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                                binding.ivPause.setVisibility(View.VISIBLE);\r\n                                binding.ivPlay.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.progressBar.setVisibility(View.VISIBLE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.GONE);\r\n                                callMedia();\r\n                            }\r\n                        } else {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n\r\n//                    binding.llProgress.setVisibility(View.GONE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    super.onPostExecute(aVoid);\r\n\r\n                }\r\n            }\r\n\r\n            GetMedia st = new GetMedia();\r\n            st.execute();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static void getPrepareShowData() {\r\n        handler12.postDelayed(UpdateSongTime12, 100);\r\n        try {\r\n            if (queuePlay) {\r\n                listSize = addToQueueModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (position == listSize) {\r\n                    position = position - 1;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = addToQueueModelList.get(position).getID();\r\n                    myAudioId = id;\r\n                    name = addToQueueModelList.get(position).getName();\r\n                    audioFile = addToQueueModelList.get(position).getAudioFile();\r\n                    GetMedia(audioFile, ctx);\r\n                    Glide.with(ctx).load(addToQueueModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    binding.tvTitle.setText(addToQueueModelList.get(position).getName());\r\n                    binding.tvSubTitle.setText(addToQueueModelList.get(position).getAudioDirection());\r\n                    handler12.postDelayed(UpdateSongTime12, 100);\r\n                }\r\n            } else if (audioPlay) {\r\n                listSize = mainPlayModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = mainPlayModelList.get(position).getID();\r\n                    myAudioId = id;\r\n                    name = mainPlayModelList.get(position).getName();\r\n                    audioFile = mainPlayModelList.get(position).getAudioFile();\r\n                    binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                    binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                    if (audioFile.equalsIgnoreCase(\"\")) {\r\n                        Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    } else {\r\n                        Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    }\r\n                    GetMedia(audioFile, ctx);\r\n                    handler12.postDelayed(UpdateSongTime12, 100);\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        isDisclaimer = 1;\r\n                        binding.simpleSeekbar.setClickable(false);\r\n                        binding.simpleSeekbar.setEnabled(false);\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        binding.simpleSeekbar.setClickable(true);\r\n                        binding.simpleSeekbar.setEnabled(true);\r\n                    }\r\n                }\r\n            }\r\n            startTime = getStartTime();\r\n\r\n            if (!audioFile.equalsIgnoreCase(\"\")) {\r\n                if (!id.equalsIgnoreCase(addToRecentPlayId)) {\r\n                    addToRecentPlay();\r\n                    Log.e(\"Api call recent\", id);\r\n                }\r\n            }\r\n            addToRecentPlayId = id;\r\n            Log.e(\"addToRecentPlayID\", addToRecentPlayId);\r\n            Log.e(\"new addToRecentPlayID\", id);\r\n            binding.llPlayearMain.setOnClickListener(view -> {\r\n                handler12.removeCallbacks(UpdateSongTime12);\r\n                if (player == 0) {\r\n                    player = 1;\r\n                }\r\n                if (!isPause && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isPause = false;\r\n                    isprogressbar = false;\r\n                } else if (isPause && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isPause = true;\r\n                    isprogressbar = false;\r\n                } else if (isCompleteStop && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isprogressbar = false;\r\n                } else if (binding.progressBar.getVisibility() == View.VISIBLE && (binding.ivPause.getVisibility() == View.GONE && binding.ivPlay.getVisibility() == View.GONE)) {\r\n                    isprogressbar = true;\r\n                }\r\n                SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(mainPlayModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                String json1 = gson.toJson(addToQueueModelList);\r\n                if (queuePlay) {\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n                }\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                editor.commit();\r\n                handler12.removeCallbacks(UpdateSongTime12);\r\n                Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                ctx.startActivity(i);\r\n            });\r\n            BWSApplication.createChannel(ctx);\r\n            ctx.registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n            ctx.startService(new Intent(activity.getBaseContext(), OnClearFromRecentService.class));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if (download.equalsIgnoreCase(\"2\")) {\r\n            mediaPlayer = MediaPlayer.create(ctx, R.raw.brain_wellness_spa_declaimer);\r\n            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\r\n//            Uri uri = Uri.parse(\"android.resource://com.brainwellnessspa/\" + R.raw.brain_wellness_spa_declaimer);\r\n//            mediaPlayer.setDataSource(String.valueOf(uri));\r\n            mediaPlayer.start();\r\n            isPrepare = true;\r\n            isMediaStart = true;\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n        } else {\r\n            if (null == mediaPlayer) {\r\n                mediaPlayer = new MediaPlayer();\r\n                Log.e(\"Playinggggg\", \"Playinggggg\");\r\n            }\r\n            try {\r\n                if (mediaPlayer == null)\r\n                    mediaPlayer = new MediaPlayer();\r\n                if (mediaPlayer.isPlaying()) {\r\n                    Log.e(\"Playinggggg\", \"stoppppp\");\r\n                    mediaPlayer.stop();\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                }\r\n                isPreparing = true;\r\n                mediaPlayer = new MediaPlayer();\r\n                if (download.equalsIgnoreCase(\"1\")) {\r\n                    mediaPlayer.setDataSource(fileDescriptor);\r\n                } else {\r\n                    mediaPlayer.setDataSource(audioFile);\r\n                    Log.e(\"Playinggggxxxxx\", \"Startinggg1xxxxx\");\r\n                }\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                    mediaPlayer.setAudioAttributes(\r\n                            new AudioAttributes\r\n                                    .Builder()\r\n                                    .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                    .build());\r\n                    Log.e(\"Playinggggg11111111\", \"Startinggg111111111\");\r\n                }\r\n                mediaPlayer.prepareAsync();\r\n                isPrepare = true;\r\n            } catch (IllegalStateException | IOException e) {\r\n                FileDescriptor fileDescriptor1 = null;\r\n                setMediaPlayer(\"0\", fileDescriptor1);\r\n                e.printStackTrace();\r\n            }\r\n            if (!mediaPlayer.isPlaying()) {\r\n                mediaPlayer.setOnPreparedListener(mp -> {\r\n                    Log.e(\"Playinggggg\", \"Startinggg\");\r\n                    mediaPlayer.start();\r\n                    isMediaStart = true;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void callMedia() {\r\n        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n        binding.progressBar.setVisibility(View.VISIBLE);\r\n//        binding.llProgress.setVisibility(View.VISIBLE);\r\n        binding.ivPlay.setVisibility(View.GONE);\r\n        binding.ivPause.setVisibility(View.GONE);\r\n        FileDescriptor fileDescriptor = null;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n//        binding.llProgress.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            DownloadMedia downloadMedia = new DownloadMedia(ctx.getApplicationContext());\r\n            try {\r\n                byte[] decrypt = null;\r\n                decrypt = downloadMedia.decrypt(name);\r\n                if (decrypt != null) {\r\n                    fileDescriptor = FileUtils.getTempFileDescriptor(ctx.getApplicationContext(), decrypt);\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        setMediaPlayer(\"2\", fileDescriptor);\r\n                    } else {\r\n                        setMediaPlayer(\"1\", fileDescriptor);\r\n                    }\r\n                } else {\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        setMediaPlayer(\"2\", fileDescriptor);\r\n                    } else {\r\n                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                            setMediaPlayer(\"0\", fileDescriptor);\r\n//                mediaPlayer.setDataSource(audioFile);\r\n                        } else {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            BWSApplication.showToast(ctx.getString(R.string.no_server_found), ctx);\r\n                        }\r\n                    }\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                setMediaPlayer(\"2\", fileDescriptor);\r\n            } else {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    setMediaPlayer(\"0\", fileDescriptor);\r\n//                mediaPlayer.setDataSource(audioFile);\r\n                } else {\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    binding.ivPause.setVisibility(View.GONE);\r\n                    BWSApplication.showToast(ctx.getString(R.string.no_server_found), ctx);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getDownloadMedia(DownloadMedia downloadMedia) {\r\n        class getDownloadMedia extends AsyncTask<Void, Void, Void> {\r\n            FileDescriptor fileDescriptor = null;\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                try {\r\n                    byte[] decrypt = null;\r\n                    decrypt = downloadMedia.decrypt(name);\r\n                    if (decrypt != null) {\r\n                        fileDescriptor = FileUtils.getTempFileDescriptor(ctx, decrypt);\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (fileDescriptor != null) {\r\n                    setMediaPlayer(\"1\", fileDescriptor);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        setMediaPlayer(\"0\", fileDescriptor);\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getDownloadMedia st = new getDownloadMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private static void callComplete() {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        if (audioPlay && (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty())) {\r\n            isDisclaimer = 0;\r\n            removeArray();\r\n        } else {\r\n            if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                if (position < (listSize - 1)) {\r\n                    position = position + 1;\r\n                } else {\r\n                    position = 0;\r\n                }\r\n                getPrepareShowData();\r\n            } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData();\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    } catch (Exception e) {\r\n                    }\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        position = 0;\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData();\r\n                    }\r\n                } else {\r\n                    if (listSize == 1) {\r\n\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData();\r\n                    }\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    } catch (Exception e) {\r\n                    }\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position < listSize - 1) {\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData();\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (position < (listSize - 1)) {\r\n                        int oldPosition = position;\r\n                        position = position + 1;\r\n                        if (oldPosition == position) {\r\n                            position++;\r\n                        }\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        if (listSize == 1) {\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        BWSApplication.createChannel(ctx);\r\n        ctx.registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        ctx.startService(new Intent(activity.getBaseContext(), OnClearFromRecentService.class));\r\n    }\r\n\r\n    private static void removeArray() {\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        gson = new Gson();\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }\r\n        MakeArray();\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n    /*    handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler12.postDelayed(UpdateSongTime12, 100);\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n\r\n        int totalDuration = getEndTime();\r\n        int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n        // forward or backward to certain seconds\r\n        SeekTo(currentPosition);\r\n\r\n        oTime = binding.simpleSeekbar.getProgress();\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n\r\n        if (ComeScreenAccount == 1) {\r\n            binding.llLayout.setVisibility(View.GONE);\r\n        } else if (ComeScreenAccount == 0) {\r\n            binding.llLayout.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        handler12.postDelayed(UpdateSongTime12, 500);\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            mainPlayModelList = gson.fromJson(json, type);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        try {\r\n            if (queuePlay) {\r\n                position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                listSize = addToQueueModelList.size();\r\n                id = addToQueueModelList.get(position).getID();\r\n                myAudioId = id;\r\n                name = addToQueueModelList.get(position).getName();\r\n                audioFile = addToQueueModelList.get(position).getAudioFile();\r\n            } else if (audioPlay) {\r\n                position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                listSize = mainPlayModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = mainPlayModelList.get(position).getID();\r\n                    myAudioId = id;\r\n                    name = mainPlayModelList.get(position).getName();\r\n                    audioFile = mainPlayModelList.get(position).getAudioFile();\r\n       /*         if (audioFile.equalsIgnoreCase(\"\")) {\r\n                    Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                } else {\r\n                    Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                }\r\n                binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                    isDisclaimer = 1;\r\n                    binding.simpleSeekbar.setClickable(false);\r\n                    binding.flProgress.setClickable(false);\r\n                    binding.flProgress.setEnabled(false);\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    binding.simpleSeekbar.setClickable(true);\r\n                    binding.flProgress.setClickable(true);\r\n                    binding.flProgress.setEnabled(true);\r\n                }*/\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (listSize == 1) {\r\n            position = 0;\r\n        }\r\n        SharedPreferences Status = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n      /*  if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if (isMediaStart && !isPause) {\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n        } else {\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n        }*/\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n        Log.e(\"Stop runnble\", \"stop\");\r\n        super.onPause();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java	(revision 11f91b37eae078b52d35c77e70317459f7204718)
-+++ app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java	(date 1605242208301)
-@@ -88,14 +88,14 @@
- 
- public class TransparentPlayerFragment extends Fragment implements SeekBar.OnSeekBarChangeListener, Playable/*, AudioManager.OnAudioFocusChangeListener*/ {
-     public static int isDisclaimer = 0;
--    public static String addToRecentPlayId = "", myAudioId;
-+    public static String addToRecentPlayId = "", myAudioId = "";
-     public static ArrayList<MainPlayModel> mainPlayModelList;
-     public static FragmentTransparentPlayerBinding binding;
--    public static String  UserID, AudioFlag, IsRepeat, IsShuffle, audioFile, id, name;
-+    public static String UserID, AudioFlag, IsRepeat, IsShuffle, audioFile, id, name;
-     public static int position = 0, startTime, listSize, myCount;
-     public static MainPlayModel mainPlayModel;
-     public static boolean isPlaying = false;
--    public static Boolean queuePlay, audioPlay,playPause;
-+    public static Boolean queuePlay, audioPlay, playPause;
-     public static ArrayList<AddToQueueModel> addToQueueModelList;
-     public static List<DownloadAudioDetails> downloadAudioDetailsList;
-     public static Activity activity;
-@@ -793,9 +793,9 @@
-             isPlaying = false;
-             callNext();
-             try {
--            BWSApplication.createChannel(ctx);
--            ctx.registerReceiver(broadcastReceiver, new IntentFilter("TRACKS_TRACKS"));
--            ctx.startService(new Intent(activity.getBaseContext(), OnClearFromRecentService.class));
-+                BWSApplication.createChannel(ctx);
-+                ctx.registerReceiver(broadcastReceiver, new IntentFilter("TRACKS_TRACKS"));
-+                ctx.startService(new Intent(activity.getBaseContext(), OnClearFromRecentService.class));
-             } catch (Exception e) {
-                 e.printStackTrace();
-             }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_13-11-2020_11_20_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_13-11-2020_11_20_[Default_Changelist]/shelved.patch	(revision 7e371c210fcb71103e9ce5c0c7fbf93961ad8111)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_13-11-2020_11_20_[Default_Changelist]/shelved.patch	(revision 7e371c210fcb71103e9ce5c0c7fbf93961ad8111)
@@ -1,53 +0,0 @@
-Index: .idea/gradle.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleHome\" value=\"$USER_HOME$/.gradle/gradle-3.3-bin\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- .idea/gradle.xml	(revision e32d44f62862b83f42a8407bbe8d0a97ee1a2553)
-+++ .idea/gradle.xml	(date 1605242589848)
-@@ -16,6 +16,7 @@
-           </set>
-         </option>
-         <option name="resolveModulePerSourceSet" value="false" />
-+        <option name="useQualifiedModuleNames" value="true" />
-       </GradleProjectSettings>
-     </option>
-   </component>
-Index: app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments;\r\n\r\nimport android.app.Activity;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.SharedPreferences;\r\nimport android.media.AudioAttributes;\r\nimport android.media.AudioManager;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Services.OnClearFromRecentService;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.Playable;\r\nimport com.brainwellnessspa.databinding.FragmentTransparentPlayerBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.BWSApplication.ACTION_PLAY;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DownloadModule.Adapters.AudioDownlaodsAdapter.comefromDownload;\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPreparing;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isprogressbar;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class TransparentPlayerFragment extends Fragment implements SeekBar.OnSeekBarChangeListener, Playable/*, AudioManager.OnAudioFocusChangeListener*/ {\r\n    public static int isDisclaimer = 0;\r\n    public static String addToRecentPlayId = \"\", myAudioId = \"\";\r\n    public static ArrayList<MainPlayModel> mainPlayModelList;\r\n    public static FragmentTransparentPlayerBinding binding;\r\n    public static String  UserID, AudioFlag, IsRepeat, IsShuffle, audioFile, id, name;\r\n    public static int position = 0, startTime = 0, listSize = 0, myCount = 0;\r\n    public static MainPlayModel mainPlayModel;\r\n    public static boolean isPlaying = false;\r\n    public static Boolean queuePlay, audioPlay,playPause;\r\n    public static ArrayList<AddToQueueModel> addToQueueModelList;\r\n    public static List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    public static Activity activity;\r\n    public static Context ctx;\r\n    public static long myProgress = 0, diff = 0;\r\n    public static SharedPreferences shared;\r\n    public static String json;\r\n    public static Gson gson;\r\n    public static BroadcastReceiver broadcastReceiver;\r\n    public static long totalDuration = 0, currentDuration = 0;\r\n    public static Handler handler12;\r\n    public static Context context;\r\n    public static Runnable UpdateSongTime12 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                startTime = getStartTime();\r\n                binding.simpleSeekbar.setMax(100);\r\n                Time t = Time.valueOf(\"00:00:00\");\r\n                if (queuePlay) {\r\n                    if (listSize != 0) {\r\n                        if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        stopMedia();\r\n                    }\r\n                } else if (audioPlay) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                        }\r\n                    } else {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else\r\n                        totalDuration = t.getTime();\r\n                } else {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else {\r\n                        totalDuration = t.getTime();\r\n                    }\r\n                }\r\n                myProgress = currentDuration;\r\n                currentDuration = getStartTime();\r\n                diff = totalDuration - myProgress;\r\n\r\n//                Log.e(\"myProgress old!!!\",String.valueOf(myProgress));\r\n                if (myProgress == currentDuration && myProgress != 0 && !isPause && audioFile.equalsIgnoreCase(\"\")) {\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                    myCount++;\r\n                    Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                    if (myCount == 5) {\r\n                        Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                        callComplete();\r\n                        Log.e(\"calll complete errr\", \"eee\");\r\n                        myCount = 0;\r\n                    }\r\n                } else if (myProgress == currentDuration && myProgress != 0 && !isPause && diff < 500) {\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                    myCount++;\r\n                    Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                    if (myCount == 20) {\r\n                        Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                        callComplete();\r\n                        Log.e(\"calll complete errr\", \"eee\");\r\n                        myCount = 0;\r\n                    }\r\n                }\r\n                if (currentDuration == totalDuration && currentDuration != 0 && !isStop && !audioFile.equalsIgnoreCase(\"\")) {\r\n                    callComplete();\r\n                    Log.e(\"calll complete trans\", \"trans\");\r\n\r\n                }\r\n                if (currentDuration == totalDuration && currentDuration != 0 && !isStop && audioFile.equalsIgnoreCase(\"\")) {\r\n                    mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                        callComplete();\r\n                    });\r\n                }\r\n                int progress = (int) (getProgressPercentage(currentDuration, totalDuration));\r\n                if (player == 1) {\r\n                    if (currentDuration == 0 && isCompleteStop) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    } else if (currentDuration == 0 && !isPause) {\r\n                        binding.progressBar.setVisibility(View.VISIBLE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.GONE);\r\n                    } else if (currentDuration >= 1 && !isPause) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.VISIBLE);\r\n                        binding.ivPlay.setVisibility(View.GONE);\r\n                    } else if (currentDuration >= 1 && isPause) {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    }\r\n                } else {\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.ivPause.setVisibility(View.GONE);\r\n                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n                }\r\n\r\n                //Log.d(\"Progress\", \"\"+progress);\r\n                if (isPause) {\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n                } else {\r\n                    binding.simpleSeekbar.setProgress(progress);\r\n                }\r\n                // Running this thread after 100 milliseconds\r\n                handler12.postDelayed(this, 100);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    };\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_transparent_player, container, false);\r\n        View view = binding.getRoot();\r\n        activity = getActivity();\r\n        ctx = getActivity();\r\n        mainPlayModelList = new ArrayList<>();\r\n        addToQueueModelList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        handler12 = new Handler();\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        gson = new Gson();\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n        params.setMargins(0, 0, 0, 130);\r\n        binding.llLayout.setLayoutParams(params);\r\n\r\n        if (comefromDownload.equalsIgnoreCase(\"1\")) {\r\n            LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            param.setMargins(0, 0, 0, 0);\r\n            binding.llLayout.setLayoutParams(param);\r\n        } else {\r\n            LinearLayout.LayoutParams paramm = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            paramm.setMargins(0, 0, 0, 130);\r\n            binding.llLayout.setLayoutParams(paramm);\r\n\r\n        }\r\n        if (isMediaStart) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete real\", \"real\");\r\n            });\r\n        }\r\n\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        SharedPreferences Status = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n    /*    mAudioManager = (AudioManager) ctx.getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        if (queuePlay) {\r\n            getPrepareShowData();\r\n        } else if (audioPlay) {\r\n            MakeArray();\r\n        }\r\n        if (listSize == 1) {\r\n            IsShuffle = \"\";\r\n        }\r\n\r\n\r\n        broadcastReceiver = new BroadcastReceiver() {\r\n            @Override\r\n            public void onReceive(Context context, Intent intent) {\r\n                String action = intent.getExtras().getString(\"actionname\");\r\n                switch (action) {\r\n                    case BWSApplication.ACTION_PREVIUOS:\r\n                        onTrackPrevious();\r\n                        break;\r\n                    case ACTION_PLAY:\r\n                        if (isPlaying) {\r\n                            onTrackPause();\r\n                        } else {\r\n                            onTrackPlay();\r\n                        }\r\n                        break;\r\n                    case BWSApplication.ACTION_NEXT:\r\n                        onTrackNext();\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n\r\n          /*if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            BWSApplication.createChannel(ctx);\r\n            ctx.registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n            ctx.startService(new Intent(ctx.getBaseContext(), OnClearFromRecentService.class));\r\n        }else {*/\r\n        BWSApplication.createChannel(ctx);\r\n        ctx.registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        ctx.startService(new Intent(activity.getBaseContext(), OnClearFromRecentService.class));\r\n//        }\r\n        binding.ivPause.setOnClickListener(view1 -> {\r\n            callPause();\r\n        });\r\n\r\n        binding.ivPlay.setOnClickListener(view12 -> {\r\n            callPlay();\r\n        });\r\n\r\n        return view;\r\n    }\r\n\r\n    private void callPlay() {\r\n        if (isPlaying) {\r\n            onTrackPause();\r\n        } else {\r\n            onTrackPlay();\r\n        }\r\n        if (!isMediaStart) {\r\n            isCompleteStop = false;\r\n            isprogressbar = true;\r\n            handler12.postDelayed(UpdateSongTime12, 500);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            callMedia();\r\n        } else if (isCompleteStop) {\r\n            isCompleteStop = false;\r\n            isprogressbar = true;\r\n            handler12.postDelayed(UpdateSongTime12, 500);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            callMedia();\r\n        } else {\r\n            resumeMedia();\r\n            binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n            isPause = false;\r\n        }\r\n        player = 1;\r\n        handler12.postDelayed(UpdateSongTime12, 100);\r\n    }\r\n\r\n    private void callPause() {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n        binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n        if (isPlaying) {\r\n            onTrackPause();\r\n        } else {\r\n            onTrackPlay();\r\n        }\r\n        if (!isMediaStart) {\r\n//                callAsyncTask();\r\n            callMedia();\r\n        } else {\r\n            pauseMedia();\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.VISIBLE);\r\n        }\r\n        oTime = binding.simpleSeekbar.getProgress();\r\n    }\r\n\r\n    private static void MakeArray() {\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n//            if (isDisclaimer == 0 && disclaimerPlayed == 0) {\r\n//                addDeclaimer();\r\n//            }\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPrevious() {\r\n        if (!audioFile.equalsIgnoreCase(\"\")) {\r\n            if (isPlaying) {\r\n                onTrackPause();\r\n            } else {\r\n                onTrackPlay();\r\n            }\r\n            isPlaying = false;\r\n            callPrev();\r\n            BWSApplication.createChannel(ctx);\r\n            ctx.registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n            ctx.startService(new Intent(activity.getBaseContext(), OnClearFromRecentService.class));\r\n        }\r\n\r\n\r\n//        position--;\r\n//        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n//                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n//        binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPlay() {\r\n//        if (isPlaying) {\r\n//            BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n//                    R.drawable.ic_play_arrow_black_24dp, position, mainPlayModelList.size() - 1);\r\n//            binding.ivPause.setImageResource(R.drawable.ic_play_icon);\r\n//            binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n//            isPlaying = false;\r\n//        } else {\r\n        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n//            binding.ivPlay.setImageResource(R.drawable.ic_all_pause_icon);\r\n        if (!isMediaStart) {\r\n            isCompleteStop = false;\r\n            isprogressbar = true;\r\n            handler12.postDelayed(UpdateSongTime12, 500);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            callMedia();\r\n        } else if (isCompleteStop) {\r\n            isCompleteStop = false;\r\n            isprogressbar = true;\r\n            handler12.postDelayed(UpdateSongTime12, 500);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            callMedia();\r\n        } else {\r\n            resumeMedia();\r\n            binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n            isPause = false;\r\n        }\r\n        player = 1;\r\n        handler12.postDelayed(UpdateSongTime12, 100);\r\n        binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n        isPlaying = true;\r\n//        }\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPause() {\r\n//        if (isPlaying) {\r\n        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n                R.drawable.ic_play_arrow_black_24dp, position, mainPlayModelList.size() - 1);\r\n//            binding.ivPause.setImageResource(R.drawable.ic_play_icon);\r\n        isPlaying = false;\r\n        if (!isMediaStart) {\r\n//                callAsyncTask();\r\n            callMedia();\r\n        } else {\r\n            pauseMedia();\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            binding.ivPlay.setVisibility(View.VISIBLE);\r\n        }\r\n//        } else {\r\n//            BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n//                    R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n//            binding.ivPlay.setImageResource(R.drawable.ic_all_pause_icon);\r\n//            binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n//            isPlaying = true;\r\n//        }\r\n    }\r\n\r\n    @Override\r\n    public void onTrackNext() {\r\n        if (!audioFile.equalsIgnoreCase(\"\")) {\r\n            if (isPlaying) {\r\n                onTrackPause();\r\n            } else {\r\n                onTrackPlay();\r\n            }\r\n            isPlaying = false;\r\n            callNext();\r\n            try {\r\n            BWSApplication.createChannel(ctx);\r\n            ctx.registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n            ctx.startService(new Intent(activity.getBaseContext(), OnClearFromRecentService.class));\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n//        position++;\r\n//        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n//                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n//        binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n    }\r\n\r\n    private void callPrev() {\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isPause = false;\r\n        isCompleteStop = false;\r\n        if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            // repeat is on play same song again\r\n            if (position > 0) {\r\n                position = position - 1;\r\n                getPrepareShowData();\r\n            } else if (listSize != 1) {\r\n                position = listSize - 1;\r\n                getPrepareShowData();\r\n            }\r\n        }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            // shuffle is on - play a random song\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        stopMedia();\r\n                    } else {\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        getPrepareShowData();\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                Random random = new Random();\r\n                position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                getPrepareShowData();\r\n            }\r\n        } else {\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position > 0) {\r\n                        position = position - 1;\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData();\r\n                        }\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                if (position > 0) {\r\n                    position = position - 1;\r\n\r\n                    getPrepareShowData();\r\n                } else if (listSize != 1) {\r\n                    position = listSize - 1;\r\n                    getPrepareShowData();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callNext() {\r\n\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isPause = false;\r\n        isCompleteStop = false;\r\n        if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            // repeat is on play same song again\r\n            if (position < listSize - 1) {\r\n                position = position + 1;\r\n            } else {\r\n                position = 0;\r\n            }\r\n            getPrepareShowData();\r\n        }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            // shuffle is on - play a random song\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else {\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        getPrepareShowData();\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                Random random = new Random();\r\n                position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                getPrepareShowData();\r\n            }\r\n        } else {\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position < listSize - 1) {\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData();\r\n                        }\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                if (position < listSize - 1) {\r\n                    position = position + 1;\r\n                    getPrepareShowData();\r\n                } else if (listSize != 1) {\r\n                    position = 0;\r\n                    getPrepareShowData();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void addToRecentPlay() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n//            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n//                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n//                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public static void GetMedia(String url, Context ctx) {\r\n        try {\r\n            downloadAudioDetailsList = new ArrayList<>();\r\n            class GetMedia extends AsyncTask<Void, Void, Void> {\r\n                @Override\r\n                protected Void doInBackground(Void... voids) {\r\n                    downloadAudioDetailsList = DatabaseClient\r\n                            .getInstance(ctx)\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .getLastIdByuId(url);\r\n                    return null;\r\n                }\r\n\r\n                @Override\r\n                protected void onPostExecute(Void aVoid) {\r\n                    try {\r\n                        if (audioPlay) {\r\n                            if (listSize != 0) {\r\n                                binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                                binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                                try {\r\n                                    if (audioFile.equalsIgnoreCase(\"\")) {\r\n                                        Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                                    } else {\r\n                                        Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                                    }\r\n                                } catch (Exception e) {\r\n                                    e.printStackTrace();\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (player == 1) {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n//                    binding.llProgress.setVisibility(View.GONE);\r\n                            if (isPause) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.VISIBLE);\r\n                                binding.simpleSeekbar.setProgress(oTime);\r\n                            } else if (isCompleteStop) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.VISIBLE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                            } else if (isMediaStart && !isPause) {\r\n                                binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                                binding.ivPause.setVisibility(View.VISIBLE);\r\n                                binding.ivPlay.setVisibility(View.GONE);\r\n                            } else {\r\n                                binding.progressBar.setVisibility(View.VISIBLE);\r\n//                        binding.llProgress.setVisibility(View.VISIBLE);\r\n                                binding.ivPause.setVisibility(View.GONE);\r\n                                binding.ivPlay.setVisibility(View.GONE);\r\n                                callMedia();\r\n                            }\r\n                        } else {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n\r\n//                    binding.llProgress.setVisibility(View.GONE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    super.onPostExecute(aVoid);\r\n\r\n                }\r\n            }\r\n\r\n            GetMedia st = new GetMedia();\r\n            st.execute();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static void getPrepareShowData() {\r\n        handler12.postDelayed(UpdateSongTime12, 100);\r\n        try {\r\n            if (queuePlay) {\r\n                listSize = addToQueueModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (position == listSize) {\r\n                    position = position - 1;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = addToQueueModelList.get(position).getID();\r\n                    myAudioId = id;\r\n                    name = addToQueueModelList.get(position).getName();\r\n                    audioFile = addToQueueModelList.get(position).getAudioFile();\r\n                    GetMedia(audioFile, ctx);\r\n                    Glide.with(ctx).load(addToQueueModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    binding.tvTitle.setText(addToQueueModelList.get(position).getName());\r\n                    binding.tvSubTitle.setText(addToQueueModelList.get(position).getAudioDirection());\r\n                    handler12.postDelayed(UpdateSongTime12, 100);\r\n                }\r\n            } else if (audioPlay) {\r\n                listSize = mainPlayModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = mainPlayModelList.get(position).getID();\r\n                    myAudioId = id;\r\n                    name = mainPlayModelList.get(position).getName();\r\n                    audioFile = mainPlayModelList.get(position).getAudioFile();\r\n                    binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                    binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                    if (audioFile.equalsIgnoreCase(\"\")) {\r\n                        Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    } else {\r\n                        Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    }\r\n                    GetMedia(audioFile, ctx);\r\n                    handler12.postDelayed(UpdateSongTime12, 100);\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        isDisclaimer = 1;\r\n                        binding.simpleSeekbar.setClickable(false);\r\n                        binding.simpleSeekbar.setEnabled(false);\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        binding.simpleSeekbar.setClickable(true);\r\n                        binding.simpleSeekbar.setEnabled(true);\r\n                    }\r\n                }\r\n            }\r\n            startTime = getStartTime();\r\n\r\n            if (!audioFile.equalsIgnoreCase(\"\")) {\r\n                if (!id.equalsIgnoreCase(addToRecentPlayId)) {\r\n                    addToRecentPlay();\r\n                    Log.e(\"Api call recent\", id);\r\n                }\r\n            }\r\n            addToRecentPlayId = id;\r\n            Log.e(\"addToRecentPlayID\", addToRecentPlayId);\r\n            Log.e(\"new addToRecentPlayID\", id);\r\n            binding.llPlayearMain.setOnClickListener(view -> {\r\n                handler12.removeCallbacks(UpdateSongTime12);\r\n                if (player == 0) {\r\n                    player = 1;\r\n                }\r\n                if (!isPause && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isPause = false;\r\n                    isprogressbar = false;\r\n                } else if (isPause && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isPause = true;\r\n                    isprogressbar = false;\r\n                } else if (isCompleteStop && binding.progressBar.getVisibility() == View.GONE) {\r\n                    isprogressbar = false;\r\n                } else if (binding.progressBar.getVisibility() == View.VISIBLE && (binding.ivPause.getVisibility() == View.GONE && binding.ivPlay.getVisibility() == View.GONE)) {\r\n                    isprogressbar = true;\r\n                }\r\n                SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(mainPlayModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                String json1 = gson.toJson(addToQueueModelList);\r\n                if (queuePlay) {\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n                }\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                editor.commit();\r\n                handler12.removeCallbacks(UpdateSongTime12);\r\n                Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                ctx.startActivity(i);\r\n            });\r\n            BWSApplication.createChannel(ctx);\r\n            ctx.registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n            ctx.startService(new Intent(activity.getBaseContext(), OnClearFromRecentService.class));\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private static void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if (download.equalsIgnoreCase(\"2\")) {\r\n            mediaPlayer = MediaPlayer.create(ctx, R.raw.brain_wellness_spa_declaimer);\r\n            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\r\n//            Uri uri = Uri.parse(\"android.resource://com.brainwellnessspa/\" + R.raw.brain_wellness_spa_declaimer);\r\n//            mediaPlayer.setDataSource(String.valueOf(uri));\r\n            mediaPlayer.start();\r\n            isPrepare = true;\r\n            isMediaStart = true;\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n        } else {\r\n            if (null == mediaPlayer) {\r\n                mediaPlayer = new MediaPlayer();\r\n                Log.e(\"Playinggggg\", \"Playinggggg\");\r\n            }\r\n            try {\r\n                if (mediaPlayer == null)\r\n                    mediaPlayer = new MediaPlayer();\r\n                if (mediaPlayer.isPlaying()) {\r\n                    Log.e(\"Playinggggg\", \"stoppppp\");\r\n                    mediaPlayer.stop();\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                }\r\n                isPreparing = true;\r\n                mediaPlayer = new MediaPlayer();\r\n                if (download.equalsIgnoreCase(\"1\")) {\r\n                    mediaPlayer.setDataSource(fileDescriptor);\r\n                } else {\r\n                    mediaPlayer.setDataSource(audioFile);\r\n                    Log.e(\"Playinggggxxxxx\", \"Startinggg1xxxxx\");\r\n                }\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                    mediaPlayer.setAudioAttributes(\r\n                            new AudioAttributes\r\n                                    .Builder()\r\n                                    .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                    .build());\r\n                    Log.e(\"Playinggggg11111111\", \"Startinggg111111111\");\r\n                }\r\n                mediaPlayer.prepareAsync();\r\n                isPrepare = true;\r\n            } catch (IllegalStateException | IOException e) {\r\n                FileDescriptor fileDescriptor1 = null;\r\n                setMediaPlayer(\"0\", fileDescriptor1);\r\n                e.printStackTrace();\r\n            }\r\n            if (!mediaPlayer.isPlaying()) {\r\n                mediaPlayer.setOnPreparedListener(mp -> {\r\n                    Log.e(\"Playinggggg\", \"Startinggg\");\r\n                    mediaPlayer.start();\r\n                    isMediaStart = true;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void callMedia() {\r\n        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n        binding.progressBar.setVisibility(View.VISIBLE);\r\n//        binding.llProgress.setVisibility(View.VISIBLE);\r\n        binding.ivPlay.setVisibility(View.GONE);\r\n        binding.ivPause.setVisibility(View.GONE);\r\n        FileDescriptor fileDescriptor = null;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n//        binding.llProgress.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n            DownloadMedia downloadMedia = new DownloadMedia(ctx.getApplicationContext());\r\n            try {\r\n                byte[] decrypt = null;\r\n                decrypt = downloadMedia.decrypt(name);\r\n                if (decrypt != null) {\r\n                    fileDescriptor = FileUtils.getTempFileDescriptor(ctx.getApplicationContext(), decrypt);\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        setMediaPlayer(\"2\", fileDescriptor);\r\n                    } else {\r\n                        setMediaPlayer(\"1\", fileDescriptor);\r\n                    }\r\n                } else {\r\n                    if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                        setMediaPlayer(\"2\", fileDescriptor);\r\n                    } else {\r\n                        if (BWSApplication.isNetworkConnected(ctx)) {\r\n                            setMediaPlayer(\"0\", fileDescriptor);\r\n//                mediaPlayer.setDataSource(audioFile);\r\n                        } else {\r\n                            binding.progressBar.setVisibility(View.GONE);\r\n//                        binding.llProgress.setVisibility(View.GONE);\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            BWSApplication.showToast(ctx.getString(R.string.no_server_found), ctx);\r\n                        }\r\n                    }\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                setMediaPlayer(\"2\", fileDescriptor);\r\n            } else {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    setMediaPlayer(\"0\", fileDescriptor);\r\n//                mediaPlayer.setDataSource(audioFile);\r\n                } else {\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n//                binding.llProgress.setVisibility(View.GONE);\r\n                    binding.ivPlay.setVisibility(View.VISIBLE);\r\n                    binding.ivPause.setVisibility(View.GONE);\r\n                    BWSApplication.showToast(ctx.getString(R.string.no_server_found), ctx);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getDownloadMedia(DownloadMedia downloadMedia) {\r\n        class getDownloadMedia extends AsyncTask<Void, Void, Void> {\r\n            FileDescriptor fileDescriptor = null;\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                try {\r\n                    byte[] decrypt = null;\r\n                    decrypt = downloadMedia.decrypt(name);\r\n                    if (decrypt != null) {\r\n                        fileDescriptor = FileUtils.getTempFileDescriptor(ctx, decrypt);\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (fileDescriptor != null) {\r\n                    setMediaPlayer(\"1\", fileDescriptor);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        setMediaPlayer(\"0\", fileDescriptor);\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.ivPlay.setVisibility(View.VISIBLE);\r\n                        binding.ivPause.setVisibility(View.GONE);\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getDownloadMedia st = new getDownloadMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private static void callComplete() {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        if (audioPlay && (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty())) {\r\n            isDisclaimer = 0;\r\n            removeArray();\r\n        } else {\r\n            if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                if (position < (listSize - 1)) {\r\n                    position = position + 1;\r\n                } else {\r\n                    position = 0;\r\n                }\r\n                getPrepareShowData();\r\n            } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData();\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    } catch (Exception e) {\r\n                    }\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        position = 0;\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData();\r\n                    }\r\n                } else {\r\n                    if (listSize == 1) {\r\n\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData();\r\n                    }\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    } catch (Exception e) {\r\n                    }\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position < listSize - 1) {\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData();\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (position < (listSize - 1)) {\r\n                        int oldPosition = position;\r\n                        position = position + 1;\r\n                        if (oldPosition == position) {\r\n                            position++;\r\n                        }\r\n                        getPrepareShowData();\r\n                    } else {\r\n                        if (listSize == 1) {\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            binding.ivPlay.setVisibility(View.VISIBLE);\r\n                            binding.ivPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        BWSApplication.createChannel(ctx);\r\n        ctx.registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        ctx.startService(new Intent(activity.getBaseContext(), OnClearFromRecentService.class));\r\n    }\r\n\r\n    private static void removeArray() {\r\n        shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        gson = new Gson();\r\n        json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }\r\n        MakeArray();\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n    /*    handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler12.postDelayed(UpdateSongTime12, 100);\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n\r\n        int totalDuration = getEndTime();\r\n        int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n        // forward or backward to certain seconds\r\n        SeekTo(currentPosition);\r\n\r\n        oTime = binding.simpleSeekbar.getProgress();\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n\r\n        if (ComeScreenAccount == 1) {\r\n            binding.llLayout.setVisibility(View.GONE);\r\n        } else if (ComeScreenAccount == 0) {\r\n            binding.llLayout.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        handler12.postDelayed(UpdateSongTime12, 500);\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = new ArrayList<>();\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            mainPlayModelList = gson.fromJson(json, type);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        try {\r\n            if (queuePlay) {\r\n                position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                listSize = addToQueueModelList.size();\r\n                id = addToQueueModelList.get(position).getID();\r\n                myAudioId = id;\r\n                name = addToQueueModelList.get(position).getName();\r\n                audioFile = addToQueueModelList.get(position).getAudioFile();\r\n            } else if (audioPlay) {\r\n                position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                listSize = mainPlayModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = mainPlayModelList.get(position).getID();\r\n                    myAudioId = id;\r\n                    name = mainPlayModelList.get(position).getName();\r\n                    audioFile = mainPlayModelList.get(position).getAudioFile();\r\n       /*         if (audioFile.equalsIgnoreCase(\"\")) {\r\n                    Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                } else {\r\n                    Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                            .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                }\r\n                binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n                binding.tvSubTitle.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                if (audioFile.equalsIgnoreCase(\"\") || audioFile.isEmpty()) {\r\n                    isDisclaimer = 1;\r\n                    binding.simpleSeekbar.setClickable(false);\r\n                    binding.flProgress.setClickable(false);\r\n                    binding.flProgress.setEnabled(false);\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    binding.simpleSeekbar.setClickable(true);\r\n                    binding.flProgress.setClickable(true);\r\n                    binding.flProgress.setEnabled(true);\r\n                }*/\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (listSize == 1) {\r\n            position = 0;\r\n        }\r\n        SharedPreferences Status = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n      /*  if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if (isMediaStart && !isPause) {\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.VISIBLE);\r\n        } else {\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            binding.ivPlay.setVisibility(View.GONE);\r\n            binding.ivPause.setVisibility(View.GONE);\r\n        }*/\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        handler12.removeCallbacks(UpdateSongTime12);\r\n        Log.e(\"Stop runnble\", \"stop\");\r\n        super.onPause();\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java	(revision e32d44f62862b83f42a8407bbe8d0a97ee1a2553)
-+++ app/src/main/java/com/brainwellnessspa/DashboardModule/TransparentPlayer/Fragments/TransparentPlayerFragment.java	(date 1605242486166)
-@@ -91,11 +91,11 @@
-     public static String addToRecentPlayId = "", myAudioId = "";
-     public static ArrayList<MainPlayModel> mainPlayModelList;
-     public static FragmentTransparentPlayerBinding binding;
--    public static String  UserID, AudioFlag, IsRepeat, IsShuffle, audioFile, id, name;
-+    public static String UserID, AudioFlag, IsRepeat, IsShuffle, audioFile, id, name;
-     public static int position = 0, startTime = 0, listSize = 0, myCount = 0;
-     public static MainPlayModel mainPlayModel;
-     public static boolean isPlaying = false;
--    public static Boolean queuePlay, audioPlay,playPause;
-+    public static Boolean queuePlay, audioPlay, playPause;
-     public static ArrayList<AddToQueueModel> addToQueueModelList;
-     public static List<DownloadAudioDetails> downloadAudioDetailsList;
-     public static Activity activity;
-@@ -793,9 +793,9 @@
-             isPlaying = false;
-             callNext();
-             try {
--            BWSApplication.createChannel(ctx);
--            ctx.registerReceiver(broadcastReceiver, new IntentFilter("TRACKS_TRACKS"));
--            ctx.startService(new Intent(activity.getBaseContext(), OnClearFromRecentService.class));
-+                BWSApplication.createChannel(ctx);
-+                ctx.registerReceiver(broadcastReceiver, new IntentFilter("TRACKS_TRACKS"));
-+                ctx.startService(new Intent(activity.getBaseContext(), OnClearFromRecentService.class));
-             } catch (Exception e) {
-                 e.printStackTrace();
-             }
Index: .idea/shelf/Uncommitted_changes_before_Update_at_13-11-2020_11_20__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_13-11-2020_11_20__Default_Changelist_.xml	(revision 7e371c210fcb71103e9ce5c0c7fbf93961ad8111)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_13-11-2020_11_20__Default_Changelist_.xml	(revision 7e371c210fcb71103e9ce5c0c7fbf93961ad8111)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_13-11-2020_11_20_[Default_Changelist]" date="1605246619563" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_13-11-2020_11_20_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 13-11-2020 11:20 [Default Changelist]" />
-</changelist>
\ No newline at end of file
