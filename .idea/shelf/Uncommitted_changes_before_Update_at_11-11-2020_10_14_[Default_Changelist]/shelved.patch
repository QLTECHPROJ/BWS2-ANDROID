Index: app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikeAudiosFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.LikeModule.Fragments;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.FragmentLikesBinding;\r\nimport com.brainwellnessspa.databinding.LikeListLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.LikeModule.Activities.PlaylistLikeActivity.RefreshLikePlaylist;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class LikeAudiosFragment extends Fragment {\r\n    FragmentLikesBinding binding;\r\n    String UserID, AudioFlag;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_likes, container, false);\r\n        View view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getActivity());\r\n        binding.rvLikesList.setLayoutManager(mLayoutManager);\r\n        binding.rvLikesList.setItemAnimator(new DefaultItemAnimator());\r\n        prepareData();\r\n        binding.llError.setVisibility(View.GONE);\r\n        binding.tvFound.setText(\"No result found\");\r\n        return view;\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        prepareData();\r\n    }\r\n\r\n    public void prepareData() {\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n            RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            params.setMargins(13, 9, 13, 190);\r\n            binding.llSpace.setLayoutParams(params);\r\n        } else {\r\n            RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            params.setMargins(13, 9, 13, 28);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<LikesHistoryModel> listCall = APIClient.getClient().getLikeAudioPlaylistListing(UserID);\r\n            listCall.enqueue(new Callback<LikesHistoryModel>() {\r\n                @Override\r\n                public void onResponse(Call<LikesHistoryModel> call, Response<LikesHistoryModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        LikesHistoryModel listModel = response.body();\r\n                        List<LikesHistoryModel.ResponseData.Audio> listDataModel = listModel.getResponseData().getAudio();\r\n                        if (listDataModel.size() == 0) {\r\n                            binding.tvFound.setVisibility(View.VISIBLE);\r\n                            binding.llError.setVisibility(View.VISIBLE);\r\n                            binding.rvLikesList.setVisibility(View.GONE);\r\n                        } else {\r\n                            binding.llError.setVisibility(View.GONE);\r\n                            binding.rvLikesList.setVisibility(View.VISIBLE);\r\n                            LikeAudiosAdapter adapter = new LikeAudiosAdapter(listModel.getResponseData().getAudio(), getActivity());\r\n                            binding.rvLikesList.setAdapter(adapter);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<LikesHistoryModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    public class LikeAudiosAdapter extends RecyclerView.Adapter<LikeAudiosAdapter.MyViewHolder> {\r\n        private List<LikesHistoryModel.ResponseData.Audio> modelList;\r\n        Context ctx;\r\n\r\n        public LikeAudiosAdapter(List<LikesHistoryModel.ResponseData.Audio> modelList, Context ctx) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            LikeListLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.like_list_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(modelList.get(position).getName());\r\n            holder.binding.tvTime.setText(modelList.get(position).getAudioDuration());\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(modelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            holder.binding.llMenu.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                    if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                        i.putExtra(\"play\", \"TopCategories\");\r\n                    } else\r\n                        i.putExtra(\"play\", \"play\");\r\n                    i.putExtra(\"ID\", modelList.get(position).getID());\r\n                    i.putExtra(\"position\", position);\r\n                    i.putExtra(\"PlaylistAudioId\", \"\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n\r\n            holder.binding.llLikes.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall remove after the disclaimer\", ctx);\r\n                        } else {\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"LikeAudioList\") && modelList.size() == 1) {\r\n                                BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                            } else {\r\n                                callAlert(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"LikeAudioList\") && modelList.size() == 1) {\r\n                            BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                        } else {\r\n                            callAlert(position);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    LikesHistoryModel.ResponseData.Audio mainPlayModel = new LikesHistoryModel.ResponseData.Audio();\r\n                    mainPlayModel.setID(\"0\");\r\n                    mainPlayModel.setName(\"Disclaimer\");\r\n                    mainPlayModel.setAudioFile(\"\");\r\n                    mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                    mainPlayModel.setAudiomastercat(\"\");\r\n                    mainPlayModel.setAudioSubCategory(\"\");\r\n                    mainPlayModel.setImageFile(\"\");\r\n                    mainPlayModel.setLike(\"\");\r\n                    mainPlayModel.setDownload(\"\");\r\n                    mainPlayModel.setAudioDuration(\"0:48\");\r\n\r\n                    int pos = holder.getAdapterPosition();\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    Log.e(\"postion of paly\", String.valueOf(position));\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransFrag(pos, modelList);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        List<LikesHistoryModel.ResponseData.Audio> listModelList2 = new ArrayList<>();\r\n                        if (position != 0) {\r\n                            listModelList2.addAll(modelList);\r\n                            listModelList2.add(pos, mainPlayModel);\r\n                        } else {\r\n                            listModelList2.add(mainPlayModel);\r\n                            listModelList2.addAll(modelList);\r\n                        }\r\n                        callTransFrag(pos, listModelList2);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        private void callAlert(int position) {\r\n            final Dialog dialog = new Dialog(ctx);\r\n            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n            dialog.setContentView(R.layout.logout_layout);\r\n            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));\r\n            dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n            final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n            final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n            final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n            final Button Btn = dialog.findViewById(R.id.Btn);\r\n            tvTitle.setText(\"Remove from Liked Audios?\");\r\n            tvHeader.setText(modelList.get(position).getName());\r\n            Btn.setText(\"Remove\");\r\n            tvGoBack.setText(\"Cancel\");\r\n            dialog.setOnKeyListener((v1, keyCode, event) -> {\r\n                if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                    dialog.dismiss();\r\n                }\r\n                return false;\r\n            });\r\n\r\n            Btn.setOnClickListener(v4 -> {\r\n                callRemoveLike(modelList.get(position).getID(), position, modelList);\r\n                dialog.dismiss();\r\n            });\r\n            tvGoBack.setOnClickListener(v3 -> dialog.dismiss());\r\n            dialog.show();\r\n            dialog.setCancelable(false);\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return modelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            LikeListLayoutBinding binding;\r\n\r\n            public MyViewHolder(LikeListLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callTransFrag(int position, List<LikesHistoryModel.ResponseData.Audio> listModelList) {\r\n        try {\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n\r\n\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"LikeAudioList\");\r\n            editor.commit();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void saveToPref(int pos, List<LikesHistoryModel.ResponseData.Audio> listModelList2) {\r\n        SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shareddd.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(listModelList2);\r\n        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"LikeAudioList\");\r\n        editor.commit();\r\n        Fragment fragment = new TransparentPlayerFragment();\r\n        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n        fragmentManager1.beginTransaction()\r\n                .add(R.id.flContainer, fragment)\r\n                .commit();\r\n    }\r\n\r\n    private void callRemoveLike(String id, int position, List<LikesHistoryModel.ResponseData.Audio> listModelList2) {\r\n        try {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(id, UserID);\r\n                listCall.enqueue(new Callback<AudioLikeModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {\r\n                        try {\r\n                            if (response.isSuccessful()) {\r\n                                BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                                AudioLikeModel model = response.body();\r\n                                BWSApplication.showToast(model.getResponseMessage(), getActivity());\r\n                                listModelList2.remove(position);\r\n                                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                                if (audioPlay && AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n                                    if (pos == position && position < listModelList2.size() - 1) {\r\n//                                            pos = pos + 1;\r\n                                        if (isDisclaimer == 1) {\r\n//                                    BWSApplication.showToast(\"The audio shall remove after the disclaimer\", getActivity());\r\n                                        } else {\r\n                                            callTransFrag(position, listModelList2);\r\n                                        }\r\n                                    } else if (pos == position && position == listModelList2.size() - 1) {\r\n                                        pos = 0;\r\n                                        if (isDisclaimer == 1) {\r\n//                                    BWSApplication.showToast(\"The audio shall remove after the disclaimer\", getActivity());\r\n                                        } else {\r\n                                            callTransFrag(position, listModelList2);\r\n                                        }\r\n                                    } else if (pos < position && pos < listModelList2.size() - 1) {\r\n                                        saveToPref(pos, listModelList2);\r\n                                    } else if (pos > position && pos == listModelList2.size()) {\r\n                                        pos = pos - 1;\r\n                                        saveToPref(pos, listModelList2);\r\n                                    }\r\n                                }\r\n                                prepareData();\r\n                            }\r\n                        } catch (Exception e) {\r\n                            e.printStackTrace();\r\n                        }\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<AudioLikeModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                });\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikeAudiosFragment.java	(revision f0fec71fa0a936bd6b12bc71015a89e5cd6f0b07)
+++ app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikeAudiosFragment.java	(date 1605068818110)
@@ -75,7 +75,7 @@
         binding.rvLikesList.setItemAnimator(new DefaultItemAnimator());
         prepareData();
         binding.llError.setVisibility(View.GONE);
-        binding.tvFound.setText("No result found");
+        binding.tvFound.setText("Your like audios will appear here");
         return view;
     }
 
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.media.AudioAttributes;\r\nimport android.media.AudioManager;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.SystemClock;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Services.OnClearFromRecentService;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.Playable;\r\nimport com.brainwellnessspa.Utility.PlaybackStatus;\r\nimport com.brainwellnessspa.databinding.ActivityPlayWellnessBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Random;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity.comeFromAddToQueue;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.addToRecentPlayId;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.ToBackward;\r\nimport static com.brainwellnessspa.Utility.MusicService.ToForward;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isprogressbar;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class PlayWellnessActivity extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener, Playable/*, AudioManager.OnAudioFocusChangeListener, OnProgressListener*/ {\r\n    ActivityPlayWellnessBinding binding;\r\n    String IsRepeat = \"\", IsShuffle = \"\", UserID, PlaylistId = \"\", AudioFlag, id, name, url;\r\n    int startTime = 0, endTime = 0, position, listSize, myCount, progress, downloadPercentage;\r\n    Context ctx;\r\n    Activity activity;\r\n    Boolean queuePlay, audioPlay;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<AddToQueueModel> addToQueueModelList;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList1;\r\n    long myProgress = 0, diff = 0;\r\n    PlaybackStatus playbackStatus;\r\n    BroadcastReceiver broadcastReceiver;\r\n    boolean isPlaying = false;\r\n    private long mLastClickTime = 0, totalDuration, currentDuration = 0;\r\n    private Handler handler;\r\n    //    private Handler handler1;\r\n    //        private AudioManager mAudioManager;\r\n    private Runnable UpdateSongTime = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            Time t = Time.valueOf(\"00:00:00\");\r\n            String endtimetext = \"\";\r\n            if (queuePlay) {\r\n                if (listSize != 0) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (downloadAudioDetailsList.size() != 0) {\r\n                            endtimetext = downloadAudioDetailsList.get(0).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                } else {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    stopMedia();\r\n                }\r\n            } else if (audioPlay) {\r\n                if (listSize != 0) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (downloadAudioDetailsList.size() != 0) {\r\n                            endtimetext = downloadAudioDetailsList.get(0).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                            }\r\n                        } else {\r\n                            endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n                            if (mediaPlayer != null) {\r\n                                totalDuration = mediaPlayer.getDuration();\r\n                            } else {\r\n                                t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else\r\n                    totalDuration = t.getTime();\r\n            } else {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else\r\n                    totalDuration = t.getTime();\r\n            }\r\n            myProgress = currentDuration;\r\n            currentDuration = getStartTime();\r\n            diff = totalDuration - myProgress;\r\n//            Log.e(\"myProgress old!!!\", String.valueOf(myProgress));\r\n            if (myProgress == currentDuration && myProgress != 0 && !isPause && url.equalsIgnoreCase(\"\")) {\r\n//                    Log.e(\"myProgress\",String.valueOf(myProgress));\r\n                myCount++;\r\n                Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                if (myCount == 5) {\r\n                    Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                    callComplete();\r\n                    myCount = 0;\r\n                }\r\n            } else if (myProgress == currentDuration && myProgress != 0 && !isPause && diff < 500) {\r\n//                Log.e(\"myProgress\", String.valueOf(myProgress));\r\n                myCount++;\r\n                Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                if (myCount == 10) {\r\n                    Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                    callComplete();\r\n                    myCount = 0;\r\n                }\r\n            }\r\n            if (currentDuration == totalDuration && currentDuration != 0 && !isStop && !url.equalsIgnoreCase(\"\")) {\r\n                callComplete();\r\n            }\r\n            if (currentDuration == totalDuration && currentDuration != 0 && !isStop && isMediaStart && url.equalsIgnoreCase(\"\")) {\r\n                mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                    callComplete();\r\n                    Log.e(\"calll complete real\", \"real\");\r\n                });\r\n            }\r\n            progress = getProgressPercentage(currentDuration, totalDuration);\r\n            if (currentDuration == 0 && isCompleteStop) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n            } else if (currentDuration == 0 && isprogressbar) {\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n            } else if (currentDuration >= 1 && !isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                isprogressbar = false;\r\n            } else if (currentDuration >= 1 && isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                isprogressbar = false;\r\n            }\r\n            //Log.d(\"Progress\", \"\"+progress);\r\n            startTime = getStartTime();\r\n            if (currentDuration == totalDuration && currentDuration != 0 && !isStop) {\r\n                binding.tvStartTime.setText(endtimetext);\r\n            } else if (isPause) {\r\n                binding.simpleSeekbar.setProgress(oTime);\r\n                int timeeee = progressToTimer(oTime, (int) (totalDuration));\r\n                binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                        TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n            } else {\r\n                binding.simpleSeekbar.setProgress(progress);\r\n                binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(startTime),\r\n                        TimeUnit.MILLISECONDS.toSeconds(startTime) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(startTime))));\r\n            }\r\n            binding.simpleSeekbar.setMax(100);\r\n\r\n            // Running this thread after 100 milliseconds\r\n            handler.postDelayed(this, 100);\r\n        }\r\n    };\r\n/*    private Runnable UpdateSongTime1 = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n                if (downloadProgress <= 100) {\r\n                    binding.pbProgress.setProgress(downloadProgress);\r\n                    binding.pbProgress.setVisibility(View.VISIBLE);\r\n                    binding.ivDownloads.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.pbProgress.setVisibility(View.GONE);\r\n                    binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                    handler1.removeCallbacks(UpdateSongTime1);\r\n                }\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }\r\n            handler1.postDelayed(this, 500);\r\n        }\r\n    };*/\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n//        overridePendingTransition(R.anim.enter, R.anim.exit);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_play_wellness);\r\n        handler = new Handler();\r\n//        handler1 = new Handler();\r\n        ctx = PlayWellnessActivity.this;\r\n        activity = PlayWellnessActivity.this;\r\n        addToQueueModelList = new ArrayList<>();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        downloadAudioDetailsList1 = new ArrayList<>();\r\n        mainPlayModelList = new ArrayList<>();\r\n        MakeArray();\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences Status = getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                1, 1, 0.92f, 0);\r\n        binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n/*        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        callLLMoreViewQClicks();\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        getPrepareShowData(position);\r\n        /*if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }*/\r\n        callRepeatShuffle();\r\n\r\n        broadcastReceiver = new BroadcastReceiver() {\r\n            @Override\r\n            public void onReceive(Context context, Intent intent) {\r\n                String action = intent.getExtras().getString(\"actionname\");\r\n                switch (action) {\r\n                    case BWSApplication.ACTION_PREVIUOS:\r\n                        onTrackPrevious();\r\n                        if (isPlaying) {\r\n                            onTrackPause();\r\n                        } else {\r\n                            onTrackPlay();\r\n                        }\r\n                        break;\r\n                    case BWSApplication.ACTION_PLAY:\r\n                        if (isPlaying) {\r\n                            onTrackPause();\r\n                        } else {\r\n                            onTrackPlay();\r\n                        }\r\n                        break;\r\n                    case BWSApplication.ACTION_NEXT:\r\n                        onTrackNext();\r\n                        if (isPlaying) {\r\n                            onTrackPause();\r\n                        } else {\r\n                            onTrackPlay();\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n        BWSApplication.createChannel(ctx);\r\n        registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        startService(new Intent(getBaseContext(), OnClearFromRecentService.class));\r\n        if (isMediaStart /*&& !audioFile.equalsIgnoreCase(\"\")*/) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete real\", \"real\");\r\n            });\r\n        }\r\n        binding.llBack.setOnClickListener(view -> {\r\n            callBack();\r\n        });\r\n\r\n        binding.llLike.setOnClickListener(view -> {\r\n            callLike();\r\n        });\r\n\r\n        binding.llRepeat.setOnClickListener(view -> callRepeat());\r\n\r\n        binding.llShuffle.setOnClickListener(view -> callShuffle());\r\n\r\n        binding.llDownload.setOnClickListener(view -> {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                callDownload();\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        });\r\n\r\n        binding.llMore.setOnClickListener(view -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            Intent i = new Intent(ctx, AddQueueActivity.class);\r\n            if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                i.putExtra(\"play\", \"TopCategories\");\r\n            } else\r\n                i.putExtra(\"play\", \"play\");\r\n            i.putExtra(\"ID\", id);\r\n            i.putExtra(\"position\", position);\r\n            i.putExtra(\"PlaylistAudioId\", \"\");\r\n            startActivity(i);\r\n//            finish();\r\n        });\r\n\r\n        binding.llViewQueue.setOnClickListener(view -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n//            pauseMedia();\r\n            if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n                isPause = false;\r\n            }\r\n            SharedPreferences ViewQueue = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = ViewQueue.edit();\r\n            Gson gsonx = new Gson();\r\n            String jsonx = gsonx.toJson(addToQueueModelList);\r\n            if (queuePlay) {\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, jsonx);\r\n            }\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, ViewQueueActivity.class);\r\n            i.putExtra(\"ComeFromQueue\", \"0\");\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            startActivity(i);\r\n            finish();\r\n        });\r\n\r\n        binding.llPlay.setOnClickListener(v -> {\r\n            if (isPlaying) {\r\n                onTrackPause();\r\n            } else {\r\n                onTrackPlay();\r\n            }\r\n            if (!isMediaStart) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler.postDelayed(UpdateSongTime, 500);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                callMedia();\r\n            } else if (isCompleteStop) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler.postDelayed(UpdateSongTime, 500);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                callMedia();\r\n            } else {\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                resumeMedia();\r\n                isPause = false;\r\n            }\r\n            handler.postDelayed(UpdateSongTime, 100);\r\n        });\r\n\r\n        binding.llPause.setOnClickListener(view -> {\r\n            if (isPlaying) {\r\n                onTrackPause();\r\n            } else {\r\n                onTrackPlay();\r\n            }\r\n        });\r\n\r\n        binding.llForwardSec.setOnClickListener(v -> {\r\n            ToForward(ctx);\r\n            setProgressBar();\r\n            if (!binding.llPlay.isEnabled()) {\r\n                binding.llPlay.setEnabled(true);\r\n            }\r\n        });\r\n\r\n        binding.llBackWordSec.setOnClickListener(v -> {\r\n            ToBackward(ctx);\r\n            setProgressBar();\r\n            if (!binding.llPlay.isEnabled()) {\r\n                binding.llPlay.setEnabled(true);\r\n            }\r\n        });\r\n\r\n        binding.llnext.setOnClickListener(view -> {\r\n            callNext();\r\n        });\r\n\r\n        binding.llprev.setOnClickListener(view -> {\r\n            callPrevious();\r\n        });\r\n    }\r\n\r\n    private void callPrevious() {\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isPause = false;\r\n        isCompleteStop = false;\r\n        binding.pbProgress.setVisibility(View.GONE);\r\n        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n        if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            // repeat is on play same song again\r\n            if (position > 0) {\r\n                position = position - 1;\r\n                getPrepareShowData(position);\r\n            } else if (listSize != 1) {\r\n                position = listSize - 1;\r\n                getPrepareShowData(position);\r\n            }\r\n        }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            // shuffle is on - play a random song\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        stopMedia();\r\n                    } else {\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                Random random = new Random();\r\n                position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                getPrepareShowData(position);\r\n            }\r\n        } else {\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position > 0) {\r\n                        getPrepareShowData(position - 1);\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                if (position > 0) {\r\n                    position = position - 1;\r\n\r\n                    getPrepareShowData(position);\r\n                } else if (listSize != 1) {\r\n                    position = listSize - 1;\r\n                    getPrepareShowData(position);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callNext() {\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isPause = false;\r\n        isCompleteStop = false;\r\n        binding.pbProgress.setVisibility(View.GONE);\r\n        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n        if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            // repeat is on play same song again\r\n            if (position < listSize - 1) {\r\n                position = position + 1;\r\n            } else {\r\n                position = 0;\r\n            }\r\n            getPrepareShowData(position);\r\n        }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            }*/ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            // shuffle is on - play a random song\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else {\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                Random random = new Random();\r\n                position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                getPrepareShowData(position);\r\n            }\r\n        } else {\r\n            if (queuePlay) {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    addToQueueModelList.remove(position);\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position < listSize - 1) {\r\n                        getPrepareShowData(position);\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            } else {\r\n                if (position < listSize - 1) {\r\n                    position = position + 1;\r\n                    getPrepareShowData(position);\r\n                } else if (listSize != 1) {\r\n                    position = 0;\r\n                    getPrepareShowData(position);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callRepeatShuffle() {\r\n        if (url.equalsIgnoreCase(\"\")) {\r\n            binding.llShuffle.setClickable(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setClickable(false);\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n                if (listSize == 1) {\r\n                    binding.llShuffle.setClickable(false);\r\n                    binding.llShuffle.setEnabled(false);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    binding.llShuffle.setClickable(true);\r\n                    binding.llShuffle.setEnabled(true);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                if (listSize == 1) {\r\n                    binding.llShuffle.setClickable(false);\r\n                    binding.llShuffle.setEnabled(false);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    binding.llShuffle.setClickable(true);\r\n                    binding.llShuffle.setEnabled(true);\r\n                    binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            }\r\n            if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n                if (queuePlay) {\r\n                    binding.llRepeat.setEnabled(false);\r\n                    binding.llRepeat.setClickable(false);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    binding.llRepeat.setClickable(true);\r\n                    binding.llRepeat.setEnabled(true);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                if (queuePlay) {\r\n                    binding.llRepeat.setEnabled(false);\r\n                    binding.llRepeat.setClickable(false);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    IsRepeat = \"0\";\r\n                    binding.llRepeat.setClickable(true);\r\n                    binding.llRepeat.setEnabled(true);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                }\r\n            } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                if (queuePlay) {\r\n                    binding.llRepeat.setEnabled(false);\r\n                    binding.llRepeat.setClickable(false);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    if (listSize == 1) {\r\n                        binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                    } else {\r\n                        binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                    }\r\n                    binding.llRepeat.setClickable(true);\r\n                    binding.llRepeat.setEnabled(true);\r\n                    binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void setProgressBar() {\r\n        Time t = Time.valueOf(\"00:00:00\");\r\n        String endtimetext = \"\";\r\n        if (queuePlay) {\r\n            if (listSize != 0) {\r\n                endtimetext = addToQueueModelList.get(position).getAudioDuration();\r\n                t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n            } else {\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                stopMedia();\r\n            }\r\n        } else if (audioPlay) {\r\n            endtimetext = mainPlayModelList.get(position).getAudioDuration();\r\n            t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n        }\r\n        totalDuration = t.getTime();\r\n        currentDuration = getStartTime();\r\n\r\n        int progress = getProgressPercentage(currentDuration, totalDuration);\r\n        //Log.d(\"Progress\", \"\"+progress);\r\n        startTime = getStartTime();\r\n        if (currentDuration == totalDuration) {\r\n            binding.tvStartTime.setText(endtimetext);\r\n        } else if (isPause) {\r\n            binding.simpleSeekbar.setProgress(progress);\r\n            int timeeee = progressToTimer(progress, (int) (totalDuration));\r\n            binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                    TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        } else {\r\n            binding.simpleSeekbar.setProgress(progress);\r\n            binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(startTime),\r\n                    TimeUnit.MILLISECONDS.toSeconds(startTime) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(startTime))));\r\n        }\r\n    }\r\n\r\n    private void callDownload() {\r\n        if (!url.equalsIgnoreCase(\"\")) {\r\n            disableDownload();\r\n            byte[] EncodeBytes = new byte[1024];\r\n            List<String> url1 = new ArrayList<>();\r\n            List<String> name1 = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url1.addAll(audioFile1);\r\n                    name1.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            url1.add(url);\r\n            name1.add(name);\r\n            downloadPlaylistId.add(\"\");\r\n            if (url1.size() != 0) {\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url1);\r\n                String nameJson = gson.toJson(name1);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n            }\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n            downloadMedia.encrypt1(url1, name1, downloadPlaylistId);\r\n\r\n          /*  if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n                handler1.postDelayed(UpdateSongTime1, 500);\r\n            } else {\r\n                binding.pbProgress.setVisibility(View.GONE);\r\n                handler1.removeCallbacks(UpdateSongTime1);\r\n            }*/\r\n            binding.pbProgress.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setVisibility(View.GONE);\r\n            SaveMedia(EncodeBytes, FileUtils.getFilePath(getApplicationContext(), name));\r\n   /*     if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<DownloadPlaylistModel> listCall = APIClient.getClient().getDownloadlistPlaylist(UserID, id, PlaylistId);\r\n            listCall.enqueue(new Callback<DownloadPlaylistModel>() {\r\n                @Override\r\n                public void onResponse(Call<DownloadPlaylistModel> call, Response<DownloadPlaylistModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        DownloadPlaylistModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")\r\n                                || model.getResponseData().getFlag().equalsIgnoreCase(\"\")) {\r\n                            binding.llDownloads.setClickable(true);\r\n                            binding.llDownloads.setEnabled(true);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                            binding.llDownloads.setClickable(false);\r\n                            binding.llDownloads.setEnabled(false);\r\n                        }\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<DownloadPlaylistModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }*/\r\n        }\r\n    }\r\n\r\n    private void getMediaByPer() {\r\n        class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPercentage = DatabaseClient.getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getDownloadProgress(url, \"\");\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n\r\n                if (downloadAudioDetailsList1.size() != 0) {\r\n                    if (downloadPercentage <= 100) {\r\n                        if (downloadPercentage == 100) {\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        } else {\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            binding.pbProgress.setIndeterminate(false);\r\n                            binding.pbProgress.setProgress(downloadPercentage);\r\n                            getMediaByPer();\r\n//                             handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        getMediaByPer st = new getMediaByPer();\r\n        st.execute();\r\n    }\r\n\r\n    private void SaveMedia(byte[] EncodeBytes, String dirPath) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                if (queuePlay) {\r\n                    downloadAudioDetails.setID(addToQueueModelList.get(position).getID());\r\n                    downloadAudioDetails.setName(addToQueueModelList.get(position).getName());\r\n                    downloadAudioDetails.setAudioFile(addToQueueModelList.get(position).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(addToQueueModelList.get(position).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(addToQueueModelList.get(position).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(addToQueueModelList.get(position).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(addToQueueModelList.get(position).getImageFile());\r\n                    downloadAudioDetails.setLike(addToQueueModelList.get(position).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(addToQueueModelList.get(position).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                } else if (audioPlay) {\r\n                    downloadAudioDetails.setID(mainPlayModelList.get(position).getID());\r\n                    downloadAudioDetails.setName(mainPlayModelList.get(position).getName());\r\n                    downloadAudioDetails.setAudioFile(mainPlayModelList.get(position).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(mainPlayModelList.get(position).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(mainPlayModelList.get(position).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(mainPlayModelList.get(position).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(mainPlayModelList.get(position).getImageFile());\r\n                    downloadAudioDetails.setLike(mainPlayModelList.get(position).getLike());\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(mainPlayModelList.get(position).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"1\");\r\n                    downloadAudioDetails.setPlaylistId(\"\");\r\n                    downloadAudioDetails.setIsDownload(\"pending\");\r\n                    downloadAudioDetails.setDownloadProgress(0);\r\n                }\r\n                DatabaseClient.getInstance(getApplicationContext())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                disableDownload();\r\n                GetMedia2();\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void disableDownload() {\r\n        binding.ivDownloads.setImageResource(R.drawable.ic_download_white_icon);\r\n        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        binding.llDownload.setClickable(false);\r\n        binding.llDownload.setEnabled(false);\r\n    }\r\n\r\n    private void callShuffle() {\r\n        if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n            if (listSize == 1) {\r\n                binding.llShuffle.setClickable(false);\r\n                binding.llShuffle.setEnabled(false);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                IsShuffle = \"1\";\r\n                SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"1\");\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                editor.commit();\r\n                IsRepeat = \"\";\r\n                if (queuePlay) {\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                } else\r\n                    binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n//                BWSApplication.showToast(\"Shuffle mode has been turned on\", ctx);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n//            BWSApplication.showToast(\"Shuffle mode has been turned off\", ctx);\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n    }\r\n\r\n    private void callRepeat() {\r\n\r\n        if (IsRepeat.equalsIgnoreCase(\"\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"0\");\r\n            if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            }\r\n            editor.commit();\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            IsRepeat = \"0\";\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_one));\r\n//            BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"1\");\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            IsRepeat = \"1\";\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n                IsRepeat = \"\";\r\n//                BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n//                BWSApplication.showToast(\"Repeat mode has been turned on\", ctx);\r\n                binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            editor.commit();\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n        } else if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_Status, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n            IsRepeat = \"\";\r\n            IsShuffle = \"\";\r\n            if (listSize == 1) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            editor.commit();\r\n            binding.ivRepeat.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivRepeat.setImageDrawable(getResources().getDrawable(R.drawable.ic_repeat_music_icon));\r\n//            BWSApplication.showToast(\"Repeat mode has been turned off\", ctx);\r\n        }\r\n    }\r\n\r\n    private void callLike() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<AudioLikeModel> listCall = APIClient.getClient().getAudioLike(id, UserID);\r\n            listCall.enqueue(new Callback<AudioLikeModel>() {\r\n                @Override\r\n                public void onResponse(Call<AudioLikeModel> call, Response<AudioLikeModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        AudioLikeModel model = response.body();\r\n                        if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                        } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                        }\r\n                        SharedPreferences sharedxx = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        boolean audioPlay = sharedxx.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        int pos = sharedxx.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        AudioFlag = sharedxx.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        /*if (audioPlay && AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n                            if (model.getResponseData().getFlag().equalsIgnoreCase(\"0\")) {\r\n                                SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                 AudioFlag = sharedx.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                Gson gsonx = new Gson();\r\n                                String json = sharedx.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                                Type type1 = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n                                }.getType();\r\n                                Gson gson1 = new Gson();\r\n                                ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson1.fromJson(json, type1);\r\n\r\n                                mainPlayModelList.add(mainPlayModelList.get(position));\r\n\r\n                                SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                SharedPreferences.Editor editor = sharedd.edit();\r\n                                Gson gson = new Gson();\r\n                                String jsonx = gson.toJson(mainPlayModelList);\r\n                                String json1 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"LikeAudioList\");\r\n                                editor.commit();\r\n\r\n                            } else if (model.getResponseData().getFlag().equalsIgnoreCase(\"1\")) {\r\n                                SharedPreferences sharedx = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                                AudioFlag = sharedx.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                                Gson gsonx = new Gson();\r\n                                String json = sharedx.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n                                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                                }.getType();\r\n                                ArrayList<MainPlayModel> mainPlayModelListold = new ArrayList<>();\r\n                                mainPlayModelListold = gsonx.fromJson(json, type);\r\n                                String id = mainPlayModelListold.get(pos).getID();\r\n                                Type type1 = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n                                }.getType();\r\n                                Gson gson1 = new Gson();\r\n                                ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson1.fromJson(json, type1);\r\n                                int x = 0;\r\n                                for (int i = 0; i < mainPlayModelList.size(); i++) {\r\n                                    if (mainPlayModelList.get(i).getID().equalsIgnoreCase(id)) {\r\n                                        x++;\r\n                                    }if(x== 0) {\r\n                                        if (audioPlay) {\r\n                                            LikesHistoryModel.ResponseData.Audio mainPlayModel = new LikesHistoryModel.ResponseData.Audio();\r\n                                            mainPlayModel.setID(mainPlayModelList.get(position).getID());\r\n                                            mainPlayModel.setName(mainPlayModelList.get(position).getName());\r\n                                            mainPlayModel.setAudioFile(mainPlayModelList.get(position).getAudioFile());\r\n                                            mainPlayModel.setAudioDirection(mainPlayModelList.get(position).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(mainPlayModelList.get(position).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(mainPlayModelList.get(position).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(mainPlayModelList.get(position).getImageFile());\r\n                                            mainPlayModel.setLike(mainPlayModelList.get(position).getLike());\r\n                                            mainPlayModel.setDownload(mainPlayModelList.get(position).getDownload());\r\n                                            mainPlayModel.setAudioDuration(mainPlayModelList.get(position).getAudioDuration());\r\n                                            arrayList.add(mainPlayModel);\r\n                                        } else if (queuePlay) {\r\n                                            LikesHistoryModel.ResponseData.Audio mainPlayModel = new LikesHistoryModel.ResponseData.Audio();\r\n                                            mainPlayModel.setID(addToQueueModelList.get(position).getID());\r\n                                            mainPlayModel.setName(addToQueueModelList.get(position).getName());\r\n                                            mainPlayModel.setAudioFile(addToQueueModelList.get(position).getAudioFile());\r\n                                            mainPlayModel.setAudioDirection(addToQueueModelList.get(position).getAudioDirection());\r\n                                            mainPlayModel.setAudiomastercat(addToQueueModelList.get(position).getAudiomastercat());\r\n                                            mainPlayModel.setAudioSubCategory(addToQueueModelList.get(position).getAudioSubCategory());\r\n                                            mainPlayModel.setImageFile(addToQueueModelList.get(position).getImageFile());\r\n                                            mainPlayModel.setLike(addToQueueModelList.get(position).getLike());\r\n                                            mainPlayModel.setDownload(addToQueueModelList.get(position).getDownload());\r\n                                            mainPlayModel.setAudioDuration(addToQueueModelList.get(position).getAudioDuration());\r\n                                            arrayList.add(mainPlayModel);\r\n                                        }\r\n                                        mainPlayModelList.add(mainPlayModelList.get(position));\r\n                                    }\r\n                                }\r\n                                SharedPreferences sharedd = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                                SharedPreferences.Editor editor = sharedd.edit();\r\n                                Gson gson = new Gson();\r\n                                String jsonx = gson.toJson(mainPlayModelList);\r\n                                String json1 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n                                editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n                                editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"LikeAudioList\");\r\n                                editor.commit();\r\n                            }\r\n                        }*/\r\n                        SharedPreferences sharedq = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        AudioFlag = sharedq.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        Gson gsonq = new Gson();\r\n                        String jsonq = sharedq.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gsonq));\r\n                        mainPlayModelList = new ArrayList<>();\r\n                        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(mainPlayModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_audioList, json);\r\n                        if (audioPlay) {\r\n                            if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n                                Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n                                }.getType();\r\n                                ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n                                Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n                                }.getType();\r\n                                ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n                                Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n                                }.getType();\r\n                                ArrayList<SearchBothModel.ResponseData> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n                                Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n                                }.getType();\r\n                                ArrayList<SuggestedModel.ResponseData> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                                Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n                                }.getType();\r\n                                ArrayList<AppointmentDetailModel.Audio> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n                                Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n                                }.getType();\r\n                                ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n                                Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n                                }.getType();\r\n                                ArrayList<DownloadAudioDetails> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n                                Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n                                }.getType();\r\n                                ArrayList<DownloadAudioDetails> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n                                Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n                                }.getType();\r\n                                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                                Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n                                }.getType();\r\n                                ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gsonq.fromJson(jsonq, type);\r\n                                arrayList.get(position).setLike(model.getResponseData().getFlag());\r\n                                String json2 = gson.toJson(arrayList);\r\n                                editor.putString(CONSTANTS.PREF_KEY_modelList, json2);\r\n                            }\r\n                        }\r\n                        if (queuePlay) {\r\n                            addToQueueModelList.get(position).setLike(model.getResponseData().getFlag());\r\n                        } else\r\n                            mainPlayModelList.get(position).setLike(model.getResponseData().getFlag());\r\n\r\n                        String json1 = gson.toJson(addToQueueModelList);\r\n                        if (queuePlay) {\r\n                            editor.putString(CONSTANTS.PREF_KEY_queueList, json1);\r\n                        }\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                        editor.commit();\r\n                        BWSApplication.showToast(model.getResponseMessage(), ctx);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<AudioLikeModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void addToRecentPlay() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    public void GetMedia() {\r\n\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(url);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (isPause) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n                    int timeeee = progressToTimer(oTime, (int) (totalDuration));\r\n                    binding.tvStartTime.setText(String.format(\"%02d:%02d\", TimeUnit.MILLISECONDS.toMinutes(timeeee),\r\n                            TimeUnit.MILLISECONDS.toSeconds(timeeee) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(timeeee))));\r\n//                    resumeMedia();\r\n                } else if (isCompleteStop) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                } else if (isMediaStart && !isPause) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                    binding.progressBar.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    callMedia();\r\n                }\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public void GetMedia2() {\r\n\r\n        downloadAudioDetailsList1 = new ArrayList<>();\r\n\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList1 = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getaudioByPlaylist(url, \"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (!url.equalsIgnoreCase(\"\")) {\r\n                    if (downloadAudioDetailsList1.size() != 0) {\r\n                        if (downloadAudioDetailsList1.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                            binding.llDownload.setClickable(false);\r\n                            binding.llDownload.setEnabled(false);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                        } else/* if (!mainPlayModelList.get(position).getDownload().equalsIgnoreCase(\"\")) */ {\r\n                            binding.llDownload.setClickable(true);\r\n                            binding.llDownload.setEnabled(true);\r\n                            binding.ivDownloads.setColorFilter(getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n                            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                        }\r\n                    } else/* if (!mainPlayModelList.get(position).getDownload().equalsIgnoreCase(\"\")) */ {\r\n                        binding.llDownload.setClickable(true);\r\n                        binding.llDownload.setEnabled(true);\r\n                        binding.ivDownloads.setColorFilter(getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n                        binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                    }\r\n                }\r\n\r\n                getMediaByPer();\r\n\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void getPrepareShowData(int position) {\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        if (queuePlay) {\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setClickable(false);\r\n        }\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n        } else if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n        }\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.llShuffle.setClickable(false);\r\n            IsShuffle = \"\";\r\n            binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }*/ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llShuffle.setEnabled(true);\r\n            binding.llnext.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.llShuffle.setClickable(true);\r\n            if (IsShuffle.equalsIgnoreCase(\"\")) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                binding.ivShuffle.setColorFilter(ContextCompat.getColor(ctx, R.color.dark_yellow), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n        if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n            if (listSize == 1) {\r\n                position = 0;\r\n            }\r\n            if (listSize != 0) {\r\n                id = addToQueueModelList.get(position).getID();\r\n                name = addToQueueModelList.get(position).getName();\r\n                url = addToQueueModelList.get(position).getAudioFile();\r\n                binding.tvName.setText(addToQueueModelList.get(position).getName());\r\n                binding.tvDireName.setText(R.string.Directions);\r\n                binding.tvDireName.setText(R.string.Directions);\r\n                if (addToQueueModelList.get(position).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                    binding.llDirection.setVisibility(View.GONE);\r\n                } else {\r\n                    binding.llDirection.setVisibility(View.VISIBLE);\r\n                    binding.tvDireDesc.setText(addToQueueModelList.get(position).getAudioDirection());\r\n                }\r\n                binding.tvTitle.setText(addToQueueModelList.get(position).getAudiomastercat());\r\n                binding.tvDesc.setText(addToQueueModelList.get(position).getAudioSubCategory());\r\n                if (addToQueueModelList.get(position).getPlaylistID() == null) {\r\n                    addToQueueModelList.get(position).setPlaylistID(\"\");\r\n                }\r\n                Glide.with(getApplicationContext()).load(addToQueueModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                } else if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                }\r\n                binding.tvSongTime.setText(addToQueueModelList.get(position).getAudioDuration());\r\n                GetMedia();\r\n                GetMedia2();\r\n            }\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            startTime = getStartTime();\r\n\r\n        } else if (audioPlay) {\r\n            try {\r\n                listSize = mainPlayModelList.size();\r\n                if (listSize == 1) {\r\n                    position = 0;\r\n                }\r\n                if (listSize != 0) {\r\n                    id = mainPlayModelList.get(position).getID();\r\n                    name = mainPlayModelList.get(position).getName();\r\n                    url = mainPlayModelList.get(position).getAudioFile();\r\n                    if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n                        isDisclaimer = 1;\r\n                        callAllDisable(false);\r\n                        binding.tvNowPlaying.setText(\"\");\r\n                    } else {\r\n                        binding.tvNowPlaying.setText(R.string.NOW_PLAYING_FROM);\r\n                        isDisclaimer = 0;\r\n                        callAllDisable(true);\r\n                    }\r\n                    if (mainPlayModelList.get(position).getPlaylistID() == null) {\r\n                        mainPlayModelList.get(position).setPlaylistID(\"\");\r\n                    }\r\n                    binding.tvName.setText(mainPlayModelList.get(position).getName());\r\n                    if (mainPlayModelList.get(position).getAudioDirection().equalsIgnoreCase(\"\")) {\r\n                        binding.llDirection.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llDirection.setVisibility(View.VISIBLE);\r\n                        binding.tvDireDesc.setText(mainPlayModelList.get(position).getAudioDirection());\r\n                    }\r\n                    binding.tvTitle.setText(mainPlayModelList.get(position).getAudiomastercat());\r\n                    binding.tvDesc.setText(mainPlayModelList.get(position).getAudioSubCategory());\r\n                    if (url.equalsIgnoreCase(\"\")) {\r\n                        Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    } else {\r\n                        /*TODO */\r\n                        Glide.with(ctx).load(mainPlayModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n                    }\r\n                    if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                        binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                    } else if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                        binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                    }\r\n                    binding.tvSongTime.setText(mainPlayModelList.get(position).getAudioDuration());\r\n                    GetMedia();\r\n                    GetMedia2();\r\n                }\r\n//                BWSApplication.simple_Notification(playbackStatus, mainPlayModelList, PlayWellnessActivity.this, position, PlayWellnessActivity.this);\r\n                startTime = getStartTime();\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n/*        if (isMediaStart && url.equalsIgnoreCase(\"\")) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete real\",\"real\");\r\n            });\r\n        }*/\r\n     /*   if (isMediaStart && !url.equalsIgnoreCase(\"\")) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete trans\",\"trans\");\r\n            });\r\n        }*/\r\n        getMediaByPer();\r\n        if (!url.equalsIgnoreCase(\"\")) {\r\n            if (!id.equalsIgnoreCase(addToRecentPlayId)) {\r\n                addToRecentPlay();\r\n                Log.e(\"Api call recent\", id);\r\n            }\r\n        }\r\n        addToRecentPlayId = id;\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n\r\n        BWSApplication.createChannel(ctx);\r\n        registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        startService(new Intent(getBaseContext(), OnClearFromRecentService.class));\r\n    }\r\n\r\n    private void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if (download.equalsIgnoreCase(\"2\")) {\r\n            mediaPlayer = MediaPlayer.create(ctx, R.raw.brain_wellness_spa_declaimer);\r\n            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\r\n//            Uri uri = Uri.parse(\"android.resource://com.brainwellnessspa/\" + R.raw.brain_wellness_spa_declaimer);\r\n//            mediaPlayer.setDataSource(String.valueOf(uri));\r\n            mediaPlayer.start();\r\n            isPrepare = true;\r\n            isMediaStart = true;\r\n        } else {\r\n            if (null == mediaPlayer) {\r\n                mediaPlayer = new MediaPlayer();\r\n                Log.e(\"Playinggggg\", \"Playinggggg\");\r\n            }\r\n            try {\r\n                if (mediaPlayer == null)\r\n                    mediaPlayer = new MediaPlayer();\r\n                if (mediaPlayer.isPlaying()) {\r\n                    Log.e(\"Playinggggg\", \"stoppppp\");\r\n                    mediaPlayer.stop();\r\n                    isMediaStart = false;\r\n                    isPrepare = false;\r\n                    isPause = false;\r\n                }\r\n                mediaPlayer = new MediaPlayer();\r\n                if (download.equalsIgnoreCase(\"1\")) {\r\n                    mediaPlayer.setDataSource(fileDescriptor);\r\n                } else {\r\n                    mediaPlayer.setDataSource(url);\r\n                }\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                    mediaPlayer.setAudioAttributes(\r\n                            new AudioAttributes\r\n                                    .Builder()\r\n                                    .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                    .build());\r\n                }\r\n                mediaPlayer.prepareAsync();\r\n                isPause = false;\r\n                isPrepare = true;\r\n            } catch (IllegalStateException | IOException e) {\r\n                FileDescriptor fileDescriptor1 = null;\r\n                setMediaPlayer(\"0\", fileDescriptor1);\r\n                e.printStackTrace();\r\n            }\r\n            if (!mediaPlayer.isPlaying()) {\r\n                mediaPlayer.setOnPreparedListener(mp -> {\r\n                    Log.e(\"Playinggggg\", \"Startinggg\");\r\n                    mediaPlayer.start();\r\n                    isMediaStart = true;\r\n                    isprogressbar = false;\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callMedia() {\r\n        FileDescriptor fileDescriptor = null;\r\n        if (url.equalsIgnoreCase(\"\")) {\r\n            setMediaPlayer(\"2\", fileDescriptor);\r\n\r\n        } else {\r\n            if (downloadAudioDetailsList.size() != 0) {\r\n                isprogressbar = true;\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                isPause = false;\r\n                DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n                getDownloadMedia(downloadMedia);\r\n\r\n            } else {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    isprogressbar = true;\r\n                    binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                    binding.progressBar.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    setMediaPlayer(\"0\", fileDescriptor);\r\n                } else {\r\n                    isprogressbar = false;\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getDownloadMedia(DownloadMedia downloadMedia) {\r\n        class getDownloadMedia extends AsyncTask<Void, Void, Void> {\r\n            FileDescriptor fileDescriptor = null;\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                try {\r\n                    byte[] decrypt = null;\r\n                    decrypt = downloadMedia.decrypt(name);\r\n                    if (decrypt != null) {\r\n                        fileDescriptor = FileUtils.getTempFileDescriptor(getApplicationContext(), decrypt);\r\n                    }\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (fileDescriptor != null) {\r\n                    setMediaPlayer(\"1\", fileDescriptor);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        setMediaPlayer(\"0\", fileDescriptor);\r\n                    } else {\r\n                        isprogressbar = false;\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        getDownloadMedia st = new getDownloadMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void callComplete() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        isPause = false;\r\n        if (audioPlay && (url.equalsIgnoreCase(\"\") || url.isEmpty())) {\r\n            isDisclaimer = 0;\r\n            binding.tvNowPlaying.setText(\"\");\r\n            removeArray();\r\n        } else {\r\n            binding.tvNowPlaying.setText(R.string.NOW_PLAYING_FROM);\r\n            if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                if (position < (listSize - 1)) {\r\n                    position = position + 1;\r\n                } else {\r\n                    position = 0;\r\n                }\r\n                getPrepareShowData(position);\r\n            } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    } catch (Exception e) {\r\n                    }\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        binding.pbProgressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        binding.pbProgressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    if (listSize == 1) {\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        isCompleteStop = true;\r\n                        stopMedia();\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    try {\r\n                        addToQueueModelList.remove(position);\r\n                    } catch (Exception e) {\r\n                    }\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position < listSize - 1) {\r\n                        getPrepareShowData(position);\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            binding.llProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (position < (listSize - 1)) {\r\n                        int oldPosition = position;\r\n                        position = position + 1;\r\n                        if (oldPosition == position) {\r\n                            position++;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    } else {\r\n                        if (listSize == 1) {\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            binding.llProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n                        } else {\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            binding.pbProgressBar.setVisibility(View.GONE);\r\n                            binding.llProgressBar.setVisibility(View.GONE);\r\n                            isCompleteStop = true;\r\n                            stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llnext.setEnabled(false);\r\n                binding.llnext.setClickable(false);\r\n                binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llprev.setEnabled(false);\r\n                binding.llprev.setClickable(false);\r\n                binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }*/ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llnext.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        callRepeatShuffle();\r\n        BWSApplication.createChannel(ctx);\r\n        registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        startService(new Intent(getBaseContext(), OnClearFromRecentService.class));\r\n    }\r\n\r\n    private void removeArray() {\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        MainPlayModel mainPlayModel;\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json1, type);\r\n\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }\r\n        MakeArray();\r\n    }\r\n\r\n    private void MakeArray() {\r\n        Gson gson = new Gson();\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        MainPlayModel mainPlayModel;\r\n        mainPlayModelList = new ArrayList<>();\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        String json2 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json2.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json2, type1);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n//            if (isDisclaimer == 0 && disclaimerPlayed == 0) {\r\n//                addDeclaimer();\r\n//            }\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json1 = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        }\r\n    }\r\n\r\n  /*  private void MakeArray2() {\r\n        Gson gson = new Gson();\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        mainPlayModelList = new ArrayList<>();\r\n        MainPlayModel mainPlayModel;\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }\r\n    }*/\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callBack();\r\n    }\r\n\r\n    private void callBack() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n//        handler1.removeCallbacks(UpdateSongTime1);\r\n        player = 1;\r\n        if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n            isPause = false;\r\n        }\r\n//        pauseMedia();\r\n        SharedPreferences shared2 = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared2.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(addToQueueModelList);\r\n        if (queuePlay) {\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n        }\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        finish();\r\n//        overridePendingTransition(R.anim.enter, R.anim.exit);\r\n    }\r\n\r\n    private void addDeclaimer() {\r\n        MainPlayModel mainPlayModel = new MainPlayModel();\r\n        mainPlayModel.setID(\"0\");\r\n        mainPlayModel.setName(\"Disclaimer\");\r\n        mainPlayModel.setAudioFile(\"\");\r\n        mainPlayModel.setPlaylistID(\"\");\r\n        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n        mainPlayModel.setAudiomastercat(\"\");\r\n        mainPlayModel.setAudioSubCategory(\"\");\r\n        mainPlayModel.setImageFile(\"\");\r\n        mainPlayModel.setLike(\"\");\r\n        mainPlayModel.setDownload(\"\");\r\n        mainPlayModel.setAudioDuration(\"0:48\");\r\n        mainPlayModelList.add(mainPlayModel);\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n//        BWSApplication.notificationManager.cancelAll();\r\n//        unregisterReceiver(broadcastReceiver);\r\n//        releasePlayer();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json1, type1);\r\n        }\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = gson.fromJson(json, type);\r\n        callLLMoreViewQClicks();\r\n\r\n        /*if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)) {\r\n            handler1.postDelayed(UpdateSongTime1, 500);\r\n        } else {\r\n            binding.pbProgress.setVisibility(View.GONE);\r\n            handler1.removeCallbacks(UpdateSongTime1);\r\n        }*/\r\n        GetMedia2();\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (queuePlay) {\r\n            position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            listSize = addToQueueModelList.size();\r\n            if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n            } else if (addToQueueModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n            }\r\n        } else if (audioPlay) {\r\n            position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            listSize = mainPlayModelList.size();\r\n            if (listSize != 0) {\r\n                if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"1\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_fill_like_icon);\r\n                } else if (mainPlayModelList.get(position).getLike().equalsIgnoreCase(\"0\")) {\r\n                    binding.ivLike.setImageResource(R.drawable.ic_unlike_icon);\r\n                }\r\n                url = mainPlayModelList.get(position).getAudioFile();\r\n            }\r\n            if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n                isDisclaimer = 1;\r\n                callAllDisable(false);\r\n                binding.tvNowPlaying.setText(\"\");\r\n            } else {\r\n                binding.tvNowPlaying.setText(R.string.NOW_PLAYING_FROM);\r\n                isDisclaimer = 0;\r\n                callAllDisable(true);\r\n            }\r\n        }\r\n        if (comeFromAddToQueue) {\r\n            getPrepareShowData(position);\r\n            comeFromAddToQueue = false;\r\n        }\r\n        if (listSize == 1) {\r\n            position = 0;\r\n        }\r\n        SharedPreferences Status = getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n        callRepeatShuffle();\r\n       /* if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if ((isMediaStart && isPlaying()) && !isPause) {\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.VISIBLE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        } else {\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        }*/\r\n        super.onResume();\r\n    }\r\n\r\n    private void callLLMoreViewQClicks() {\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llMore.setClickable(false);\r\n                binding.llMore.setEnabled(false);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llMore.setClickable(true);\r\n                binding.llMore.setEnabled(true);\r\n                binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                binding.llViewQueue.setClickable(false);\r\n                binding.llViewQueue.setEnabled(false);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                binding.llViewQueue.setClickable(true);\r\n                binding.llViewQueue.setEnabled(true);\r\n                binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n        } else {\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.ivViewQueue.setColorFilter(ContextCompat.getColor(ctx, R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n    }\r\n\r\n\r\n    private void callAllDisable(boolean b) {\r\n        if (b) {\r\n            binding.llnext.setClickable(true);\r\n            binding.llnext.setEnabled(true);\r\n            binding.llnext.setAlpha(1f);\r\n            binding.llprev.setClickable(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llprev.setAlpha(1f);\r\n            binding.llForwardSec.setClickable(true);\r\n            binding.llForwardSec.setEnabled(true);\r\n            binding.llForwardSec.setAlpha(1f);\r\n            binding.llBackWordSec.setClickable(true);\r\n            binding.llBackWordSec.setEnabled(true);\r\n            binding.llBackWordSec.setAlpha(1f);\r\n            binding.llDownload.setClickable(true);\r\n            binding.llDownload.setEnabled(true);\r\n            binding.llDownload.setAlpha(1f);\r\n            binding.llRepeat.setClickable(true);\r\n            binding.llRepeat.setEnabled(true);\r\n            binding.llRepeat.setAlpha(1f);\r\n            binding.llShuffle.setClickable(true);\r\n            binding.llShuffle.setEnabled(true);\r\n            binding.llShuffle.setAlpha(1f);\r\n            binding.llLike.setClickable(true);\r\n            binding.llLike.setEnabled(true);\r\n            binding.llLike.setAlpha(1f);\r\n            binding.rlSeekbar.setClickable(true);\r\n            binding.rlSeekbar.setEnabled(true);\r\n            binding.simpleSeekbar.setClickable(true);\r\n            binding.simpleSeekbar.setEnabled(true);\r\n            callLLMoreViewQClicks();\r\n//            binding.simpleSeekbar.set\r\n        } else {\r\n            binding.llnext.setClickable(false);\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setAlpha(0.6f);\r\n            binding.llprev.setClickable(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setAlpha(0.6f);\r\n            binding.llForwardSec.setClickable(false);\r\n            binding.llForwardSec.setEnabled(false);\r\n            binding.llForwardSec.setAlpha(0.6f);\r\n            binding.llBackWordSec.setClickable(false);\r\n            binding.llBackWordSec.setEnabled(false);\r\n            binding.llBackWordSec.setAlpha(0.6f);\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.llMore.setAlpha(0.6f);\r\n            binding.llViewQueue.setClickable(false);\r\n            binding.llViewQueue.setEnabled(false);\r\n            binding.llViewQueue.setAlpha(0.6f);\r\n            binding.llDownload.setClickable(false);\r\n            binding.llDownload.setEnabled(false);\r\n            binding.llDownload.setAlpha(0.6f);\r\n            binding.llRepeat.setClickable(false);\r\n            binding.llRepeat.setEnabled(false);\r\n            binding.llRepeat.setAlpha(0.6f);\r\n            binding.llShuffle.setClickable(false);\r\n            binding.llShuffle.setEnabled(false);\r\n            binding.llShuffle.setAlpha(0.6f);\r\n            binding.llLike.setClickable(false);\r\n            binding.llLike.setEnabled(false);\r\n            binding.llLike.setAlpha(0.6f);\r\n            binding.rlSeekbar.setClickable(false);\r\n            binding.rlSeekbar.setEnabled(false);\r\n            binding.simpleSeekbar.setClickable(false);\r\n            binding.simpleSeekbar.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n     /*   handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void onPointerCaptureChanged(boolean hasCapture) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPrevious() {\r\n        if (!url.equalsIgnoreCase(\"\")) {\r\n            isPlaying = false;\r\n            callPrevious();\r\n        }\r\n\r\n        BWSApplication.createChannel(ctx);\r\n        registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        startService(new Intent(getBaseContext(), OnClearFromRecentService.class));\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPlay() {\r\n        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);\r\n        if (!isMediaStart) {\r\n            isCompleteStop = false;\r\n            isprogressbar = true;\r\n            handler.postDelayed(UpdateSongTime, 500);\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.VISIBLE);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            callMedia();\r\n        } else if (isCompleteStop) {\r\n            isCompleteStop = false;\r\n            isprogressbar = true;\r\n            handler.postDelayed(UpdateSongTime, 500);\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.VISIBLE);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            callMedia();\r\n        } else {\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.VISIBLE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            resumeMedia();\r\n            isPause = false;\r\n        }\r\n        handler.postDelayed(UpdateSongTime, 100);\r\n        binding.tvTitle.setText(mainPlayModelList.get(position).getName());\r\n        isPlaying = true;\r\n    }\r\n\r\n    @Override\r\n    public void onTrackPause() {\r\n        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),\r\n                R.drawable.ic_play_arrow_black_24dp, position, mainPlayModelList.size() - 1);\r\n        isPlaying = false;\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n        pauseMedia();\r\n        binding.llProgressBar.setVisibility(View.GONE);\r\n        binding.progressBar.setVisibility(View.GONE);\r\n        binding.llPlay.setVisibility(View.VISIBLE);\r\n        binding.llPause.setVisibility(View.GONE);\r\n        oTime = binding.simpleSeekbar.getProgress();\r\n    }\r\n\r\n    @Override\r\n    public void onTrackNext() {\r\n        if (!url.equalsIgnoreCase(\"\")) {\r\n            isPlaying = false;\r\n            callNext();\r\n        }\r\n        BWSApplication.createChannel(ctx);\r\n        registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        startService(new Intent(getBaseContext(), OnClearFromRecentService.class));\r\n    }\r\n\r\n /*   @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n                resumeMedia();\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if (isMediaStart) {\r\n                    pauseMedia();\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }*/\r\n\r\n/*    @Override\r\n    public void onProgress(Progress progress) {\r\n        if(!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(name)){\r\n            handler.postDelayed(UpdateSongTime1, 10);\r\n        }else{\r\n            handler.removeCallbacks(UpdateSongTime1);\r\n        }\r\n    }*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java	(revision f0fec71fa0a936bd6b12bc71015a89e5cd6f0b07)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/PlayWellnessActivity.java	(date 1605068062942)
@@ -360,6 +360,7 @@
         BWSApplication.createChannel(ctx);
         registerReceiver(broadcastReceiver, new IntentFilter("TRACKS_TRACKS"));
         startService(new Intent(getBaseContext(), OnClearFromRecentService.class));
+
         if (isMediaStart /*&& !audioFile.equalsIgnoreCase("")*/) {
             mediaPlayer.setOnCompletionListener(mediaPlayer -> {
                 callComplete();
Index: app/src/main/java/com/brainwellnessspa/BWSApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa;\r\n\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.app.Application;\r\nimport android.app.Notification;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.app.Service;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.media.RingtoneManager;\r\nimport android.net.ConnectivityManager;\r\nimport android.net.NetworkInfo;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.provider.Settings;\r\nimport android.support.v4.media.session.MediaControllerCompat;\r\nimport android.support.v4.media.session.MediaSessionCompat;\r\nimport android.util.Base64;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.Gravity;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.core.app.NotificationManagerCompat;\r\nimport androidx.media.MediaSessionManager;\r\nimport androidx.room.migration.Migration;\r\nimport androidx.sqlite.db.SupportSQLiteDatabase;\r\n\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Services.NotificationActionService;\r\nimport com.brainwellnessspa.SplashModule.Models.VersionModel;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.AppSignatureHashHelper;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.CryptLib;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.Utility.NotificationDismissedReceiver;\r\nimport com.brainwellnessspa.Utility.PlaybackStatus;\r\nimport com.brainwellnessspa.Utility.Track;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Random;\r\nimport java.util.TimeZone;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\nimport javax.net.ssl.HttpsURLConnection;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static java.sql.DriverManager.println;\r\n\r\npublic class BWSApplication extends Application {\r\n    private static Context mContext;\r\n    private static BWSApplication BWSApplication;\r\n    private static List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    private static final int NOTIFICATION_ID = 101;\r\n    private static Bitmap myBitmap;\r\n    private static Service service;\r\n    private static Bitmap mCurrTrackCover;\r\n    public static MediaSessionCompat mMediaSession = null;\r\n    public static PendingIntent play_pauseAction = null;\r\n    public static boolean usesChronometer = false;\r\n    public static boolean showWhen = false;\r\n    public static Long notifWhen = 0L;\r\n    public static MediaSessionManager mediaSessionManager;\r\n    public static MediaSessionCompat mediaSession;\r\n    public static MediaControllerCompat.TransportControls transportControls;\r\n    private static Track track;\r\n    public static final String CHANNEL_ID = \"channel1\";\r\n    public static final String ACTION_PREVIUOS = \"actionprevious\";\r\n    public static final String ACTION_PLAY = \"actionplay\";\r\n    public static final String ACTION_NEXT = \"actionnext\";\r\n    public static Notification notification;\r\n    public static NotificationManager notificationManager;\r\n\r\n    public static Context getContext() {\r\n        return mContext;\r\n    }\r\n\r\n    public static MeasureRatio measureRatio(Context context, float outerMargin, float aspectX, float aspectY, float proportion, float innerMargin) {\r\n        DisplayMetrics displayMetrics = new DisplayMetrics();\r\n        try {\r\n            WindowManager windowmanager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\r\n            windowmanager.getDefaultDisplay().getMetrics(displayMetrics);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        float width = displayMetrics.widthPixels / displayMetrics.density;\r\n        float widthImg = ((width - outerMargin) * proportion) - innerMargin;\r\n        float height = widthImg * aspectY / aspectX;\r\n        //Log.e(\"width.........\", \"\" + context.getClass().getSimpleName()+\",\"+width);\r\n//        //Log.e(\"widthImg.........\", \"\" + context.getClass().getSimpleName()+\",\"+widthImg);\r\n//        //Log.e(\"height...........\", \"\" + context.getClass().getSimpleName()+\",\"+height);\r\n//        //Log.e(\"displayMetrics.density...........\", \"\" + context.getClass().getSimpleName()+\",\"+displayMetrics.density);\r\n        return new MeasureRatio(widthImg, height, displayMetrics.density, proportion);\r\n    }\r\n\r\n    public static final Migration MIGRATION_1_2 = new Migration(1, 2) {\r\n        @Override\r\n        public void migrate(SupportSQLiteDatabase database) {\r\n            database.execSQL(\"ALTER TABLE 'playlist_table' ADD COLUMN 'PlaylistImageDetails' TEXT\");\r\n        }\r\n    };\r\n\r\n    public static void createNotification(Context context, MainPlayModel track, int playbutton, int pos, int size) {\r\n            NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);\r\n            MediaSessionCompat mediaSessionCompat = new MediaSessionCompat(context, \"tag\");\r\n            PendingIntent pendingIntentPrevious;\r\n          /*  try {\r\n                byte[] encodeByte = Base64.decode(track.getImageFile(), Base64.DEFAULT);\r\n                myBitmap = BitmapFactory.decodeByteArray(encodeByte, 0, encodeByte.length);\r\n            } catch (Exception e) {\r\n                e.getMessage();\r\n            }*/\r\n            int drw_previous;\r\n            if (pos == 0) {\r\n                pendingIntentPrevious = null;\r\n                drw_previous = 0;\r\n            } else {\r\n                Intent intentPrevious = new Intent(context, NotificationActionService.class)\r\n                        .setAction(ACTION_PREVIUOS);\r\n                pendingIntentPrevious = PendingIntent.getBroadcast(context, 0,\r\n                        intentPrevious, PendingIntent.FLAG_UPDATE_CURRENT);\r\n                drw_previous = R.drawable.ic_skip_previous_black_24dp;\r\n            }\r\n\r\n            Intent intentPlay = new Intent(context, NotificationActionService.class).setAction(ACTION_PLAY);\r\n            PendingIntent pendingIntentPlay = PendingIntent.getBroadcast(context, 0, intentPlay, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n            PendingIntent pendingIntentNext;\r\n            int drw_next;\r\n            if (pos == size) {\r\n                pendingIntentNext = null;\r\n                drw_next = 0;\r\n            } else {\r\n                Intent intentNext = new Intent(context, NotificationActionService.class)\r\n                        .setAction(ACTION_NEXT);\r\n                pendingIntentNext = PendingIntent.getBroadcast(context, 0,\r\n                        intentNext, PendingIntent.FLAG_UPDATE_CURRENT);\r\n                drw_next = R.drawable.ic_skip_next_black_24dp;\r\n            }\r\n\r\n            //create notification\r\n            notification = new NotificationCompat.Builder(context, CHANNEL_ID)\r\n                    .setSmallIcon(R.drawable.ic_music_note)\r\n                    .setContentTitle(track.getName())\r\n                    .setContentText(track.getAudioDirection())\r\n                    .setLargeIcon(BitmapFactory.decodeResource(context.getResources(), R.drawable.square_app_icon))\r\n                    .setOnlyAlertOnce(true)//show notification for only first time\r\n                    .setShowWhen(false)\r\n                    .setOngoing(true)\r\n                    .addAction(drw_previous, \"Previous\", pendingIntentPrevious)\r\n                    .addAction(playbutton, \"Play\", pendingIntentPlay)\r\n                    .addAction(drw_next, \"Next\", pendingIntentNext)\r\n                    .setStyle(new androidx.media.app.NotificationCompat.MediaStyle()\r\n                            .setShowActionsInCompactView(0, 1, 2)\r\n                            .setMediaSession(mediaSessionCompat.getSessionToken()))\r\n                    .setPriority(NotificationCompat.PRIORITY_LOW)\r\n                    .build();\r\n\r\n            notificationManagerCompat.notify(1, notification);\r\n    }\r\n\r\n    public static void createChannel(Context ctx) {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            NotificationChannel channel = new NotificationChannel(CHANNEL_ID,\r\n                    \"KOD Dev\", NotificationManager.IMPORTANCE_LOW);\r\n\r\n            notificationManager = ctx.getSystemService(NotificationManager.class);\r\n            if (notificationManager != null) {\r\n                notificationManager.createNotificationChannel(channel);\r\n            }\r\n        }else{\r\n        }\r\n    }\r\n\r\n    public static void getLatasteUpdate(Context context) {\r\n        String appURI = \"https://play.google.com/store/apps/details?id=com.brainwellnessspa\";\r\n        if (BWSApplication.isNetworkConnected(context)) {\r\n            Call<VersionModel> listCall = APIClient.getClient().getVersionDatas(String.valueOf(BuildConfig.VERSION_CODE), CONSTANTS.FLAG_ONE);\r\n            listCall.enqueue(new Callback<VersionModel>() {\r\n                @Override\r\n                public void onResponse(Call<VersionModel> call, Response<VersionModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        VersionModel versionModel = response.body();\r\n//                    if (versionModel.getResponseCode().equalsIgnoreCase(getString(R.string.ResponseCodesuccess))) {\r\n                        if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"0\")) {\r\n                            AlertDialog.Builder builder = new AlertDialog.Builder(context);\r\n                            builder.setTitle(\"Update Brain Wellness Spa\");\r\n                            builder.setCancelable(false);\r\n                            builder.setMessage(\"Brain Wellness Spa recommends that you update to the latest version\")\r\n                                    .setPositiveButton(\"UPDATE\", (dialog, id) -> {\r\n                                        context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(appURI)));\r\n                                        dialog.cancel();\r\n                                    })\r\n                                    .setNegativeButton(\"NOT NOW\", (dialog, id) -> dialog.dismiss());\r\n                            builder.create().show();\r\n                        } else if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"1\")) {\r\n                            AlertDialog.Builder builder = new AlertDialog.Builder(context);\r\n                            builder.setTitle(\"Update Required\");\r\n                            builder.setCancelable(false);\r\n                            builder.setMessage(\"To keep using Brain Wellness Spa, download the latest version\")\r\n                                    .setCancelable(false)\r\n                                    .setPositiveButton(\"UPDATE\", (dialog, id) -> context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(appURI))));\r\n                            builder.create().show();\r\n                        } else if (versionModel.getResponseData().getIsForce().equalsIgnoreCase(\"\")) {\r\n                        }\r\n                    }\r\n                    /*} else {\r\n                    }*/\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<VersionModel> call, Throwable t) {\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(context.getString(R.string.no_server_found), context);\r\n        }\r\n    }\r\n\r\n    public static String getKey(Context context) {\r\n        AppSignatureHashHelper appSignatureHashHelper = new AppSignatureHashHelper(context);\r\n        String key = appSignatureHashHelper.getAppSignatures().get(0);\r\n\r\n        SharedPreferences shared = context.getSharedPreferences(CONSTANTS.PREF_KEY_Splash, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putString(CONSTANTS.PREF_KEY_SplashKey, appSignatureHashHelper.getAppSignatures().get(0));\r\n        editor.commit();\r\n        return key;\r\n    }\r\n\r\n    public static void showToast(String message, Context context) {\r\n        Toast toast = new Toast(context);\r\n        View view = LayoutInflater.from(context).inflate(R.layout.toast_layout, null);\r\n        TextView tvMessage = view.findViewById(R.id.tvMessage);\r\n        tvMessage.setText(message);\r\n        toast.setGravity(Gravity.BOTTOM | Gravity.CENTER, 0, 35);\r\n        toast.setView(view);\r\n        toast.show();\r\n    }\r\n\r\n    public static String getProgressDisplayLine(long currentBytes, long totalBytes) {\r\n        return getBytesToMBString(currentBytes) + \"/\" + getBytesToMBString(totalBytes);\r\n    }\r\n\r\n    private static String getBytesToMBString(long bytes) {\r\n        return String.format(Locale.ENGLISH, \"%.2fMb\", bytes / (1024.00 * 1024.00));\r\n    }\r\n/*    public static List<DownloadAudioDetails> GetAllMedia(Context ctx) {\r\n\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }*/\r\n\r\n    public static synchronized BWSApplication getInstance() {\r\n        return BWSApplication;\r\n    }\r\n\r\n    public static void hideProgressBar(ProgressBar progressBar, FrameLayout progressBarHolder, Activity ctx) {\r\n        try {\r\n            progressBarHolder.setVisibility(View.GONE);\r\n            progressBar.setVisibility(View.GONE);\r\n            ctx.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void showProgressBar(ProgressBar progressBar, FrameLayout progressBarHolder, Activity ctx) {\r\n        try {\r\n            progressBarHolder.setVisibility(View.VISIBLE);\r\n            ctx.getWindow().setFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE, WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);\r\n            progressBar.setVisibility(View.VISIBLE);\r\n            progressBar.invalidate();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static boolean isEmailValid(String email) {\r\n        boolean isValid = false;\r\n        String expression = \"^[\\\\w\\\\.-]+@([\\\\w\\\\-]+\\\\.)+[A-Z]{2,3}$\";\r\n        CharSequence inputStr = email;\r\n\r\n        Pattern pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE);\r\n        Matcher matcher = pattern.matcher(inputStr);\r\n        if (matcher.matches()) {\r\n            isValid = true;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        mContext = this;\r\n        BWSApplication = this;\r\n    }\r\n\r\n    public static boolean isNetworkConnected(Context context) {\r\n        try {\r\n            ConnectivityManager mConnectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n            NetworkInfo mNetworkInfo = mConnectivityManager.getActiveNetworkInfo();\r\n            boolean flag = false;\r\n            ConnectivityManager manager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\r\n\r\n//For 3G check\r\n            boolean is3g = manager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE)\r\n                    .isConnectedOrConnecting();\r\n//For WiFi Check\r\n            boolean isWifi = manager.getNetworkInfo(ConnectivityManager.TYPE_WIFI)\r\n                    .isConnectedOrConnecting();\r\n\r\n            flag = !(!is3g && !isWifi);\r\n            return flag;\r\n        } catch (NullPointerException e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static String securityKey() {\r\n        String key;\r\n        String DeviceId = Settings.Secure.getString(getContext().getContentResolver(), Settings.Secure.ANDROID_ID);\r\n        String AES = \"OsEUHhecSs4gRGcy2vMQs1s/XajBrLGADR71cKMRNtA=\";\r\n        String RSA = \"KlWxBHfKPGkkeTjkT7IEo32bZW8GlVCPq/nvVFuYfIY=\";\r\n        String TDES = \"1dpra0SZhVPpiUQvikMvkDxEp7qLLJL9pe9G6Apg01g=\";\r\n        String SHA1 = \"Ey8rBCHsqITEbh7KQKRmYObCGBXqFnvtL5GjMFQWHQo=\";\r\n        String MD5 = \"/qc2rO3RB8Z/XA+CmHY0tCaJch9a5BdlQW1xb7db+bg=\";\r\n\r\n        Calendar calendar = Calendar.getInstance();\r\n        TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\r\n        calendar.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n        calendar.setTime(new Date());\r\n        SimpleDateFormat outputFmt = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n        String dateAsString = outputFmt.format(calendar.getTime());\r\n        //        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\r\n        //2019-11-21 06:45:32\r\n//        String currentDateandTime = sdf.format(new Date());\r\n        String finalKey = \"\";\r\n        HashMap<String, String> hash_map = new HashMap<String, String>();\r\n        hash_map.put(\"AES\", AES);\r\n        hash_map.put(\"RSA\", RSA);\r\n        hash_map.put(\"TDES\", TDES);\r\n        hash_map.put(\"SHA1\", SHA1);\r\n        hash_map.put(\"MD5\", MD5);\r\n\r\n        Random random = new Random();\r\n        List<String> keys = new ArrayList<String>(hash_map.keySet());\r\n        String randomKey = keys.get(random.nextInt(keys.size()));\r\n        String value = hash_map.get(randomKey);\r\n        key = DeviceId + \".\" + dateAsString + \".\" + randomKey + \".\" + value;\r\n\r\n        try {\r\n            finalKey = ProgramForAES(key);\r\n            System.out.println(finalKey);\r\n        } catch (Exception e) {\r\n        }\r\n        return finalKey;\r\n    }\r\n\r\n    public static String ProgramForAES(String baseString) {\r\n        String cipher = \"\";\r\n        try {\r\n            String key = \"5785abf057d4eea9e59151f75a6fadb724768053df2acdfabb68f2b946b972c6\";\r\n            CryptLib cryptLib = new CryptLib();\r\n            cipher = cryptLib.encryptPlainTextWithRandomIV(baseString, key);\r\n            println(\"cipherText\" + cipher);\r\n            String decryptedString = cryptLib.decryptCipherTextWithRandomIV(cipher, key);\r\n            println(\"decryptedString\" + decryptedString);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return cipher;\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/BWSApplication.java	(revision f0fec71fa0a936bd6b12bc71015a89e5cd6f0b07)
+++ app/src/main/java/com/brainwellnessspa/BWSApplication.java	(date 1605068915470)
@@ -132,62 +132,62 @@
     };
 
     public static void createNotification(Context context, MainPlayModel track, int playbutton, int pos, int size) {
-            NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);
-            MediaSessionCompat mediaSessionCompat = new MediaSessionCompat(context, "tag");
-            PendingIntent pendingIntentPrevious;
+        NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);
+        MediaSessionCompat mediaSessionCompat = new MediaSessionCompat(context, "tag");
+        PendingIntent pendingIntentPrevious;
           /*  try {
                 byte[] encodeByte = Base64.decode(track.getImageFile(), Base64.DEFAULT);
                 myBitmap = BitmapFactory.decodeByteArray(encodeByte, 0, encodeByte.length);
             } catch (Exception e) {
                 e.getMessage();
             }*/
-            int drw_previous;
-            if (pos == 0) {
-                pendingIntentPrevious = null;
-                drw_previous = 0;
-            } else {
-                Intent intentPrevious = new Intent(context, NotificationActionService.class)
-                        .setAction(ACTION_PREVIUOS);
-                pendingIntentPrevious = PendingIntent.getBroadcast(context, 0,
-                        intentPrevious, PendingIntent.FLAG_UPDATE_CURRENT);
-                drw_previous = R.drawable.ic_skip_previous_black_24dp;
-            }
+        int drw_previous;
+        if (pos == 0) {
+            pendingIntentPrevious = null;
+            drw_previous = 0;
+        } else {
+            Intent intentPrevious = new Intent(context, NotificationActionService.class)
+                    .setAction(ACTION_PREVIUOS);
+            pendingIntentPrevious = PendingIntent.getBroadcast(context, 0,
+                    intentPrevious, PendingIntent.FLAG_UPDATE_CURRENT);
+            drw_previous = R.drawable.ic_skip_previous_black_24dp;
+        }
 
-            Intent intentPlay = new Intent(context, NotificationActionService.class).setAction(ACTION_PLAY);
-            PendingIntent pendingIntentPlay = PendingIntent.getBroadcast(context, 0, intentPlay, PendingIntent.FLAG_UPDATE_CURRENT);
+        Intent intentPlay = new Intent(context, NotificationActionService.class).setAction(ACTION_PLAY);
+        PendingIntent pendingIntentPlay = PendingIntent.getBroadcast(context, 0, intentPlay, PendingIntent.FLAG_UPDATE_CURRENT);
 
-            PendingIntent pendingIntentNext;
-            int drw_next;
-            if (pos == size) {
-                pendingIntentNext = null;
-                drw_next = 0;
-            } else {
-                Intent intentNext = new Intent(context, NotificationActionService.class)
-                        .setAction(ACTION_NEXT);
-                pendingIntentNext = PendingIntent.getBroadcast(context, 0,
-                        intentNext, PendingIntent.FLAG_UPDATE_CURRENT);
-                drw_next = R.drawable.ic_skip_next_black_24dp;
-            }
+        PendingIntent pendingIntentNext;
+        int drw_next;
+        if (pos == size) {
+            pendingIntentNext = null;
+            drw_next = 0;
+        } else {
+            Intent intentNext = new Intent(context, NotificationActionService.class)
+                    .setAction(ACTION_NEXT);
+            pendingIntentNext = PendingIntent.getBroadcast(context, 0,
+                    intentNext, PendingIntent.FLAG_UPDATE_CURRENT);
+            drw_next = R.drawable.ic_skip_next_black_24dp;
+        }
 
-            //create notification
-            notification = new NotificationCompat.Builder(context, CHANNEL_ID)
-                    .setSmallIcon(R.drawable.ic_music_note)
-                    .setContentTitle(track.getName())
-                    .setContentText(track.getAudioDirection())
-                    .setLargeIcon(BitmapFactory.decodeResource(context.getResources(), R.drawable.square_app_icon))
-                    .setOnlyAlertOnce(true)//show notification for only first time
-                    .setShowWhen(false)
-                    .setOngoing(true)
-                    .addAction(drw_previous, "Previous", pendingIntentPrevious)
-                    .addAction(playbutton, "Play", pendingIntentPlay)
-                    .addAction(drw_next, "Next", pendingIntentNext)
-                    .setStyle(new androidx.media.app.NotificationCompat.MediaStyle()
-                            .setShowActionsInCompactView(0, 1, 2)
-                            .setMediaSession(mediaSessionCompat.getSessionToken()))
-                    .setPriority(NotificationCompat.PRIORITY_LOW)
-                    .build();
+        //create notification
+        notification = new NotificationCompat.Builder(context, CHANNEL_ID)
+                .setSmallIcon(R.drawable.ic_music_note)
+                .setContentTitle(track.getName())
+                .setContentText(track.getAudioDirection())
+                .setLargeIcon(BitmapFactory.decodeResource(context.getResources(), R.drawable.square_app_icon))
+                .setOnlyAlertOnce(true)//show notification for only first time
+                .setShowWhen(false)
+                .setOngoing(true)
+                .addAction(drw_previous, "Previous", pendingIntentPrevious)
+                .addAction(playbutton, "Play", pendingIntentPlay)
+                .addAction(drw_next, "Next", pendingIntentNext)
+                .setStyle(new androidx.media.app.NotificationCompat.MediaStyle()
+                        .setShowActionsInCompactView(0, 1, 2)
+                        .setMediaSession(mediaSessionCompat.getSessionToken()))
+                .setPriority(NotificationCompat.PRIORITY_LOW)
+                .build();
 
-            notificationManagerCompat.notify(1, notification);
+        notificationManagerCompat.notify(1, notification);
     }
 
     public static void createChannel(Context ctx) {
@@ -199,10 +199,15 @@
             if (notificationManager != null) {
                 notificationManager.createNotificationChannel(channel);
             }
-        }else{
+        } else {
         }
     }
 
+    public static void cancelNotification(Context ctx) {
+        notificationManager = (NotificationManager) ctx.getSystemService(Context.NOTIFICATION_SERVICE);
+        notificationManager.cancel(NOTIFICATION_ID); // Notification ID to cancel
+    }
+
     public static void getLatasteUpdate(Context context) {
         String appURI = "https://play.google.com/store/apps/details?id=com.brainwellnessspa";
         if (BWSApplication.isNetworkConnected(context)) {
Index: app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikePlaylistsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.LikeModule.Fragments;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AudioLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.PlaylistLikeModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.InvoiceModule.Models.InvoiceListModel;\r\nimport com.brainwellnessspa.LikeModule.Activities.PlaylistLikeActivity;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.FragmentLikesBinding;\r\nimport com.brainwellnessspa.databinding.LikeListLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.LikeModule.Activities.PlaylistLikeActivity.RefreshLikePlaylist;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class LikePlaylistsFragment extends Fragment {\r\n    FragmentLikesBinding binding;\r\n    String UserID, AudioFlag;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_likes, container, false);\r\n        View view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getActivity());\r\n        binding.rvLikesList.setLayoutManager(mLayoutManager);\r\n        binding.rvLikesList.setItemAnimator(new DefaultItemAnimator());\r\n        prepareData();\r\n        binding.llError.setVisibility(View.GONE);\r\n        binding.tvFound.setText(\"No result found\");\r\n        return view;\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        if (RefreshLikePlaylist == 1) {\r\n            prepareData();\r\n        }\r\n        prepareData();\r\n    }\r\n\r\n    public void prepareData() {\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n            RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            params.setMargins(13, 9, 13, 190);\r\n            binding.llSpace.setLayoutParams(params);\r\n        } else {\r\n            RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n            params.setMargins(13, 9, 13, 28);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<LikesHistoryModel> listCall = APIClient.getClient().getLikeAudioPlaylistListing(UserID);\r\n            listCall.enqueue(new Callback<LikesHistoryModel>() {\r\n                @Override\r\n                public void onResponse(Call<LikesHistoryModel> call, Response<LikesHistoryModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        LikesHistoryModel listModel = response.body();\r\n                        List<LikesHistoryModel.ResponseData.Playlist> listDataModel = listModel.getResponseData().getPlaylist();\r\n\r\n                        if (listDataModel.size() == 0) {\r\n                            binding.tvFound.setVisibility(View.VISIBLE);\r\n                            binding.llError.setVisibility(View.VISIBLE);\r\n                            binding.rvLikesList.setVisibility(View.GONE);\r\n                        } else {\r\n                            binding.llError.setVisibility(View.GONE);\r\n                            binding.rvLikesList.setVisibility(View.VISIBLE);\r\n                            LikePlaylistsAdapter adapter = new LikePlaylistsAdapter(listModel.getResponseData().getPlaylist(), getActivity());\r\n                            binding.rvLikesList.setAdapter(adapter);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<LikesHistoryModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    public class LikePlaylistsAdapter extends RecyclerView.Adapter<LikePlaylistsAdapter.MyViewHolder> {\r\n        private List<LikesHistoryModel.ResponseData.Playlist> modelList;\r\n        Context ctx;\r\n\r\n        public LikePlaylistsAdapter(List<LikesHistoryModel.ResponseData.Playlist> modelList, Context ctx) {\r\n            this.modelList = modelList;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            LikeListLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.like_list_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            holder.binding.tvTitle.setText(modelList.get(position).getPlaylistName());\r\n            if (modelList.get(position).getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                    modelList.get(position).getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                            modelList.get(position).getTotalhour().equalsIgnoreCase(\"\")\r\n                            && modelList.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                holder.binding.tvTime.setText(\"0 Audio | 0h 0m\");\r\n            } else {\r\n                if (modelList.get(position).getTotalminute().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.tvTime.setText(modelList.get(position).getTotalAudio() + \" Audio | \"\r\n                            + modelList.get(position).getTotalhour() + \"h 0m\");\r\n                } else {\r\n                    holder.binding.tvTime.setText(modelList.get(position).getTotalAudio() +\r\n                            \" Audios | \" + modelList.get(position).getTotalhour() + \"h \" + modelList.get(position).getTotalminute() + \"m\");\r\n                }\r\n            }\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.cvImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.cvImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            Glide.with(ctx).load(modelList.get(position).getPlaylistImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            holder.binding.llMenu.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    Intent i = new Intent(getActivity(), MyPlaylistActivity.class);\r\n                    i.putExtra(\"PlaylistID\", modelList.get(position).getPlaylistId());\r\n                    i.putExtra(\"PlaylistIDImage\", modelList.get(position).getPlaylistImage());\r\n                    i.putExtra(\"Liked\", \"1\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n            holder.binding.llLikes.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    Dialog dialog = new Dialog(ctx);\r\n                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                    dialog.setContentView(R.layout.logout_layout);\r\n                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));\r\n                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                    final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n                    final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                    final Button Btn = dialog.findViewById(R.id.Btn);\r\n                    tvTitle.setText(\"Remove from Liked Playlists?\");\r\n                    tvHeader.setText(modelList.get(position).getPlaylistName());\r\n                    Btn.setText(\"Remove\");\r\n                    tvGoBack.setText(\"Cancel\");\r\n                    dialog.setOnKeyListener((v1, keyCode, event) -> {\r\n                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                            dialog.dismiss();\r\n                        }\r\n                        return false;\r\n                    });\r\n\r\n                    Btn.setOnClickListener(v2 -> {\r\n                        callRemoveLike(modelList.get(position).getPlaylistId());\r\n                        dialog.dismiss();\r\n                    });\r\n                    tvGoBack.setOnClickListener(v3 -> dialog.dismiss());\r\n                    dialog.show();\r\n                    dialog.setCancelable(false);\r\n                }\r\n            });\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    comefrom_search = 4;\r\n                    Bundle bundle = new Bundle();\r\n                    Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    bundle.putString(\"New\", \"\");\r\n                    bundle.putString(\"PlaylistID\", modelList.get(position).getPlaylistId());\r\n                    bundle.putString(\"PlaylistName\", modelList.get(position).getPlaylistName());\r\n                    bundle.putString(\"PlaylistImage\", modelList.get(position).getPlaylistImage());\r\n                    bundle.putString(\"MyDownloads\", \"\");\r\n                    myPlaylistsFragment.setArguments(bundle);\r\n                    fragmentManager1.beginTransaction()\r\n                            .replace(R.id.flContainer, myPlaylistsFragment)\r\n                            .commit();\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return modelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            LikeListLayoutBinding binding;\r\n\r\n            public MyViewHolder(LikeListLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callTransFrag(int position, List<LikesHistoryModel.ResponseData.Playlist.Audiolist> listModelList2) {\r\n        try {\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n\r\n            Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();\r\n\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(listModelList2);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n            editor.commit();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void callRemoveLike(String id) {\r\n        try {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                Call<PlaylistLikeModel> listCall = APIClient.getClient().getPlaylistLike(id, UserID);\r\n                listCall.enqueue(new Callback<PlaylistLikeModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<PlaylistLikeModel> call, Response<PlaylistLikeModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                            PlaylistLikeModel model = response.body();\r\n                            prepareData();\r\n                            BWSApplication.showToast(model.getResponseMessage(), getActivity());\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<PlaylistLikeModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                });\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikePlaylistsFragment.java	(revision f0fec71fa0a936bd6b12bc71015a89e5cd6f0b07)
+++ app/src/main/java/com/brainwellnessspa/LikeModule/Fragments/LikePlaylistsFragment.java	(date 1605068862987)
@@ -78,7 +78,7 @@
         binding.rvLikesList.setItemAnimator(new DefaultItemAnimator());
         prepareData();
         binding.llError.setVisibility(View.GONE);
-        binding.tvFound.setText("No result found");
+        binding.tvFound.setText("Your like playlists will appear here");
         return view;
     }
 
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewQueueActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Activities;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.media.AudioAttributes;\r\nimport android.media.MediaPlayer;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.SystemClock;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.SeekBar;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.ItemTouchHelper;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Models.AppointmentDetailModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SearchBothModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SuggestedModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.ItemMoveCallback;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.StartDragListener;\r\nimport com.brainwellnessspa.databinding.ActivityViewQueueBinding;\r\nimport com.brainwellnessspa.databinding.QueueListLayoutBinding;\r\n\r\nimport java.io.FileDescriptor;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Random;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.addToRecentPlayId;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.SeekTo;\r\nimport static com.brainwellnessspa.Utility.MusicService.getEndTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPlaying;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isprogressbar;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.progressToTimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.savePrefQueue;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class ViewQueueActivity extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener,/* AudioManager.OnAudioFocusChangeListener,*/ StartDragListener {\r\n    ActivityViewQueueBinding binding;\r\n    int position, listSize, startTime = 0;\r\n    String IsRepeat, IsShuffle, id, AudioId = \"\", ComeFromQueue = \"\", play = \"\", url, name, StrigRemoveName;\r\n    Context ctx;\r\n    Activity activity;\r\n    ArrayList<MainPlayModel> mainPlayModelList;\r\n    ArrayList<AddToQueueModel> addToQueueModelList, addToQueueModelList2;\r\n    ArrayList<AddToQueueModel> addToQueueModeNowPlaying;\r\n    SharedPreferences shared;\r\n    Boolean queuePlay, audioPlay;\r\n    QueueAdapter adapter;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList;\r\n    ItemTouchHelper touchHelper;\r\n    int mypos = 0, myCount;\r\n    long totalDuration, currentDuration, myProgress = 0, diff = 0;\r\n    private long mLastClickTime = 0;\r\n    private Handler handler;\r\n    boolean addSong = false;\r\n    //    private AudioManager mAudioManager;\r\n    private Runnable UpdateSongTime = new Runnable() {\r\n        @Override\r\n        public void run() {\r\n            startTime = getStartTime();\r\n            Time t = Time.valueOf(\"00:00:00\");\r\n            if (queuePlay) {\r\n                if (listSize != 0) {\r\n                    if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                        }\r\n                    } else {\r\n                        if (mediaPlayer != null) {\r\n                            totalDuration = mediaPlayer.getDuration();\r\n                        } else {\r\n                            t = Time.valueOf(\"00:\" + addToQueueModelList.get(position).getAudioDuration());\r\n                        }\r\n                    }\r\n                } else {\r\n                    stopMedia();\r\n                }\r\n            } else if (audioPlay) {\r\n                if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else {\r\n                        t = Time.valueOf(\"00:\" + downloadAudioDetailsList.get(0).getAudioDuration());\r\n                    }\r\n                } else {\r\n                    if (mediaPlayer != null) {\r\n                        totalDuration = mediaPlayer.getDuration();\r\n                    } else {\r\n                        t = Time.valueOf(\"00:\" + mainPlayModelList.get(position).getAudioDuration());\r\n                    }\r\n                }\r\n            }\r\n            if (!BWSApplication.isNetworkConnected(ctx)) {\r\n                totalDuration = mediaPlayer.getDuration();\r\n            } else {\r\n                if (mediaPlayer != null) {\r\n                    totalDuration = mediaPlayer.getDuration();\r\n                } else {\r\n                    totalDuration = t.getTime();\r\n                }\r\n            }\r\n            myProgress = currentDuration;\r\n            currentDuration = getStartTime();\r\n            diff = totalDuration - myProgress;\r\n            Log.e(\"myProgress old!!!\", String.valueOf(myProgress));\r\n            if (myProgress == currentDuration && myProgress != 0 && !isPause && diff < 500) {\r\n                Log.e(\"myProgress\", String.valueOf(myProgress));\r\n                myCount++;\r\n                Log.e(\"myCount\", String.valueOf(myCount));\r\n\r\n                if (myCount == 10) {\r\n                    Log.e(\"myCount complete\", String.valueOf(myCount));\r\n                    callComplete();\r\n                    myCount = 0;\r\n                }\r\n            }\r\n            int progress = getProgressPercentage(currentDuration, totalDuration);\r\n            if (currentDuration == 0 && isCompleteStop) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n            } else if (currentDuration == 0 && isprogressbar) {\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n            } else if (currentDuration > 1 && !isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                isprogressbar = false;\r\n            } else if (currentDuration >= 1 && isPause) {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                isprogressbar = false;\r\n            }\r\n\r\n            if (isPause) {\r\n                binding.simpleSeekbar.setProgress(oTime);\r\n            } else {\r\n                binding.simpleSeekbar.setProgress(progress);\r\n            }\r\n            binding.simpleSeekbar.setMax(100);\r\n            handler.postDelayed(this, 500);\r\n        }\r\n    };\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        binding = DataBindingUtil.setContentView(this, R.layout.activity_view_queue);\r\n        ctx = ViewQueueActivity.this;\r\n        activity = ViewQueueActivity.this;\r\n\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        if (getIntent().getExtras() != null) {\r\n            AudioId = getIntent().getStringExtra(CONSTANTS.ID);\r\n        }\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            ComeFromQueue = getIntent().getStringExtra(\"ComeFromQueue\");\r\n        }\r\n        if (getIntent().getExtras() != null) {\r\n            play = getIntent().getStringExtra(\"play\");\r\n        }\r\n        handler = new Handler();\r\n        addToQueueModelList = new ArrayList<>();\r\n        addToQueueModelList2 = new ArrayList<>();\r\n\r\n        mainPlayModelList = new ArrayList<>();\r\n        shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        Gson gson = new Gson();\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n\r\n        if (!json.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json, type);\r\n            addToQueueModelList2 = gson.fromJson(json, type);\r\n        }\r\n        String json2 = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        Type type2 = new TypeToken<ArrayList<MainPlayModel>>() {\r\n        }.getType();\r\n        mainPlayModelList = gson.fromJson(json2, type2);\r\n        SharedPreferences Status = getSharedPreferences(CONSTANTS.PREF_KEY_Status, Context.MODE_PRIVATE);\r\n        IsRepeat = Status.getString(CONSTANTS.PREF_KEY_IsRepeat, \"\");\r\n        IsShuffle = Status.getString(CONSTANTS.PREF_KEY_IsShuffle, \"\");\r\n/*        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\r\n        mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,\r\n                AudioManager.AUDIOFOCUS_GAIN);*/\r\n        binding.rvQueueList.setFocusable(false);\r\n//        binding.nestedScroll.requestFocus();\r\n\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n\r\n        binding.llBack.setOnClickListener(view -> {\r\n            if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {\r\n                return;\r\n            }\r\n            mLastClickTime = SystemClock.elapsedRealtime();\r\n            callBack();\r\n        });\r\n\r\n        getPrepareShowData(position);\r\n        binding.simpleSeekbar.setOnSeekBarChangeListener(this);\r\n        callAdapterMethod();\r\n        binding.llNowPlaying.setOnClickListener(view -> {\r\n            handler.removeCallbacks(UpdateSongTime);\r\n            if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n                isPause = false;\r\n            }\r\n            if (ComeFromQueue.equalsIgnoreCase(\"1\")) {\r\n                SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson2 = new Gson();\r\n                String json22 = gson2.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json22);\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                editor.commit();\r\n                Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                startActivity(i);\r\n                finish();\r\n            } else {\r\n                SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson2 = new Gson();\r\n                String json22 = gson2.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json22);\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                editor.commit();\r\n                Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                startActivity(i);\r\n                finish();\r\n            }\r\n\r\n        });\r\n\r\n        binding.llPause.setOnClickListener(view -> {\r\n            handler.removeCallbacks(UpdateSongTime);\r\n            binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());\r\n            pauseMedia();\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n            oTime = binding.simpleSeekbar.getProgress();\r\n        });\r\n\r\n        binding.llPlay.setOnClickListener(view -> {\r\n            if (!isMediaStart) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler.postDelayed(UpdateSongTime, 500);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                callMedia();\r\n            } else if (isCompleteStop) {\r\n                isCompleteStop = false;\r\n                isprogressbar = true;\r\n                handler.postDelayed(UpdateSongTime, 500);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                callMedia();\r\n            } else {\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                resumeMedia();\r\n                isPause = false;\r\n                handler.postDelayed(UpdateSongTime, 500);\r\n            }\r\n        });\r\n\r\n        binding.llnext.setOnClickListener(view -> {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                stopMedia();\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n                isPause = false;\r\n                if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    // repeat is on play same song again\r\n                    if (position < listSize - 1) {\r\n                        position = position + 1;\r\n                    } else {\r\n                        position = 0;\r\n                    }\r\n                    getPrepareShowData(position);\r\n                } /*else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    getPrepareShowData(position);\r\n                } */ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                    // shuffle is on - play a random song\r\n                    if (queuePlay) {\r\n                        adapter.callRemoveList(position, \"1\");\r\n                        listSize = addToQueueModelList.size();\r\n                        if (listSize == 0) {\r\n                            stopMedia();\r\n                        } else if (listSize == 1) {\r\n                            stopMedia();\r\n                        } else {\r\n                            Random random = new Random();\r\n                            position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    } else {\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    if (queuePlay) {\r\n                        adapter.callRemoveList(position, \"1\");\r\n                        listSize = addToQueueModelList.size();\r\n                        if (position < listSize - 1) {\r\n                            getPrepareShowData(position);\r\n                        } else {\r\n                            if (listSize == 0) {\r\n                                savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                                stopMedia();\r\n                            } else {\r\n                                position = 0;\r\n                                getPrepareShowData(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (position < listSize - 1) {\r\n                            position = position + 1;\r\n                            getPrepareShowData(position);\r\n                        } else if (listSize != 1) {\r\n                            position = 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        });\r\n\r\n        binding.llprev.setOnClickListener(view -> {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                stopMedia();\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n                isPause = false;\r\n                if (IsRepeat.equalsIgnoreCase(\"1\") || IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    // repeat is on play same song again\r\n                    if (position > 0) {\r\n                        position = position - 1;\r\n                        getPrepareShowData(position);\r\n                    } else if (listSize != 1) {\r\n                        position = listSize - 1;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }/* else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                    getPrepareShowData(position);\r\n                } */ else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                    // shuffle is on - play a random song\r\n                    if (queuePlay) {\r\n                        adapter.callRemoveList(position, \"1\");\r\n                        listSize = addToQueueModelList.size();\r\n                        if (listSize == 0) {\r\n                            stopMedia();\r\n                        } else if (listSize == 1) {\r\n                            stopMedia();\r\n                        } else {\r\n                            Random random = new Random();\r\n                            position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    } else {\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    if (queuePlay) {\r\n                        adapter.callRemoveList(position, \"1\");\r\n                        listSize = addToQueueModelList.size();\r\n                        if (position > 0) {\r\n                            getPrepareShowData(position - 1);\r\n                        } else {\r\n                            if (listSize == 0) {\r\n                                savePrefQueue(0, false, true, addToQueueModelList, ctx);\r\n                                stopMedia();\r\n                            } else {\r\n                                position = 0;\r\n                                getPrepareShowData(position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (position > 0) {\r\n                            position = position - 1;\r\n\r\n                            getPrepareShowData(position);\r\n                        } else if (listSize != 1) {\r\n                            position = listSize - 1;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callAdapterMethod() {\r\n        if (addToQueueModelList.size() != 0) {\r\n            if (queuePlay) {\r\n                if (addToQueueModelList.get(position).getName().equalsIgnoreCase(binding.tvName.getText().toString())) {\r\n                    mypos = position;\r\n                    StrigRemoveName = addToQueueModelList.get(position).getName();\r\n                    addToQueueModelList2.remove(position);\r\n                }\r\n            }\r\n            adapter = new QueueAdapter(addToQueueModelList2, ctx, this);\r\n            RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(ctx);\r\n            binding.rvQueueList.setLayoutManager(mLayoutManager);\r\n            binding.rvQueueList.setItemAnimator(new DefaultItemAnimator());\r\n            ItemTouchHelper.Callback callback =\r\n                    new ItemMoveCallback(adapter);\r\n            touchHelper = new ItemTouchHelper(callback);\r\n            touchHelper.attachToRecyclerView(binding.rvQueueList);\r\n            binding.rvQueueList.setAdapter(adapter);\r\n        }\r\n    }\r\n\r\n    public void GetMedia(String url, Context ctx, String PlaylistId) {\r\n\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(url);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (isPause) {\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.simpleSeekbar.setProgress(oTime);\r\n//                    resumeMedia();\r\n                } else if (isCompleteStop) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                } else if ((isMediaStart || isPlaying()) && !isPause) {\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                } else {\r\n                    callMedia();\r\n                }\r\n                super.onPostExecute(aVoid);\r\n\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void getPrepareShowData(int position) {\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        if (audioPlay) {\r\n            listSize = mainPlayModelList.size();\r\n        } else if (queuePlay) {\r\n            listSize = addToQueueModelList.size();\r\n        }\r\n\r\n        if (listSize == 1) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setEnabled(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            position = 0;\r\n        }/* else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setClickable(false);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setClickable(false);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        } */ else {\r\n            binding.llnext.setEnabled(true);\r\n            binding.llnext.setEnabled(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.llprev.setClickable(true);\r\n            binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n        }\r\n        BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n        if (audioPlay) {\r\n            id = mainPlayModelList.get(position).getID();\r\n            url = mainPlayModelList.get(position).getAudioFile();\r\n            name = mainPlayModelList.get(position).getName();\r\n            setInIt(mainPlayModelList.get(position).getName(), mainPlayModelList.get(position).getAudiomastercat(),\r\n                    mainPlayModelList.get(position).getImageFile(), mainPlayModelList.get(position).getAudioDuration());\r\n            GetMedia(url, ctx, mainPlayModelList.get(position).getPlaylistID());\r\n        } else if (queuePlay) {\r\n            if (listSize == 1) {\r\n                position = 0;\r\n            }\r\n            id = addToQueueModelList.get(position).getID();\r\n            url = addToQueueModelList.get(position).getAudioFile();\r\n            name = addToQueueModelList.get(position).getName();\r\n            setInIt(addToQueueModelList.get(position).getName(), addToQueueModelList.get(position).getAudiomastercat(),\r\n                    addToQueueModelList.get(position).getImageFile(), addToQueueModelList.get(position).getAudioDuration());\r\n            GetMedia(url, ctx, addToQueueModelList.get(position).getPlaylistID());\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson2 = new Gson();\r\n            String json3 = gson2.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json3);\r\n            editor.commit();\r\n            startTime = getStartTime();\r\n        }\r\n        if (!url.equalsIgnoreCase(\"\")) {\r\n            if (!id.equalsIgnoreCase(addToRecentPlayId)) {\r\n                addToRecentPlay();\r\n                Log.e(\"Api call recent\", id);\r\n            }\r\n        }\r\n        addToRecentPlayId = id;\r\n        binding.simpleSeekbar.setClickable(true);\r\n        handler.postDelayed(UpdateSongTime, 500);\r\n\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.commit();\r\n        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n\r\n        if (/*currentDuration == totalDuration && currentDuration != 0 && !isStop */isMediaStart && !url.equalsIgnoreCase(\"\")) {\r\n            mediaPlayer.setOnCompletionListener(mediaPlayer -> {\r\n                callComplete();\r\n                Log.e(\"calll complete trans\", \"trans\");\r\n            });\r\n        }\r\n    }\r\n\r\n    private void setMediaPlayer(String download, FileDescriptor fileDescriptor) {\r\n        if (null == mediaPlayer) {\r\n            mediaPlayer = new MediaPlayer();\r\n            Log.e(\"Playinggggg\", \"Playinggggg\");\r\n        }\r\n        try {\r\n            if (mediaPlayer == null)\r\n                mediaPlayer = new MediaPlayer();\r\n            if (mediaPlayer.isPlaying()) {\r\n                Log.e(\"Playinggggg\", \"stoppppp\");\r\n                mediaPlayer.stop();\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n            }\r\n            mediaPlayer = new MediaPlayer();\r\n            if (download.equalsIgnoreCase(\"1\")) {\r\n                mediaPlayer.setDataSource(fileDescriptor);\r\n            } else {\r\n                mediaPlayer.setDataSource(url);\r\n            }\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                mediaPlayer.setAudioAttributes(\r\n                        new AudioAttributes\r\n                                .Builder()\r\n                                .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)\r\n                                .build());\r\n            }\r\n            mediaPlayer.prepareAsync();\r\n            isPrepare = true;\r\n        } catch (IllegalStateException | IOException e) {\r\n            FileDescriptor fileDescriptor1 = null;\r\n            setMediaPlayer(\"0\", fileDescriptor1);\r\n            e.printStackTrace();\r\n        }\r\n        if (!mediaPlayer.isPlaying()) {\r\n            mediaPlayer.setOnPreparedListener(mp -> {\r\n                Log.e(\"Playinggggg\", \"Startinggg\");\r\n                mediaPlayer.start();\r\n                isMediaStart = true;\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n            });\r\n        }\r\n    }\r\n\r\n    private void callMedia() {\r\n        FileDescriptor fileDescriptor = null;\r\n        if (downloadAudioDetailsList.size() != 0) {\r\n            binding.llProgressBar.setVisibility(View.VISIBLE);\r\n            binding.progressBar.setVisibility(View.VISIBLE);\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            DownloadMedia downloadMedia = new DownloadMedia(getApplicationContext());\r\n\r\n            try {\r\n                byte[] decrypt = null;\r\n                decrypt = downloadMedia.decrypt(name);\r\n                if (decrypt != null) {\r\n                    binding.llProgressBar.setVisibility(View.GONE);\r\n                    binding.progressBar.setVisibility(View.GONE);\r\n                    binding.llPause.setVisibility(View.VISIBLE);\r\n                    binding.llPlay.setVisibility(View.GONE);\r\n                    fileDescriptor = FileUtils.getTempFileDescriptor(getApplicationContext(), decrypt);\r\n                    setMediaPlayer(\"1\", fileDescriptor);\r\n                } else {\r\n                    if (BWSApplication.isNetworkConnected(ctx)) {\r\n                        setMediaPlayer(\"0\", fileDescriptor);\r\n                    } else {\r\n                        binding.progressBar.setVisibility(View.GONE);\r\n                        binding.llProgressBar.setVisibility(View.GONE);\r\n                        binding.llPlay.setVisibility(View.VISIBLE);\r\n                        binding.llPause.setVisibility(View.GONE);\r\n                        BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                    }\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                binding.llProgressBar.setVisibility(View.VISIBLE);\r\n                binding.progressBar.setVisibility(View.VISIBLE);\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                setMediaPlayer(\"0\", fileDescriptor);\r\n            } else {\r\n                binding.progressBar.setVisibility(View.GONE);\r\n                binding.llProgressBar.setVisibility(View.GONE);\r\n                binding.llPlay.setVisibility(View.VISIBLE);\r\n                binding.llPause.setVisibility(View.GONE);\r\n                BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callComplete() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        isPrepare = false;\r\n        isMediaStart = false;\r\n        isPause = false;\r\n        if (audioPlay && (url.equalsIgnoreCase(\"\") || url.isEmpty())) {\r\n            isDisclaimer = 0;\r\n            removeArray();\r\n        } else {\r\n            if (IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                if (position < (listSize - 1)) {\r\n                    position = position + 1;\r\n                } else {\r\n                    position = 0;\r\n                }\r\n                getPrepareShowData(position);\r\n            } else if (IsRepeat.equalsIgnoreCase(\"0\")) {\r\n                getPrepareShowData(position);\r\n            } else if (IsShuffle.equalsIgnoreCase(\"1\")) {\r\n                // shuffle is on - play a random song\r\n                if (queuePlay) {\r\n                    adapter.callRemoveList(position, \"1\");\r\n                    listSize = addToQueueModelList.size();\r\n                    if (listSize == 0) {\r\n                        stopMedia();\r\n                    } else if (listSize == 1) {\r\n                        position = 0;\r\n                        getPrepareShowData(position);\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    }\r\n                } else {\r\n                    if (listSize == 1) {\r\n\r\n                    } else {\r\n                        int oldPosition = position;\r\n                        Random random = new Random();\r\n                        position = random.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        if (oldPosition == position) {\r\n                            Random random1 = new Random();\r\n                            position = random1.nextInt((listSize - 1) - 0 + 1) + 0;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    }\r\n                }\r\n            } else {\r\n                if (queuePlay) {\r\n                    adapter.callRemoveList(position, \"1\");\r\n                    listSize = addToQueueModelList.size();\r\n                    if (position < listSize - 1) {\r\n                        getPrepareShowData(position);\r\n                    } else {\r\n                        if (listSize == 0) {\r\n                            stopMedia();\r\n                        } else {\r\n                            position = 0;\r\n                            getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (position < (listSize - 1)) {\r\n                        int oldPosition = position;\r\n                        position = position + 1;\r\n                        if (oldPosition == position) {\r\n                            position++;\r\n                        }\r\n                        getPrepareShowData(position);\r\n                    } else {\r\n                        if (listSize == 1) {\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            stopMedia();\r\n                        } else {\r\n                            binding.llPlay.setVisibility(View.VISIBLE);\r\n                            binding.llPause.setVisibility(View.GONE);\r\n                            stopMedia();\r\n//                        position = 0;\r\n//                        getPrepareShowData(position);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (listSize == 1) {\r\n                binding.llnext.setEnabled(false);\r\n                binding.llnext.setEnabled(false);\r\n                binding.llprev.setClickable(false);\r\n                binding.llprev.setClickable(false);\r\n                binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                position = 0;\r\n            } /*else if (position == listSize - 1 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llnext.setEnabled(false);\r\n                binding.llnext.setClickable(false);\r\n                binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else if (position == 0 && IsRepeat.equalsIgnoreCase(\"1\")) {\r\n                binding.llprev.setEnabled(false);\r\n                binding.llprev.setClickable(false);\r\n                binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.extra_light_blue), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }*/ else {\r\n                binding.llnext.setEnabled(true);\r\n                binding.llnext.setEnabled(true);\r\n                binding.llprev.setClickable(true);\r\n                binding.llprev.setClickable(true);\r\n                binding.ivnext.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n                binding.ivprev.setColorFilter(ContextCompat.getColor(ctx, R.color.white), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n        }\r\n    } private void removeArray() {\r\n        SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n       String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        Gson gson = new Gson();\r\n        String json1 = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        mainPlayModelList = new ArrayList<>();\r\n        MainPlayModel mainPlayModel;\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json1, type);\r\n\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(0);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json1, type);\r\n            if (arrayList.get(position).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                arrayList.remove(position);\r\n            }\r\n            for (int i = 0; i < arrayList.size(); i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n        }\r\n        MakeArray();\r\n    }\r\n\r\n    private void MakeArray() {\r\n        Gson gson = new Gson();\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        String json = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));\r\n        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        MainPlayModel mainPlayModel;\r\n        mainPlayModelList = new ArrayList<>();\r\n        position = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n        String json2 = shared.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n        if (!json2.equalsIgnoreCase(String.valueOf(gson))) {\r\n            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n            }.getType();\r\n            addToQueueModelList = gson.fromJson(json2, type1);\r\n        }\r\n        queuePlay = shared.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        if (AudioFlag.equalsIgnoreCase(\"MainAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<MainAudioModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<MainAudioModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n\r\n        } else if (AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<ViewAllAudioListModel.ResponseData.Detail>>() {\r\n            }.getType();\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SuggestedModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SuggestedModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SearchModelAudio\")) {\r\n            Type type = new TypeToken<ArrayList<SearchBothModel.ResponseData>>() {\r\n            }.getType();\r\n            ArrayList<SearchBothModel.ResponseData> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n            Type type = new TypeToken<ArrayList<AppointmentDetailModel.Audio>>() {\r\n            }.getType();\r\n            ArrayList<AppointmentDetailModel.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"LikeAudioList\")) {\r\n            Type type = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            ArrayList<LikesHistoryModel.ResponseData.Audio> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n            for (int i = 0; i < listSize; i++) {\r\n\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"Downloadlist\")) {\r\n            Type type = new TypeToken<ArrayList<DownloadAudioDetails>>() {\r\n            }.getType();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistId());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"TopCategories\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(\"\");\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        } else if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n            Type type = new TypeToken<ArrayList<SubPlayListModel.ResponseData.PlaylistSong>>() {\r\n            }.getType();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> arrayList = gson.fromJson(json, type);\r\n            listSize = arrayList.size();\r\n//            if (isDisclaimer == 0 && disclaimerPlayed == 0) {\r\n//                addDeclaimer();\r\n//            }\r\n            for (int i = 0; i < listSize; i++) {\r\n                mainPlayModel = new MainPlayModel();\r\n                mainPlayModel.setID(arrayList.get(i).getID());\r\n                mainPlayModel.setName(arrayList.get(i).getName());\r\n                mainPlayModel.setAudioFile(arrayList.get(i).getAudioFile());\r\n                mainPlayModel.setPlaylistID(arrayList.get(i).getPlaylistID());\r\n                mainPlayModel.setAudioDirection(arrayList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(arrayList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(arrayList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(arrayList.get(i).getImageFile());\r\n                mainPlayModel.setLike(arrayList.get(i).getLike());\r\n                mainPlayModel.setDownload(arrayList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(arrayList.get(i).getAudioDuration());\r\n                mainPlayModelList.add(mainPlayModel);\r\n            }\r\n            SharedPreferences sharedz = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedz.edit();\r\n            Gson gsonz = new Gson();\r\n            String json1 = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n            String jsonz = gsonz.toJson(mainPlayModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonz);\r\n            editor.commit();\r\n            getPrepareShowData(position);\r\n        }\r\n    }\r\n\r\n    private void setInIt(String name, String audiomastercat, String imageFile, String audioDuration) {\r\n        binding.tvTitle.setText(name);\r\n        binding.tvName.setText(name);\r\n        binding.tvCategory.setText(audiomastercat);\r\n        if (url.equalsIgnoreCase(\"\")) {\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.135f, 0);\r\n            binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(R.drawable.disclaimer).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n        } else {\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.14f, 0);\r\n            binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(imageFile).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivRestaurantImage);\r\n        }\r\n        if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n            isDisclaimer = 1;\r\n            callAllDisable(false);\r\n\r\n        } else {\r\n            isDisclaimer = 0;\r\n            callAllDisable(true);\r\n        }\r\n        binding.tvTime.setText(audioDuration);\r\n    }\r\n\r\n    private void addToRecentPlay() {\r\n        SharedPreferences shared1 = getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        String UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n\r\n        if (BWSApplication.isNetworkConnected(ctx)) {\r\n            BWSApplication.showProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n            Call<SucessModel> listCall = APIClient.getClient().getRecentlyplayed(id, UserID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                        SucessModel model = response.body();\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.pbProgressBar, binding.progressBarHolder, activity);\r\n                }\r\n            });\r\n        } else {\r\n//            BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n        }\r\n    }\r\n\r\n    private void callBack() {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        if (ComeFromQueue.equalsIgnoreCase(\"1\")) {\r\n            Intent i = new Intent(ctx, AddQueueActivity.class);\r\n            i.putExtra(\"ID\", AudioId);\r\n            i.putExtra(\"play\", play);\r\n            startActivity(i);\r\n            finish();\r\n        } else if (ComeFromQueue.equalsIgnoreCase(\"0\") ||\r\n                ComeFromQueue.equalsIgnoreCase(\"\")) {\r\n            if (binding.llPause.getVisibility() == View.VISIBLE) {\r\n                isPause = false;\r\n            }\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            startActivity(i);\r\n            finish();\r\n        }\r\n    }\r\n\r\n    private void callAllDisable(boolean b) {\r\n        if (b) {\r\n            binding.llnext.setClickable(true);\r\n            binding.llnext.setEnabled(true);\r\n            binding.llnext.setAlpha(1f);\r\n            binding.llprev.setClickable(true);\r\n            binding.llprev.setEnabled(true);\r\n            binding.llprev.setAlpha(1f);\r\n            binding.simpleSeekbar.setClickable(true);\r\n            binding.simpleSeekbar.setEnabled(true);\r\n//            binding.simpleSeekbar.set\r\n        } else {\r\n            binding.llnext.setClickable(false);\r\n            binding.llnext.setEnabled(false);\r\n            binding.llnext.setAlpha(0.6f);\r\n            binding.llprev.setClickable(false);\r\n            binding.llprev.setEnabled(false);\r\n            binding.llprev.setAlpha(0.6f);\r\n            binding.simpleSeekbar.setClickable(false);\r\n            binding.simpleSeekbar.setEnabled(false);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n   /*     if (isPrepare && !isMediaStart) {\r\n            callMedia();\r\n        } else if ((isMediaStart || isPlaying()) && !isPause) {\r\n            binding.llPlay.setVisibility(View.GONE);\r\n            binding.llPause.setVisibility(View.VISIBLE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        } else {\r\n            binding.llPlay.setVisibility(View.VISIBLE);\r\n            binding.llPause.setVisibility(View.GONE);\r\n            binding.llProgressBar.setVisibility(View.GONE);\r\n            binding.progressBar.setVisibility(View.GONE);\r\n        }*/\r\n        if (url.equalsIgnoreCase(\"\") || url.isEmpty()) {\r\n            isDisclaimer = 1;\r\n            callAllDisable(false);\r\n\r\n        } else {\r\n            isDisclaimer = 0;\r\n            callAllDisable(true);\r\n        }\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        callBack();\r\n        super.onBackPressed();\r\n    }\r\n\r\n    public void updateProgressBar() {\r\n        handler.postDelayed(UpdateSongTime, 500);\r\n    }\r\n\r\n    @Override\r\n    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {\r\n     /*   handler.removeCallbacks(UpdateSongTime);\r\n        if (isMediaStart) {\r\n            int totalDuration = getEndTime();\r\n            int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n            // forward or backward to certain seconds\r\n            SeekTo(currentPosition);\r\n        }\r\n        // update timer progress again\r\n        updateProgressBar();*/\r\n    }\r\n\r\n    @Override\r\n    public void onStartTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onStopTrackingTouch(SeekBar seekBar) {\r\n        handler.removeCallbacks(UpdateSongTime);\r\n        int totalDuration = getEndTime();\r\n\r\n        int currentPosition = progressToTimer(seekBar.getProgress(), totalDuration);\r\n\r\n        oTime = binding.simpleSeekbar.getProgress();\r\n        // forward or backward to certain seconds\r\n        SeekTo(currentPosition);\r\n        // update timer progress again\r\n        updateProgressBar();\r\n    }\r\n\r\n    @Override\r\n    public void requestDrag(RecyclerView.ViewHolder viewHolder) {\r\n        touchHelper.startDrag(viewHolder);\r\n    }\r\n\r\n /*   @Override\r\n    public void onAudioFocusChange(int i) {\r\n        switch (i) {\r\n            case AudioManager.AUDIOFOCUS_GAIN:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:\r\n                // Resume your media player here\r\n                resumeMedia();\r\n                binding.llPlay.setVisibility(View.GONE);\r\n                binding.llPause.setVisibility(View.VISIBLE);\r\n                break;\r\n            case AudioManager.AUDIOFOCUS_LOSS:\r\n            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:\r\n                if (isMediaStart) {\r\n                    pauseMedia();\r\n                    binding.llPlay.setVisibility(View.VISIBLE);\r\n                    binding.llPause.setVisibility(View.GONE);\r\n                }\r\n//                MusicService.pauseMedia();// Pause your media player here\r\n                break;\r\n        }\r\n    }*/\r\n\r\n    public class QueueAdapter extends RecyclerView.Adapter<QueueAdapter.MyViewHolder> implements ItemMoveCallback.ItemTouchHelperContract {\r\n        ArrayList<AddToQueueModel> listModelList;\r\n        Context ctx;\r\n        StartDragListener startDragListener;\r\n\r\n        public QueueAdapter(ArrayList<AddToQueueModel> listModelList, Context ctx, StartDragListener startDragListener) {\r\n            this.listModelList = listModelList;\r\n            this.ctx = ctx;\r\n            this.startDragListener = startDragListener;\r\n\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            QueueListLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.queue_list_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position1) {\r\n            AddToQueueModel listModel = listModelList.get(position1);\r\n\r\n            holder.binding.tvTitle.setText(listModel.getName());\r\n            holder.binding.tvTime.setText(listModel.getAudioDuration());\r\n            binding.tvCategory.setText(listModel.getAudiomastercat());\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(listModel.getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            holder.binding.llRemove.setOnClickListener(view -> callRemoveList(position1, \"0\"));\r\n            holder.binding.llSort.setOnTouchListener((v, event) -> {\r\n                if (event.getAction() ==\r\n                        MotionEvent.ACTION_DOWN) {\r\n                    startDragListener.requestDrag(holder);\r\n                }\r\n                if (event.getAction() ==\r\n                        MotionEvent.ACTION_UP) {\r\n                    startDragListener.requestDrag(holder);\r\n                }\r\n                return false;\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                if (BWSApplication.isNetworkConnected(ctx)) {\r\n                    if (isPrepare || isMediaStart || isPause) {\r\n                        stopMedia();\r\n                    }\r\n                    isPause = false;\r\n                    isPrepare = false;\r\n                    isMediaStart = false;\r\n\r\n                    setInIt(listModel.getName(), listModel.getAudiomastercat(),\r\n                            listModel.getImageFile(), listModel.getAudioDuration());\r\n                    if (queuePlay) {\r\n                        for (int i = 0; i < addToQueueModelList.size(); i++) {\r\n                            if (addToQueueModelList.get(i).getName().equalsIgnoreCase(StrigRemoveName)) {\r\n                                addToQueueModelList.remove(i);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    savePrefQueue(position1, true, false, addToQueueModelList, ctx);\r\n                    position = position1;\r\n                    getPrepareShowData(position);\r\n                    callRemoveList1(position1);\r\n                } else {\r\n                    BWSApplication.showToast(getString(R.string.no_server_found), ctx);\r\n                }\r\n            });\r\n        }\r\n\r\n        public void callRemoveList1(int position) {\r\n            listModelList.remove(position);\r\n            notifyItemRemoved(position);\r\n        }\r\n\r\n        public void callRemoveList(int position1, String s) {\r\n            for (int i = 0; i < addToQueueModelList.size(); i++) {\r\n                if (addToQueueModelList.get(i).getName().equalsIgnoreCase(binding.tvName.getText().toString())) {\r\n                    addToQueueModelList.remove(i);\r\n                    break;\r\n                }\r\n            }\r\n//            if(s.equalsIgnoreCase(\"1\")) {\r\n//                setInIt(listModelList.get(position).getName(), listModelList.get(position).getAudiomastercat(),\r\n//                        listModelList.get(position).getImageFile(), listModelList.get(position).getAudioDuration());\r\n//            }\r\n            if (position1 == listModelList.size()) {\r\n                position1 = position1 - 1;\r\n            }\r\n            listModelList.remove(position1);\r\n       /*     for (int i = 0; i < addToQueueModelList.size(); i++) {\r\n                if (addToQueueModelList.get(i).getName().equalsIgnoreCase(Name))\r\n                    addToQueueModelList.remove(i);\r\n            }*/\r\n\r\n            notifyItemRemoved(position1);\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();\r\n            if (s.equalsIgnoreCase(\"0\")) {\r\n                BWSApplication.showToast(\"Removed from the queue\", ctx);\r\n            }\r\n            addToQueueModelList2 = listModelList;\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        @Override\r\n        public void onRowMoved(int fromPosition, int toPosition) {\r\n            if (fromPosition < toPosition) {\r\n                for (int i = fromPosition; i < toPosition; i++) {\r\n                    Collections.swap(listModelList, i, i + 1);\r\n                }\r\n            } else {\r\n                for (int i = fromPosition; i > toPosition; i--) {\r\n                    Collections.swap(listModelList, i, i - 1);\r\n                }\r\n            }\r\n            notifyItemMoved(fromPosition, toPosition);\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = \"\";\r\n            if (queuePlay && !addSong) {\r\n                ArrayList<AddToQueueModel> listModelList1 = new ArrayList<>();\r\n                listModelList1.clear();\r\n                listModelList1 = new ArrayList<>();\r\n                listModelList1.addAll(listModelList);\r\n                listModelList1.add(addToQueueModelList.get(mypos));\r\n                addSong = true;\r\n                json = gson.toJson(listModelList1);\r\n            } else {\r\n                json = gson.toJson(listModelList);\r\n            }\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();\r\n            addToQueueModelList2 = listModelList;\r\n        }\r\n\r\n        @Override\r\n        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) { }\r\n\r\n        @Override\r\n        public void onRowClear(RecyclerView.ViewHolder myViewHolder) { }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            QueueListLayoutBinding binding;\r\n\r\n            public MyViewHolder(QueueListLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewQueueActivity.java	(revision f0fec71fa0a936bd6b12bc71015a89e5cd6f0b07)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Activities/ViewQueueActivity.java	(date 1605068231031)
@@ -1,8 +1,10 @@
 package com.brainwellnessspa.DashboardModule.Activities;
 
 import android.app.Activity;
+import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.content.SharedPreferences;
 import android.media.AudioAttributes;
 import android.media.MediaPlayer;
@@ -35,6 +37,8 @@
 import com.brainwellnessspa.DashboardModule.Models.SuggestedModel;
 import com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;
 import com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;
+import com.brainwellnessspa.Services.OnClearFromRecentService;
+import com.brainwellnessspa.Utility.Playable;
 import com.bumptech.glide.Glide;
 import com.bumptech.glide.load.engine.DiskCacheStrategy;
 import com.google.gson.Gson;
@@ -91,7 +95,7 @@
 import static com.brainwellnessspa.Utility.MusicService.savePrefQueue;
 import static com.brainwellnessspa.Utility.MusicService.stopMedia;
 
-public class ViewQueueActivity extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener,/* AudioManager.OnAudioFocusChangeListener,*/ StartDragListener {
+public class ViewQueueActivity extends AppCompatActivity implements SeekBar.OnSeekBarChangeListener,/* AudioManager.OnAudioFocusChangeListener,*/ StartDragListener/*, Playable */{
     ActivityViewQueueBinding binding;
     int position, listSize, startTime = 0;
     String IsRepeat, IsShuffle, id, AudioId = "", ComeFromQueue = "", play = "", url, name, StrigRemoveName;
@@ -110,6 +114,8 @@
     private long mLastClickTime = 0;
     private Handler handler;
     boolean addSong = false;
+//    boolean isPlaying = false;
+//    BroadcastReceiver broadcastReceiver;
     //    private AudioManager mAudioManager;
     private Runnable UpdateSongTime = new Runnable() {
         @Override
@@ -208,7 +214,6 @@
         }
     };
 
-
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -268,6 +273,40 @@
             callBack();
         });
 
+       /* broadcastReceiver = new BroadcastReceiver() {
+            @Override
+            public void onReceive(Context context, Intent intent) {
+                String action = intent.getExtras().getString("actionname");
+                switch (action) {
+                    case BWSApplication.ACTION_PREVIUOS:
+                        onTrackPrevious();
+                        if (isPlaying) {
+                            onTrackPause();
+                        } else {
+                            onTrackPlay();
+                        }
+                        break;
+                    case BWSApplication.ACTION_PLAY:
+                        if (isPlaying) {
+                            onTrackPause();
+                        } else {
+                            onTrackPlay();
+                        }
+                        break;
+                    case BWSApplication.ACTION_NEXT:
+                        onTrackNext();
+                        if (isPlaying) {
+                            onTrackPause();
+                        } else {
+                            onTrackPlay();
+                        }
+                        break;
+                }
+            }
+        };
+        BWSApplication.createChannel(ctx);
+        registerReceiver(broadcastReceiver, new IntentFilter("TRACKS_TRACKS"));
+        startService(new Intent(getBaseContext(), OnClearFromRecentService.class));*/
         getPrepareShowData(position);
         binding.simpleSeekbar.setOnSeekBarChangeListener(this);
         callAdapterMethod();
@@ -841,9 +880,11 @@
             editor.putInt(CONSTANTS.PREF_KEY_position, position);
             editor.commit();
         }
-    } private void removeArray() {
+    }
+
+    private void removeArray() {
         SharedPreferences shared = getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);
-       String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
+        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, "0");
         Gson gson = new Gson();
         String json1 = shared.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gson));
         mainPlayModelList = new ArrayList<>();
@@ -1818,10 +1859,12 @@
         }
 
         @Override
-        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) { }
+        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) {
+        }
 
         @Override
-        public void onRowClear(RecyclerView.ViewHolder myViewHolder) { }
+        public void onRowClear(RecyclerView.ViewHolder myViewHolder) {
+        }
 
         public class MyViewHolder extends RecyclerView.ViewHolder {
             QueueListLayoutBinding binding;
@@ -1832,4 +1875,77 @@
             }
         }
     }
+
+/*    @Override
+    public void onTrackPrevious() {
+        if (!url.equalsIgnoreCase("")) {
+            isPlaying = false;
+            callPrevious();
+        }
+
+        BWSApplication.createChannel(ctx);
+        registerReceiver(broadcastReceiver, new IntentFilter("TRACKS_TRACKS"));
+        startService(new Intent(getBaseContext(), OnClearFromRecentService.class));
+    }
+
+    @Override
+    public void onTrackPlay() {
+        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),
+                R.drawable.ic_pause_black_24dp, position, mainPlayModelList.size() - 1);
+        if (!isMediaStart) {
+            isCompleteStop = false;
+            isprogressbar = true;
+            handler.postDelayed(UpdateSongTime, 500);
+            binding.llPlay.setVisibility(View.GONE);
+            binding.llPause.setVisibility(View.GONE);
+            binding.llProgressBar.setVisibility(View.VISIBLE);
+            binding.progressBar.setVisibility(View.VISIBLE);
+            callMedia();
+        } else if (isCompleteStop) {
+            isCompleteStop = false;
+            isprogressbar = true;
+            handler.postDelayed(UpdateSongTime, 500);
+            binding.llPlay.setVisibility(View.GONE);
+            binding.llPause.setVisibility(View.GONE);
+            binding.llProgressBar.setVisibility(View.VISIBLE);
+            binding.progressBar.setVisibility(View.VISIBLE);
+            callMedia();
+        } else {
+            binding.llPlay.setVisibility(View.GONE);
+            binding.llPause.setVisibility(View.VISIBLE);
+            binding.llProgressBar.setVisibility(View.GONE);
+            binding.progressBar.setVisibility(View.GONE);
+            resumeMedia();
+            isPause = false;
+        }
+        handler.postDelayed(UpdateSongTime, 100);
+        binding.tvTitle.setText(mainPlayModelList.get(position).getName());
+        isPlaying = true;
+    }
+
+    @Override
+    public void onTrackPause() {
+        BWSApplication.createNotification(ctx, mainPlayModelList.get(position),
+                R.drawable.ic_play_arrow_black_24dp, position, mainPlayModelList.size() - 1);
+        isPlaying = false;
+        handler.removeCallbacks(UpdateSongTime);
+        binding.simpleSeekbar.setProgress(binding.simpleSeekbar.getProgress());
+        pauseMedia();
+        binding.llProgressBar.setVisibility(View.GONE);
+        binding.progressBar.setVisibility(View.GONE);
+        binding.llPlay.setVisibility(View.VISIBLE);
+        binding.llPause.setVisibility(View.GONE);
+        oTime = binding.simpleSeekbar.getProgress();
+    }
+
+    @Override
+    public void onTrackNext() {
+        if (!url.equalsIgnoreCase("")) {
+            isPlaying = false;
+            callNext();
+        }
+        BWSApplication.createChannel(ctx);
+        registerReceiver(broadcastReceiver, new IntentFilter("TRACKS_TRACKS"));
+        startService(new Intent(getBaseContext(), OnClearFromRecentService.class));
+    }*/
 }
\ No newline at end of file
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/ViewAllPlaylistFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Playlist;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadPlaylistActivity;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.FragmentViewAllPlaylistBinding;\r\nimport com.brainwellnessspa.databinding.PlaylistCustomLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\n\r\npublic class ViewAllPlaylistFragment extends Fragment {\r\n    FragmentViewAllPlaylistBinding binding;\r\n    String GetLibraryID, Name, UserID, AudioFlag, MyDownloads;\r\n    public static String GetPlaylistLibraryID = \"\";\r\n    List<DownloadPlaylistDetails> playlistList;\r\n    List<DownloadAudioDetails> playlistWiseAudioDetails = new ArrayList<>();\r\n    View view;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_view_all_playlist, container, false);\r\n        view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (getArguments() != null) {\r\n            GetLibraryID = getArguments().getString(\"GetLibraryID\");\r\n            Name = getArguments().getString(\"Name\");\r\n            MyDownloads = getArguments().getString(\"MyDownloads\");\r\n        }\r\n\r\n        view.setFocusableInTouchMode(true);\r\n        view.requestFocus();\r\n        view.setOnKeyListener((v, keyCode, event) -> {\r\n            if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {\r\n                callBack();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        binding.llBack.setOnClickListener(view1 -> {\r\n            callBack();\r\n        });\r\n\r\n        GridLayoutManager manager = new GridLayoutManager(getActivity(), 2);\r\n        binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n        binding.rvMainAudio.setLayoutManager(manager);\r\n        if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n            playlistList = new ArrayList<>();\r\n            GetAllMedia();\r\n        } else {\r\n            prepareData();\r\n        }\r\n        return view;\r\n    }\r\n\r\n    private void GetAllMedia() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistList = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllPlaylist();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                binding.tvTitle.setText(\"My Downloads\");\r\n\r\n                ArrayList<ViewAllPlayListModel.ResponseData.Detail> listModelList = new ArrayList<>();\r\n                for (int i = 0; i < playlistList.size(); i++) {\r\n                    ViewAllPlayListModel.ResponseData.Detail detail = new ViewAllPlayListModel.ResponseData.Detail();\r\n                    detail.setTotalAudio(playlistList.get(i).getTotalAudio());\r\n                    detail.setTotalhour(playlistList.get(i).getTotalhour());\r\n                    detail.setTotalminute(playlistList.get(i).getTotalminute());\r\n                    detail.setPlaylistID(playlistList.get(i).getPlaylistID());\r\n                    detail.setPlaylistDesc(playlistList.get(i).getPlaylistDesc());\r\n                    detail.setPlaylistMastercat(playlistList.get(i).getPlaylistMastercat());\r\n                    detail.setPlaylistSubcat(playlistList.get(i).getPlaylistSubcat());\r\n                    detail.setPlaylistName(playlistList.get(i).getPlaylistName());\r\n                    detail.setPlaylistImage(playlistList.get(i).getPlaylistImage());\r\n                    detail.setPlaylistImageDetails(playlistList.get(i).getPlaylistImageDetails());\r\n                    listModelList.add(detail);\r\n                }\r\n                PlaylistAdapter adapter = new PlaylistAdapter(listModelList, IsLock);\r\n                binding.rvMainAudio.setAdapter(adapter);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetTask getTask = new GetTask();\r\n        getTask.execute();\r\n    }\r\n\r\n    private void callBack() {\r\n        Fragment audioFragment = new PlaylistFragment();\r\n        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n        fragmentManager1.beginTransaction()\r\n                .replace(R.id.flContainer, audioFragment)\r\n                .commit();\r\n        Bundle bundle = new Bundle();\r\n        audioFragment.setArguments(bundle);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n//        prepareData();\r\n    }\r\n\r\n    private void prepareData() {\r\n        try {\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n                } else {\r\n                    SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if(isMediaStart){\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if(isMediaStart){\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(4, 6, 4, 280);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(4, 6, 4, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            try {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                Call<ViewAllPlayListModel> listCall = APIClient.getClient().getViewAllPlayLists(UserID, GetLibraryID);\r\n                listCall.enqueue(new Callback<ViewAllPlayListModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<ViewAllPlayListModel> call, Response<ViewAllPlayListModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                            ViewAllPlayListModel listModel = response.body();\r\n                            binding.tvTitle.setText(listModel.getResponseData().getView());\r\n                            PlaylistAdapter adapter = new PlaylistAdapter(listModel.getResponseData().getDetails(), listModel.getResponseData().getIsLock());\r\n                            binding.rvMainAudio.setAdapter(adapter);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<ViewAllPlayListModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                });\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    public class PlaylistAdapter extends RecyclerView.Adapter<PlaylistAdapter.MyViewHolder> {\r\n        private List<ViewAllPlayListModel.ResponseData.Detail> listModelList;\r\n        String IsLock;\r\n\r\n        public PlaylistAdapter(List<ViewAllPlayListModel.ResponseData.Detail> listModelList, String IsLock) {\r\n            this.listModelList = listModelList;\r\n            this.IsLock = IsLock;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            PlaylistCustomLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.playlist_custom_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                    1, 1, 0.46f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            holder.binding.tvAddToPlaylist.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.tvAddToPlaylist.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.tvPlaylistName.setText(listModelList.get(position).getPlaylistName());\r\n            Glide.with(getActivity()).load(listModelList.get(position).getPlaylistImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n            holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n            holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n\r\n            holder.binding.rlMainLayout.setOnLongClickListener(new View.OnLongClickListener() {\r\n                @Override\r\n                public boolean onLongClick(View v) {\r\n                    holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n                    return false;\r\n                }\r\n            });\r\n            holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    Intent i = new Intent(getActivity(), AddPlaylistActivity.class);\r\n                    i.putExtra(\"AudioId\", \"\");\r\n                    i.putExtra(\"PlaylistID\", listModelList.get(position).getPlaylistID());\r\n                    startActivity(i);\r\n                }\r\n            });\r\n            holder.binding.rlMainLayout.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                    } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        /*if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n//                            getMedia(listModelList.get(position).getPlaylistID());\r\n                            Intent i = new Intent(getActivity(), DownloadPlaylistActivity.class);\r\n                            i.putExtra(\"New\", \"0\");\r\n                            i.putExtra(\"PlaylistID\", listModelList.get(position).getPlaylistID());\r\n                            i.putExtra(\"PlaylistName\", listModelList.get(position).getPlaylistName());\r\n                            i.putExtra(\"PlaylistImage\", listModelList.get(position).getPlaylistImage());\r\n                            i.putExtra(\"PlaylistImageDetails\", listModelList.get(position).getPlaylistImageDetails());\r\n                            i.putExtra(\"TotalAudio\", listModelList.get(position).getTotalAudio());\r\n                            i.putExtra(\"Totalhour\", listModelList.get(position).getTotalhour());\r\n                            i.putExtra(\"Totalminute\", listModelList.get(position).getTotalminute());\r\n                            i.putExtra(\"MyDownloads\", \"1\");\r\n                            getActivity().startActivity(i);\r\n                        } else {*/\r\n                            Bundle bundle = new Bundle();\r\n                            comefrom_search = 2;\r\n                            GetPlaylistLibraryID = GetLibraryID;\r\n                            Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                            bundle.putString(\"New\", \"0\");\r\n                            bundle.putString(\"PlaylistID\", listModelList.get(position).getPlaylistID());\r\n                            bundle.putString(\"PlaylistName\", listModelList.get(position).getPlaylistName());\r\n                            bundle.putString(\"PlaylistImage\", listModelList.get(position).getPlaylistImage());\r\n                            bundle.putString(\"MyDownloads\", MyDownloads);\r\n                            myPlaylistsFragment.setArguments(bundle);\r\n                            fragmentManager1.beginTransaction()\r\n                                    .replace(R.id.flContainer, myPlaylistsFragment)\r\n                                    .commit();\r\n//                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            PlaylistCustomLayoutBinding binding;\r\n\r\n            public MyViewHolder(PlaylistCustomLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getMedia(String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                if(queuePlay){\r\n                    int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                    Gson gson = new Gson();\r\n                    String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                    if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                        Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                        }.getType();\r\n                        addToQueueModelList = gson.fromJson(json1, type1);\r\n                    }\r\n                    addToQueueModelList.remove(position1);\r\n                    SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared2.edit();\r\n                    String json = gson.toJson(addToQueueModelList);\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                    editor.commit();\r\n\r\n                }\r\n                player = 1;\r\n                if (isPrepare || isMediaStart || isPause) {\r\n                    stopMedia();\r\n                }\r\n                isPause = false;\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n\r\n                isCompleteStop = false;\r\n\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String json = gson.toJson(playlistWiseAudioDetails);\r\n                editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, playlistID);\r\n                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                editor.commit();\r\n                try {\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/ViewAllPlaylistFragment.java	(revision f0fec71fa0a936bd6b12bc71015a89e5cd6f0b07)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/ViewAllPlaylistFragment.java	(date 1605068231095)
@@ -324,7 +324,7 @@
                 @Override
                 public boolean onLongClick(View v) {
                     holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);
-                    return false;
+                    return true;
                 }
             });
             holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Playlist;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.Filter;\r\nimport android.widget.Filterable;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.RelativeLayout;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.ItemTouchHelper;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Models.CardModel;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddQueueActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ReminderStatusPlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.SucessModel;\r\nimport com.brainwellnessspa.DashboardModule.Search.SearchFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia;\r\nimport com.brainwellnessspa.EncryptDecryptUtils.FileUtils;\r\nimport com.brainwellnessspa.LikeModule.Activities.LikeActivity;\r\nimport com.brainwellnessspa.LikeModule.Models.LikesHistoryModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.ReminderModule.Activities.ReminderActivity;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.ItemMoveCallback;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.StartDragListener;\r\nimport com.brainwellnessspa.databinding.FragmentMyPlaylistsBinding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutBinding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutSorting1Binding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutSorting2Binding;\r\nimport com.brainwellnessspa.databinding.MyPlaylistLayoutSortingBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.downloader.PRDownloader;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.sql.Time;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenReminder;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.MyPlaylistIds;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.PlaylistIDMS;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddAudioActivity.addToSearch;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity.MyPlaylistId;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity.addToPlayList;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.ComeFindAudio;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.comeRename;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.MyPlaylistActivity.deleteFrg;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.ViewAllPlaylistFragment.GetPlaylistLibraryID;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.myAudioId;\r\nimport static com.brainwellnessspa.DownloadModule.Activities.DownloadsActivity.ComeFrom_Playlist;\r\nimport static com.brainwellnessspa.LikeModule.Activities.LikeActivity.ComeFrom_LikePlaylist;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadIdOne;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.downloadProgress;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.filename;\r\nimport static com.brainwellnessspa.EncryptDecryptUtils.DownloadMedia.isDownloading;\r\nimport static com.brainwellnessspa.Utility.MusicService.getProgressPercentage;\r\nimport static com.brainwellnessspa.Utility.MusicService.getStartTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.isStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.mediaPlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.oTime;\r\nimport static com.brainwellnessspa.Utility.MusicService.pauseMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.resumeMedia;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class MyPlaylistsFragment extends Fragment implements StartDragListener {\r\n    public static int RefreshIconData = 0;\r\n    public static String RefreshNew = \"\";\r\n    public static int disclaimerPlayed = 0;\r\n    public boolean RefreshPlaylist = false;\r\n    public static int isPlayPlaylist = 0;\r\n    FragmentMyPlaylistsBinding binding;\r\n    String UserID, New, PlaylistID, PlaylistName = \"\", PlaylistImage, SearchFlag, MyDownloads = \"\", AudioFlag, PlaylistIDs = \"\";\r\n    int RefreshIcon;\r\n    PlayListsAdpater adpater;\r\n    PlayListsAdpater1 adpater1;\r\n    PlayListsAdpater2 adpater2;\r\n    View view;\r\n    EditText searchEditText;\r\n    ArrayList<String> changedAudio;\r\n    Activity activity;\r\n    List<DownloadAudioDetails> downloadAudioDetailsList, downloadedSingleAudio;\r\n    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongsList, playListSongListForDownload;\r\n    List<DownloadAudioDetails> oneAudioDetailsList, playlistWiseAudioDetails;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    DownloadPlaylistDetails downloadPlaylistDetails;\r\n    Dialog dialog;\r\n    List<String> fileNameList, playlistDownloadId, remainAudio;\r\n    ItemTouchHelper touchHelper;\r\n    Runnable UpdateSongTime2;\r\n    int SongListSize = 0, count;\r\n    List<DownloadAudioDetails> playlistWiseAudiosDetails;\r\n    SubPlayListModel.ResponseData GlobalListModel;\r\n    SubPlayListModel.ResponseData.PlaylistSong addDisclaimer = new SubPlayListModel.ResponseData.PlaylistSong();\r\n    SubPlayListModel.ResponseData.PlaylistSong songListDownload = new SubPlayListModel.ResponseData.PlaylistSong();\r\n    boolean isclose = false;\r\n    private Handler handler1, handler2,handler3;\r\n    private Runnable UpdateSongTime3;\r\n//    private Runnable UpdateSongTime1 = new Runnable() {\r\n//        @Override\r\n//        public void run() {\r\n//            getMediaByPer(PlaylistID,SongListSize);\r\n//\r\n///*            if (fileNameList.size() != 0) {\r\n//                if (remainAudio.size() <= SongListSize) {\r\n//                    int total = SongListSize;\r\n//                    int remain = remainAudio.size();\r\n//                    int complate = total - remain;\r\n//                    long progressPercent = complate * 100 / total;\r\n//                    int downloadProgress1 = (int) progressPercent;\r\n//                    if (SongListSize == 1) {\r\n//                        if (downloadProgress <= 100) {\r\n//                            binding.pbProgress.setProgress(downloadProgress);\r\n//                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n//                            binding.ivDownloads.setVisibility(View.GONE);\r\n//                            if (downloadProgress == 100) {\r\n//                                getDownloadData();\r\n//                            }\r\n//                        }\r\n//                    } else if (downloadProgress1 <= 100) {\r\n//                        if (downloadProgress1 == 100) {\r\n//                            getDownloadData();\r\n//                            binding.pbProgress.setVisibility(View.GONE);\r\n//                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n//                        } else {\r\n//                            binding.pbProgress.setProgress(downloadProgress1);\r\n//                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n//                            binding.ivDownloads.setVisibility(View.GONE);\r\n//                        }\r\n//                    } else {\r\n//                        binding.pbProgress.setVisibility(View.GONE);\r\n//                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n//                    }\r\n//                }\r\n//                getDownloadData();\r\n//                handler1.postDelayed(this, 500);\r\n//            }else {\r\n//                binding.pbProgress.setVisibility(View.GONE);\r\n//                binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                handler1.removeCallbacks(UpdateSongTime1);\r\n//                getDownloadData();\r\n//            }*/\r\n//            handler1.postDelayed(this, 500);\r\n//        }\r\n//    };\r\n    int position = 0, startTime, listSize, myCount;\r\n    private long totalDuration, currentDuration = 0;\r\n    long myProgress = 0, diff = 0;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_playlists, container, false);\r\n        view = binding.getRoot();\r\n//        handler1 = new Handler();\r\n        handler2 = new Handler();\r\n        handler3 = new Handler();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        activity = getActivity();\r\n        downloadAudioDetailsList = new ArrayList<>();\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        fileNameList = new ArrayList<>();\r\n        playlistDownloadId = new ArrayList<>();\r\n        addDisclaimer();\r\n//        remainAudio = new ArrayList<>();\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        playlistSongsList = new ArrayList<>();\r\n        playListSongListForDownload = new ArrayList<>();\r\n        changedAudio = new ArrayList<>();\r\n        if (getArguments() != null) {\r\n            New = getArguments().getString(\"New\");\r\n            PlaylistID = getArguments().getString(\"PlaylistID\");\r\n            PlaylistName = getArguments().getString(\"PlaylistName\");\r\n            PlaylistImage = getArguments().getString(\"PlaylistImage\");\r\n            MyDownloads = getArguments().getString(\"MyDownloads\");\r\n        }\r\n        binding.llBack.setOnClickListener(view1 -> {\r\n            binding.searchView.clearFocus();\r\n            callBack();\r\n        });\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity()) && !MyDownloads.equalsIgnoreCase(\"1\")) {\r\n            binding.llMore.setVisibility(View.VISIBLE);\r\n            binding.llMore.setClickable(true);\r\n            binding.llMore.setEnabled(true);\r\n            binding.ivMore.setImageResource(R.drawable.ic_menu_icon);\r\n            binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            binding.llMore.setVisibility(View.VISIBLE);\r\n            binding.llMore.setClickable(false);\r\n            binding.llMore.setEnabled(false);\r\n            binding.ivMore.setImageResource(R.drawable.ic_menu_icon);\r\n            binding.ivMore.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n        }\r\n\r\n        binding.llMore.setOnClickListener(view13 -> {\r\n//            handler1.removeCallbacks(UpdateSongTime1);\r\n            handler2.removeCallbacks(UpdateSongTime2);\r\n            Intent i = new Intent(getActivity(), MyPlaylistActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            i.putExtra(\"PlaylistIDImage\", PlaylistImage);\r\n            i.putExtra(\"Liked\", \"0\");\r\n            startActivity(i);\r\n\r\n        });\r\n\r\n        binding.tvSearch.setOnClickListener(view14 -> {\r\n            Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n            i.putExtra(\"PlaylistID\", PlaylistID);\r\n            startActivity(i);\r\n        });\r\n\r\n        binding.searchView.onActionViewExpanded();\r\n        searchEditText = binding.searchView.findViewById(androidx.appcompat.R.id.search_src_text);\r\n        searchEditText.setTextColor(getResources().getColor(R.color.gray));\r\n        searchEditText.setHintTextColor(getResources().getColor(R.color.gray));\r\n        ImageView closeButton = binding.searchView.findViewById(R.id.search_close_btn);\r\n        binding.searchView.clearFocus();\r\n        searchClear(searchEditText);\r\n        closeButton.setOnClickListener(v -> {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n\r\n        });\r\n\r\n        binding.searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String search) {\r\n                binding.searchView.clearFocus();\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String search) {\r\n                try {\r\n                    if (adpater2 != null) {\r\n                        adpater2.getFilter().filter(search);\r\n                        SearchFlag = search;\r\n                        Log.e(\"searchsearch\", \"\" + search);\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n//        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        RecyclerView.LayoutManager playList1 = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists1.setLayoutManager(playList1);\r\n        binding.rvPlayLists1.setItemAnimator(new DefaultItemAnimator());\r\n        RecyclerView.LayoutManager playList = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists.setLayoutManager(playList);\r\n        binding.rvPlayLists.setItemAnimator(new DefaultItemAnimator());\r\n        RecyclerView.LayoutManager playList3 = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvPlayLists2.setLayoutManager(playList3);\r\n        binding.rvPlayLists2.setItemAnimator(new DefaultItemAnimator());\r\n      /*  binding.rvPlayLists1.addOnScrollListener(new RecyclerView.OnScrollListener(){\r\n            @Override\r\n            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\r\n                super.onScrolled(recyclerView, dx, dy);\r\n                binding.rvPlayLists.setScrollX(dx);\r\n                binding.rvPlayLists.setScrollY(dy);\r\n//                int pos = linearLayoutManager1.findFirstCompletelyVisibleItemPosition();\r\n//                linearLayoutManager.scrollToPositionWithOffset(pos, 20);\r\n            }\r\n        });*/\r\n        binding.llDownloads.setOnClickListener(view1 -> {\r\n            callDownload(\"\", \"\", \"\", playlistSongsList, 0, binding.llDownloads, binding.ivDownloads);\r\n        });\r\n\r\n        RefreshNew = New;\r\n        if (New.equalsIgnoreCase(\"1\")) {\r\n            binding.llAddAudio.setVisibility(View.VISIBLE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.INVISIBLE);\r\n            binding.llListing.setVisibility(View.GONE);\r\n            binding.btnAddAudio.setOnClickListener(view -> {\r\n                Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n                i.putExtra(\"PlaylistID\", PlaylistID);\r\n                startActivity(i);\r\n            });\r\n        } else if (New.equalsIgnoreCase(\"0\")) {\r\n            binding.llAddAudio.setVisibility(View.GONE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n            binding.llListing.setVisibility(View.VISIBLE);\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n        return view;\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail(String download) {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadPlaylistDetailsList.size() != 0 /*New.equalsIgnoreCase(\"1\") ||*/) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (RefreshIcon == 0) {\r\n                    enableDisableDownload(false, \"gray\");\r\n                } else if (download.equalsIgnoreCase(\"1\") /* New.equalsIgnoreCase(\"1\") ||*/) {\r\n                    enableDisableDownload(false, \"orange\");\r\n                } else if (download.equalsIgnoreCase(\"0\") || download.equalsIgnoreCase(\"\") ||\r\n                        New.equalsIgnoreCase(\"0\") || RefreshIcon != 0) {\r\n                    enableDisableDownload(true, \"white\");\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail2() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n   /*\r\n                    \"PlaylistDesc\": \"When life gets tough and you struggle through the days, download the Ultimate Self-development Bundle to help you in finding a new appreciation for life. Everyone can use a little help in all areas of their lives at times. There are 12 programs aimed to help your self-development:\",\r\n                    \"PlaylistMastercat\": \"Self-development\",\r\n                    \"PlaylistSubcat\": \"Self-expression, Focus, Discipline, Self-love, Mindset, Passion, Enthusiasm, Gratitude, Self-doubt, Inner Strength \",\r\n                    \"PlaylistImage\": \"https://brainwellnessspa.com.au/wp-content/uploads/2018/06/Ultimate self development bundle.jpg\",\r\n                    \"PlaylistSongs \" */\r\n                downloadAudioDetailsList = GetAllMedia();\r\n                playlistWiseAudioDetails = GetMedia();\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    private void enableDisableDownload(boolean b, String color) {\r\n        if (b) {\r\n            binding.llDownloads.setClickable(true);\r\n            binding.llDownloads.setEnabled(true);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n        } else {\r\n            binding.llDownloads.setClickable(false);\r\n            binding.llDownloads.setEnabled(false);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            if (color.equalsIgnoreCase(\"gray\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.light_gray), PorterDuff.Mode.SRC_IN);\r\n            } else if (color.equalsIgnoreCase(\"orange\")) {\r\n                binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetAllMedia() {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadAudioDetailsList = DatabaseClient\r\n                        .getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData1();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadAudioDetailsList;\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        addDisclaimer();\r\n\r\n        if (binding.searchView != null) {\r\n            binding.searchView.clearFocus();\r\n//            binding.searchView.onActionViewCollapsed();\r\n            isclose = true;\r\n            Toast.makeText(activity, \"closeeeeeee\", Toast.LENGTH_SHORT).show();\r\n        }\r\n\r\n        if (isclose) {\r\n        view.setFocusableInTouchMode(true);\r\n        view.requestFocus();\r\n        view.setOnKeyListener((v, keyCode, event) -> {\r\n            if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {\r\n//                binding.searchView.setQuery(\"\", false);\r\n//                binding.rlMainLayouts.requestFocus();\r\n                binding.searchView.clearFocus();\r\n//                binding.searchView.setFocusable(false);\r\n                callBack();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        }\r\n\r\n        if (deleteFrg == 1) {\r\n            binding.searchView.clearFocus();\r\n            callBack();\r\n            deleteFrg = 0;\r\n        } else if (addToPlayList) {\r\n            PlaylistID = MyPlaylistId;\r\n            prepareData(UserID, MyPlaylistId);\r\n            addToPlayList = false;\r\n        } else if (addToSearch) {\r\n            PlaylistIDs = PlaylistIDMS;\r\n            prepareData(UserID, MyPlaylistIds);\r\n            addToSearch = false;\r\n        } else {\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n        if (comeRename == 1) {\r\n            prepareData(UserID, PlaylistID);\r\n        }\r\n    }\r\n\r\n    private void callBack() {\r\n        if (MyPlaylistIds.equalsIgnoreCase(\"\")) {\r\n            if (comefrom_search == 2) {\r\n                Bundle bundle = new Bundle();\r\n                Fragment playlistFragment = new ViewAllPlaylistFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, playlistFragment)\r\n                        .commit();\r\n                bundle.putString(\"GetLibraryID\", GetPlaylistLibraryID);\r\n                bundle.putString(\"MyDownloads\", MyDownloads);\r\n                playlistFragment.setArguments(bundle);\r\n//            comefrom_search = 0;\r\n            } else if (comefrom_search == 1) {\r\n                Fragment fragment = new SearchFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, fragment)\r\n                        .commit();\r\n                comefrom_search = 0;\r\n            } else if (comefrom_search == 0) {\r\n                Fragment fragment = new PlaylistFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, fragment)\r\n                        .commit();\r\n                comefrom_search = 0;\r\n            } else if (comefrom_search == 4) {\r\n                Intent i = new Intent(getActivity(), LikeActivity.class);\r\n                ComeFrom_LikePlaylist = true;\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                startActivity(i);\r\n                getActivity().finish();\r\n                //            comefrom_search = 0;\r\n            } else if (comefrom_search == 3) {\r\n                Intent i = new Intent(getActivity(), DownloadsActivity.class);\r\n                ComeFrom_Playlist = true;\r\n                i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n                startActivity(i);\r\n                getActivity().finish();\r\n                //            comefrom_search = 0;\r\n            }\r\n        } else {\r\n            prepareData(UserID, PlaylistIDs);\r\n            MyPlaylistIds = \"\";\r\n        }\r\n    }\r\n\r\n    private void searchClear(EditText searchEditText) {\r\n        if (ComeFindAudio == 1) {\r\n            binding.searchView.clearFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n            ComeFindAudio = 0;\r\n        } else if (ComeFindAudio == 2) {\r\n            binding.searchView.requestFocus();\r\n            searchEditText.setText(\"\");\r\n            binding.searchView.setQuery(\"\", false);\r\n            ComeFindAudio = 0;\r\n        }\r\n    }\r\n\r\n    private void prepareData(String UserId, String PlaylistId) {\r\n        if (comefrom_search == 3) {\r\n            binding.llExtra.setVisibility(View.VISIBLE);\r\n            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n            params.setMargins(0, 8, 0, 260);\r\n            binding.llSpace.setLayoutParams(params);\r\n        }\r\n\r\n        downloadedSingleAudio = getMyMedia();\r\n        binding.tvPlaylist.setText(\"Playlist\");\r\n        searchClear(searchEditText);\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        try {\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = sharedx.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences sharedd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = sharedd.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n\r\n                } else {\r\n                    SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if (isMediaStart) {\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if (isMediaStart) {\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                callAddTransFrag();\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                params.setMargins(0, 8, 0, 260);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                params.setMargins(0, 8, 0, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            if (!MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                Call<SubPlayListModel> listCall = APIClient.getClient().getSubPlayLists(UserId, PlaylistId);\r\n                listCall.enqueue(new Callback<SubPlayListModel>() {\r\n                    @SuppressLint(\"ClickableViewAccessibility\")\r\n                    @Override\r\n                    public void onResponse(Call<SubPlayListModel> call, Response<SubPlayListModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                            SubPlayListModel listModel = response.body();\r\n                            try {\r\n                                if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"0\") ||\r\n                                        listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n\r\n                                } else if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"1\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                                }\r\n                            } catch (Exception e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                            getDownloadData();\r\n                            downloadAudioDetailsList = GetAllMedia();\r\n                            SongListSize = listModel.getResponseData().getPlaylistSongs().size();\r\n                            playlistWiseAudioDetails = GetMedia();\r\n                            downloadedSingleAudio = getMyMedia();\r\n                            getMediaByPer(PlaylistId, SongListSize);\r\n                            binding.rlSearch.setVisibility(View.VISIBLE);\r\n                            binding.llMore.setVisibility(View.VISIBLE);\r\n                            binding.llReminder.setVisibility(View.VISIBLE);\r\n                            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n                            binding.tvTag.setText(R.string.Audios_in_Playlist);\r\n                            binding.llReminder.setOnClickListener(view -> {\r\n                                if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"0\") ||\r\n                                        listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n                                    Intent i = new Intent(getActivity(), ReminderActivity.class);\r\n                                    ComeScreenReminder = 0;\r\n                                    i.putExtra(\"ComeFrom\", \"1\");\r\n                                    i.putExtra(\"PlaylistID\", PlaylistID);\r\n                                    i.putExtra(\"PlaylistName\", listModel.getResponseData().getPlaylistName());\r\n                                    i.putExtra(\"Time\", listModel.getResponseData().getReminderTime());\r\n                                    i.putExtra(\"Day\", listModel.getResponseData().getReminderDay());\r\n                                    startActivity(i);\r\n                                } else if (listModel.getResponseData().getIsReminder().equalsIgnoreCase(\"1\")) {\r\n                                    binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                                    dialog = new Dialog(activity);\r\n                                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                                    dialog.setContentView(R.layout.delete_payment_card);\r\n                                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(activity.getResources().getColor(R.color.dark_blue_gray)));\r\n                                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                                    final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                                    final TextView tvSubTitle = dialog.findViewById(R.id.tvSubTitle);\r\n                                    final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                                    final Button Btn = dialog.findViewById(R.id.Btn);\r\n                                    tvTitle.setText(\"Reminder off\");\r\n                                    tvSubTitle.setText(\"Are you sure you want to reminder off ?\");\r\n                                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                            dialog.dismiss();\r\n                                            return true;\r\n                                        }\r\n                                        return false;\r\n                                    });\r\n                                    Btn.setOnTouchListener((view1, event) -> {\r\n                                        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                                            switch (event.getAction()) {\r\n                                                case MotionEvent.ACTION_DOWN: {\r\n                                                    Button views = (Button) view1;\r\n                                                    views.getBackground().setColorFilter(0x77000000, PorterDuff.Mode.SRC_ATOP);\r\n                                                    view1.invalidate();\r\n                                                    break;\r\n                                                }\r\n                                                case MotionEvent.ACTION_UP:\r\n                                                    Call<ReminderStatusPlaylistModel> listCall1 = APIClient.getClient().getReminderStatusPlaylist(UserID, PlaylistID, \"0\");/*set 1 or not 0 */\r\n                                                    listCall1.enqueue(new Callback<ReminderStatusPlaylistModel>() {\r\n                                                        @Override\r\n                                                        public void onResponse(Call<ReminderStatusPlaylistModel> call1, Response<ReminderStatusPlaylistModel> response1) {\r\n                                                            if (response1.isSuccessful()) {\r\n                                                                ReminderStatusPlaylistModel listModel1 = response1.body();\r\n//                                                                prepareData(UserID, PlaylistID);\r\n                                                                listModel.getResponseData().setIsReminder(listModel1.getResponseData().getIsCheck());\r\n                                                                binding.ivReminder.setColorFilter(ContextCompat.getColor(getActivity(), R.color.white), PorterDuff.Mode.SRC_IN);\r\n                                                                dialog.dismiss();\r\n                                                                BWSApplication.showToast(listModel1.getResponseMessage(), activity);\r\n                                                            }\r\n                                                        }\r\n\r\n                                                        @Override\r\n                                                        public void onFailure(Call<ReminderStatusPlaylistModel> call1, Throwable t) {\r\n                                                        }\r\n                                                    });\r\n\r\n\r\n                                                case MotionEvent.ACTION_CANCEL: {\r\n                                                    Button views = (Button) view1;\r\n                                                    views.getBackground().clearColorFilter();\r\n                                                    views.invalidate();\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n                                        }\r\n\r\n                                        return true;\r\n                                    });\r\n\r\n                                    tvGoBack.setOnClickListener(v -> {\r\n                                        dialog.dismiss();\r\n                                    });\r\n                                    dialog.show();\r\n                                    dialog.setCancelable(false);\r\n\r\n                                }\r\n                            });\r\n                            playlistSongsList = new ArrayList<>();\r\n                            playlistSongsList.addAll(listModel.getResponseData().getPlaylistSongs());\r\n                            downloadPlaylistDetails = new DownloadPlaylistDetails();\r\n                            downloadPlaylistDetails.setPlaylistID(listModel.getResponseData().getPlaylistID());\r\n                            downloadPlaylistDetails.setPlaylistName(listModel.getResponseData().getPlaylistName());\r\n                            downloadPlaylistDetails.setPlaylistDesc(listModel.getResponseData().getPlaylistDesc());\r\n                            downloadPlaylistDetails.setIsReminder(listModel.getResponseData().getIsReminder());\r\n                            downloadPlaylistDetails.setPlaylistMastercat(listModel.getResponseData().getPlaylistMastercat());\r\n                            downloadPlaylistDetails.setPlaylistSubcat(listModel.getResponseData().getPlaylistSubcat());\r\n                            downloadPlaylistDetails.setPlaylistImage(listModel.getResponseData().getPlaylistImage());\r\n                            downloadPlaylistDetails.setPlaylistImageDetails(listModel.getResponseData().getPlaylistImageDetail());\r\n                            downloadPlaylistDetails.setTotalAudio(listModel.getResponseData().getTotalAudio());\r\n                            downloadPlaylistDetails.setTotalDuration(listModel.getResponseData().getTotalDuration());\r\n                            downloadPlaylistDetails.setTotalhour(listModel.getResponseData().getTotalhour());\r\n                            downloadPlaylistDetails.setTotalminute(listModel.getResponseData().getTotalminute());\r\n                            downloadPlaylistDetails.setCreated(listModel.getResponseData().getCreated());\r\n                            downloadPlaylistDetails.setDownload(listModel.getResponseData().getDownload());\r\n                            downloadPlaylistDetails.setLike(listModel.getResponseData().getLike());\r\n\r\n                            setData(listModel.getResponseData());\r\n                            downloadPlaylistDetailsList = GetPlaylistDetail(listModel.getResponseData().getDownload());\r\n\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<SubPlayListModel> call, Throwable t) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                    }\r\n                });\r\n            } else {\r\n                downloadPlaylistDetailsList = GetPlaylistDetail2();\r\n            }\r\n        } else {\r\n            downloadPlaylistDetailsList = GetPlaylistDetail2();\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n        SharedPreferences sharedw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        boolean audioPlay = sharedw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        AudioFlag = sharedw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        String pID = sharedw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n        if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n            if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                if (isMediaStart) {\r\n                    isPlayPlaylist = 1;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                    handler3.postDelayed(UpdateSongTime3,500);\r\n                } else {\r\n                    isPlayPlaylist = 0;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                }\r\n            } else {\r\n                isPlayPlaylist = 0;\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n            }\r\n        } else {\r\n            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                if (isMediaStart) {\r\n                    isPlayPlaylist = 1;\r\n                    handler3.postDelayed(UpdateSongTime3,500);\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                } else {\r\n                    isPlayPlaylist = 0;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                }\r\n            } else {\r\n                isPlayPlaylist = 0;\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n            }\r\n        }\r\n    }\r\n\r\n    private List<DownloadAudioDetails> getMyMedia() {\r\n        downloadedSingleAudio = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadedSingleAudio = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(\"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                /*playListSongListForDownload = new ArrayList<>();\r\n                if (downloadedSingleAudio.size() != 0) {\r\n                    for(int i =0;i<downloadedSingleAudio.size();i++) {\r\n                        songListDownload = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                        songListDownload.setID(downloadedSingleAudio.get(i).getID());\r\n                        songListDownload.setName(downloadedSingleAudio.get(i).getName());\r\n                        songListDownload.setAudioFile(downloadedSingleAudio.get(i).getAudioFile());\r\n                        songListDownload.setAudioDirection(downloadedSingleAudio.get(i).getAudioDirection());\r\n                        songListDownload.setAudiomastercat(downloadedSingleAudio.get(i).getAudiomastercat());\r\n                        songListDownload.setAudioSubCategory(downloadedSingleAudio.get(i).getAudioSubCategory());\r\n                        songListDownload.setImageFile(downloadedSingleAudio.get(i).getImageFile());\r\n                        songListDownload.setLike(downloadedSingleAudio.get(i).getLike());\r\n                        songListDownload.setDownload(\"\");\r\n                        songListDownload.setAudioDuration(downloadedSingleAudio.get(i).getAudioDuration());\r\n                        songListDownload.setPlaylistID(PlaylistID);\r\n                        playListSongListForDownload.add(songListDownload);\r\n                    }\r\n                }*/\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return downloadedSingleAudio;\r\n    }\r\n\r\n    private void callAddTransFrag() {\r\n        Fragment fragment = new TransparentPlayerFragment();\r\n        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n        fragmentManager1.beginTransaction()\r\n                .add(R.id.flContainer, fragment)\r\n                .commit();\r\n    }\r\n\r\n    private void getMediaByPer(String playlistID, int totalAudio) {\r\n        class getMediaByPer extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                count = DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getCountDownloadProgress(\"Complete\", playlistID);\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                downloadPlaylistDetailsList = GetPlaylistDetail(downloadPlaylistDetails.getDownload());\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    if (count <= totalAudio) {\r\n                        if (count == totalAudio) {\r\n                            binding.pbProgress.setVisibility(View.GONE);\r\n                            binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                            handler1.removeCallbacks(UpdateSongTime1);\r\n                        } else {\r\n                            long progressPercent = count * 100 / totalAudio;\r\n                            int downloadProgress1 = (int) progressPercent;\r\n                            binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            binding.ivDownloads.setVisibility(View.GONE);\r\n                            binding.pbProgress.setProgress(downloadProgress1);\r\n                            getMediaByPer(playlistID, totalAudio);\r\n//                             handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    } else {\r\n                        binding.pbProgress.setVisibility(View.GONE);\r\n                        binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                        handler1.removeCallbacks(UpdateSongTime1);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        getMediaByPer st = new getMediaByPer();\r\n        st.execute();\r\n    }\r\n\r\n    private void getDownloadData() {\r\n        try {\r\n            SharedPreferences sharedy = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n               /* remainAudio = new ArrayList<>();\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 0; i < fileNameList.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            remainAudio.add(playlistDownloadId.get(i));\r\n                        }\r\n                    }\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        if (remainAudio.size() < SongListSize) {\r\n                            handler1.postDelayed(UpdateSongTime1, 500);\r\n                        }\r\n                    }\r\n                    //\r\n                } else {\r\n                    fileNameList = new ArrayList<>();\r\n                    playlistDownloadId = new ArrayList<>();\r\n                    remainAudio = new ArrayList<>();\r\n                }*/\r\n            } else {\r\n                fileNameList = new ArrayList<>();\r\n                playlistDownloadId = new ArrayList<>();\r\n//                remainAudio = new ArrayList<>();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void setData(SubPlayListModel.ResponseData listModel) {\r\n        GlobalListModel = listModel;\r\n        /*if (downloadAudioDetailsList.size() != 0) {\r\n            for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                for (int f = 0; i < listModel.getPlaylistSongs().size(); i++) {\r\n                    if (downloadAudioDetailsList.get(i).getAudioFile().equalsIgnoreCase(listModel.getPlaylistSongs().get(f).getAudioFile())) {\r\n\r\n\r\n                    }\r\n                }\r\n            }\r\n        }*/\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                5, 3, 1f, 0);\r\n        binding.ivBanner.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        binding.ivBanner.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        binding.ivBanner.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        if (listModel.getPlaylistName().equalsIgnoreCase(\"\") ||\r\n                listModel.getPlaylistName() == null) {\r\n            binding.tvLibraryName.setText(R.string.My_Playlist);\r\n        } else {\r\n            binding.tvLibraryName.setText(listModel.getPlaylistName());\r\n        }\r\n        binding.tvPlaylist.setText(\"Playlist\");\r\n        try {\r\n            if (!listModel.getPlaylistImageDetail().equalsIgnoreCase(\"\")) {\r\n                Glide.with(getActivity()).load(listModel.getPlaylistImageDetail()).thumbnail(0.05f)\r\n                        .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(binding.ivBanner);\r\n            } else {\r\n                binding.ivBanner.setImageResource(R.drawable.audio_bg);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (listModel.getTotalAudio().equalsIgnoreCase(\"\") ||\r\n                listModel.getTotalAudio().equalsIgnoreCase(\"0\") &&\r\n                        listModel.getTotalhour().equalsIgnoreCase(\"\")\r\n                        && listModel.getTotalminute().equalsIgnoreCase(\"\")) {\r\n            binding.tvLibraryDetail.setText(\"0 Audio | 0h 0m\");\r\n        } else {\r\n            if (listModel.getTotalminute().equalsIgnoreCase(\"\")) {\r\n                binding.tvLibraryDetail.setText(listModel.getTotalAudio() + \" Audio | \"\r\n                        + listModel.getTotalhour() + \"h 0m\");\r\n            } else {\r\n                binding.tvLibraryDetail.setText(listModel.getTotalAudio() + \" Audio | \"\r\n                        + listModel.getTotalhour() + \"h \" + listModel.getTotalminute() + \"m\");\r\n            }\r\n        }\r\n        RefreshIcon = listModel.getPlaylistSongs().size();\r\n        RefreshIconData = listModel.getPlaylistSongs().size();\r\n        binding.llReminder.setVisibility(View.INVISIBLE);\r\n        binding.llDownloads.setVisibility(View.INVISIBLE);\r\n        if (listModel.getPlaylistSongs().size() == 0) {\r\n            binding.llAddAudio.setVisibility(View.VISIBLE);\r\n            binding.llDownloads.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.llReminder.setVisibility(View.VISIBLE);\r\n            binding.ivPlaylistStatus.setVisibility(View.INVISIBLE);\r\n            binding.llListing.setVisibility(View.GONE);\r\n            binding.btnAddAudio.setOnClickListener(view -> {\r\n                Intent i = new Intent(getActivity(), AddAudioActivity.class);\r\n                i.putExtra(\"PlaylistID\", PlaylistID);\r\n                startActivity(i);\r\n            });\r\n        } else {\r\n            binding.llAddAudio.setVisibility(View.GONE);\r\n            binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n            binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.white), PorterDuff.Mode.SRC_IN);\r\n            binding.ivPlaylistStatus.setVisibility(View.VISIBLE);\r\n            binding.llListing.setVisibility(View.VISIBLE);\r\n            try {\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    binding.llDelete.setVisibility(View.VISIBLE);\r\n                    binding.llReminder.setVisibility(View.INVISIBLE);\r\n                    binding.llDownloads.setVisibility(View.INVISIBLE);\r\n                    binding.llMore.setVisibility(View.GONE);\r\n                    binding.rlSearch.setVisibility(View.VISIBLE);\r\n                    adpater2 = new PlayListsAdpater2(listModel.getPlaylistSongs(), getActivity(), UserID, \"0\");\r\n                    binding.rvPlayLists2.setAdapter(adpater2);\r\n                    binding.rvPlayLists.setVisibility(View.GONE);\r\n                    binding.rvPlayLists1.setVisibility(View.GONE);\r\n                    binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                    binding.ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n                    binding.ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n                    enableDisableDownload(false, \"orange\");\r\n                    binding.ivReminder.setColorFilter(activity.getResources().getColor(R.color.gray), PorterDuff.Mode.SRC_IN);\r\n                } else {\r\n                    binding.llDownloads.setVisibility(View.VISIBLE);\r\n                    binding.llReminder.setVisibility(View.VISIBLE);\r\n                    if (listModel.getCreated().equalsIgnoreCase(\"1\")) {\r\n                        binding.rvPlayLists.setVisibility(View.VISIBLE);\r\n                        binding.rvPlayLists1.setVisibility(View.VISIBLE);\r\n                        binding.rvPlayLists2.setVisibility(View.GONE);\r\n                        adpater1 = new PlayListsAdpater1(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated(), this);\r\n                        binding.rvPlayLists.setAdapter(adpater1);\r\n                        adpater = new PlayListsAdpater(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated(), this);\r\n                        ItemTouchHelper.Callback callback = new ItemMoveCallback(adpater);\r\n                        touchHelper = new ItemTouchHelper(callback);\r\n                        touchHelper.attachToRecyclerView(binding.rvPlayLists1);\r\n                        binding.rvPlayLists1.setAdapter(adpater);\r\n                    } else {\r\n                        adpater2 = new PlayListsAdpater2(listModel.getPlaylistSongs(), getActivity(), UserID, listModel.getCreated());\r\n                        binding.rvPlayLists2.setAdapter(adpater2);\r\n                        binding.rvPlayLists.setVisibility(View.GONE);\r\n                        binding.rvPlayLists1.setVisibility(View.GONE);\r\n                        binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                    }\r\n                }\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callTransparentFrag(int position, Context ctx, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList,\r\n                                     String myPlaylist, String playlistID) {\r\n        SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        if (queuePlay) {\r\n            int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n            Gson gson = new Gson();\r\n            String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                }.getType();\r\n                addToQueueModelList = gson.fromJson(json1, type1);\r\n            }\r\n            addToQueueModelList.remove(position1);\r\n            SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared2.edit();\r\n            String json = gson.toJson(addToQueueModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();\r\n\r\n        }\r\n        player = 1;\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isPause = false;\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isCompleteStop = false;\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = shared.edit();\r\n        Gson gson = new Gson();\r\n        String json = gson.toJson(listModelList);\r\n        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, myPlaylist);\r\n        if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"Downloadlist\");\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistName);\r\n        } else {\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, playlistID);\r\n        }\r\n        editor.commit();\r\n        try {\r\n            callAddTransFrag();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void callRemove(String id, String PlaylistAudioId, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData, int position) {\r\n        String AudioId = id;\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<SucessModel> listCall = APIClient.getClient().getRemoveAudioFromPlaylist(UserID, AudioId, PlaylistID);\r\n            listCall.enqueue(new Callback<SucessModel>() {\r\n                @Override\r\n                public void onResponse(Call<SucessModel> call, Response<SucessModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        handler2.removeCallbacks(UpdateSongTime2);\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        SucessModel listModel = response.body();\r\n                        mData.remove(position);\r\n                        if (mData.size() == 0) {\r\n                            enableDisableDownload(false, \"gray\");\r\n                        }\r\n                        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                        int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (pos == position && position < mData.size() - 1) {\r\n//                                            pos = pos + 1;\r\n                                if (isDisclaimer == 1) {\r\n//                                    BWSApplication.showToast(\"The audio shall remove after the disclaimer\", getActivity());\r\n                                } else {\r\n                                    callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\", PlaylistID);\r\n                                }\r\n                            } else if (pos == position && position == mData.size() - 1) {\r\n                                pos = 0;\r\n                                if (isDisclaimer == 1) {\r\n//                                    BWSApplication.showToast(\"The audio shall remove after the disclaimer\", getActivity());\r\n                                } else {\r\n                                    callTransparentFrag(pos, getActivity(), mData, \"myPlaylist\", PlaylistID);\r\n                                }\r\n                            } else if (pos < position && pos < mData.size() - 1) {\r\n                                saveToPref(pos, mData);\r\n                            } else if (pos > position && pos == mData.size()) {\r\n                                pos = pos - 1;\r\n                                saveToPref(pos, mData);\r\n                            }\r\n                        }\r\n                        prepareData(UserID, PlaylistID);\r\n                        BWSApplication.showToast(listModel.getResponseMessage(), getActivity());\r\n                    }\r\n                }\r\n\r\n                private void saveToPref(int pos, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData) {\r\n                    SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shareddd.edit();\r\n                    Gson gson = new Gson();\r\n                    String json = gson.toJson(mData);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                    editor.commit();\r\n                    callAddTransFrag();\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<SucessModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private void callDownload(String id, String audioFile, String Name, ArrayList<SubPlayListModel.ResponseData.PlaylistSong>\r\n            playlistSongs, int position, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        if (id.isEmpty() && Name.isEmpty() && audioFile.isEmpty()) {\r\n            enableDisableDownload(false, \"orange\");\r\n            List<String> url = new ArrayList<>();\r\n            List<String> name = new ArrayList<>();\r\n            List<String> downloadPlaylistId = new ArrayList<>();\r\n            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs2 = new ArrayList<>();\r\n            playlistSongs2.addAll(playlistSongs);\r\n            if (downloadAudioDetailsList.size() != 0) {\r\n                for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                    if (playlistSongs2.size() == 0) {\r\n                        break;\r\n                    } else {\r\n                        for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                            if (playlistSongs2.size() != 0) {\r\n                                if (playlistSongs2.get(x).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                    playlistSongs2.remove(x);\r\n                                }\r\n                                if (playlistSongs2.size() == 0) {\r\n                                    break;\r\n                                }\r\n                            } else break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (playlistSongs2.size() != 0) {\r\n                for (int x = 0; x < playlistSongs2.size(); x++) {\r\n                    name.add(playlistSongs2.get(x).getName());\r\n                    url.add(playlistSongs2.get(x).getAudioFile());\r\n                    downloadPlaylistId.add(playlistSongs2.get(x).getPlaylistID());\r\n                }\r\n            }\r\n            byte[] encodedBytes = new byte[1024];\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson1 = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n            String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n            String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n            if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                List<String> fileNameList = gson1.fromJson(json, type);\r\n                List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                if (fileNameList.size() != 0) {\r\n                    url.addAll(audioFile1);\r\n                    name.addAll(fileNameList);\r\n                    downloadPlaylistId.addAll(playlistId1);\r\n                }\r\n            }\r\n            if (url.size() != 0) {\r\n                DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                String urlJson = gson.toJson(url);\r\n                String nameJson = gson.toJson(name);\r\n                String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                fileNameList = name;\r\n                playlistDownloadId = downloadPlaylistId;\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                /*remainAudio = new ArrayList<>();\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                        remainAudio.add(playlistDownloadId.get(i));\r\n                    }\r\n                }*/\r\n                SongListSize = playlistSongs.size();\r\n//                handler1.postDelayed(UpdateSongTime1, 500);\r\n            }\r\n            binding.pbProgress.setVisibility(View.VISIBLE);\r\n            binding.ivDownloads.setVisibility(View.GONE);\r\n//            String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n//            SaveMedia(EncodeBytes, dirPath, playlistSongs, i, llDownload);\r\n            getMediaByPer(PlaylistID, SongListSize);\r\n            savePlaylist();\r\n            saveAllMedia(playlistSongs, playlistSongs2, encodedBytes);\r\n        } else {\r\n            boolean downloadOrNot = false;\r\n            if (downloadAudioDetailsList.size() != 0) {\r\n                for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                    if (downloadAudioDetailsList.get(i).equals(audioFile)) {\r\n                        downloadOrNot = false;\r\n                        break;\r\n                    } else {\r\n                        downloadOrNot = true;\r\n                    }\r\n                }\r\n            } else {\r\n                downloadOrNot = true;\r\n            }\r\n            if (downloadOrNot) {\r\n                disableDownload(llDownload, ivDownloads);\r\n                List<String> url = new ArrayList<>();\r\n                List<String> name = new ArrayList<>();\r\n                List<String> downloadPlaylistId = new ArrayList<>();\r\n                SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n                Gson gson1 = new Gson();\r\n                String json = sharedx.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson1));\r\n                String json1 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson1));\r\n                String json2 = sharedx.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson1));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson1))) {\r\n                    Type type = new TypeToken<List<String>>() {\r\n                    }.getType();\r\n                    List<String> fileNameList = gson1.fromJson(json, type);\r\n                    List<String> audioFile1 = gson1.fromJson(json1, type);\r\n                    List<String> playlistId1 = gson1.fromJson(json2, type);\r\n                    if (fileNameList.size() != 0) {\r\n                        url.addAll(audioFile1);\r\n                        name.addAll(fileNameList);\r\n                        downloadPlaylistId.addAll(playlistId1);\r\n                    }\r\n                }\r\n                url.add(audioFile);\r\n                name.add(Name);\r\n                downloadPlaylistId.add(\"\");\r\n                if (url.size() != 0) {\r\n                    DownloadMedia downloadMedia = new DownloadMedia(getActivity().getApplicationContext());\r\n                    downloadMedia.encrypt1(url, name, downloadPlaylistId/*, playlistSongs*/);\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared.edit();\r\n                    Gson gson = new Gson();\r\n                    String urlJson = gson.toJson(url);\r\n                    String nameJson = gson.toJson(name);\r\n                    String playlistIdJson = gson.toJson(downloadPlaylistId);\r\n                    editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                    editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                    editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                    editor.commit();\r\n                    fileNameList = name;\r\n                    playlistDownloadId = downloadPlaylistId;\r\n                }\r\n            }\r\n            String dirPath = FileUtils.getFilePath(getActivity().getApplicationContext(), Name);\r\n            SaveMedia(new byte[1024], dirPath, playlistSongs, position, llDownload, ivDownloads);\r\n            SharedPreferences sharedx = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = sharedx.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int position1 = sharedx.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            boolean audioPlay = sharedx.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            Gson gsonx = new Gson();\r\n            String json = sharedx.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gsonx));\r\n            String jsonw = sharedx.getString(CONSTANTS.PREF_KEY_modelList, String.valueOf(gsonx));\r\n            Type type1 = new TypeToken<ArrayList<LikesHistoryModel.ResponseData.Audio>>() {\r\n            }.getType();\r\n            Gson gson1 = new Gson();\r\n            ArrayList<DownloadAudioDetails> arrayList = gson1.fromJson(jsonw, type1);\r\n            ArrayList<MainPlayModel> arrayList2 = gson1.fromJson(json, type1);\r\n\r\n            if (audioPlay && AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n                DownloadAudioDetails mainPlayModel = new DownloadAudioDetails();\r\n                mainPlayModel.setID(playlistSongs.get(position).getID());\r\n                mainPlayModel.setName(playlistSongs.get(position).getName());\r\n                mainPlayModel.setAudioFile(playlistSongs.get(position).getAudioFile());\r\n                mainPlayModel.setAudioDirection(playlistSongs.get(position).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(playlistSongs.get(position).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(playlistSongs.get(position).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(playlistSongs.get(position).getImageFile());\r\n                mainPlayModel.setLike(playlistSongs.get(position).getLike());\r\n                mainPlayModel.setDownload(playlistSongs.get(position).getDownload());\r\n                mainPlayModel.setAudioDuration(playlistSongs.get(position).getAudioDuration());\r\n                arrayList.add(mainPlayModel);\r\n                MainPlayModel mainPlayModel1 = new MainPlayModel();\r\n                mainPlayModel1.setID(playlistSongs.get(position).getID());\r\n                mainPlayModel1.setName(playlistSongs.get(position).getName());\r\n                mainPlayModel1.setAudioFile(playlistSongs.get(position).getAudioFile());\r\n                mainPlayModel1.setAudioDirection(playlistSongs.get(position).getAudioDirection());\r\n                mainPlayModel1.setAudiomastercat(playlistSongs.get(position).getAudiomastercat());\r\n                mainPlayModel1.setAudioSubCategory(playlistSongs.get(position).getAudioSubCategory());\r\n                mainPlayModel1.setImageFile(playlistSongs.get(position).getImageFile());\r\n                mainPlayModel1.setLike(playlistSongs.get(position).getLike());\r\n                mainPlayModel1.setDownload(playlistSongs.get(position).getDownload());\r\n                mainPlayModel1.setAudioDuration(playlistSongs.get(position).getAudioDuration());\r\n                arrayList2.add(mainPlayModel1);\r\n            }\r\n            SharedPreferences sharedd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = sharedd.edit();\r\n            Gson gson = new Gson();\r\n            String jsonx = gson.toJson(arrayList2);\r\n            String json1 = gson.toJson(arrayList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json1);\r\n            editor.putString(CONSTANTS.PREF_KEY_audioList, jsonx);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position1);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"DownloadListAudio\");\r\n            editor.commit();\r\n            callAddTransFrag();\r\n            handler2.postDelayed(UpdateSongTime2, 2000);\r\n        }\r\n    }\r\n\r\n    private void savePlaylist() {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertPlaylist(downloadPlaylistDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n                getMediaByPer(PlaylistID, SongListSize);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void saveAllMedia(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs2, byte[] encodedBytes) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                for (int i = 0; i < playlistSongs.size(); i++) {\r\n                    downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                    downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                    downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                    downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                    downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                    downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                    downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                    downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                    downloadAudioDetails.setPlaylistId(PlaylistID);\r\n                    downloadAudioDetails.setDownload(\"1\");\r\n                    downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                    downloadAudioDetails.setIsSingle(\"0\");\r\n                    if (downloadAudioDetailsList.size() != 0) {\r\n                        for (int y = 0; y < downloadAudioDetailsList.size(); y++) {\r\n                            if (playlistSongs.get(i).getAudioFile().equalsIgnoreCase(downloadAudioDetailsList.get(y).getAudioFile())) {\r\n                                downloadAudioDetails.setIsDownload(\"Complete\");\r\n                                downloadAudioDetails.setDownloadProgress(100);\r\n                                break;\r\n                            } else {\r\n                                downloadAudioDetails.setIsDownload(\"pending\");\r\n                                downloadAudioDetails.setDownloadProgress(0);\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                    DatabaseClient.getInstance(getActivity())\r\n                            .getaudioDatabase()\r\n                            .taskDao()\r\n                            .insertMedia(downloadAudioDetails);\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                llDownload.setClickable(false);\r\n//                llDownload.setEnabled(false);\r\n\r\n                getMediaByPer(PlaylistID, SongListSize);\r\n                enableDisableDownload(false, \"orange\");\r\n                downloadAudioDetailsList = GetAllMedia();\r\n                playlistWiseAudioDetails = GetMedia();\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    private void SaveMedia(byte[] encodeBytes, String dirPath, ArrayList<SubPlayListModel.ResponseData.PlaylistSong> playlistSongs, int i, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        class SaveMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DownloadAudioDetails downloadAudioDetails = new DownloadAudioDetails();\r\n                downloadAudioDetails.setID(playlistSongs.get(i).getID());\r\n                downloadAudioDetails.setName(playlistSongs.get(i).getName());\r\n                downloadAudioDetails.setAudioFile(playlistSongs.get(i).getAudioFile());\r\n                downloadAudioDetails.setAudioDirection(playlistSongs.get(i).getAudioDirection());\r\n                downloadAudioDetails.setAudiomastercat(playlistSongs.get(i).getAudiomastercat());\r\n                downloadAudioDetails.setAudioSubCategory(playlistSongs.get(i).getAudioSubCategory());\r\n                downloadAudioDetails.setImageFile(playlistSongs.get(i).getImageFile());\r\n                downloadAudioDetails.setLike(playlistSongs.get(i).getLike());\r\n                downloadAudioDetails.setDownload(\"1\");\r\n                downloadAudioDetails.setAudioDuration(playlistSongs.get(i).getAudioDuration());\r\n                downloadAudioDetails.setIsSingle(\"1\");\r\n                downloadAudioDetails.setPlaylistId(\"\");\r\n                downloadAudioDetails.setIsDownload(\"pending\");\r\n                downloadAudioDetails.setDownloadProgress(0);\r\n                DatabaseClient.getInstance(activity)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .insertMedia(downloadAudioDetails);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                downloadAudioDetailsList = GetAllMedia();\r\n                playlistWiseAudioDetails = GetMedia();\r\n                downloadedSingleAudio = getMyMedia();\r\n                disableDownload(llDownload, ivDownloads);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        SaveMedia st = new SaveMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public void GetMedia(String url, Context ctx, String download, RelativeLayout llDownload, ImageView ivDownloads) {\r\n        oneAudioDetailsList = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(url);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (oneAudioDetailsList.size() != 0) {\r\n                    if (oneAudioDetailsList.get(0).getDownload().equalsIgnoreCase(\"1\")) {\r\n                        disableDownload(llDownload, ivDownloads);\r\n                    }\r\n                } else if (download.equalsIgnoreCase(\"1\")) {\r\n                    disableDownload(llDownload, ivDownloads);\r\n                } else {\r\n                    enableDownload(llDownload, ivDownloads);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetMedia() {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(PlaylistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    if (downloadPlaylistDetailsList.size() != 0) {\r\n                        SubPlayListModel responseData = new SubPlayListModel();\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> details = new ArrayList<>();\r\n                        SubPlayListModel.ResponseData listModel = new SubPlayListModel.ResponseData();\r\n                        listModel.setPlaylistID(downloadPlaylistDetailsList.get(0).getPlaylistID());\r\n                        listModel.setPlaylistName(downloadPlaylistDetailsList.get(0).getPlaylistName());\r\n                        listModel.setPlaylistDesc(downloadPlaylistDetailsList.get(0).getPlaylistDesc());\r\n                        listModel.setPlaylistMastercat(downloadPlaylistDetailsList.get(0).getPlaylistMastercat());\r\n                        listModel.setPlaylistSubcat(downloadPlaylistDetailsList.get(0).getPlaylistSubcat());\r\n                        listModel.setPlaylistImageDetail(downloadPlaylistDetailsList.get(0).getPlaylistImage());\r\n                        listModel.setTotalAudio(downloadPlaylistDetailsList.get(0).getTotalAudio());\r\n                        listModel.setTotalDuration(downloadPlaylistDetailsList.get(0).getTotalDuration());\r\n                        listModel.setTotalhour(downloadPlaylistDetailsList.get(0).getTotalhour());\r\n                        listModel.setTotalminute(downloadPlaylistDetailsList.get(0).getTotalminute());\r\n                        listModel.setCreated(downloadPlaylistDetailsList.get(0).getCreated());\r\n                        listModel.setLike(downloadPlaylistDetailsList.get(0).getLike());\r\n                        listModel.setIsReminder(downloadPlaylistDetailsList.get(0).getIsReminder());\r\n                        if (playlistWiseAudioDetails.size() != 0) {\r\n                            for (int i = 0; i < playlistWiseAudioDetails.size(); i++) {\r\n                                SubPlayListModel.ResponseData.PlaylistSong detail = new SubPlayListModel.ResponseData.PlaylistSong();\r\n                                detail.setID(playlistWiseAudioDetails.get(i).getID());\r\n                                detail.setName(playlistWiseAudioDetails.get(i).getName());\r\n                                detail.setAudioFile(playlistWiseAudioDetails.get(i).getAudioFile());\r\n                                detail.setAudioDirection(playlistWiseAudioDetails.get(i).getAudioDirection());\r\n                                detail.setAudiomastercat(playlistWiseAudioDetails.get(i).getAudiomastercat());\r\n                                detail.setAudioSubCategory(playlistWiseAudioDetails.get(i).getAudioSubCategory());\r\n                                detail.setImageFile(playlistWiseAudioDetails.get(i).getImageFile());\r\n                                detail.setLike(playlistWiseAudioDetails.get(i).getLike());\r\n                                detail.setDownload(playlistWiseAudioDetails.get(i).getDownload());\r\n                                detail.setAudioDuration(playlistWiseAudioDetails.get(i).getAudioDuration());\r\n                                details.add(detail);\r\n                            }\r\n                            listModel.setPlaylistSongs(details);\r\n                        }\r\n                        setData(listModel);\r\n                    }\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    private void enableDownload(RelativeLayout llDownload, ImageView ivDownloads) {\r\n        llDownload.setClickable(true);\r\n        llDownload.setEnabled(true);\r\n        ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n        ivDownloads.setColorFilter(activity.getResources().getColor(R.color.black), PorterDuff.Mode.SRC_IN);\r\n    }\r\n\r\n    private void disableDownload(RelativeLayout llDownload, ImageView ivDownloads) {\r\n        ivDownloads.setImageResource(R.drawable.ic_download_play_icon);\r\n        ivDownloads.setColorFilter(activity.getResources().getColor(R.color.dark_yellow), PorterDuff.Mode.SRC_IN);\r\n        llDownload.setClickable(false);\r\n        llDownload.setEnabled(false);\r\n    }\r\n\r\n    @Override\r\n    public void requestDrag(RecyclerView.ViewHolder viewHolder) {\r\n        touchHelper.startDrag(viewHolder);\r\n    }\r\n\r\n    private void addDisclaimer() {\r\n        addDisclaimer = new SubPlayListModel.ResponseData.PlaylistSong();\r\n        addDisclaimer.setID(\"0\");\r\n        addDisclaimer.setName(\"Disclaimer\");\r\n        addDisclaimer.setAudioFile(\"\");\r\n        addDisclaimer.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n        addDisclaimer.setAudiomastercat(\"\");\r\n        addDisclaimer.setAudioSubCategory(\"\");\r\n        addDisclaimer.setImageFile(\"\");\r\n        addDisclaimer.setLike(\"\");\r\n        addDisclaimer.setDownload(\"\");\r\n        addDisclaimer.setAudioDuration(\"0:48\");\r\n    }\r\n\r\n    public class PlayListsAdpater extends RecyclerView.Adapter<PlayListsAdpater.MyViewHolder> implements Filterable/*, StartDragListener*/, ItemMoveCallback.ItemTouchHelperContract {\r\n        Context ctx;\r\n        String UserID, Created, name;\r\n        StartDragListener startDragListener;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                String Created, StartDragListener startDragListener) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n            this.startDragListener = startDragListener;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutSorting2Binding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout_sorting2, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @SuppressLint(\"ClickableViewAccessibility\")\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n\r\n            /*UpdateSongTime2 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n//                        for (int f = 0; f < GlobalListModel.getPlaylistSongs().size(); f++) {\r\n                        if (fileNameList.size() != 0) {\r\n                            for (int i = 0; i < fileNameList.size(); i++) {\r\n                                if (fileNameList.get(i).equalsIgnoreCase(GlobalListModel.getPlaylistSongs().get(position).getName())) {\r\n                                    if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(GlobalListModel.getPlaylistSongs().get(position).getName())) {\r\n                                        if (downloadProgress <= 100) {\r\n                                            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                                notifyItemChanged(position);\r\n                                            }\r\n                                        } else {\r\n                                            holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                            getDownloadData();\r\n                                        }\r\n                                    } else {\r\n//                                        notifyItemChanged(position);\r\n                                    }\r\n                                }\r\n                            }\r\n//                            }\r\n                        }\r\n                        if (downloadProgress == 0) {\r\n                            notifyDataSetChanged();\r\n                            getDownloadData();\r\n                        }\r\n                        handler2.postDelayed(this, 3000);\r\n                    } catch (Exception e) {\r\n\r\n                    }\r\n                }\r\n            };\r\n            searchEditText.setHint(R.string.playlist_or_audio_search);\r\n            binding.tvSearch.setHint(R.string.playlist_or_audio_search);\r\n            binding.tvSearch.setVisibility(View.VISIBLE);\r\n            binding.searchView.setVisibility(View.GONE);\r\n            holder.binding.tvTitle.setText(mData.get(position).getName());\r\n            holder.binding.tvTime.setText(mData.get(position).getAudioDuration());*/\r\n\r\n            SharedPreferences sharedzw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                if (audioPlayz && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pIDz.equalsIgnoreCase(PlaylistName)) {\r\n                    if(myAudioId.equalsIgnoreCase(mData.get(position).getID())){\r\n                        holder.binding.llHighLight.setBackgroundResource(R.color.highlight_background);\r\n                    }else{\r\n                        holder.binding.llHighLight.setBackgroundResource(R.color.white);\r\n                    }\r\n                }else{\r\n                    holder.binding.llHighLight.setBackgroundResource(R.color.white);\r\n                    handler3.removeCallbacks(UpdateSongTime3);\r\n                }\r\n            } else {\r\n                if (audioPlayz && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pIDz.equalsIgnoreCase(PlaylistID)) {\r\n                    if(myAudioId.equalsIgnoreCase(mData.get(position).getID())){\r\n                        holder.binding.llHighLight.setBackgroundResource(R.color.highlight_background);\r\n//            holder.binding.equalizerview.stopBars();\r\n                    }else{\r\n                        holder.binding.llHighLight.setBackgroundResource(R.color.white);\r\n                    }\r\n                }else{\r\n                    holder.binding.llHighLight.setBackgroundResource(R.color.white);\r\n                    handler3.removeCallbacks(UpdateSongTime3);\r\n                }\r\n            }\r\n\r\n          /*  holder.binding.llMainLayout.setVisibility(View.GONE);\r\n            holder.binding.llDownload.setVisibility(View.GONE);\r\n            holder.binding.llRemove.setVisibility(View.GONE);*/\r\n//            holder.binding.llHighLight.setBackgroundResource(R.color.highlight_background);\r\n//          holder.binding.llThirdLayout.setWeightSum(0.13f);\r\n            holder.binding.llSort.setOnTouchListener((v, event) -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall sort after the disclaimer\", ctx);\r\n                    } else {\r\n                        if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                            startDragListener.requestDrag(holder);\r\n                        }\r\n                        if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                            startDragListener.requestDrag(holder);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                    if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n           /* String id = mData.get(position).getID();\r\n\r\n            if (fileNameList.size() != 0) {\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(mData.get(position).getName())) {\r\n                            if (downloadProgress <= 100) {\r\n                                if (downloadProgress == 100) {\r\n                                    holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                } else {\r\n                                    holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                    holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                                }\r\n                            } else {\r\n                                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                                handler2.removeCallbacks(UpdateSongTime2);\r\n                            }\r\n                            handler2.postDelayed(UpdateSongTime2, 3000);\r\n                        } else {\r\n                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                            handler2.postDelayed(UpdateSongTime2, 3000);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n            }\r\n            for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                if (downloadAudioDetailsList.get(i).getAudioFile().equalsIgnoreCase(mData.get(position).getAudioFile())\r\n                        && downloadAudioDetailsList.get(i).getPlaylistId().equalsIgnoreCase(\"\")) {\r\n                    disableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                    break;\r\n                } else {\r\n                    enableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                }\r\n            }\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(listModelList.get(0).getPlaylistID())) {\r\n\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(0, ctx, listModelList, \"myPlaylist\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    listModelList2.add(addDisclaimer);\r\n                    listModelList2.addAll(listModelList);\r\n                    callTransparentFrag(0, ctx, listModelList2, \"myPlaylist\", PlaylistID);\r\n                }\r\n            });\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                int pos = holder.getAdapterPosition();\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                Log.e(\"postion of paly\", String.valueOf(position));\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(pos, ctx, listModelList, \"myPlaylist\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    if (position != 0) {\r\n                        listModelList2.addAll(listModelList);\r\n                        listModelList2.add(pos, addDisclaimer);\r\n                    } else {\r\n                        listModelList2.add(addDisclaimer);\r\n                        listModelList2.addAll(listModelList);\r\n                    }\r\n                    callTransparentFrag(pos, ctx, listModelList2, \"myPlaylist\", PlaylistID);\r\n                }\r\n            });\r\n\r\n            holder.binding.llDownload.setOnClickListener(view -> {\r\n                name = mData.get(position).getName();\r\n                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                callDownload(mData.get(position).getID(), mData.get(position).getAudioFile(), mData.get(position).getName(), listFilterData, position, holder.binding.llDownload, holder.binding.ivDownloads);\r\n            });\r\n            try {\r\n                holder.binding.llRemove.setOnClickListener(view -> {\r\n                    handler2.removeCallbacks(UpdateSongTime2);\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall remove after the disclaimer\", ctx);\r\n                        } else {\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                                BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                            } else {\r\n                                callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                            BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                        } else {\r\n                            callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                        }\r\n                    }\r\n                });\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }*/\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (listFilterData != null) {\r\n                return listFilterData.size();\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public void onRowMoved(int fromPosition, int toPosition) {\r\n            if (fromPosition < toPosition) {\r\n                for (int i = fromPosition; i < toPosition; i++) {\r\n                    Collections.swap(listModelList, i, i + 1);\r\n                }\r\n            } else {\r\n                for (int i = fromPosition; i > toPosition; i--) {\r\n                    Collections.swap(listModelList, i, i - 1);\r\n                }\r\n            }\r\n            changedAudio.clear();\r\n            for (int i = 0; i < listModelList.size(); i++) {\r\n                changedAudio.add(listModelList.get(i).getID());\r\n            }\r\n            callDragApi();\r\n            notifyItemMoved(fromPosition, toPosition);\r\n            adpater1.notifyItemMoved(fromPosition, toPosition);\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            if (audioPlay) {\r\n                if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (fromPosition == pos) {\r\n                            pos = toPosition;\r\n                            String one = \"1\";\r\n                            Log.e(\"one\", one);\r\n                        }/* else if (toPosition == pos) {\r\n                            if (action == 0) {\r\n                                pos = pos + 1;\r\n                            } else if (action == 1) {\r\n                                pos = pos - 1;\r\n                            }\r\n                        }*/ else if (fromPosition < pos && toPosition > pos) {\r\n                            pos = pos - 1;\r\n                            String one = \"2\";\r\n                            Log.e(\"one\", one);\r\n                        } else if ((fromPosition > pos && toPosition > pos) || (fromPosition < pos && toPosition < pos)) {\r\n                            pos = pos;\r\n                            String one = \"3\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition > pos && toPosition < pos) {\r\n                            pos = pos + 1;\r\n                            String one = \"4\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition > pos && toPosition == pos) {\r\n                            pos = pos + 1;\r\n                            String one = \"5\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition < pos && toPosition == pos) {\r\n                            pos = pos - 1;\r\n                            String one = \"6\";\r\n                            Log.e(\"one\", one);\r\n                        }\r\n                        SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shareddd.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(listModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                        editor.commit();\r\n                        callAddTransFrag();\r\n                    }\r\n                }\r\n            }\r\n\r\n         /* SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();*/\r\n\r\n        }\r\n\r\n        private void callDragApi() {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Call<CardModel> listCall = APIClient.getClient().setShortedAudio(UserID, PlaylistID, TextUtils.join(\",\", changedAudio));\r\n                listCall.enqueue(new Callback<CardModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<CardModel> call, Response<CardModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            CardModel listModel = response.body();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<CardModel> call, Throwable t) {\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onRowClear(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n       /* @Override\r\n        public int getItemViewType(int position) {\r\n            return position;\r\n        }\r\n\r\n        @Override\r\n        public long getItemId(int position) {\r\n            return position;\r\n        }*/\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        binding.rvPlayLists2.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutSorting2Binding binding;\r\n\r\n            public MyViewHolder(MyPlaylistLayoutSorting2Binding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PlayListsAdpater1 extends RecyclerView.Adapter<PlayListsAdpater1.MyViewHolder> implements Filterable/*, ItemMoveCallback.ItemTouchHelperContract */ {\r\n        Context ctx;\r\n        String UserID, Created, name,songId;\r\n        StartDragListener startDragListener;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater1(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                 String Created, StartDragListener startDragListener) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n            this.startDragListener = startDragListener;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutSorting1Binding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout_sorting1, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @SuppressLint(\"ClickableViewAccessibility\")\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n            UpdateSongTime3 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n                        startTime = getStartTime();\r\n                        myProgress = currentDuration;\r\n                        currentDuration = getStartTime();\r\n                        diff = totalDuration - myProgress;\r\n                        if (currentDuration == 0 && isCompleteStop) {\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        }  else if (currentDuration >= 1 && !isPause) {\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                        } else if (currentDuration >= 1 && isPause) {\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        }\r\n                        if(!songId.equalsIgnoreCase(myAudioId)){\r\n                            notifyDataSetChanged();\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    handler3.postDelayed(this, 500);\r\n                }\r\n            };\r\n            UpdateSongTime2 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n//                        for (int f = 0; f < GlobalListModel.getPlaylistSongs().size(); f++) {\r\n                        if (fileNameList.size() != 0) {\r\n                            for (int i = 0; i < fileNameList.size(); i++) {\r\n                                if (fileNameList.get(i).equalsIgnoreCase(GlobalListModel.getPlaylistSongs().get(position).getName())) {\r\n                                    if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(GlobalListModel.getPlaylistSongs().get(position).getName())) {\r\n                                        if (downloadProgress <= 100) {\r\n                                            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                                                notifyItemChanged(position);\r\n                                            }\r\n                                        } else {\r\n                                            holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                            holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                            getDownloadData();\r\n                                        }\r\n                                    } else {\r\n//                                        notifyItemChanged(position);\r\n                                    }\r\n                                }\r\n                            }\r\n//                            }\r\n                        }\r\n                        if (downloadProgress == 0) {\r\n                            notifyDataSetChanged();\r\n                            getDownloadData();\r\n                        }\r\n                        handler2.postDelayed(this, 3000);\r\n                    } catch (Exception e) {\r\n\r\n                    }\r\n                }\r\n            };\r\n            holder.binding.llMainLayout.setVisibility(View.VISIBLE);\r\n            holder.binding.llDownload.setVisibility(View.VISIBLE);\r\n            holder.binding.llRemove.setVisibility(View.VISIBLE);\r\n            holder.binding.llSort.setVisibility(View.GONE);\r\n            searchEditText.setHint(R.string.playlist_or_audio_search);\r\n            binding.tvSearch.setHint(R.string.playlist_or_audio_search);\r\n            binding.tvSearch.setVisibility(View.VISIBLE);\r\n            binding.searchView.setVisibility(View.GONE);\r\n            holder.binding.tvTitle.setText(mData.get(position).getName());\r\n            holder.binding.tvTime.setText(mData.get(position).getAudioDuration());\r\n//            holder.binding.llThirdLayout.setWeightSum(0.26f);\r\n           /* holder.binding.llSort.setOnTouchListener((v, event) -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall sort after the disclaimer\", ctx);\r\n                    } else {\r\n                        if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                            startDragListener.requestDrag(holder);\r\n                        }\r\n                        if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                            startDragListener.requestDrag(holder);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (event.getAction() == MotionEvent.ACTION_DOWN) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                    if (event.getAction() == MotionEvent.ACTION_UP) {\r\n                        startDragListener.requestDrag(holder);\r\n                    }\r\n                }\r\n                return false;\r\n            });*/\r\n            String id = mData.get(position).getID();\r\n            SharedPreferences sharedzw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                if (audioPlayz && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pIDz.equalsIgnoreCase(PlaylistName)) {\r\n                    if(myAudioId.equalsIgnoreCase(mData.get(position).getID())){\r\n                        songId = myAudioId;\r\n                        holder.binding.equalizerview.animateBars();\r\n                        holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                        holder.binding.llHighLight.setBackgroundResource(R.color.highlight_background);\r\n                        adpater.notifyItemChanged(position);\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n                        handler3.postDelayed(UpdateSongTime3,500);\r\n//            holder.binding.equalizerview.stopBars();\r\n                    }else{\r\n                        holder.binding.equalizerview.setVisibility(View.GONE);\r\n                        holder.binding.llHighLight.setBackgroundResource(R.color.white);\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    }\r\n                }else{\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llHighLight.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    handler3.removeCallbacks(UpdateSongTime3);\r\n                }\r\n            } else {\r\n                if (audioPlayz && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pIDz.equalsIgnoreCase(PlaylistID)) {\r\n                    if(myAudioId.equalsIgnoreCase(mData.get(position).getID())){\r\n                        songId = myAudioId;\r\n                        holder.binding.equalizerview.animateBars();\r\n                        holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                        holder.binding.llHighLight.setBackgroundResource(R.color.highlight_background);\r\n                        adpater.notifyItemChanged(position);\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n                        handler3.postDelayed(UpdateSongTime3,500);\r\n//            holder.binding.equalizerview.stopBars();\r\n                    }else{\r\n                        holder.binding.equalizerview.setVisibility(View.GONE);\r\n                        holder.binding.llHighLight.setBackgroundResource(R.color.white);\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    }\r\n                }else{\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llHighLight.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    handler3.removeCallbacks(UpdateSongTime3);\r\n                }\r\n            }\r\n            if (fileNameList.size() != 0) {\r\n                for (int i = 0; i < fileNameList.size(); i++) {\r\n                    if (fileNameList.get(i).equalsIgnoreCase(mData.get(position).getName()) && playlistDownloadId.get(i).equalsIgnoreCase(\"\")) {\r\n                        if (!filename.equalsIgnoreCase(\"\") && filename.equalsIgnoreCase(mData.get(position).getName())) {\r\n                            if (downloadProgress <= 100) {\r\n                                if (downloadProgress == 100) {\r\n                                    holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n                                } else {\r\n                                    holder.binding.pbProgress.setProgress(downloadProgress);\r\n                                    holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                                    holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                                }\r\n                            } else {\r\n                                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n//                                handler2.removeCallbacks(UpdateSongTime2);\r\n                            }\r\n                            handler2.postDelayed(UpdateSongTime2, 3000);\r\n                        } else {\r\n                            holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                            holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                            handler2.postDelayed(UpdateSongTime2, 3000);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                holder.binding.pbProgress.setVisibility(View.GONE);\r\n                holder.binding.ivDownloads.setVisibility(View.VISIBLE);\r\n            }\r\n            for (int i = 0; i < downloadAudioDetailsList.size(); i++) {\r\n                if (downloadAudioDetailsList.get(i).getAudioFile().equalsIgnoreCase(mData.get(position).getAudioFile())\r\n                        && downloadAudioDetailsList.get(i).getPlaylistId().equalsIgnoreCase(\"\")) {\r\n                    disableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                    break;\r\n                } else {\r\n                    enableDownload(holder.binding.llDownload, holder.binding.ivDownloads);\r\n                }\r\n            }\r\n\r\n           /* MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            holder.binding.ivBackgroundImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.setScaleType(ImageView.ScaleType.FIT_XY);*/\r\n//            holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n//            holder.binding.llHighLight.setBackgroundResource(R.color.highlight_background);\r\n//            holder.binding.equalizerview.animateBars();\r\n//            holder.binding.equalizerview.stopBars();\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                if (isPlayPlaylist == 1) {\r\n                    pauseMedia();\r\n                    isPlayPlaylist = 2;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                } else if (isPlayPlaylist == 2) {\r\n                    resumeMedia();\r\n                    isPlayPlaylist = 1;\r\n                    handler3.postDelayed(UpdateSongTime3,500);\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                } else {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(listModelList.get(0).getPlaylistID())) {\r\n                        if (isDisclaimer == 1) {\r\n                            if (isPause) {\r\n                                resumeMedia();\r\n                            } else\r\n                                BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransparentFrag(0, ctx, listModelList, \"myPlaylist\", PlaylistID);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                        listModelList2.add(addDisclaimer);\r\n                        listModelList2.addAll(listModelList);\r\n                        callTransparentFrag(0, ctx, listModelList2, \"myPlaylist\", PlaylistID);\r\n                    }\r\n                    isPlayPlaylist = 1;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                }\r\n                songId = mData.get(position).getID();\r\n                myAudioId =songId;\r\n                handler3.postDelayed(UpdateSongTime3,500);\r\n            });\r\n\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                int pos = holder.getAdapterPosition();\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                Log.e(\"postion of paly\", String.valueOf(position));\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                    } else {\r\n                        callTransparentFrag(pos, ctx, listModelList, \"myPlaylist\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                    if (position != 0) {\r\n                        listModelList2.addAll(listModelList);\r\n                        listModelList2.add(pos, addDisclaimer);\r\n                    } else {\r\n                        listModelList2.add(addDisclaimer);\r\n                        listModelList2.addAll(listModelList);\r\n                    }\r\n                    callTransparentFrag(pos, ctx, listModelList2, \"myPlaylist\", PlaylistID);\r\n                }\r\n                isPlayPlaylist = 1;\r\n                songId = mData.get(position).getID();\r\n                myAudioId =songId;\r\n                handler3.postDelayed(UpdateSongTime3,500);\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n            });\r\n            holder.binding.llDownload.setOnClickListener(view -> {\r\n                name = mData.get(position).getName();\r\n                holder.binding.pbProgress.setVisibility(View.VISIBLE);\r\n                holder.binding.ivDownloads.setVisibility(View.GONE);\r\n                callDownload(mData.get(position).getID(), mData.get(position).getAudioFile(), mData.get(position).getName(), listFilterData, position, holder.binding.llDownload, holder.binding.ivDownloads);\r\n            });\r\n            try {\r\n                holder.binding.llRemove.setOnClickListener(view -> {\r\n                    handler2.removeCallbacks(UpdateSongTime2);\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall remove after the disclaimer\", ctx);\r\n                        } else {\r\n                            if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                                BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                            } else {\r\n                                callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID) && mData.size() == 1) {\r\n                            BWSApplication.showToast(\"Currently you play this playlist, you can't remove last audio\", ctx);\r\n                        } else {\r\n                            callRemove(mData.get(position).getID(), mData.get(position).getPlaylistAudioId(), mData, position);\r\n                        }\r\n                    }\r\n                });\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (listFilterData != null) {\r\n                return listFilterData.size();\r\n            }\r\n            return 0;\r\n        }\r\n\r\n      /*  @Override\r\n        public void onRowMoved(int fromPosition, int toPosition) {\r\n            if (fromPosition < toPosition) {\r\n                for (int i = fromPosition; i < toPosition; i++) {\r\n                    Collections.swap(listModelList, i, i + 1);\r\n                }\r\n            } else {\r\n                for (int i = fromPosition; i > toPosition; i--) {\r\n                    Collections.swap(listModelList, i, i - 1);\r\n                }\r\n            }\r\n            changedAudio.clear();\r\n            for (int i = 0; i < listModelList.size(); i++) {\r\n                changedAudio.add(listModelList.get(i).getID());\r\n            }\r\n\r\n            callDragApi();\r\n\r\n            notifyItemMoved(fromPosition, toPosition);\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            int pos = shared.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n            if (audioPlay) {\r\n                if (AudioFlag.equalsIgnoreCase(\"SubPlayList\")) {\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                    if (pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (fromPosition == pos) {\r\n                            pos = toPosition;\r\n                            String one = \"1\";\r\n                            Log.e(\"one\", one);\r\n                        }*//* else if (toPosition == pos) {\r\n                            if (action == 0) {\r\n                                pos = pos + 1;\r\n                            } else if (action == 1) {\r\n                                pos = pos - 1;\r\n                            }\r\n                        }*//* else if (fromPosition < pos && toPosition > pos) {\r\n                            pos = pos - 1;\r\n                            String one = \"2\";\r\n                            Log.e(\"one\", one);\r\n                        } else if ((fromPosition > pos && toPosition > pos) || (fromPosition < pos && toPosition < pos)) {\r\n                            pos = pos;\r\n                            String one = \"3\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition > pos && toPosition < pos) {\r\n                            pos = pos + 1;\r\n                            String one = \"4\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition > pos && toPosition == pos) {\r\n                            pos = pos + 1;\r\n                            String one = \"5\";\r\n                            Log.e(\"one\", one);\r\n                        } else if (fromPosition < pos && toPosition == pos) {\r\n                            pos = pos - 1;\r\n                            String one = \"6\";\r\n                            Log.e(\"one\", one);\r\n                        }\r\n                        SharedPreferences shareddd = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shareddd.edit();\r\n                        Gson gson = new Gson();\r\n                        String json = gson.toJson(listModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, pos);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, PlaylistID);\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"myPlaylist\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"SubPlayList\");\r\n                        editor.commit();\r\n                        callAddTransFrag();\r\n                    }\r\n                }\r\n            }\r\n\r\n         *//* SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n            editor.commit();*//*\r\n\r\n        }\r\n\r\n        private void callDragApi() {\r\n            if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                Call<CardModel> listCall = APIClient.getClient().setShortedAudio(UserID, PlaylistID, TextUtils.join(\",\", changedAudio));\r\n                listCall.enqueue(new Callback<CardModel>() {\r\n                    @Override\r\n                    public void onResponse(Call<CardModel> call, Response<CardModel> response) {\r\n                        if (response.isSuccessful()) {\r\n                            CardModel listModel = response.body();\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailure(Call<CardModel> call, Throwable t) {\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onRowSelected(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onRowClear(RecyclerView.ViewHolder myViewHolder) {\r\n\r\n        }*/\r\n\r\n        @Override\r\n        public int getItemViewType(int position) {\r\n            return position;\r\n        }\r\n\r\n        @Override\r\n        public long getItemId(int position) {\r\n            return position;\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        binding.rvPlayLists2.setVisibility(View.GONE);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutSorting1Binding binding;\r\n\r\n            public MyViewHolder(MyPlaylistLayoutSorting1Binding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public class PlayListsAdpater2 extends RecyclerView.Adapter<PlayListsAdpater2.MyViewHolder2> implements Filterable {\r\n        Context ctx;\r\n        String UserID, Created,songId;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList;\r\n        private ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listFilterData;\r\n\r\n        public PlayListsAdpater2(ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList, Context ctx, String UserID,\r\n                                 String Created) {\r\n            this.listModelList = listModelList;\r\n            this.listFilterData = listModelList;\r\n            this.ctx = ctx;\r\n            this.UserID = UserID;\r\n            this.Created = Created;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder2 onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MyPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.my_playlist_layout, parent, false);\r\n            return new MyViewHolder2(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder2 holder, int position) {\r\n            UpdateSongTime3 = new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    try {\r\n                        startTime = getStartTime();\r\n                        myProgress = currentDuration;\r\n                        currentDuration = getStartTime();\r\n                        diff = totalDuration - myProgress;\r\n                        if (currentDuration == 0 && isCompleteStop) {\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        }  else if (currentDuration >= 1 && !isPause) {\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                        } else if (currentDuration >= 1 && isPause) {\r\n                            binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                        }\r\n\r\n                        if(!songId.equalsIgnoreCase(myAudioId)){\r\n                            notifyDataSetChanged();\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    handler3.postDelayed(this, 500);\r\n                }\r\n            };\r\n            searchEditText.setHint(\"Search for audios\");\r\n            binding.tvSearch.setHint(\"Search for audios\");\r\n\r\n            final ArrayList<SubPlayListModel.ResponseData.PlaylistSong> mData = listFilterData;\r\n            holder.binding.tvTitleA.setText(mData.get(position).getName());\r\n            holder.binding.tvTimeA.setText(mData.get(position).getAudioDuration());\r\n            binding.tvSearch.setVisibility(View.GONE);\r\n            binding.searchView.setVisibility(View.VISIBLE);\r\n            String id = mData.get(position).getID();\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 0,\r\n                    1, 1, 0.12f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            holder.binding.rlImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.rlImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivBackgroundImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n\r\n            Glide.with(ctx).load(mData.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n//            GetMedia(id, activity, mData.get(position).getDownload(), holder.binding.llDownload, holder.binding.ivDownloads);\r\n//            holder.binding.equalizerview.animateBars();\r\n//            holder.binding.equalizerview.stopBars();\r\n            SharedPreferences sharedzw = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            boolean audioPlayz = sharedzw.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            AudioFlag = sharedzw.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            String pIDz = sharedzw.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                if (audioPlayz && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pIDz.equalsIgnoreCase(PlaylistName)) {\r\n                    if(myAudioId.equalsIgnoreCase(mData.get(position).getID())){\r\n                        holder.binding.equalizerview.animateBars();\r\n                        holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                        holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n                        songId = myAudioId;\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n                        handler3.postDelayed(UpdateSongTime3,500);\r\n//            holder.binding.equalizerview.stopBars();\r\n                    }else{\r\n                        holder.binding.equalizerview.setVisibility(View.GONE);\r\n                        holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    }\r\n                }else{\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    handler3.removeCallbacks(UpdateSongTime3);\r\n                }\r\n            } else {\r\n                if (audioPlayz && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pIDz.equalsIgnoreCase(PlaylistID)) {\r\n                    if(myAudioId.equalsIgnoreCase(mData.get(position).getID())){\r\n                        holder.binding.equalizerview.animateBars();\r\n                        holder.binding.equalizerview.setVisibility(View.VISIBLE);\r\n                        holder.binding.llMainLayout.setBackgroundResource(R.color.highlight_background);\r\n                        songId = myAudioId;\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.VISIBLE);\r\n                        holder.binding.ivBackgroundImage.setImageResource(R.drawable.ic_image_bg);\r\n                        handler3.postDelayed(UpdateSongTime3,500);\r\n//            holder.binding.equalizerview.stopBars();\r\n                    }else{\r\n                        holder.binding.equalizerview.setVisibility(View.GONE);\r\n                        holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                        holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    }\r\n                }else{\r\n                    holder.binding.equalizerview.setVisibility(View.GONE);\r\n                    holder.binding.llMainLayout.setBackgroundResource(R.color.white);\r\n                    holder.binding.ivBackgroundImage.setVisibility(View.GONE);\r\n                    handler3.removeCallbacks(UpdateSongTime3);\r\n                }\r\n            }\r\n\r\n            binding.ivPlaylistStatus.setOnClickListener(view -> {\r\n                if (isPlayPlaylist == 1) {\r\n                    pauseMedia();\r\n                    isPlayPlaylist = 2;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_blue_play_icon));\r\n                } else if (isPlayPlaylist == 2) {\r\n                    resumeMedia();\r\n                    isPlayPlaylist = 1;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                } else {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                            if (isDisclaimer == 1) {\r\n                                if (isPause) {\r\n                                    resumeMedia();\r\n                                } else\r\n                                    BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                            } else {\r\n                                callTransparentFrag(0, ctx, listModelList, \"\", PlaylistID);\r\n                            }\r\n                        } else {\r\n                            isDisclaimer = 0;\r\n                            disclaimerPlayed = 0;\r\n                            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                            listModelList2.add(addDisclaimer);\r\n                            listModelList2.addAll(listModelList);\r\n                            callTransparentFrag(0, ctx, listModelList2, \"\", PlaylistID);\r\n                        }\r\n                    } else {\r\n                        if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                            if (isDisclaimer == 1) {\r\n                                if (isPause) {\r\n                                    resumeMedia();\r\n                                } else\r\n                                    BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                            } else {\r\n                                callTransparentFrag(0, ctx, listModelList, \"\", PlaylistID);\r\n                            }\r\n                        } else {\r\n                            isDisclaimer = 0;\r\n                            disclaimerPlayed = 0;\r\n                            ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                            listModelList2.add(addDisclaimer);\r\n                            listModelList2.addAll(listModelList);\r\n                            callTransparentFrag(0, ctx, listModelList2, \"\", PlaylistID);\r\n                        }\r\n                    }\r\n                    isPlayPlaylist = 1;\r\n                    binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                }\r\n                songId = mData.get(position).getID();\r\n                myAudioId =songId;\r\n                handler3.postDelayed(UpdateSongTime3,500);\r\n            });\r\n            holder.binding.llMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransparentFrag(position, ctx, listModelList, \"\", PlaylistID);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                        if (position != 0) {\r\n                            listModelList2.addAll(listModelList);\r\n                            listModelList2.add(position, addDisclaimer);\r\n                        } else {\r\n                            listModelList2.add(addDisclaimer);\r\n                            listModelList2.addAll(listModelList);\r\n                        }\r\n                        callTransparentFrag(position, ctx, listModelList2, \"\", PlaylistID);\r\n                    }\r\n                } else {\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransparentFrag(position, ctx, listModelList, \"\", PlaylistID);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> listModelList2 = new ArrayList<>();\r\n                        if (position != 0) {\r\n                            listModelList2.addAll(listModelList);\r\n                            listModelList2.add(position, addDisclaimer);\r\n                        } else {\r\n                            listModelList2.add(addDisclaimer);\r\n                            listModelList2.addAll(listModelList);\r\n                        }\r\n                        callTransparentFrag(position, ctx, listModelList2, \"\", PlaylistID);\r\n                    }\r\n                }\r\n                isPlayPlaylist = 1;\r\n                binding.ivPlaylistStatus.setImageDrawable(getResources().getDrawable(R.drawable.ic_pause_icon));\r\n                songId = mData.get(position).getID();\r\n                myAudioId =songId;\r\n                handler3.postDelayed(UpdateSongTime3,500);\r\n            });\r\n\r\n            binding.llDelete.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"Downloadlist\") && pID.equalsIgnoreCase(PlaylistName)) {\r\n                        BWSApplication.showToast(\"Currently this playlist is in player,so you can't delete this playlist as of now\", ctx);\r\n                    } else {\r\n                        final Dialog dialog = new Dialog(ctx);\r\n                        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                        dialog.setContentView(R.layout.logout_layout);\r\n                        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(ctx.getResources().getColor(R.color.dark_blue_gray)));\r\n                        dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n\r\n                        final TextView tvGoBack = dialog.findViewById(R.id.tvGoBack);\r\n                        final TextView tvHeader = dialog.findViewById(R.id.tvHeader);\r\n                        final TextView tvTitle = dialog.findViewById(R.id.tvTitle);\r\n                        final Button Btn = dialog.findViewById(R.id.Btn);\r\n                        tvTitle.setText(\"Remove playlist\");\r\n                        tvHeader.setText(\"Are you sure you want to remove the \" + PlaylistName + \" from downloads??\");\r\n                        Btn.setText(\"Confirm\");\r\n                        dialog.setOnKeyListener((vi, keyCode, event) -> {\r\n                            if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                                dialog.dismiss();\r\n                            }\r\n                            return false;\r\n                        });\r\n\r\n                        Btn.setOnClickListener(views -> {\r\n                            getDeleteDownloadData();\r\n                            playlistWiseAudiosDetails = GetPlaylistMedia(PlaylistID);\r\n                            dialog.dismiss();\r\n                            Fragment fragment = new PlaylistFragment();\r\n                            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                            fragmentManager1.beginTransaction()\r\n                                    .replace(R.id.flContainer, fragment)\r\n                                    .commit();\r\n                        });\r\n\r\n                        tvGoBack.setOnClickListener(viewd -> dialog.dismiss());\r\n                        dialog.show();\r\n                        dialog.setCancelable(false);\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                holder.binding.llMore.setClickable(true);\r\n                holder.binding.llMore.setEnabled(true);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.black), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            } else {\r\n                holder.binding.llMore.setClickable(false);\r\n                holder.binding.llMore.setEnabled(false);\r\n                holder.binding.ivMore.setColorFilter(ContextCompat.getColor(getActivity(), R.color.light_gray), android.graphics.PorterDuff.Mode.SRC_IN);\r\n            }\r\n            holder.binding.llMore.setOnClickListener(view -> {\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String pID = shared.getString(CONSTANTS.PREF_KEY_PlaylistId, \"0\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"SubPlayList\") && pID.equalsIgnoreCase(PlaylistID)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"You can see details after the disclaimer\", ctx);\r\n                    } else {\r\n                        Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                        i.putExtra(\"play\", \"playlist\");\r\n                        i.putExtra(\"ID\", mData.get(position).getID());\r\n                        i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                        i.putExtra(\"position\", position);\r\n                        i.putParcelableArrayListExtra(\"data\", mData);\r\n                        i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                        startActivity(i);\r\n                    }\r\n                } else {\r\n                    Intent i = new Intent(ctx, AddQueueActivity.class);\r\n                    i.putExtra(\"play\", \"playlist\");\r\n                    i.putExtra(\"ID\", mData.get(position).getID());\r\n                    i.putExtra(\"PlaylistAudioId\", mData.get(position).getPlaylistAudioId());\r\n                    i.putExtra(\"position\", position);\r\n                    i.putParcelableArrayListExtra(\"data\", mData);\r\n                    i.putExtra(\"comeFrom\", \"myPlayList\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listFilterData.size();\r\n        }\r\n\r\n        @Override\r\n        public Filter getFilter() {\r\n            return new Filter() {\r\n                @Override\r\n                protected FilterResults performFiltering(CharSequence charSequence) {\r\n                    final FilterResults filterResults = new FilterResults();\r\n                    String charString = charSequence.toString();\r\n                    if (charString.isEmpty()) {\r\n                        listFilterData = listModelList;\r\n                    } else {\r\n                        ArrayList<SubPlayListModel.ResponseData.PlaylistSong> filteredList = new ArrayList<>();\r\n                        for (SubPlayListModel.ResponseData.PlaylistSong row : listModelList) {\r\n                            if (row.getName().toLowerCase().contains(charString.toLowerCase())) {\r\n                                filteredList.add(row);\r\n                            }\r\n                        }\r\n                        listFilterData = filteredList;\r\n                    }\r\n                    filterResults.values = listFilterData;\r\n                    return filterResults;\r\n                }\r\n\r\n                @Override\r\n                protected void publishResults(CharSequence charSequence, FilterResults filterResults) {\r\n                    if (listFilterData.size() == 0) {\r\n                        binding.llError.setVisibility(View.VISIBLE);\r\n                        binding.rvPlayLists2.setVisibility(View.GONE);\r\n                        binding.tvFound.setText(\"Couldn't find '\" + SearchFlag + \"'. Try searching again\");\r\n                        Log.e(\"search\", SearchFlag);\r\n                    } else {\r\n                        binding.llError.setVisibility(View.GONE);\r\n                        binding.rvPlayLists2.setVisibility(View.VISIBLE);\r\n                        listFilterData = (ArrayList<SubPlayListModel.ResponseData.PlaylistSong>) filterResults.values;\r\n                        notifyDataSetChanged();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        public class MyViewHolder2 extends RecyclerView.ViewHolder {\r\n            MyPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolder2(MyPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetPlaylistMedia(String playlistID) {\r\n        playlistWiseAudioDetails = new ArrayList<>();\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                deleteDownloadFile(getActivity(), playlistID);\r\n                for (int i = 0; i < playlistWiseAudioDetails.size(); i++) {\r\n                    GetSingleMedia(playlistWiseAudioDetails.get(i).getAudioFile(), getActivity(), playlistID);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n        return playlistWiseAudioDetails;\r\n    }\r\n\r\n    private void deleteDownloadFile(Context applicationContext, String PlaylistId) {\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(applicationContext)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deleteByPlaylistId(PlaylistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n//                notifyItemRemoved(position);\r\n                deletePlaylist(PlaylistID);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public void GetSingleMedia(String AudioFile, Context ctx, String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                oneAudioDetailsList = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getLastIdByuId(AudioFile);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                try {\r\n                    if (oneAudioDetailsList.size() != 0) {\r\n                        if (oneAudioDetailsList.size() == 1) {\r\n                            FileUtils.deleteDownloadedFile(ctx, oneAudioDetailsList.get(0).getName());\r\n                        }\r\n                    }\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia sts = new GetMedia();\r\n        sts.execute();\r\n    }\r\n\r\n    public void getDeleteDownloadData() {\r\n        List<String> fileNameList, fileNameList1, audioFile, playlistDownloadId;\r\n        try {\r\n            SharedPreferences sharedy = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, MODE_PRIVATE);\r\n            Gson gson = new Gson();\r\n            String jsony = sharedy.getString(CONSTANTS.PREF_KEY_DownloadName, String.valueOf(gson));\r\n            String json1 = sharedy.getString(CONSTANTS.PREF_KEY_DownloadUrl, String.valueOf(gson));\r\n            String jsonq = sharedy.getString(CONSTANTS.PREF_KEY_DownloadPlaylistId, String.valueOf(gson));\r\n            if (!jsony.equalsIgnoreCase(String.valueOf(gson))) {\r\n                Type type = new TypeToken<List<String>>() {\r\n                }.getType();\r\n                fileNameList = gson.fromJson(jsony, type);\r\n                fileNameList1 = gson.fromJson(jsony, type);\r\n                audioFile = gson.fromJson(json1, type);\r\n                playlistDownloadId = gson.fromJson(jsonq, type);\r\n\r\n                if (playlistDownloadId.size() != 0) {\r\n                    playlistDownloadId.contains(PlaylistID);\r\n                    for (int i = 1; i < fileNameList1.size(); i++) {\r\n                        if (playlistDownloadId.get(i).equalsIgnoreCase(PlaylistID)) {\r\n                            fileNameList.remove(i);\r\n                            audioFile.remove(i);\r\n                            playlistDownloadId.remove(i);\r\n                        }\r\n                    }\r\n                }\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_DownloadPlaylist, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                String nameJson = gson.toJson(fileNameList);\r\n                String urlJson = gson.toJson(audioFile);\r\n                String playlistIdJson = gson.toJson(playlistDownloadId);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadName, nameJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadUrl, urlJson);\r\n                editor.putString(CONSTANTS.PREF_KEY_DownloadPlaylistId, playlistIdJson);\r\n                editor.commit();\r\n                if (fileNameList.get(0).equalsIgnoreCase(filename) && playlistDownloadId.get(0).equalsIgnoreCase(PlaylistID)) {\r\n                    PRDownloader.cancel(downloadIdOne);\r\n                    filename = \"\";\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void deletePlaylist(String playlistId) {\r\n        class DeleteMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                DatabaseClient.getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .deletePlaylist(playlistId);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        DeleteMedia st = new DeleteMedia();\r\n        st.execute();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java	(revision f0fec71fa0a936bd6b12bc71015a89e5cd6f0b07)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/MyPlaylistsFragment.java	(date 1605068062968)
@@ -476,7 +476,7 @@
             binding.searchView.clearFocus();
 //            binding.searchView.onActionViewCollapsed();
             isclose = true;
-            Toast.makeText(activity, "closeeeeeee", Toast.LENGTH_SHORT).show();
+//            Toast.makeText(activity, "closeeeeeee", Toast.LENGTH_SHORT).show();
         }
 
         if (isclose) {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecentlyPlayedAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.databinding.SmallBoxLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\n\r\n\r\npublic class RecentlyPlayedAdapter extends RecyclerView.Adapter<RecentlyPlayedAdapter.MyViewHolder> {\r\n    Context ctx;\r\n    FragmentActivity activity;\r\n    String IsLock;\r\n    private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;\r\n    String HomeView;\r\n\r\n    public RecentlyPlayedAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,\r\n                                 String IsLock, String HomeView) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.activity = activity;\r\n        this.IsLock = IsLock;\r\n        this.HomeView = HomeView;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        SmallBoxLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.small_box_layout, parent, false);\r\n        return new MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 16,\r\n                1, 1, 0.28f, 10);\r\n        holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        holder.binding.tvAddToPlaylist.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.tvAddToPlaylist.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n        holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n        holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n        holder.binding.llMainLayout.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View v) {\r\n                holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n                return true;\r\n            }\r\n        });\r\n        holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                i.putExtra(\"AudioId\", listModelList.get(position).getID());\r\n                i.putExtra(\"PlaylistID\", \"\");\r\n                ctx.startActivity(i);\r\n            }\r\n        });\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n//       TODO                 Active and cancelled = 0, InActive = 1, Suspeded = 2\r\n            SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            if (queuePlay) {\r\n                int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                Gson gson = new Gson();\r\n                String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                    }.getType();\r\n                    addToQueueModelList = gson.fromJson(json1, type1);\r\n                }\r\n                addToQueueModelList.remove(position1);\r\n                SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared2.edit();\r\n                String json = gson.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                editor.commit();\r\n            }\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n\r\n                    callnewTrans(position);\r\n\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    ctx.startActivity(i);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callnewTrans(position);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n                callnewTrans(position);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callnewTrans(int position) {\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        String MyPlaylist = shared.getString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        if (audioPlay && AudioFlag.equalsIgnoreCase(\"MainAudioList\") && MyPlaylist.equalsIgnoreCase(HomeView)) {\r\n            if (isDisclaimer == 1) {\r\n                BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n            } else {\r\n                callTransFrag(position, listModelList);\r\n            }\r\n        } else {\r\n            isDisclaimer = 0;\r\n            disclaimerPlayed = 0;\r\n            ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n            MainAudioModel.ResponseData.Detail mainPlayModel = new MainAudioModel.ResponseData.Detail();\r\n            mainPlayModel.setID(\"0\");\r\n            mainPlayModel.setName(\"Disclaimer\");\r\n            mainPlayModel.setAudioFile(\"\");\r\n            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n            mainPlayModel.setAudiomastercat(\"\");\r\n            mainPlayModel.setAudioSubCategory(\"\");\r\n            mainPlayModel.setImageFile(\"\");\r\n            mainPlayModel.setLike(\"\");\r\n            mainPlayModel.setDownload(\"\");\r\n            mainPlayModel.setAudioDuration(\"0:48\");\r\n            listModelList2.addAll(listModelList);\r\n            listModelList2.add(position, mainPlayModel);\r\n            callTransFrag(position, listModelList2);\r\n        }\r\n    }\r\n\r\n    private void callTransFrag(int position, ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {\r\n        try {\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                MusicService.stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n            /*Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();*/\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, HomeView);\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"MainAudioList\");\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            ctx.startActivity(i);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (6 > listModelList.size()) {\r\n            return listModelList.size();\r\n        } else {\r\n            return 6;\r\n        }\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        SmallBoxLayoutBinding binding;\r\n\r\n        public MyViewHolder(SmallBoxLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecentlyPlayedAdapter.java	(revision f0fec71fa0a936bd6b12bc71015a89e5cd6f0b07)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecentlyPlayedAdapter.java	(date 1605068062812)
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.view.GestureDetector;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/ViewAllAudioFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.AudiolistCustomLayoutBinding;\r\nimport com.brainwellnessspa.databinding.FragmentViewAllAudioBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\n\r\npublic class ViewAllAudioFragment extends Fragment {\r\n    public static boolean viewallAudio = false;\r\n    public static int ComeFromAudioViewAll = 0;\r\n    FragmentViewAllAudioBinding binding;\r\n    String ID, Name, UserID, AudioFlag, Category;\r\n    List<DownloadAudioDetails> audioList;\r\n    Context context;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_view_all_audio, container, false);\r\n        View view = binding.getRoot();\r\n\r\n        context = getActivity();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        if (getArguments() != null) {\r\n            ID = getArguments().getString(\"ID\");\r\n            Name = getArguments().getString(\"Name\");\r\n            Category = getArguments().getString(\"Category\");\r\n        }\r\n\r\n        view.setFocusableInTouchMode(true);\r\n        view.requestFocus();\r\n        view.setOnKeyListener((v, keyCode, event) -> {\r\n            if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {\r\n                callBack();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        binding.llBack.setOnClickListener(view1 -> callBack());\r\n        GridLayoutManager manager = new GridLayoutManager(getActivity(), 2);\r\n        binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n        binding.rvMainAudio.setLayoutManager(manager);\r\n        if (Name.equalsIgnoreCase(\"My Downloads\")) {\r\n            audioList = new ArrayList<>();\r\n            GetAllMedia(getActivity());\r\n        } else {\r\n            prepareData();\r\n        }\r\n        return view;\r\n    }\r\n\r\n    private void callBack() {\r\n        Fragment audioFragment = new AudioFragment();\r\n        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n        fragmentManager1.beginTransaction()\r\n                .replace(R.id.flContainer, audioFragment)\r\n                .commit();\r\n        Bundle bundle = new Bundle();\r\n        audioFragment.setArguments(bundle);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        refreshData();\r\n        if (Name.equalsIgnoreCase(\"My Downloads\")) {\r\n            audioList = new ArrayList<>();\r\n            GetAllMedia(getActivity());\r\n        } else {\r\n            prepareData();\r\n        }\r\n    }\r\n\r\n    public List<DownloadAudioDetails> GetAllMedia(Context ctx) {\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                audioList = DatabaseClient\r\n                        .getInstance(ctx)\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .geAllData(\"\");\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                refreshData();\r\n                binding.tvTitle.setText(Name);\r\n                ArrayList<ViewAllAudioListModel.ResponseData.Detail> listModelList = new ArrayList<>();\r\n                for (int i = 0; i < audioList.size(); i++) {\r\n                    ViewAllAudioListModel.ResponseData.Detail mainPlayModel = new ViewAllAudioListModel.ResponseData.Detail();\r\n\r\n                    mainPlayModel.setID(audioList.get(i).getID());\r\n                    mainPlayModel.setName(audioList.get(i).getName());\r\n                    mainPlayModel.setAudioFile(audioList.get(i).getAudioFile());\r\n                    mainPlayModel.setAudioDirection(audioList.get(i).getAudioDirection());\r\n                    mainPlayModel.setAudiomastercat(audioList.get(i).getAudiomastercat());\r\n                    mainPlayModel.setAudioSubCategory(audioList.get(i).getAudioSubCategory());\r\n                    mainPlayModel.setImageFile(audioList.get(i).getImageFile());\r\n                    mainPlayModel.setLike(audioList.get(i).getLike());\r\n                    mainPlayModel.setDownload(audioList.get(i).getDownload());\r\n                    mainPlayModel.setAudioDuration(audioList.get(i).getAudioDuration());\r\n                    listModelList.add(mainPlayModel);\r\n                }\r\n                AudiolistAdapter adapter = new AudiolistAdapter(listModelList, IsLock);\r\n                binding.rvMainAudio.setAdapter(adapter);\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return audioList;\r\n    }\r\n\r\n    private void prepareData() {\r\n        refreshData();\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<ViewAllAudioListModel> listCall = APIClient.getClient().getViewAllAudioLists(UserID, ID, Category);\r\n            listCall.enqueue(new Callback<ViewAllAudioListModel>() {\r\n                @Override\r\n                public void onResponse(Call<ViewAllAudioListModel> call, Response<ViewAllAudioListModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        ViewAllAudioListModel listModel = response.body();\r\n                        if (Category.equalsIgnoreCase(\"\")) {\r\n                            binding.tvTitle.setText(listModel.getResponseData().getView());\r\n                        } else {\r\n                            binding.tvTitle.setText(Category);\r\n                        }\r\n                        AudiolistAdapter adapter = new AudiolistAdapter(listModel.getResponseData().getDetails(), listModel.getResponseData().getIsLock());\r\n                        binding.rvMainAudio.setAdapter(adapter);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<ViewAllAudioListModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private void refreshData() {\r\n        try {\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n                } else {\r\n                    SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if (isMediaStart) {\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if (isMediaStart) {\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(4, 6, 4, 280);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(4, 6, 4, 50);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public class AudiolistAdapter extends RecyclerView.Adapter<AudiolistAdapter.MyViewHolder> {\r\n        String IsLock;\r\n        private ArrayList<ViewAllAudioListModel.ResponseData.Detail> listModelList;\r\n\r\n        public AudiolistAdapter(ArrayList<ViewAllAudioListModel.ResponseData.Detail> listModelList, String IsLock) {\r\n            this.listModelList = listModelList;\r\n            this.IsLock = IsLock;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            AudiolistCustomLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.audiolist_custom_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                    1, 1, 0.46f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            holder.binding.tvAddToPlaylist.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.tvAddToPlaylist.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.tvPlaylistName.setText(listModelList.get(position).getName());\r\n            Glide.with(getActivity()).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n            holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n            holder.binding.rlMainLayout.setOnLongClickListener(new View.OnLongClickListener() {\r\n                @Override\r\n                public boolean onLongClick(View v) {\r\n                    holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n                    return false;\r\n                }\r\n            });\r\n            holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    Intent i = new Intent(getActivity(), AddPlaylistActivity.class);\r\n                    i.putExtra(\"AudioId\", listModelList.get(position).getID());\r\n                    i.putExtra(\"PlaylistID\", \"\");\r\n                    startActivity(i);\r\n                }\r\n            });\r\n\r\n            holder.binding.rlMainLayout.setOnClickListener(view -> {\r\n                SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                if (queuePlay) {\r\n                    int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                    Gson gson = new Gson();\r\n                    String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                    if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                        Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                        }.getType();\r\n                        addToQueueModelList = gson.fromJson(json1, type1);\r\n                    }\r\n                    addToQueueModelList.remove(position1);\r\n                    SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared2.edit();\r\n                    String json = gson.toJson(addToQueueModelList);\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                    editor.commit();\r\n                }\r\n                if (IsLock.equalsIgnoreCase(\"1\")) {\r\n\r\n                    if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        if (!Name.equalsIgnoreCase(getString(R.string.top_categories))) {\r\n                            callnewTrans(position, listModelList);\r\n                        } else {\r\n                            callTransFrag(position, listModelList);\r\n                        }\r\n                    } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                        i.putExtra(\"ComeFrom\", \"Plan\");\r\n                        startActivity(i);\r\n                    }\r\n                } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                    if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n                        if (!Name.equalsIgnoreCase(getString(R.string.top_categories))) {\r\n                            callnewTrans(position, listModelList);\r\n                        } else {\r\n                            callTransFrag(position, listModelList);\r\n                        }\r\n                    } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                            || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                        BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                    }\r\n                } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    if (!Name.equalsIgnoreCase(getString(R.string.top_categories))) {\r\n                        callnewTrans(position, listModelList);\r\n                    } else {\r\n                        callTransFrag(position, listModelList);\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            AudiolistCustomLayoutBinding binding;\r\n\r\n            public MyViewHolder(AudiolistCustomLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void callnewTrans(int position, ArrayList<ViewAllAudioListModel.ResponseData.Detail> listModelList) {\r\n\r\n        SharedPreferences shared = context.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        String MyPlaylist = shared.getString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        if (audioPlay && AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\") && MyPlaylist.equalsIgnoreCase(Name)) {\r\n            if (isDisclaimer == 1) {\r\n                BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", context);\r\n            } else {\r\n                callTransFrag(position, listModelList);\r\n            }\r\n        } else {\r\n            isDisclaimer = 0;\r\n            disclaimerPlayed = 0;\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n            ViewAllAudioListModel.ResponseData.Detail mainPlayModel = new ViewAllAudioListModel.ResponseData.Detail();\r\n            mainPlayModel.setID(\"0\");\r\n            mainPlayModel.setName(\"Disclaimer\");\r\n            mainPlayModel.setAudioFile(\"\");\r\n            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n            mainPlayModel.setAudiomastercat(\"\");\r\n            mainPlayModel.setAudioSubCategory(\"\");\r\n            mainPlayModel.setImageFile(\"\");\r\n            mainPlayModel.setLike(\"\");\r\n            mainPlayModel.setDownload(\"\");\r\n            mainPlayModel.setAudioDuration(\"0:48\");\r\n            listModelList2.addAll(listModelList);\r\n            listModelList2.add(position, mainPlayModel);\r\n            callTransFrag(position, listModelList2);\r\n        }\r\n    }\r\n\r\n    private void callTransFrag(int position, ArrayList<ViewAllAudioListModel.ResponseData.Detail> listModelList) {\r\n        try {\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            String json = \"\";\r\n            ArrayList<ViewAllAudioListModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n            ViewAllAudioListModel.ResponseData.Detail mainPlayModel = new ViewAllAudioListModel.ResponseData.Detail();\r\n            if (Name.equalsIgnoreCase(getString(R.string.top_categories))) {\r\n                SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                boolean audioPlay = shared1.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                String catName = shared1.getString(CONSTANTS.PREF_KEY_Cat_Name, \"\");\r\n                if (audioPlay && AudioFlag.equalsIgnoreCase(\"TopCategories\") && catName.equalsIgnoreCase(Category)) {\r\n                    if (isDisclaimer == 1) {\r\n                        BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", context);\r\n                    } else {\r\n                        listModelList2 = new ArrayList<>();\r\n                        listModelList2.addAll(listModelList);\r\n                        json = gson.toJson(listModelList2);\r\n                        editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"TopCategories\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_Cat_Name, Category);\r\n                        editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                        editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                        editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                        editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                        editor.putString(CONSTANTS.PREF_KEY_myPlaylist, Name);\r\n                        editor.commit();\r\n                        openMyFragment();\r\n                    }\r\n                } else {\r\n                    listModelList2 = new ArrayList<>();\r\n                    isDisclaimer = 0;\r\n                    disclaimerPlayed = 0;\r\n                    mainPlayModel.setID(\"0\");\r\n                    mainPlayModel.setName(\"Disclaimer\");\r\n                    mainPlayModel.setAudioFile(\"\");\r\n                    mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                    mainPlayModel.setAudiomastercat(\"\");\r\n                    mainPlayModel.setAudioSubCategory(\"\");\r\n                    mainPlayModel.setImageFile(\"\");\r\n                    mainPlayModel.setLike(\"\");\r\n                    mainPlayModel.setDownload(\"\");\r\n                    mainPlayModel.setAudioDuration(\"0:48\");\r\n                    if (position != 0) {\r\n                        listModelList2.addAll(listModelList);\r\n                        listModelList2.add(position, mainPlayModel);\r\n                    } else {\r\n                        listModelList2.add(mainPlayModel);\r\n                        listModelList2.addAll(listModelList);\r\n                    }\r\n                    json = gson.toJson(listModelList2);\r\n                    editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"TopCategories\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_Cat_Name, Category);\r\n                    editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                    editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                    editor.putString(CONSTANTS.PREF_KEY_myPlaylist, Name);\r\n                    editor.commit();\r\n                    openMyFragment();\r\n                }\r\n            } else {\r\n                json = gson.toJson(listModelList);\r\n                 editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"ViewAllAudioList\");\r\n                editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, Name);\r\n                editor.commit();\r\n                openMyFragment();\r\n//                    Intent i = new Intent(getActivity(), PlayWellnessActivity.class);\r\n//                    i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n//                    getActivity().startActivity(i);\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void openMyFragment() {\r\n        player = 1;\r\n        if (isPrepare || isMediaStart || isPause) {\r\n            stopMedia();\r\n        }\r\n        isPause = false;\r\n        isMediaStart = false;\r\n        isPrepare = false;\r\n        isCompleteStop = false;\r\n        Fragment fragment = new TransparentPlayerFragment();\r\n        FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n        fragmentManager1.beginTransaction()\r\n                .add(R.id.flContainer, fragment)\r\n                .commit();\r\n    }\r\n\r\n   /* public class TopAudiolistAdapter extends RecyclerView.Adapter<TopAudiolistAdapter.MyViewHolder> {\r\n        String IsLock;\r\n        private ArrayList<ViewAllAudioListModel.ResponseData.Detail> listModelList;\r\n\r\n        public TopAudiolistAdapter(ArrayList<ViewAllAudioListModel.ResponseData.Detail> listModelList, String IsLock) {\r\n            this.listModelList = listModelList;\r\n            this.IsLock = IsLock;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            AudiolistCustomLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.audiolist_custom_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                    1, 1, 0.46f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n\r\n            holder.binding.tvPlaylistName.setText(listModelList.get(position).getName());\r\n            Glide.with(getActivity()).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.rlMainLayout.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                    if(queuePlay){\r\n                        int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                        ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                        Gson gson = new Gson();\r\n                        String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                        if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                            Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                            }.getType();\r\n                            addToQueueModelList = gson.fromJson(json1, type1);\r\n                        }\r\n                        addToQueueModelList.remove(position1);\r\n                        SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                        SharedPreferences.Editor editor = shared2.edit();\r\n                        String json = gson.toJson(addToQueueModelList);\r\n                        editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                        editor.commit();\r\n\r\n                    }\r\n                    if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                        if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                            holder.binding.ivLock.setVisibility(View.GONE);\r\n                        } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                                || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                            Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                            i.putExtra(\"ComeFrom\", \"Plan\");\r\n                            startActivity(i);\r\n                        }\r\n                    } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                        if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                            holder.binding.ivLock.setVisibility(View.GONE);\r\n                        } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                                || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                            BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                        }\r\n                    } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                        holder.binding.ivLock.setVisibility(View.GONE);\r\n\r\n                        callTransFrag(position,listModelList);\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            AudiolistCustomLayoutBinding binding;\r\n\r\n            public MyViewHolder(AudiolistCustomLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/ViewAllAudioFragment.java	(revision f0fec71fa0a936bd6b12bc71015a89e5cd6f0b07)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/ViewAllAudioFragment.java	(date 1605068231078)
@@ -343,7 +343,7 @@
                 @Override
                 public boolean onLongClick(View v) {
                     holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);
-                    return false;
+                    return true;
                 }
             });
             holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/DownloadAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.SubPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.JsonSyntaxException;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.BigBoxLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\n\r\npublic class DownloadAdapter extends RecyclerView.Adapter<DownloadAdapter.MyViewHolder> {\r\n    Context ctx;\r\n    FragmentActivity activity;\r\n    String IsLock;\r\n    private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;\r\n\r\n    public DownloadAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,\r\n                           String IsLock) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.activity = activity;\r\n        this.IsLock = IsLock;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public DownloadAdapter.MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        BigBoxLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.big_box_layout, parent, false);\r\n        return new DownloadAdapter.MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull DownloadAdapter.MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 20,\r\n                1, 1, 0.48f, 20);\r\n        holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n        holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n        holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n        holder.binding.llMainLayout.setOnLongClickListener(v -> {\r\n            if (BWSApplication.isNetworkConnected(ctx)) {\r\n                holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n            } else {\r\n                BWSApplication.showToast(ctx.getString(R.string.no_server_found), ctx);\r\n            }\r\n\r\n            return false;\r\n        });\r\n        holder.binding.tvAddToPlaylist.setOnClickListener(view -> {\r\n            Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n            i.putExtra(\"AudioId\", listModelList.get(position).getID());\r\n            i.putExtra(\"PlaylistID\", \"\");\r\n            ctx.startActivity(i);\r\n        });\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n            try {\r\n                SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                if (queuePlay) {\r\n                    int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                    ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                    Gson gson = new Gson();\r\n                    String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                    if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                        Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                        }.getType();\r\n                        addToQueueModelList = gson.fromJson(json1, type1);\r\n                    }\r\n                    addToQueueModelList.remove(position1);\r\n                    SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editor = shared2.edit();\r\n                    String json = gson.toJson(addToQueueModelList);\r\n                    editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                    editor.commit();\r\n\r\n                }\r\n                if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    ctx.startActivity(i);\r\n                } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                    boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                    String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n                    if (audioPlay && AudioFlag.equalsIgnoreCase(\"DownloadListAudio\")) {\r\n                        if (isDisclaimer == 1) {\r\n                            BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n                        } else {\r\n                            callTransFrag(position, listModelList);\r\n                        }\r\n                    } else {\r\n                        isDisclaimer = 0;\r\n                        disclaimerPlayed = 0;\r\n                        ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n                        MainAudioModel.ResponseData.Detail mainPlayModel = new MainAudioModel.ResponseData.Detail();\r\n                        mainPlayModel.setID(\"0\");\r\n                        mainPlayModel.setName(\"Disclaimer\");\r\n                        mainPlayModel.setAudioFile(\"\");\r\n                        mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                        mainPlayModel.setAudiomastercat(\"\");\r\n                        mainPlayModel.setAudioSubCategory(\"\");\r\n                        mainPlayModel.setImageFile(\"\");\r\n                        mainPlayModel.setLike(\"\");\r\n                        mainPlayModel.setDownload(\"\");\r\n                        mainPlayModel.setAudioDuration(\"0:48\");\r\n                        listModelList2.addAll(listModelList);\r\n                        listModelList2.add(position, mainPlayModel);\r\n                        callTransFrag(position, listModelList2);\r\n                    }\r\n                }\r\n            } catch (JsonSyntaxException e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callTransFrag(int position, ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {\r\n        try {\r\n            SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            if (queuePlay) {\r\n                int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                Gson gson = new Gson();\r\n                String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                    }.getType();\r\n                    addToQueueModelList = gson.fromJson(json1, type1);\r\n                }\r\n                addToQueueModelList.remove(position1);\r\n                SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared2.edit();\r\n                String json = gson.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                editor.commit();\r\n\r\n            }\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n           /* Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();*/\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n            ArrayList<DownloadAudioDetails> downloadAudioDetails = new ArrayList<>();\r\n            for (int i = 0; i < listModelList.size(); i++) {\r\n                DownloadAudioDetails mainPlayModel = new DownloadAudioDetails();\r\n                mainPlayModel.setID(listModelList.get(i).getID());\r\n                mainPlayModel.setName(listModelList.get(i).getName());\r\n                mainPlayModel.setAudioFile(listModelList.get(i).getAudioFile());\r\n                mainPlayModel.setAudioDirection(listModelList.get(i).getAudioDirection());\r\n                mainPlayModel.setAudiomastercat(listModelList.get(i).getAudiomastercat());\r\n                mainPlayModel.setAudioSubCategory(listModelList.get(i).getAudioSubCategory());\r\n                mainPlayModel.setImageFile(listModelList.get(i).getImageFile());\r\n                mainPlayModel.setLike(listModelList.get(i).getLike());\r\n                mainPlayModel.setDownload(listModelList.get(i).getDownload());\r\n                mainPlayModel.setAudioDuration(listModelList.get(i).getAudioDuration());\r\n                downloadAudioDetails.add(mainPlayModel);\r\n            }\r\n            String json = gson.toJson(downloadAudioDetails);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"DownloadListAudio\");\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            ctx.startActivity(i);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (4 > listModelList.size()) {\r\n            return listModelList.size();\r\n        } else {\r\n            return 4;\r\n        }\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        BigBoxLayoutBinding binding;\r\n\r\n        public MyViewHolder(BigBoxLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/DownloadAdapter.java	(revision f0fec71fa0a936bd6b12bc71015a89e5cd6f0b07)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/DownloadAdapter.java	(date 1605068231045)
@@ -97,7 +97,7 @@
                 BWSApplication.showToast(ctx.getString(R.string.no_server_found), ctx);
             }
 
-            return false;
+            return true;
         });
         holder.binding.tvAddToPlaylist.setOnClickListener(view -> {
             Intent i = new Intent(ctx, AddPlaylistActivity.class);
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecommendedAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.BigBoxLayoutBinding;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class RecommendedAdapter extends RecyclerView.Adapter<RecommendedAdapter.MyViewHolder> {\r\n    Context ctx;\r\n    FragmentActivity activity;\r\n    String IsLock, HomeView;\r\n    private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;\r\n\r\n    public RecommendedAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,\r\n                              String IsLock, String HomeView) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.activity = activity;\r\n        this.IsLock = IsLock;\r\n        this.HomeView = HomeView;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        BigBoxLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.big_box_layout, parent, false);\r\n        return new MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 16,\r\n                1, 1, 0.44f, 10);\r\n        holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        holder.binding.tvAddToPlaylist.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.tvAddToPlaylist.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n\r\n        holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n        holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n        holder.binding.llMainLayout.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View v) {\r\n                holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n                return false;\r\n            }\r\n        });\r\n        holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                i.putExtra(\"AudioId\", listModelList.get(position).getID());\r\n                i.putExtra(\"PlaylistID\", \"\");\r\n                ctx.startActivity(i);\r\n            }\r\n        });\r\n\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n//       TODO                 Active and cancelled = 0, InActive = 1, Suspeded = 2\r\n            SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            if (queuePlay) {\r\n                int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                Gson gson = new Gson();\r\n                String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                    }.getType();\r\n                    addToQueueModelList = gson.fromJson(json1, type1);\r\n                }\r\n                addToQueueModelList.remove(position1);\r\n                SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared2.edit();\r\n                String json = gson.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                editor.commit();\r\n            }\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callnewTrans(position);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    ctx.startActivity(i);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callnewTrans(position);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n                callnewTrans(position);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callnewTrans(int position) {\r\n\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        String MyPlaylist = shared.getString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        if (audioPlay && AudioFlag.equalsIgnoreCase(\"MainAudioList\") && MyPlaylist.equalsIgnoreCase(HomeView)) {\r\n            if (isDisclaimer == 1) {\r\n                BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n            } else {\r\n                callTransFrag(position, listModelList);\r\n            }\r\n        } else {\r\n            isDisclaimer = 0;\r\n            disclaimerPlayed = 0;\r\n            ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n            MainAudioModel.ResponseData.Detail mainPlayModel = new MainAudioModel.ResponseData.Detail();\r\n            mainPlayModel.setID(\"0\");\r\n            mainPlayModel.setName(\"Disclaimer\");\r\n            mainPlayModel.setAudioFile(\"\");\r\n            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n            mainPlayModel.setAudiomastercat(\"\");\r\n            mainPlayModel.setAudioSubCategory(\"\");\r\n            mainPlayModel.setImageFile(\"\");\r\n            mainPlayModel.setLike(\"\");\r\n            mainPlayModel.setDownload(\"\");\r\n            mainPlayModel.setAudioDuration(\"0:48\");\r\n            listModelList2.addAll(listModelList);\r\n            listModelList2.add(position, mainPlayModel);\r\n            callTransFrag(position, listModelList2);\r\n        }\r\n    }\r\n\r\n    private void callTransFrag(int position, ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {\r\n        try {\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n\r\n\r\n            /*Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();*/\r\n\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, HomeView);\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"MainAudioList\");\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            ctx.startActivity(i);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (4 > listModelList.size()) {\r\n            return listModelList.size();\r\n        } else {\r\n            return 4;\r\n        }\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        BigBoxLayoutBinding binding;\r\n\r\n        public MyViewHolder(BigBoxLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecommendedAdapter.java	(revision f0fec71fa0a936bd6b12bc71015a89e5cd6f0b07)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/RecommendedAdapter.java	(date 1605068231110)
@@ -103,7 +103,7 @@
             @Override
             public boolean onLongClick(View v) {
                 holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);
-                return false;
+                return true;
             }
         });
         holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/PlaylistFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Playlist;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.TextWatcher;\r\nimport android.view.KeyEvent;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.Window;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.recyclerview.widget.DefaultItemAnimator;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.ViewAllAudioListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Models.MainPlayModel;\r\nimport com.brainwellnessspa.DownloadModule.Activities.DownloadPlaylistActivity;\r\nimport com.brainwellnessspa.databinding.MainPlaylistLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.CreatePlaylistModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainPlayListModel;\r\nimport com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.RoomDataBase.DatabaseClient;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadAudioDetails;\r\nimport com.brainwellnessspa.RoomDataBase.DownloadPlaylistDetails;\r\nimport com.brainwellnessspa.Utility.APIClient;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.databinding.FragmentPlaylistBinding;\r\nimport com.brainwellnessspa.databinding.MainAudioLayoutBinding;\r\nimport com.brainwellnessspa.databinding.PlaylistCustomLayoutBinding;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Account.AccountFragment.ComeScreenAccount;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Search.SearchFragment.comefrom_search;\r\nimport static com.brainwellnessspa.DashboardModule.Audio.AudioFragment.IsLock;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\nimport static com.brainwellnessspa.Utility.MusicService.releasePlayer;\r\nimport static com.brainwellnessspa.Utility.MusicService.stopMedia;\r\n\r\npublic class PlaylistFragment extends Fragment {\r\n    FragmentPlaylistBinding binding;\r\n    String UserID, Check = \"\", AudioFlag;\r\n    View view;\r\n    List<DownloadPlaylistDetails> downloadPlaylistDetailsList;\r\n    List<DownloadAudioDetails> playlistWiseAudioDetails = new ArrayList<>();\r\n\r\n    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_playlist, container, false);\r\n        view = binding.getRoot();\r\n        SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n        UserID = (shared1.getString(CONSTANTS.PREF_KEY_UserID, \"\"));\r\n        SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n        AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        ComeScreenAccount = 0;\r\n        if (getArguments() != null) {\r\n            Check = getArguments().getString(\"Check\");\r\n        }\r\n        downloadPlaylistDetailsList = new ArrayList<>();\r\n        RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.VERTICAL, false);\r\n        binding.rvMainPlayList.setLayoutManager(manager);\r\n        binding.rvMainPlayList.setItemAnimator(new DefaultItemAnimator());\r\n\r\n        prepareData();\r\n        return view;\r\n    }\r\n\r\n    private void callMyPlaylistsFragment(String s, String id, String name, String playlistImage, String MyDownloads) {\r\n        try {\r\n            comefrom_search = 0;\r\n            Bundle bundle = new Bundle();\r\n            Fragment myPlaylistsFragment = new MyPlaylistsFragment();\r\n            FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n            bundle.putString(\"New\", s);\r\n            bundle.putString(\"PlaylistID\", id);\r\n            bundle.putString(\"PlaylistName\", name);\r\n            bundle.putString(\"PlaylistImage\", playlistImage);\r\n            bundle.putString(\"MyDownloads\", MyDownloads);\r\n            myPlaylistsFragment.setArguments(bundle);\r\n            fragmentManager1.beginTransaction()\r\n                    .replace(R.id.flContainer, myPlaylistsFragment)\r\n                    .commit();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        prepareData();\r\n    }\r\n\r\n    private void prepareData() {\r\n        try {\r\n            SharedPreferences shared1 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            AudioFlag = shared1.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            SharedPreferences shared2 = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_LOGIN, Context.MODE_PRIVATE);\r\n            String UnlockAudioLists = shared2.getString(CONSTANTS.PREF_KEY_UnLockAudiList, \"\");\r\n            Gson gson1 = new Gson();\r\n            Type type1 = new TypeToken<List<String>>() {\r\n            }.getType();\r\n            List<String> UnlockAudioList = gson1.fromJson(UnlockAudioLists, type1);\r\n            if (!IsLock.equalsIgnoreCase(\"0\") && (AudioFlag.equalsIgnoreCase(\"MainAudioList\")\r\n                    || AudioFlag.equalsIgnoreCase(\"ViewAllAudioList\"))) {\r\n                String audioID = \"\";\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n                Gson gson = new Gson();\r\n                String json = shared.getString(CONSTANTS.PREF_KEY_audioList, String.valueOf(gson));\r\n                Type type = new TypeToken<ArrayList<MainPlayModel>>() {\r\n                }.getType();\r\n                ArrayList<MainPlayModel> arrayList = gson.fromJson(json, type);\r\n\r\n                if (arrayList.get(0).getAudioFile().equalsIgnoreCase(\"\")) {\r\n                    arrayList.remove(0);\r\n                }\r\n                audioID = arrayList.get(0).getID();\r\n\r\n                if (UnlockAudioList.contains(audioID)) {\r\n                } else {\r\n                    SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                    SharedPreferences.Editor editorr = sharedm.edit();\r\n                    editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                    editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                    editorr.clear();\r\n                    editorr.commit();\r\n                    if (isMediaStart) {\r\n                        stopMedia();\r\n                        releasePlayer();\r\n                    }\r\n                }\r\n\r\n            } else if (!IsLock.equalsIgnoreCase(\"0\") && !AudioFlag.equalsIgnoreCase(\"AppointmentDetailList\")) {\r\n                SharedPreferences sharedm = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editorr = sharedm.edit();\r\n                editorr.remove(CONSTANTS.PREF_KEY_modelList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioList);\r\n                editorr.remove(CONSTANTS.PREF_KEY_position);\r\n                editorr.remove(CONSTANTS.PREF_KEY_queuePlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_audioPlay);\r\n                editorr.remove(CONSTANTS.PREF_KEY_AudioFlag);\r\n                editorr.remove(CONSTANTS.PREF_KEY_PlaylistId);\r\n                editorr.remove(CONSTANTS.PREF_KEY_myPlaylist);\r\n                editorr.clear();\r\n                editorr.commit();\r\n                if (isMediaStart) {\r\n                    stopMedia();\r\n                    releasePlayer();\r\n                }\r\n            }\r\n            SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n            AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n            if (!AudioFlag.equalsIgnoreCase(\"0\")) {\r\n                Fragment fragment = new TransparentPlayerFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .add(R.id.flContainer, fragment)\r\n                        .commit();\r\n\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(13, 6, 13, 200);\r\n                binding.llSpace.setLayoutParams(params);\r\n            } else {\r\n                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\r\n                params.setMargins(13, 6, 13, 0);\r\n                binding.llSpace.setLayoutParams(params);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n            BWSApplication.showProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n            Call<MainPlayListModel> listCall = APIClient.getClient().getMainPlayLists(UserID);\r\n            listCall.enqueue(new Callback<MainPlayListModel>() {\r\n                @Override\r\n                public void onResponse(Call<MainPlayListModel> call, Response<MainPlayListModel> response) {\r\n                    if (response.isSuccessful()) {\r\n                        BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                        MainPlayListModel listModel = response.body();\r\n                        binding.rlCreatePlaylist.setVisibility(View.VISIBLE);\r\n                        downloadPlaylistDetailsList = GetPlaylistDetail(listModel.getResponseData());\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onFailure(Call<MainPlayListModel> call, Throwable t) {\r\n                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                }\r\n            });\r\n        } else {\r\n            ArrayList<MainPlayListModel.ResponseData> responseData = new ArrayList<>();\r\n            ArrayList<MainPlayListModel.ResponseData.Detail> details = new ArrayList<>();\r\n            MainPlayListModel.ResponseData listModel = new MainPlayListModel.ResponseData();\r\n            listModel.setGetLibraryID(\"2\");\r\n            listModel.setDetails(details);\r\n            listModel.setUserID(UserID);\r\n            listModel.setView(\"My Downloads\");\r\n            listModel.setIsLock(IsLock);\r\n            responseData.add(listModel);\r\n            downloadPlaylistDetailsList = GetPlaylistDetail(responseData);\r\n            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n        }\r\n    }\r\n\r\n    private List<DownloadPlaylistDetails> GetPlaylistDetail(ArrayList<MainPlayListModel.ResponseData> responseData) {\r\n        ArrayList<MainPlayListModel.ResponseData.Detail> details = new ArrayList<>();\r\n        class GetTask extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                downloadPlaylistDetailsList = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllPlaylist();\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                if (downloadPlaylistDetailsList.size() != 0) {\r\n                    for (int i = 0; i < downloadPlaylistDetailsList.size(); i++) {\r\n                        MainPlayListModel.ResponseData.Detail detail = new MainPlayListModel.ResponseData.Detail();\r\n                        detail.setTotalAudio(downloadPlaylistDetailsList.get(i).getTotalAudio());\r\n                        detail.setTotalhour(downloadPlaylistDetailsList.get(i).getTotalhour());\r\n                        detail.setTotalminute(downloadPlaylistDetailsList.get(i).getTotalminute());\r\n                        detail.setPlaylistID(downloadPlaylistDetailsList.get(i).getPlaylistID());\r\n                        detail.setPlaylistDesc(downloadPlaylistDetailsList.get(i).getPlaylistDesc());\r\n                        detail.setMasterCategory(downloadPlaylistDetailsList.get(i).getPlaylistMastercat());\r\n                        detail.setSubCategory(downloadPlaylistDetailsList.get(i).getPlaylistSubcat());\r\n                        detail.setPlaylistName(downloadPlaylistDetailsList.get(i).getPlaylistName());\r\n                        detail.setPlaylistImage(downloadPlaylistDetailsList.get(i).getPlaylistImage());\r\n                        detail.setPlaylistImageDetails(downloadPlaylistDetailsList.get(i).getPlaylistImageDetails());\r\n                        detail.setPlaylistId(downloadPlaylistDetailsList.get(i).getPlaylistID());\r\n                        details.add(detail);\r\n                    }\r\n                    for (int i = 0; i < responseData.size(); i++) {\r\n                        if (responseData.get(i).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                            responseData.get(i).setDetails(details);\r\n                        }\r\n                    }\r\n\r\n                    MainPlayListAdapter adapter = new MainPlayListAdapter(responseData, getActivity());\r\n                    binding.rvMainPlayList.setAdapter(adapter);\r\n                } else {\r\n                    MainPlayListAdapter adapter = new MainPlayListAdapter(responseData, getActivity());\r\n                    binding.rvMainPlayList.setAdapter(adapter);\r\n                }\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n\r\n        GetTask st = new GetTask();\r\n        st.execute();\r\n        return downloadPlaylistDetailsList;\r\n    }\r\n\r\n    public class MainPlayListAdapter extends RecyclerView.Adapter<MainPlayListAdapter.MyViewHolder> {\r\n        Context ctx;\r\n        private ArrayList<MainPlayListModel.ResponseData> listModelList;\r\n\r\n        public MainPlayListAdapter(ArrayList<MainPlayListModel.ResponseData> listModelList, Context ctx) {\r\n            this.listModelList = listModelList;\r\n            this.ctx = ctx;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            MainPlaylistLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.main_playlist_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n            if (listModelList.get(position).getDetails() != null &&\r\n                    listModelList.get(position).getDetails().size() > 6) {\r\n                holder.binding.tvViewAll.setVisibility(View.VISIBLE);\r\n            } else {\r\n                holder.binding.tvViewAll.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.tvViewAll.setOnClickListener(view -> {\r\n                Fragment viewAllPlaylistFragment = new ViewAllPlaylistFragment();\r\n                FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                fragmentManager1.beginTransaction()\r\n                        .replace(R.id.flContainer, viewAllPlaylistFragment)\r\n                        .commit();\r\n                Bundle bundle = new Bundle();\r\n                if (listModelList.get(position).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                    bundle.putString(\"MyDownloads\", \"1\");\r\n                } else {\r\n                    bundle.putString(\"MyDownloads\", \"0\");\r\n                }\r\n                bundle.putString(\"GetLibraryID\", listModelList.get(position).getGetLibraryID());\r\n                bundle.putString(\"Name\", listModelList.get(position).getView());\r\n                viewAllPlaylistFragment.setArguments(bundle);\r\n            });\r\n            if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            binding.rlCreatePlaylist.setOnClickListener(view -> {\r\n                if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"1\")) {\r\n                    binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"2\")) {\r\n                    binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", getActivity());\r\n                } else if (listModelList.get(position).getIsLock().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsLock().equalsIgnoreCase(\"\")) {\r\n                    binding.ivLock.setVisibility(View.GONE);\r\n                    final Dialog dialog = new Dialog(getActivity());\r\n                    dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n                    dialog.setContentView(R.layout.create_palylist);\r\n                    dialog.getWindow().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.blue_transparent)));\r\n                    dialog.getWindow().setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\r\n                    final EditText edtCreate = dialog.findViewById(R.id.edtCreate);\r\n                    final TextView tvCancel = dialog.findViewById(R.id.tvCancel);\r\n                    final Button btnSendCode = dialog.findViewById(R.id.btnSendCode);\r\n                    edtCreate.requestFocus();\r\n                    TextWatcher popupTextWatcher = new TextWatcher() {\r\n                        @Override\r\n                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n                        }\r\n\r\n                        @Override\r\n                        public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n                            String number = edtCreate.getText().toString().trim();\r\n                            if (!number.isEmpty()) {\r\n                                btnSendCode.setEnabled(true);\r\n                                btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                btnSendCode.setBackgroundResource(R.drawable.extra_round_cornor);\r\n                            } else {\r\n                                btnSendCode.setEnabled(false);\r\n                                btnSendCode.setTextColor(getResources().getColor(R.color.white));\r\n                                btnSendCode.setBackgroundResource(R.drawable.gray_round_cornor);\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void afterTextChanged(Editable s) {\r\n                        }\r\n                    };\r\n\r\n\r\n                    edtCreate.addTextChangedListener(popupTextWatcher);\r\n                    dialog.setOnKeyListener((v, keyCode, event) -> {\r\n                        if (keyCode == KeyEvent.KEYCODE_BACK) {\r\n                            dialog.dismiss();\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    });\r\n\r\n                    btnSendCode.setOnClickListener(view1 -> {\r\n                        if (BWSApplication.isNetworkConnected(getActivity())) {\r\n                            Call<CreatePlaylistModel> listCall = APIClient.getClient().getCreatePlaylist(UserID, edtCreate.getText().toString());\r\n                            listCall.enqueue(new Callback<CreatePlaylistModel>() {\r\n                                @Override\r\n                                public void onResponse(Call<CreatePlaylistModel> call, Response<CreatePlaylistModel> response) {\r\n                                    if (response.isSuccessful()) {\r\n                                        CreatePlaylistModel listModel = response.body();\r\n                                        if (listModel.getResponseData().getIscreated().equalsIgnoreCase(\"0\")) {\r\n                                            BWSApplication.showToast(listModel.getResponseMessage(), getActivity());\r\n                                        } else if (listModel.getResponseData().getIscreated().equalsIgnoreCase(\"1\") ||\r\n                                                listModel.getResponseData().getIscreated().equalsIgnoreCase(\"\")) {\r\n                                            callMyPlaylistsFragment(\"1\", listModel.getResponseData().getId(), listModel.getResponseData().getName(), \"\", \"0\");\r\n                                            dialog.dismiss();\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n\r\n                                @Override\r\n                                public void onFailure(Call<CreatePlaylistModel> call, Throwable t) {\r\n                                    BWSApplication.hideProgressBar(binding.progressBar, binding.progressBarHolder, getActivity());\r\n                                }\r\n                            });\r\n                        } else {\r\n                            BWSApplication.showToast(getString(R.string.no_server_found), getActivity());\r\n                        }\r\n                    });\r\n\r\n                    tvCancel.setOnClickListener(v -> dialog.dismiss());\r\n                    dialog.show();\r\n                    dialog.setCancelable(false);\r\n                }\r\n            });\r\n\r\n            RecyclerView.LayoutManager manager = new LinearLayoutManager(getActivity(), LinearLayoutManager.HORIZONTAL, false);\r\n            holder.binding.rvMainAudio.setItemAnimator(new DefaultItemAnimator());\r\n            holder.binding.rvMainAudio.setLayoutManager(manager);\r\n\r\n            if (listModelList.get(position).getDetails().size() == 0) {\r\n                holder.binding.llMainLayout.setVisibility(View.GONE);\r\n            } else {\r\n                holder.binding.llMainLayout.setVisibility(View.VISIBLE);\r\n                holder.binding.tvTitle.setText(listModelList.get(position).getView());\r\n                if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.your_created))) {\r\n                    PlaylistAdapter adapter1 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"0\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter1);\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(\"My Downloads\")) {\r\n                    PlaylistAdapter adapter2 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"1\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter2);\r\n\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.Recommended_Playlist))) {\r\n                    PlaylistAdapter adapter3 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"0\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter3);\r\n                } else if (listModelList.get(position).getView().equalsIgnoreCase(getString(R.string.populars))) {\r\n                    PlaylistAdapter adapter4 = new PlaylistAdapter(listModelList.get(position).getDetails(), getActivity(),\r\n                            listModelList.get(position).getIsLock(), \"0\");\r\n                    holder.binding.rvMainAudio.setAdapter(adapter4);\r\n                }\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            return listModelList.size();\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            MainPlaylistLayoutBinding binding;\r\n\r\n            public MyViewHolder(MainPlaylistLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n\r\n    private void getMedia(String playlistID) {\r\n        class GetMedia extends AsyncTask<Void, Void, Void> {\r\n            @Override\r\n            protected Void doInBackground(Void... voids) {\r\n                playlistWiseAudioDetails = DatabaseClient\r\n                        .getInstance(getActivity())\r\n                        .getaudioDatabase()\r\n                        .taskDao()\r\n                        .getAllAudioByPlaylist(playlistID);\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            protected void onPostExecute(Void aVoid) {\r\n                player = 1;\r\n                if (isPrepare || isMediaStart || isPause) {\r\n                    stopMedia();\r\n                }\r\n                isPause = false;\r\n                isMediaStart = false;\r\n                isPrepare = false;\r\n                isCompleteStop = false;\r\n                SharedPreferences shared = getActivity().getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared.edit();\r\n                Gson gson = new Gson();\r\n                ArrayList<DownloadAudioDetails> listModelList2 = new ArrayList<>();\r\n                DownloadAudioDetails mainPlayModel = new DownloadAudioDetails();\r\n                mainPlayModel.setID(\"0\");\r\n                mainPlayModel.setName(\"Disclaimer\");\r\n                mainPlayModel.setAudioFile(\"\");\r\n                mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n                mainPlayModel.setAudiomastercat(\"\");\r\n                mainPlayModel.setAudioSubCategory(\"\");\r\n                mainPlayModel.setImageFile(\"\");\r\n                mainPlayModel.setLike(\"\");\r\n                mainPlayModel.setDownload(\"\");\r\n                mainPlayModel.setAudioDuration(\"0:48\");\r\n                listModelList2.add(mainPlayModel);\r\n                listModelList2.addAll(playlistWiseAudioDetails);\r\n\r\n                String json = gson.toJson(listModelList2);\r\n                editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n                editor.putInt(CONSTANTS.PREF_KEY_position, 0);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n                editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n                editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n                editor.putString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n                editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"Downloadlist\");\r\n                editor.commit();\r\n                try {\r\n                    Fragment fragment = new TransparentPlayerFragment();\r\n                    FragmentManager fragmentManager1 = getActivity().getSupportFragmentManager();\r\n                    fragmentManager1.beginTransaction()\r\n                            .add(R.id.flContainer, fragment)\r\n                            .commit();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                super.onPostExecute(aVoid);\r\n            }\r\n        }\r\n        GetMedia st = new GetMedia();\r\n        st.execute();\r\n    }\r\n\r\n    public class PlaylistAdapter extends RecyclerView.Adapter<PlaylistAdapter.MyViewHolder> {\r\n        Context ctx;\r\n        String IsLock, MyDownloads;\r\n        private ArrayList<MainPlayListModel.ResponseData.Detail> listModelList;\r\n\r\n        public PlaylistAdapter(ArrayList<MainPlayListModel.ResponseData.Detail> listModelList, Context ctx, String IsLock, String MyDownloads) {\r\n            this.listModelList = listModelList;\r\n            this.ctx = ctx;\r\n            this.IsLock = IsLock;\r\n            this.MyDownloads = MyDownloads;\r\n        }\r\n\r\n        @NonNull\r\n        @Override\r\n        public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n            PlaylistCustomLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                    , R.layout.playlist_custom_layout, parent, false);\r\n            return new MyViewHolder(v);\r\n        }\r\n\r\n        @Override\r\n        public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n\r\n            MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,\r\n                    1, 1, 0.38f, 0);\r\n            holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n            holder.binding.tvAddToPlaylist.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n            holder.binding.tvAddToPlaylist.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n            MeasureRatio measureRatio1 = BWSApplication.measureRatio(getActivity(), 0,\r\n                    1, 1, 0.38f, 0);\r\n            holder.binding.rlMainLayout.getLayoutParams().height = (int) (measureRatio1.getHeight() * measureRatio1.getRatio());\r\n            holder.binding.rlMainLayout.getLayoutParams().width = (int) (measureRatio1.getWidthImg() * measureRatio1.getRatio());\r\n\r\n            holder.binding.tvPlaylistName.setText(listModelList.get(position).getPlaylistName());\r\n            Glide.with(ctx).load(listModelList.get(position).getPlaylistImage()).thumbnail(0.05f)\r\n                    .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            }\r\n\r\n            holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n            holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n            holder.binding.rlMainLayout.setOnLongClickListener(new View.OnLongClickListener() {\r\n                @Override\r\n                public boolean onLongClick(View v) {\r\n                    holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n                    return false;\r\n                }\r\n            });\r\n            holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View view) {\r\n                    Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                    i.putExtra(\"AudioId\", \"\");\r\n                    i.putExtra(\"PlaylistID\", listModelList.get(position).getPlaylistID());\r\n                    ctx.startActivity(i);\r\n                }\r\n            });\r\n            holder.binding.rlMainLayout.setOnClickListener(view -> {\r\n                if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(getActivity(), MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    startActivity(i);\r\n                } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    if (MyDownloads.equalsIgnoreCase(\"1\")) {\r\n                        callMyPlaylistsFragment(\"0\", listModelList.get(position).getPlaylistID(), listModelList.get(position).getPlaylistName(),\r\n                                listModelList.get(position).getPlaylistImage(), MyDownloads);\r\n//                        getMedia(listModelList.get(position).getPlaylistID());\r\n                       /* Intent i = new Intent(ctx, DownloadPlaylistActivity.class);\r\n                        i.putExtra(\"New\", \"0\");\r\n                        i.putExtra(\"PlaylistID\", listModelList.get(position).getPlaylistID());\r\n                        i.putExtra(\"PlaylistName\", listModelList.get(position).getPlaylistName());\r\n                        i.putExtra(\"PlaylistImage\", listModelList.get(position).getPlaylistImage());\r\n                        i.putExtra(\"PlaylistImageDetails\", listModelList.get(position).getPlaylistImageDetails());\r\n                        i.putExtra(\"TotalAudio\", listModelList.get(position).getTotalAudio());\r\n                        i.putExtra(\"Totalhour\", listModelList.get(position).getTotalhour());\r\n                        i.putExtra(\"Totalminute\", listModelList.get(position).getTotalminute());\r\n                        i.putExtra(\"MyDownloads\", \"1\");\r\n                        ctx.startActivity(i);*/\r\n                    } else {\r\n                        callMyPlaylistsFragment(\"0\", listModelList.get(position).getPlaylistID(), listModelList.get(position).getPlaylistName(),\r\n                                listModelList.get(position).getPlaylistImage(), MyDownloads);\r\n                    }\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public int getItemCount() {\r\n            if (6 > listModelList.size()) {\r\n                return listModelList.size();\r\n            } else {\r\n                return 6;\r\n            }\r\n        }\r\n\r\n        public class MyViewHolder extends RecyclerView.ViewHolder {\r\n            PlaylistCustomLayoutBinding binding;\r\n\r\n            public MyViewHolder(PlaylistCustomLayoutBinding binding) {\r\n                super(binding.getRoot());\r\n                this.binding = binding;\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/PlaylistFragment.java	(revision f0fec71fa0a936bd6b12bc71015a89e5cd6f0b07)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Playlist/PlaylistFragment.java	(date 1605068231060)
@@ -571,7 +571,6 @@
 
         @Override
         public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
-
             MeasureRatio measureRatio = BWSApplication.measureRatio(getActivity(), 0,
                     1, 1, 0.38f, 0);
             holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());
@@ -602,7 +601,7 @@
                 @Override
                 public boolean onLongClick(View v) {
                     holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);
-                    return false;
+                    return true;
                 }
             });
             holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {
Index: app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/PopularPlayedAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.brainwellnessspa.DashboardModule.Audio.Adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.databinding.DataBindingUtil;\r\nimport androidx.fragment.app.FragmentActivity;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.brainwellnessspa.BWSApplication;\r\nimport com.brainwellnessspa.BillingOrderModule.Activities.MembershipChangeActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.AddPlaylistActivity;\r\nimport com.brainwellnessspa.DashboardModule.Activities.PlayWellnessActivity;\r\nimport com.brainwellnessspa.DashboardModule.Models.AddToQueueModel;\r\nimport com.brainwellnessspa.DashboardModule.Models.MainAudioModel;\r\nimport com.brainwellnessspa.R;\r\nimport com.brainwellnessspa.Utility.CONSTANTS;\r\nimport com.brainwellnessspa.Utility.MeasureRatio;\r\nimport com.brainwellnessspa.Utility.MusicService;\r\nimport com.brainwellnessspa.databinding.SmallBoxLayoutBinding;\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport java.lang.reflect.Type;\r\nimport java.util.ArrayList;\r\n\r\nimport static android.content.Context.MODE_PRIVATE;\r\nimport static com.brainwellnessspa.DashboardModule.Activities.DashboardActivity.player;\r\nimport static com.brainwellnessspa.DashboardModule.Playlist.MyPlaylistsFragment.disclaimerPlayed;\r\nimport static com.brainwellnessspa.DashboardModule.TransparentPlayer.Fragments.TransparentPlayerFragment.isDisclaimer;\r\nimport static com.brainwellnessspa.Utility.MusicService.isCompleteStop;\r\nimport static com.brainwellnessspa.Utility.MusicService.isMediaStart;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPause;\r\nimport static com.brainwellnessspa.Utility.MusicService.isPrepare;\r\n\r\n\r\npublic class PopularPlayedAdapter extends RecyclerView.Adapter<PopularPlayedAdapter.MyViewHolder> {\r\n    Context ctx;\r\n    FragmentActivity activity;\r\n    String IsLock,HomeView;\r\n    private ArrayList<MainAudioModel.ResponseData.Detail> listModelList;\r\n\r\n    public PopularPlayedAdapter(ArrayList<MainAudioModel.ResponseData.Detail> listModelList, Context ctx, FragmentActivity activity,\r\n                                String IsLock,String HomeView) {\r\n        this.listModelList = listModelList;\r\n        this.ctx = ctx;\r\n        this.activity = activity;\r\n        this.IsLock = IsLock;\r\n        this.HomeView = HomeView;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        SmallBoxLayoutBinding v = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext())\r\n                , R.layout.small_box_layout, parent, false);\r\n        return new MyViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\r\n        holder.binding.tvTitle.setText(listModelList.get(position).getName());\r\n        MeasureRatio measureRatio = BWSApplication.measureRatio(ctx, 16,\r\n                1, 1, 0.28f, 10);\r\n        holder.binding.ivRestaurantImage.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        holder.binding.ivRestaurantImage.setScaleType(ImageView.ScaleType.FIT_XY);\r\n        holder.binding.tvAddToPlaylist.getLayoutParams().height = (int) (measureRatio.getHeight() * measureRatio.getRatio());\r\n        holder.binding.tvAddToPlaylist.getLayoutParams().width = (int) (measureRatio.getWidthImg() * measureRatio.getRatio());\r\n        Glide.with(ctx).load(listModelList.get(position).getImageFile()).thumbnail(0.05f)\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL).skipMemoryCache(false).into(holder.binding.ivRestaurantImage);\r\n\r\n        if (IsLock.equalsIgnoreCase(\"1\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n            if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n            } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                    || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n            }\r\n        } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n            holder.binding.ivLock.setVisibility(View.GONE);\r\n        }\r\n\r\n        holder.binding.tvAddToPlaylist.setVisibility(View.GONE);\r\n        holder.binding.tvAddToPlaylist.setText(\"Add To Playlist\");\r\n        holder.binding.llMainLayout.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View v) {\r\n                holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);\r\n                return false;\r\n            }\r\n        });\r\n        holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent i = new Intent(ctx, AddPlaylistActivity.class);\r\n                i.putExtra(\"AudioId\", listModelList.get(position).getID());\r\n                i.putExtra(\"PlaylistID\", \"\");\r\n                ctx.startActivity(i);\r\n            }\r\n        });\r\n        holder.binding.llMainLayout.setOnClickListener(view -> {\r\n//       TODO                 Active and cancelled = 0, InActive = 1, Suspeded = 2\r\n            SharedPreferences shared1 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            boolean queuePlay = shared1.getBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            if (queuePlay) {\r\n                int position1 = shared1.getInt(CONSTANTS.PREF_KEY_position, 0);\r\n                ArrayList<AddToQueueModel> addToQueueModelList = new ArrayList<>();\r\n                Gson gson = new Gson();\r\n                String json1 = shared1.getString(CONSTANTS.PREF_KEY_queueList, String.valueOf(gson));\r\n                if (!json1.equalsIgnoreCase(String.valueOf(gson))) {\r\n                    Type type1 = new TypeToken<ArrayList<AddToQueueModel>>() {\r\n                    }.getType();\r\n                    addToQueueModelList = gson.fromJson(json1, type1);\r\n                }\r\n                addToQueueModelList.remove(position1);\r\n                SharedPreferences shared2 = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n                SharedPreferences.Editor editor = shared2.edit();\r\n                String json = gson.toJson(addToQueueModelList);\r\n                editor.putString(CONSTANTS.PREF_KEY_queueList, json);\r\n                editor.commit();\r\n            }\r\n            if (IsLock.equalsIgnoreCase(\"1\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n\r\n                    callnewTrans(position);\r\n\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    Intent i = new Intent(ctx, MembershipChangeActivity.class);\r\n                    i.putExtra(\"ComeFrom\", \"Plan\");\r\n                    ctx.startActivity(i);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"2\")) {\r\n                if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"1\")) {\r\n                    holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callnewTrans(position);\r\n                } else if (listModelList.get(position).getIsPlay().equalsIgnoreCase(\"0\")\r\n                        || listModelList.get(position).getIsPlay().equalsIgnoreCase(\"\")) {\r\n                    holder.binding.ivLock.setVisibility(View.VISIBLE);\r\n                    BWSApplication.showToast(\"Please re-activate your membership plan\", ctx);\r\n                }\r\n            } else if (IsLock.equalsIgnoreCase(\"0\") || IsLock.equalsIgnoreCase(\"\")) {\r\n                holder.binding.ivLock.setVisibility(View.GONE);\r\n                    callnewTrans(position);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void callnewTrans(int position) {\r\n\r\n        SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, MODE_PRIVATE);\r\n        boolean audioPlay = shared.getBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n        String AudioFlag = shared.getString(CONSTANTS.PREF_KEY_AudioFlag, \"0\");\r\n        String MyPlaylist = shared.getString(CONSTANTS.PREF_KEY_myPlaylist, \"\");\r\n        if (audioPlay && AudioFlag.equalsIgnoreCase(\"MainAudioList\") && MyPlaylist.equalsIgnoreCase(HomeView)) {\r\n            if (isDisclaimer == 1) {\r\n                BWSApplication.showToast(\"The audio shall start playing after the disclaimer\", ctx);\r\n            } else {\r\n                callTransFrag(position, listModelList);\r\n            }\r\n        } else {\r\n            isDisclaimer = 0;\r\n            disclaimerPlayed = 0;\r\n            ArrayList<MainAudioModel.ResponseData.Detail> listModelList2 = new ArrayList<>();\r\n            MainAudioModel.ResponseData.Detail mainPlayModel = new MainAudioModel.ResponseData.Detail();\r\n            mainPlayModel.setID(\"0\");\r\n            mainPlayModel.setName(\"Disclaimer\");\r\n            mainPlayModel.setAudioFile(\"\");\r\n            mainPlayModel.setAudioDirection(\"The audio shall start playing after the disclaimer\");\r\n            mainPlayModel.setAudiomastercat(\"\");\r\n            mainPlayModel.setAudioSubCategory(\"\");\r\n            mainPlayModel.setImageFile(\"\");\r\n            mainPlayModel.setLike(\"\");\r\n            mainPlayModel.setDownload(\"\");\r\n            mainPlayModel.setAudioDuration(\"0:48\");\r\n            listModelList2.addAll(listModelList);\r\n            listModelList2.add(position, mainPlayModel);\r\n            callTransFrag(position, listModelList2);\r\n        }\r\n    }\r\n\r\n    private void callTransFrag(int position,ArrayList<MainAudioModel.ResponseData.Detail> listModelList) {\r\n        try {\r\n            player = 1;\r\n            if (isPrepare || isMediaStart || isPause) {\r\n                MusicService.stopMedia();\r\n            }\r\n            isPause = false;\r\n            isMediaStart = false;\r\n            isPrepare = false;\r\n            isCompleteStop = false;\r\n            /*Fragment fragment = new TransparentPlayerFragment();\r\n            FragmentManager fragmentManager1 = activity.getSupportFragmentManager();\r\n            fragmentManager1.beginTransaction()\r\n                    .add(R.id.flContainer, fragment)\r\n                    .commit();*/\r\n            SharedPreferences shared = ctx.getSharedPreferences(CONSTANTS.PREF_KEY_AUDIO, Context.MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = shared.edit();\r\n            Gson gson = new Gson();\r\n\r\n            String json = gson.toJson(listModelList);\r\n            editor.putString(CONSTANTS.PREF_KEY_modelList, json);\r\n            editor.putInt(CONSTANTS.PREF_KEY_position, position);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_queuePlay, false);\r\n            editor.putBoolean(CONSTANTS.PREF_KEY_audioPlay, true);\r\n            editor.putString(CONSTANTS.PREF_KEY_PlaylistId, \"\");\r\n            editor.putString(CONSTANTS.PREF_KEY_myPlaylist, HomeView);\r\n            editor.putString(CONSTANTS.PREF_KEY_AudioFlag, \"MainAudioList\");\r\n            editor.commit();\r\n            Intent i = new Intent(ctx, PlayWellnessActivity.class);\r\n            i.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\r\n            ctx.startActivity(i);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        if (6 > listModelList.size()) {\r\n            return listModelList.size();\r\n        } else {\r\n            return 6;\r\n        }\r\n    }\r\n\r\n    public class MyViewHolder extends RecyclerView.ViewHolder {\r\n        SmallBoxLayoutBinding binding;\r\n\r\n        public MyViewHolder(SmallBoxLayoutBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/PopularPlayedAdapter.java	(revision f0fec71fa0a936bd6b12bc71015a89e5cd6f0b07)
+++ app/src/main/java/com/brainwellnessspa/DashboardModule/Audio/Adapters/PopularPlayedAdapter.java	(date 1605068231125)
@@ -102,7 +102,7 @@
             @Override
             public boolean onLongClick(View v) {
                 holder.binding.tvAddToPlaylist.setVisibility(View.VISIBLE);
-                return false;
+                return true;
             }
         });
         holder.binding.tvAddToPlaylist.setOnClickListener(new View.OnClickListener() {
